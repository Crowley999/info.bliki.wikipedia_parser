local export = {}

function export.show(frame)
	local args = frame:getParent().args
	NAMESPACE = mw.title.getCurrentTitle().nsText
	
	local source = args[1] or (NAMESPACE == "Template" and "und") or error("Parameter 1 (source language/family code) has not been specified.")
	local lang = args[2]; if lang == "" then lang = nil end
	local sort_key = args["sort"]; if sort_key == "" then sort_key = nil end
	
	-- Empty language means English, but "-" means no language. Yes, confusing...
	if not lang then
		lang = "en"
	elseif lang == "-" then
		lang = nil
	end
	
	if lang then
		lang = require("Module:languages").getLanguageByCode(lang)
	end
	
	return format(source, lang, sort_key)
end


function format(source, lang, sort_key)
	local info = get_info(source)
	
	-- Add the categories, but only if there is a current language
	local categories = ""
	
	if lang then
		local m_utilities = require("Module:utilities")
		
		categories = {}
		
		if lang:getCode() == source then
			categories = m_utilities.format_categories({lang:getCanonicalName() .. " twice-borrowed terms"}, lang, sort_key)
		else
			categories = m_utilities.format_categories({lang:getCanonicalName() .. " terms derived from " .. info.cat_name}, lang, sort_key)
		end
	end
	
	return "<span class=\"etyl\">" .. info.display .. categories .. "</span>"
end


function get_info(source)
	-- What type of code is the source?
	if source == "und" then
		return {
			display = "undetermined",
			cat_name = "other languages"}
	end
	
	-- Is it a normal language code?
	local source_info = require("Module:languages").getLanguageByCode(source)
	
	if source_info then
		return {
			display = "[[w:" .. source_info:getCategoryName() .. "|" .. source_info:getCanonicalName() .. "]]",
			cat_name = source_info:getCanonicalName()}
	end
	
	-- Is it a family code?
	source_info = require("Module:families").getFamilyByCode(source)
	
	if source_info then
		return {
			display = "[[w:" .. source_info:getCategoryName() .. "|" .. source_info:getCanonicalName() .. "]]",
			cat_name = source_info:getCategoryName()}
	end
	
	-- Is it an etymology-only code?
	source_info = mw.loadData("Module:etymology language/data")[source]
	
	if source_info then
		return {
			display = "[[w:" .. (source_info.wikipedia_article or source_info.names[1]) .. "|" .. source_info.names[1] .. "]]",
			cat_name = source_info.names[1]}
	end
	
	-- Code doesn't exist; show an error
	error("The source language/family code \"" .. source .. "\" is not valid.")
end


-- Look up an item from the table of language data, and return it.
-- This function allows templates to access this data.
-- Returns an empty string if the item does not exist.
function export.lookup_etym_language(frame)
	local languages = mw.loadData("Module:etymology language/data")
	
	local args = frame.args
	local lang = args[1] or error("Language code has not been specified. Please pass parameter 1 to the module invocation.")
	local langinfo = languages[lang] or error("The language code \"" .. lang .. "\" is not valid.")
	
	-- The item that the caller wanted to look up
	local itemname = args[2] or error("Type of information to look up has not been specified. Please pass parameter 2 to the module invocation.")
	local item = langinfo[itemname] or ""
	
	if type(item) == "table" then
		return item[tonumber(args[3] or 1)] or ""
	else
		return item or ""
	end
end


function export.etym_language_exists(frame)
	local languages = mw.loadData("Module:etymology language/data")
	
	local args = frame.args
	local lang = args[1] or error("Language code has not been specified. Please pass parameter 1 to the module invocation.")
	
	if languages[lang] then
		return "1"
	else
		return ""
	end
end

return export