!tape
name: koramiko
interactions:
- recorded: 2019-04-27T12:52:50.142Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=koramiko&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=46738 t=1556369570015592
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:50 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1341.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Set-Cookie: WMF-Last-Access=27-Apr-2019;Path=/;HttpOnly;secure;Expires=Wed, 29 May 2019 12:00:00 GMT, WMF-Last-Access-Global=27-Apr-2019;Path=/;Domain=.wiktionary.org;HttpOnly;secure;Expires=Wed, 29 May 2019 12:00:00 GMT, GeoIP=DE:BW:Todtnau:47.83:7.94:v4; Path=/; secure; Domain=.wiktionary.org
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;https=1;nocookies=1
      X-Cache: cp1085 pass, cp3042 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 608987262, 91648388, 460587689
    body: |-
      <?xml version="1.0"?><api batchcomplete=""><warnings><main xml:space="preserve">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space="preserve">Because "rvslots" was not specified, a legacy format has been used for the output. This format is deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx="1225466" pageid="1225466" ns="0" title="koramiko"><revisions><rev user="DerbethBot" timestamp="2019-04-23T17:45:39Z" contentformat="text/x-wiki" contentmodel="wikitext" comment="added audio LL-Q143 (epo)-Lepticed7-koramiko.wav" xml:space="preserve">==Esperanto==

      ===Etymology===
      {{compound|eo|koro|gloss1=heart|amiko|gloss2=friend}}

      ===Pronunciation===
      * {{audio|LL-Q143 (epo)-Lepticed7-koramiko.wav|Audio|lang=eo}}
      {{eo-IPA}}

      ===Noun===
      {{eo-head}}

      # A [[boyfriend]] (male partner in a romantic relationship).
      #: {{ux|eo|Lia '''koramiko''' amas lin.|t=His '''boyfriend''' loves him.}}
      # A romantic partner of any gender.
      #* {{quote-newsgroup|lang=eo|author=Marko Rauhamaa|title=Re: Religioj kaj inoj|newsgroup=soc.culture.esperanto|url=https://groups.google.com/d/msg/soc.culture.esperanto/NL7bDw0uhgI/Kg2fCYpSVKgJ|date=1996-10-18|passage=Mi ne kredas, ke ekzistas multspeca amo; la amo inter la geedzoj estas sama amo kiel tiu inter la gepatroj kaj la infanoj aux tiu inter '''koramikoj'''.}}
      #* {{quote-newsgroup|lang=eo|author=Eugeny S. Perevertajlo|title=Re: edzperanto|newsgroup=soc.culture.esperanto |url= https://groups.google.com/d/msg/soc.culture.esperanto/nZoUdSrJeWo/SgLgMJe1vU4J|date=1999-05-26|passage=En la tas^kenta svata buroo la oficisto diris al mi, ke estas bonvenaj viroj kaj virinoj el c^iuj landoj de la mondo, kiuj dezirus trovi siajn '''koramikojn''' kaj geedzojn en Uzbekistano.}}
      #* '''2015''', Sten Johansson, ''Skabio'', [https://books.google.com/books?id=zZBqCQAAQBAJ&amp;lpg=PA139&amp;dq=%22inter%20koramikoj&amp;pg=PA139#v=onepage&amp;q&amp;f=false page 139]:
      #*: Mi pensis, ke vi kaj Tony estas '''koramikoj'''.

      ====Hyponyms====
      * {{l|eo|koramikino|gloss=[[girlfriend]]}}

      ====Coordinate terms====
      * {{l|eo|koramikino|gloss=[[girlfriend]]}}</rev></revisions></page></pages></query></api>
- recorded: 2019-04-27T12:52:50.375Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Template%3Acompound&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=43465 t=1556369570263704
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:50 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1234.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1081 pass, cp3040 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 354658754, 333697824, 440985368
    body: <?xml version="1.0"?><api batchcomplete=""><warnings><main xml:space="preserve">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space="preserve">Because "rvslots" was not specified, a legacy format has been used for the output. This format is deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx="1062383" pageid="1062383" ns="10" title="Template:compound"><revisions><rev user="Ungoliant MMDCCLXIV" timestamp="2015-11-21T23:33:14Z" contentformat="text/x-wiki" contentmodel="wikitext" comment="" xml:space="preserve">{{#invoke:compound/templates|compound}}&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</rev></revisions></page></pages></query></api>
- recorded: 2019-04-27T12:52:50.909Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Acompound%2Ftemplates&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=42416 t=1556369570779802
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:50 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1344.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1083 pass, cp3032 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 639204925, 496085069, 455645812
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"4534570\" pageid=\"4534570\" ns=\"828\" title=\"Module:compound/templates\"><revisions><rev user=\"Benwing2\" timestamp=\"2019-03-19T19:54:13Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"all uses of lang= in remaining templates in [[Module:compound/templates]] converted\" xml:space=\"preserve\">local export = {}\n\nlocal m_compound = require(\"Module:compound\")\nlocal\
      \ m_languages = require(\"Module:languages\")\nlocal m_debug = require(\"Module:debug\")\n\nlocal rsplit = mw.text.split\n\n\nlocal function if_not_empty(val)\n\tif val == \"\" then\n\t\treturn nil\n\telse\n\t\treturn val\n\tend\nend\n\n\nlocal function\
      \ to_boolean(val)\n\tif not val or val == \"\" then\n\t\treturn false\n\telse\n\t\treturn true\n\tend\nend\n\n\nlocal function fetch_lang(args, allow_compat)\n\tlocal compat = true\n\n\tif not allow_compat and args[\"lang\"] then\n\t\terror('The |lang=\
      \ parameter is not used by this template. Place the language code in parameter 1 instead.')\n\tend\n\t\n\tlocal lang = allow_compat and if_not_empty(args[\"lang\"]) or nil\n\tif not lang then\n\t\tcompat = false\n\t\tlang = if_not_empty(args[1])\n\tend\n\
      \t\n\tif not lang and mw.title.getCurrentTitle().nsText == \"Template\" then\n\t\tlang = \"und\"\n\tend\n\t\n\tlang = lang and m_languages.getByCode(lang) or m_languages.err(lang, compat and \"lang\" or 1)\n\treturn lang, compat\nend\n\n\t\nlocal function\
      \ fetch_script(sc)\n\tsc = if_not_empty(sc)\n\tif sc then\n\t\treturn require(\"Module:scripts\").getByCode(sc) or error(\"The script code \\\"\" .. sc .. \"\\\" is not valid.\")\n\telse\n\t\treturn nil\n\tend\nend\n\n\nlocal function parse_args(args,\
      \ allow_compat, hack_params)\n\tlocal compat = args[\"lang\"]\n\tif compat and not allow_compat then\n\t\terror('The |lang= parameter is not used by this template. Place the language code in parameter 1 instead.')\n\tend\n\n\tlocal params = {\n\t\t[compat\
      \ and \"lang\" or 1] = {required = true, default = \"und\"},\n\t\t[compat and 1 or 2] = {list = true, allow_holes = true},\n\t\t\n\t\t[\"t\"] = {list = true, allow_holes = true, require_index = true},\n\t\t[\"gloss\"] = {list = true, allow_holes = true,\
      \ require_index = true, alias_of = \"t\"},\n\t\t[\"tr\"] = {list = true, allow_holes = true, require_index = true},\n\t\t[\"ts\"] = {list = true, allow_holes = true, require_index = true},\n\t\t[\"g\"] = {list = true, allow_holes = true, require_index\
      \ = true},\n\t\t[\"id\"] = {list = true, allow_holes = true, require_index = true},\n\t\t[\"alt\"] = {list = true, allow_holes = true, require_index = true},\n\t\t[\"q\"] = {list = true, allow_holes = true, require_index = true},\n\t\t[\"lit\"] = {list\
      \ = true, allow_holes = true, require_index = true},\n\t\t[\"pos\"] = {},\n\t\t-- Note, pos1=, pos2=, ... are different from pos=\n\t\t[\"partpos\"] = {list = \"pos\", allow_holes = true, require_index = true},\n\t\t-- Note, lang1=, lang2=, ... are different\
      \ from lang=; the former apply to\n\t\t-- individual arguments, while the latter applies to all arguments\n\t\t[\"partlang\"] = {list = \"lang\", allow_holes = true, require_index = true},\n\t\t[\"sc\"] = {},\n\t\t-- Note, sc1=, sc2=, ... are different\
      \ from sc=; the former apply to\n\t\t-- individual arguments when lang1=, lang2=, ... is specified, while\n\t\t-- the latter applies to all arguments where langN=... isn't specified\n\t\t[\"partsc\"] = {list = \"sc\", allow_holes = true, require_index\
      \ = true},\n\t\t[\"pos\"] = {},\n\t\t[\"sort\"] = {},\n\t\t[\"nocat\"] = {type = \"boolean\"},\n\t}\n\n\tif hack_params then\n\t\thack_params(params)\n\tend\n\n\targs = require(\"Module:parameters\").process(args, params)\n\treturn args, compat and args[1]\
      \ or args[2], fetch_lang(args, allow_compat), fetch_script(args[\"sc\"])\nend\n\n\nlocal function get_parsed_part(template, args, terms, i)\n\tlocal term = terms[i]\n\tlocal alt = args[\"alt\"][i]\n\tlocal id = args[\"id\"][i]\n\tlocal lang = args[\"partlang\"\
      ][i]\n\tlocal sc = fetch_script(args[\"partsc\"][i])\n\t\n\tlocal tr = args[\"tr\"][i]\n\tlocal ts = args[\"ts\"][i]\n\tlocal gloss = args[\"t\"][i]\n\tlocal pos = args[\"partpos\"][i]\n\tlocal lit = args[\"lit\"][i]\n\tlocal q = args[\"q\"][i]\n\tlocal\
      \ g = args[\"g\"][i]\n\n\tif lang then\n\t\tlang =\n\t\t\tm_languages.getByCode(lang) or\n\t\t\trequire(\"Module:etymology languages\").getByCode(lang) or\n\t\t\tm_languages.err(lang, \"lang\" .. i)\n\tend\n\t\n\tif not (term or alt or tr or ts) then\n\
      \t\trequire(\"Module:debug\").track(template .. \"/no term or alt or tr\")\n\t\treturn nil\n\telse\n\t\treturn { term = term, alt = alt, id = id, lang = lang, sc = sc, tr = tr,\n\t\t\tts = ts, gloss = gloss, pos = pos, lit = lit, q = q,\n\t\t\tgenders\
      \ = g and rsplit(g, \",\") or {}\n\t\t}\n\tend\nend\n\n\nlocal function get_parsed_parts(template, args, terms, start_index)\n\tlocal parts = {}\n\tstart_index = start_index or 1\n\n\t-- Find the maximum index among any of the list parameters.\n\tlocal\
      \ maxmaxindex = 0\n\tfor k, v in pairs(args) do\n\t\tif type(v) == \"table\" and v.maxindex and v.maxindex &gt; maxmaxindex then\n\t\t\tmaxmaxindex = v.maxindex\n\t\tend\n\tend\n\n\tfor index = start_index, maxmaxindex do\n\t\tlocal part = get_parsed_part(template,\
      \ args, terms, index)\n\t\tparts[index - start_index + 1] = part\n\tend\n\t\n\treturn parts\nend\n\n\nfunction export.affix(frame)\n\tlocal args, terms, lang, sc = parse_args(frame:getParent().args)\n\n\tlocal parts = get_parsed_parts(\"affix\", args,\
      \ terms)\n\t\n\t-- There must be at least one part to display. If there are gaps, a term\n\t-- request will be shown.\n\tif not next(parts) then\n\t\tif mw.title.getCurrentTitle().nsText == \"Template\" then\n\t\t\tparts = { {term = \"prefix-\"}, {term\
      \ = \"base\"}, {term = \"-suffix\"} }\n\t\telse\n\t\t\terror(\"You must provide at least one part.\")\n\t\tend\n\tend\n\t\n\treturn m_compound.show_affixes(lang, sc, parts, args[\"pos\"], args[\"sort\"], args[\"nocat\"])\nend\n\n\nfunction export.compound(frame)\n\
      \tlocal args, terms, lang, sc = parse_args(frame:getParent().args)\n\n\tlocal parts = get_parsed_parts(\"compound\", args, terms)\n\t\n\t-- There must be at least one part to display. If there are gaps, a term\n\t-- request will be shown.\n\tif not next(parts)\
      \ then\n\t\tif mw.title.getCurrentTitle().nsText == \"Template\" then\n\t\t\tparts = { {term = \"first\"}, {term = \"second\"} }\n\t\telse\n\t\t\terror(\"You must provide at least one part of a compound.\")\n\t\tend\n\tend\n\t\n\treturn m_compound.show_compound(lang,\
      \ sc, parts, args[\"pos\"], args[\"sort\"], args[\"nocat\"])\nend\n\n\nfunction export.compound_like(frame)\n\tlocal function hack_params(params)\n\t\tparams[\"pos\"] = nil\n\t\tparams[\"nocap\"] = {type = \"boolean\"}\n\t\tparams[\"notext\"] = {type =\
      \ \"boolean\"}\n\tend\n\n\tlocal args, terms, lang, sc = parse_args(frame:getParent().args, nil, hack_params)\n\n\tlocal template = frame.args[\"template\"]\n\tlocal nocat = args[\"nocat\"]\n\tlocal notext = args[\"notext\"]\n\tlocal text = not notext\
      \ and frame.args[\"text\"]\n\tlocal oftext = not notext and (frame.args[\"oftext\"] or text and \"of\")\n\tlocal cat = not nocat and frame.args[\"cat\"]\n\n\tlocal parts = get_parsed_parts(template, args, terms)\n\n\tif not next(parts) then\n\t\tif mw.title.getCurrentTitle().nsText\
      \ == \"Template\" then\n\t\t\tparts = { {term = \"first\"}, {term = \"second\"} }\n\t\tend\n\tend\n\t\n\treturn m_compound.show_compound_like(lang, sc, parts, args[\"sort\"], text, oftext, cat)\nend\n\n\nfunction export.interfix_compound(frame)\n\tlocal\
      \ args, terms, lang, sc = parse_args(frame:getParent().args)\n\n\tlocal parts = get_parsed_parts(\"interfix-compound\", args, terms)\n\tlocal base1 = parts[1]\n\tlocal interfix = parts[2]\n\tlocal base2 = parts[3]\n\t\n\t-- Just to make sure someone didn't\
      \ use the template in a silly way\n\tif not (base1 and interfix and base2) then\n\t\tif mw.title.getCurrentTitle().nsText == \"Template\" then\n\t\t\tbase1 = {term = \"base1\"}\n\t\t\tinterfix = {term = \"interfix\"}\n\t\t\tbase2 = {term = \"base2\"}\n\
      \t\telse\n\t\t\terror(\"You must provide a base term, an interfix and a second base term.\")\n\t\tend\n\tend\n\t\n\treturn m_compound.show_interfix_compound(lang, sc, base1, interfix, base2, args[\"pos\"], args[\"sort\"], args[\"nocat\"])\nend\n\n\nfunction\
      \ export.circumfix(frame)\n\tlocal args, terms, lang, sc = parse_args(frame:getParent().args)\n\n\tlocal parts = get_parsed_parts(\"circumfix\", args, terms)\n\tlocal prefix = parts[1]\n\tlocal base = parts[2]\n\tlocal suffix = parts[3]\n\t\n\t-- Just\
      \ to make sure someone didn't use the template in a silly way\n\tif not (prefix and base and suffix) then\n\t\tif mw.title.getCurrentTitle().nsText == \"Template\" then\n\t\t\tprefix = {term = \"circumfix\", alt = \"prefix\"}\n\t\t\tbase = {term = \"base\"\
      }\n\t\t\tsuffix = {term = \"circumfix\", alt = \"suffix\"}\n\t\telse\n\t\t\terror(\"You must specify a prefix part, a base term and a suffix part.\")\n\t\tend\n\tend\n\t\t\n\treturn m_compound.show_circumfix(lang, sc, prefix, base, suffix, args[\"pos\"\
      ], args[\"sort\"], args[\"nocat\"])\nend\n\n\nfunction export.confix(frame)\n\tlocal args, terms, lang, sc = parse_args(frame:getParent().args)\n\n\tlocal parts = get_parsed_parts(\"confix\", args, terms)\n\tlocal prefix = parts[1]\n\tlocal base = #parts\
      \ &gt;= 3 and parts[2] or nil\n\tlocal suffix = #parts &gt;= 3 and parts[3] or parts[2]\n\t\n\t-- Just to make sure someone didn't use the template in a silly way\n\tif not (prefix and suffix) then\n\t\tif mw.title.getCurrentTitle().nsText == \"Template\"\
      \ then\n\t\t\tprefix = {term = \"prefix\"}\n\t\t\tsuffix = {term = \"suffix\"}\n\t\telse\n\t\t\terror(\"You must specify a prefix part, an optional base term and a suffix part.\")\n\t\tend\n\tend\n\t\t\n\treturn m_compound.show_confix(lang, sc, prefix,\
      \ base, suffix, args[\"pos\"], args[\"sort\"], args[\"nocat\"])\nend\n\n\nfunction export.infix(frame)\n\tlocal args, terms, lang, sc = parse_args(frame:getParent().args)\n\n\tlocal parts = get_parsed_parts(\"infix\", args, terms)\n\tlocal base = parts[1]\n\
      \tlocal infix = parts[2]\n\t\n\t-- Just to make sure someone didn't use the template in a silly way\n\tif not (base and infix) then\n\t\tif mw.title.getCurrentTitle().nsText == \"Template\" then\n\t\t\tbase = {term = \"base\"}\n\t\t\tinfix = {term = \"\
      infix\"}\n\t\telse\n\t\t\terror(\"You must provide a base term and an infix.\")\n\t\tend\n\tend\n\t\n\treturn m_compound.show_infix(lang, sc, base, infix, args[\"pos\"], args[\"sort\"], args[\"nocat\"])\nend\n\n\nfunction export.prefix(frame)\n\tlocal\
      \ args, terms, lang, sc = parse_args(frame:getParent().args)\n\n\tlocal prefixes = get_parsed_parts(\"prefix\", args, terms)\n\tlocal base = nil\n\t\n\tif #prefixes &gt;= 2 then\n\t\tbase = prefixes[#prefixes]\n\t\tprefixes[#prefixes] = nil\n\tend\n\n\t\
      -- Just to make sure someone didn't use the template in a silly way\n\tif #prefixes == 0 then\n\t\tif mw.title.getCurrentTitle().nsText == \"Template\" then\n\t\t\tbase = {term = \"base\"}\n\t\t\tprefixes = { {term = \"prefix\"} }\n\t\telse\n\t\t\terror(\"\
      You must provide at least one prefix.\")\n\t\tend\n\tend\n\t\n\treturn m_compound.show_prefixes(lang, sc, prefixes, base, args[\"pos\"], args[\"sort\"], args[\"nocat\"])\nend\n\n\nfunction export.suffix(frame)\n\tlocal args, terms, lang, sc = parse_args(frame:getParent().args)\n\
      \n\tlocal base = get_parsed_part(\"suffix\", args, terms, 1)\n\tlocal suffixes = get_parsed_parts(\"suffix\", args, terms, 2)\n\t\n\t-- Just to make sure someone didn't use the template in a silly way\n\tif #suffixes == 0 then\n\t\tif mw.title.getCurrentTitle().nsText\
      \ == \"Template\" then\n\t\t\tbase = {term = \"base\"}\n\t\t\tsuffixes = { {term = \"suffix\"} }\n\t\telse\n\t\t\terror(\"You must provide at least one suffix.\")\n\t\tend\n\tend\n\t\n\treturn m_compound.show_suffixes(lang, sc, base, suffixes, args[\"\
      pos\"], args[\"sort\"], args[\"nocat\"])\nend\n\n\nfunction export.transfix(frame)\n\tlocal params = {\n\t\t[1] = {required = true, default = \"und\"},\n\t\t[2] = {required = true, default = \"base\"},\n\t\t[3] = {required = true, default = \"transfix\"\
      },\n\t\t\n\t\t[\"nocat\"] = {type = \"boolean\"},\n\t\t[\"pos\"] = {},\n\t\t[\"sc\"] = {},\n\t\t[\"sort\"] = {},\n\t}\n\t\n\tlocal args = require(\"Module:parameters\").process(frame:getParent().args, params)\n\t\n\tlocal lang = m_languages.getByCode(args[1])\
      \ or m_languages.err(lang, 1)\n\tlocal sc = fetch_script(args[\"sc\"])\n\n\tlocal base = {term = args[2]}\n\tlocal transfix = {term = args[3]}\n\t\n\treturn m_compound.show_transfix(lang, sc, base, transfix, args[\"pos\"], args[\"sort\"], args[\"nocat\"\
      ])\nend\n\n\nfunction export.derivsee(frame)\n\tlocal args = frame:getParent().args\n\t\n\tlocal derivtype = frame.args[\"derivtype\"]\n\tlocal mode = if_not_empty(frame.args[\"mode\"])\n\tlocal lang\n\tlocal term\n\t\n\tif derivtype == \"PIE root\" then\n\
      \t\tlang = m_languages.getByCode(\"ine-pro\")\n\t\tterm = if_not_empty(args[1] or args[\"head\"])\n\n\t\tif term then\n\t\t\tterm = \"*\" .. term .. \"-\"\n\t\tend\n\telse\n\t\tlang = fetch_lang(args)\n\t\tterm = if_not_empty(args[2] or args[\"head\"])\n\
      \tend\n\t\n\tlocal id = if_not_empty(args[\"id\"])\n\tlocal sc = fetch_script(args[\"sc\"])\n\tlocal pos = if_not_empty(args[\"pos\"])\n\n\tpos = pos or \"word\"\n\t\n\t-- Pluralize the part of speech name\n\tif pos:find(\"[sx]$\") then\n\t\tpos = pos\
      \ .. \"es\"\n\telse\n\t\tpos = pos .. \"s\"\n\tend\n\t\n\tif not term then\n\t\tif lang:getType() == \"reconstructed\" then\n\t\t\tterm = \"*\" .. mw.title.getCurrentTitle().subpageText\n\t\telseif lang:getType() == \"appendix-constructed\" then\n\t\t\t\
      term = mw.title.getCurrentTitle().subpageText\n\t\telseif mw.title.getCurrentTitle().nsText == \"Reconstruction\" then\n\t\t\tterm = \"*\" .. mw.title.getCurrentTitle().subpageText\n\t\telse\n\t\t\tterm = mw.title.getCurrentTitle().subpageText\n\t\tend\n\
      \tend\n\t\n\tlocal category = nil\n\t\n\tif derivtype == \"PIE root\" then\n\t\treturn frame:callParserFunction{\n\t\t\tname = \"#categorytree\",\n\t\t\targs = {\n\t\t\t\t\"Terms derived from the PIE root \" .. term .. (id and \" (\" .. id .. \")\" or\
      \ \"\"),\n\t\t\t\tdepth = 0,\n\t\t\t\tclass = \"\\\"derivedterms\\\"\",\n\t\t\t\tmode = mode,\n\t\t\t\t}\n\t\t\t}\n\tend\n\t\n\tif derivtype == \"compound\" then\n\t\tcategory = lang:getCanonicalName() .. \" compounds with \" .. term\n\telse\n\t\tcategory\
      \ = lang:getCanonicalName() .. \" \" .. pos .. \" \" .. derivtype .. \"ed with \" .. term .. (id and \" (\" .. id .. \")\" or \"\")\n\tend\n\t\n\treturn frame:callParserFunction{\n\t\tname = \"#categorytree\",\n\t\targs = {\n\t\t\tcategory,\n\t\t\tdepth\
      \ = 0,\n\t\t\tclass = \"\\\"derivedterms\" .. (sc and \" \" .. sc:getCode() or \"\") .. \"\\\"\",\n\t\t\tnamespaces = \"-\" .. (mw.title.getCurrentTitle().nsText == \"Reconstruction\" and \" Reconstruction\" or \"\"),\n\t\t\t}\n\t\t}\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T12:52:51.146Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Acompound&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=38511 t=1556369571007316
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:51 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1228.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1085 pass, cp3041 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 612723847, 312839089, 455187065
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"4105621\" pageid=\"4105621\" ns=\"828\" title=\"Module:compound\"><revisions><rev user=\"Benwing2\" timestamp=\"2019-04-13T02:09:52Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"fix error with etymology languages\" xml:space=\"preserve\">local m_links = require(\"Module:links\")\nlocal m_utilities = require(\"Module:utilities\")\n\nlocal export = {}\n\nlocal u\
      \ = mw.ustring.char\nlocal rsub = mw.ustring.gsub\nlocal usub = mw.ustring.sub\nlocal ulen = mw.ustring.len\nlocal rfind = mw.ustring.find\nlocal rmatch = mw.ustring.match\n\n-- ABOUT TEMPLATE AND DISPLAY HYPHENS:\n--\n-- The \"template hyphen\" is the\
      \ per-script hyphen character that is used in\n-- template calls to indicate that a term is an affix. This is always a single\n-- Unicode char, but there may be multiple possible hyphens for a given script.\n-- Normally this is just the regular hyphen\
      \ character \"-\", but for some\n-- non-Latin-script languages (currently only right-to-left languages), it\n-- is different.\n--\n-- The \"display hyphen\" is the string (which might be an empty string) that\n-- is added onto a term as displayed (and\
      \ linked), to indicate that a term\n-- is an affix. Currently this is always either the same as the template\n-- hyphen or an empty string, but the code below is written generally enough\n-- to handle arbitrary display hyphens. Specifically:\n--\n-- (1)\
      \ For East Asian languages, the display hyphen is always blank.\n-- (2) For Arabic-script languages, either tatweel (ـ) or ZWNJ (zero-width\n--     non-joiner) are allowed as template hyphens, where ZWNJ is supported\n--     primarily for Farsi, because\
      \ some suffixes have non-joining behavior.\n--     The display hyphen corresponding to tatweel is also tatweel, but the\n--     display hyphen corresponding to ZWNJ is blank (tatweel is also the\n--     default display hyphen, for calls to {{prefix}}/{{suffix}}/etc.\
      \ that\n--     don't include an explicit hyphen).\n\n-- List of all Arabic scripts.\nlocal arab_scripts = {\n\t\"Arab\",\n\t-- WTF? Why are there a zillion language-specific variants of the\n\t-- Arabic script?\n\t\"fa-Arab\",\n\t\"kk-Arab\",\n\t\"ks-Arab\"\
      ,\n\t\"ku-Arab\",\n\t\"ms-Arab\",\n\t\"mzn-Arab\",\n\t\"ota-Arab\",\n\t\"pa-Arab\",\n\t\"ps-Arab\",\n\t\"sd-Arab\",\n\t\"tt-Arab\",\n\t\"ug-Arab\",\n\t\"ur-Arab\",\n}\n\n-- Per-script template hyphens. The template hyphen is what appears in the\n-- {{affix}}/{{prefix}}/{{suffix}}/etc.\
      \ template (in the wikicode). See below.\n--\n-- The value below is a string consisting of one or more hyphen characters.\n-- If there is more than one character, a non-default function must be\n-- specified for the script in display_hyphens[] so the correct\
      \ display\n-- hyphen will be specified when no template hyphen is given (in {{suffix}}/\n-- {{prefix}}/etc.).\n--\n-- Script detection is normally done when linking, but we need to do it\n-- earlier. However, under most circumstances we don't need to do\
      \ script\n-- detection. Specifically, we only need to do script detection for a given\n-- language if\n--\n-- (a) the language has multiple scripts; and\n-- (b) at least one of those scripts is listed below or in display_hyphens.\n\nlocal ZWNJ = u(0x200C)\
      \ -- zero-width non-joiner\nlocal arab_hyphens = \"ـ\" .. ZWNJ .. \"-\"\nlocal template_hyphens = {\n\t-- Arabic scripts get added below\n\t[\"Hebr\"] = \"־\",\n\t-- FIXME! What about the following right-to-left scripts?\n\t-- Adlm (Adlam)\n\t-- Armi (Imperial\
      \ Aramaic)\n\t-- Avst (Avestan)\n\t-- Cprt (Cypriot)\n\t-- Khar (Kharoshthi)\n\t-- Mand (Mandaic/Mandaean)\n\t-- Mani (Manichaean)\n\t-- Mend (Mende/Mende Kikakui)\n\t-- Narb (Old North Arabian)\n\t-- Nbat (Nabataean/Nabatean)\n\t-- Nkoo (N'Ko)\n\t-- Orkh\
      \ (Orkhon runes)\n\t-- Phli (Inscriptional Pahlavi)\n\t-- Phlp (Psalter Pahlavi)\n\t-- Phlv (Book Pahlavi)\n\t-- Phnx (Phoenician)\n\t-- Prti (Inscriptional Parthian)\n\t-- Rohg (Hanifi Rohingya)\n\t-- Samr (Samaritan)\n\t-- Sarb (Old South Arabian)\n\t\
      -- Sogd (Sogdian)\n\t-- Sogo (Old Sogdian)\n\t-- Syrc (Syriac)\n\t-- Thaa (Thaana)\n}\nfor _, script in ipairs(arab_scripts) do\n\ttemplate_hyphens[script] = arab_hyphens\nend\n\n-- Default display-hyphen funct\nlocal function default_display_hyphen(script,\
      \ hyph)\n\tif not hyph then\n\t\treturn template_hyphens[script] or \"-\"\n\tend\n\treturn hyph\nend\n\nlocal function no_display_hyphen(script, hyph)\n\treturn \"\"\nend\n\nlocal function arab_get_display_hyphen(script, hyph)\n\tif not hyph then\n\t\t\
      return \"ـ\" -- tatweel\n\telseif hyph == ZWNJ then\n\t\treturn \"\"\n\telse\n\t\treturn hyph\n\tend\nend\n\n-- Per-script function to return the correct display hyphen given the\n-- script and template hyphen. The function should also handle the case\n\
      -- where the passed-in template hyphen is nil, corresponding to the\n-- situation in {{prefix}}/{{suffix}}/etc. where no template hyphen is\n-- specified.\nlocal display_hyphens = {\n\t-- Arabic scripts get added below\n\t[\"Hani\"] = no_display_hyphen,\n\
      \t-- The following two are mixtures of several scripts. Hopefully\n\t-- the specs here are correct!\n\t[\"Jpan\"] = no_display_hyphen,\n\t[\"Kore\"] = no_display_hyphen,\n\t[\"Laoo\"] = no_display_hyphen,\n\t[\"Nshu\"] = no_display_hyphen,\n\t[\"Thai\"\
      ] = no_display_hyphen,\n}\nfor _, script in ipairs(arab_scripts) do\n\tdisplay_hyphens[script] = arab_get_display_hyphen\nend\n\nlocal function pluralize(pos)\n\tif pos ~= \"nouns\" and usub(pos, -5) ~= \"verbs\" and usub(pos, -4) ~= \"ives\" then\n\t\t\
      if pos:find(\"[sx]$\") then\n\t\t\tpos = pos .. \"es\"\n\t\telse\n\t\t\tpos = pos .. \"s\"\n\t\tend\n\tend\n\treturn pos\nend\n\nlocal function link_term(terminfo, display_term, lang, sc, sort_key)\n\tlocal terminfo_new = require(\"Module:table\").shallowcopy(terminfo)\n\
      \tlocal result\n\n\tterminfo_new.term = display_term\t\n\tif terminfo_new.lang then\n\t\tresult = require(\"Module:etymology\").format_borrowed(lang, terminfo_new, sort_key, false, true, \"plain\")\n\telse\n\t\tterminfo_new.lang = lang\n\t\tterminfo_new.sc\
      \ = terminfo_new.sc or sc\n\t\tresult = m_links.full_link(terminfo_new, \"term\", false)\n\tend\n\t\n\tif terminfo_new.q then\n\t\tresult = result .. \" \" .. require(\"Module:qualifier\").format_qualifier(terminfo_new.q)\n\tend\n\t\n\treturn result\n\
      end\n\n-- Figure out the appropriate script for the given affix and language (unless\n-- the script is explicitly passed in), and return the values of\n-- template_hyphens[] and display_hyphens[] for that script, substituting\n-- default values as appropriate.\
      \ Three values are returned:\n--\tDETECTED_SCRIPT, TEMPLATE_HYPHEN, DISPLAY_HYPHEN\nlocal function get_template_and_display_hyphens(text, lang, sc)\n\tlocal scode\n\t-- 1. If the script is explicitly passed in, use it.\n\tif sc then\n\t\tscode = sc:getCode()\n\
      \telse\n\t\tlang = require(\"Module:languages\").getNonEtymological(lang)\n\t\t-- If we don't call shallowClone here, #possible_scripts always == 0.\n\t\t-- Something weird to do with the metatable that's set on the table,\n\t\t-- coming from loadData.\n\
      \t\tlocal possible_scripts = require(\"Module:table\").shallowClone(lang:getScriptCodes())\n\t\tif #possible_scripts == 0 then\n\t\t\t-- This shouldn't happen; if the language has no script codes,\n\t\t\t-- the list {\"None\"} should be returned.\n\t\t\
      \terror(\"Something is majorly wrong! Language \" .. lang:getCanonicalName() .. \" has no script codes.\")\n\t\tend\n\t\tif #possible_scripts == 1 then\n\t\t\t-- 2. If the language has only one possible script, use it.\n\t\t\tscode = possible_scripts[1]\n\
      \t\telse\n\t\t\t-- 3. Check if any of the possible scripts for the language have\n\t\t\t--    non-default values for template_hyphens[] or\n\t\t\t--    display_hyphens[]. If so, we need to do script detection on\n\t\t\t--    the text. If not, just use\
      \ \"Latn\", which may not be\n\t\t\t--    technically correct but produces the right results because\n\t\t\t--    Latn has all default values for template_hyphens[] and\n\t\t\t--    display_hyphens[].\n\t\t\tlocal may_have_nondefault_hyphen = false\n\t\
      \t\tfor _, script in ipairs(possible_scripts) do\n\t\t\t\tif template_hyphens[script] or display_hyphens[script] then\n\t\t\t\t\tmay_have_nondefault_hyphen = true\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\t\tif not may_have_nondefault_hyphen then\n\t\
      \t\t\tscode = \"Latn\"\n\t\t\telse\n\t\t\t\tscode = require(\"Module:scripts\").findBestScript(text, lang):getCode()\n\t\t\tend\n\t\tend\n\tend\n\tlocal template_hyphen = template_hyphens[scode] or \"-\"\n\tlocal display_hyphen = display_hyphens[scode]\
      \ or default_display_hyphen\n\treturn scode, template_hyphen, display_hyphen\nend\n\n-- Find the type of affix (\"prefix\", \"infix\", \"suffix\", \"circumfix\" or nil\n-- for non-affix). Return the affix type and the displayed/linked equivalent\n-- of\
      \ the part (normally the same as the part but will be different for some\n-- East Asian languages that use a regular hyphen as an affix-signaling\n-- hyphen but have no display hyphen).\nlocal function get_affix_type(lang, sc, part)\n\tif not part then\n\
      \t\treturn nil, nil\n\tend\n\t\n\tlocal scode, thyph, dhyph = get_template_and_display_hyphens(part, lang, sc)\n\tthyph = \"([\" .. thyph .. \"])\"\n\tlocal hyphen_space_hyphen = thyph .. \" \" .. thyph\n\n\tif part:find(\"^%^\") then\n\t\t-- If part begins\
      \ with ^, it's not an affix no matter what.\n\t\t-- Strip off the ^ and return \"no affix\".\n\t\treturn nil, usub(part, 2)\n\tend\n\n\t-- Remove an asterisk if the morpheme is reconstructed and add it in the end.\n\tlocal reconstructed = \"\"\n\tif part:find(\"\
      ^%*\") then \n\t\treconstructed = \"*\"\n\t\tpart = part:gsub(\"^%*\", \"\")\n\tend\n\n\tlocal affix_type = nil\n\n\tlocal beginning_hyphen = rmatch(part, \"^\" .. thyph .. \".*$\")\n\tlocal ending_hyphen = rmatch(part, \"^.*\" .. thyph .. \"$\")\n\tlocal\
      \ beginning_dhyph = dhyph(scode, beginning_hyphen)\n\tlocal ending_dhyph = dhyph(scode, ending_hyphen)\n\n\tif rfind(part, hyphen_space_hyphen) then\n\t\taffix_type = \"circumfix\"\n\t\t-- FIXME! Change to display hyphens?\n\telseif beginning_hyphen and\
      \ ending_hyphen then\n\t\taffix_type = \"infix\"\n\t\t-- Don't do anything if the part is a single hyphen.\n\t\t-- This is probably correct.\n\t\tif (beginning_hyphen ~= beginning_dhyph or\n\t\t\tending_hyphen ~= ending_dhyph) and ulen(part) &gt; 1 then\n\
      \t\t\tpart = beginning_dhyph .. rsub(part, \"^.(.-).$\", \"%1\") .. ending_dhyph\n\t\tend\n\telseif ending_hyphen then\n\t\taffix_type = \"prefix\"\n\t\tif ending_hyphen ~= ending_dhyph then\n\t\t\tpart = rsub(part, \"^(.-).$\", \"%1\") .. ending_dhyph\n\
      \t\tend\n\telseif beginning_hyphen then\n\t\taffix_type = \"suffix\"\n\t\tif beginning_hyphen ~= beginning_dhyph then\n\t\t\tpart = beginning_dhyph .. usub(part, 2)\n\t\tend\n\tend\n\n\tpart = reconstructed .. part\n\treturn affix_type, part\nend\n\n\n\
      -- Iterate an array up to the greatest integer index found.\nlocal function ipairs_with_gaps(t)\n\tlocal max_index = math.max(unpack(require(\"Module:table\").numKeys(t)))\n\tlocal i = 0\n\treturn function()\n\t\twhile i &lt; max_index do\n\t\t\ti = i\
      \ + 1\n\t\t\treturn i, t[i]\n\t\tend\n\tend\nend\n\nexport.ipairs_with_gaps = ipairs_with_gaps\n\n\nfunction export.show_affixes(lang, sc, parts, pos, sort_key, nocat)\n\tpos = pos or \"word\"\n\t\n\tpos = pluralize(pos)\n\t\n\t-- Process each part\n\t\
      local parts_formatted = {}\n\tlocal categories_formatted = {}\n\tlocal whole_words = 0\n\t\n\tfor i, part in ipairs_with_gaps(parts) do\n\t\tpart = part or {}\n\t\tlocal part_lang = part.lang or lang\n\t\tlocal part_sc = part.sc or sc\n\t\t\n\t\t-- Is\
      \ it an affix, and if so, what type of affix?\n\t\tlocal affix_type, display_term = get_affix_type(part_lang, part_sc, part.term)\n\t\t\n\t\t-- Make a link for the part\n\t\tif display_term == \"\" then\n\t\t\t-- If a bare ^ was specified, then insert\
      \ a blank string. A + will still\n\t\t\t-- appear next to it. This lets us directly convert things such as\n\t\t\t-- {{suffix|mul||idae}} to {{affix|mul|^|-idae}}.\n\t\t\ttable.insert(parts_formatted, \"\")\n\t\telse\n\t\t\ttable.insert(parts_formatted,\
      \ link_term(part, display_term, lang, sc, sort_key))\n\t\tend\n\t\t\n\t\tif affix_type then\n\t\t\t-- Make a sort key\n\t\t\t-- For the first part, use the second part as the sort key\n\t\t\tlocal part_sort_base = nil\n\t\t\tlocal part_sort = part.sort\
      \ or sort_key\n\t\t\t\n\t\t\tif i == 1 and parts[2] and parts[2].term then\n\t\t\t\tlocal part2_lang = parts[2].lang or lang\n\t\t\t\tlocal part2_sc = parts[2].sc or sc\n\t\t\t\tlocal part2_affix_type, part2_display_term = get_affix_type(part2_lang, part2_sc,\
      \ parts[2].term)\n\t\t\t\tpart_sort_base = part2_lang:makeEntryName(part2_display_term)\n\t\t\tend\n\t\t\t\n\t\t\tif affix_type == \"infix\" then affix_type = \"interfix\" end\n\t\t\t\n\t\t\tif part.pos and rfind(part.pos, \"patronym\") then\n\t\t\t\t\
      table.insert(categories_formatted, m_utilities.format_categories({lang:getCanonicalName() .. \" patronymics\"}, lang, part_sort, part_sort_base))\n\t\t\tend\n\t\t\t\n\t\t\tif pos ~= \"words\" and part.pos and rfind(part.pos, \"diminutive\") then\n\t\t\t\
      \ttable.insert(categories_formatted, m_utilities.format_categories({lang:getCanonicalName() .. \" diminutive \" .. pos}, lang, part_sort, part_sort_base))\n\t\t\tend\n\t\t\t\n\t\t\ttable.insert(categories_formatted, m_utilities.format_categories({lang:getCanonicalName()\
      \ .. \" \" .. pos .. \" \" .. affix_type .. \"ed with \" .. part_lang:makeEntryName(display_term) .. (part.id and \" (\" .. part.id .. \")\" or \"\")}, lang, part_sort, part_sort_base))\n\t\telse\n\t\t\twhole_words = whole_words + 1\n\t\t\t\n\t\t\tif whole_words\
      \ == 2 then\n\t\t\t\ttable.insert(categories_formatted, m_utilities.format_categories({lang:getCanonicalName() .. \" compound \" .. pos}, lang, sort_key))\n\t\t\tend\n\t\tend\n\tend\n\t\n\t-- If there are no categories, then there were no actual affixes,\
      \ only regular words.\n\t-- This function does not support compounds (yet?), so show an error.\n\tif #categories_formatted == 0 then\n\t\terror(\"The parameters did not include any affixes, and the word is not a compound. Please provide at least one affix.\"\
      )\n\tend\n\t\n\treturn table.concat(parts_formatted, \" +&amp;lrm; \") .. (nocat and \"\" or table.concat(categories_formatted))\nend\n\n\nfunction export.show_compound(lang, sc, parts, pos, sort_key, nocat)\n\tpos = pos or \"words\"\n\tlocal parts_formatted\
      \ = {}\n\tlocal categories_formatted = {}\n\ttable.insert(categories_formatted, m_utilities.format_categories({lang:getCanonicalName() .. \" compound words\"}, lang, sort_key))\n\t\n\t-- Make links out of all the parts\n\tlocal whole_words = 0\n\tfor i,\
      \ part in ipairs(parts) do\n\t\tlocal part_lang = part.lang or lang\n\t\tlocal part_sc = part.sc or sc\n\t\tlocal affix_type, display_term = get_affix_type(part_lang, part_sc, part.term)\n\n\t\t-- If the word is an infix, recognize it as such (which means\n\
      \t\t-- e.g. that we will display the word without hyphens for\n\t\t-- East Asian languages). Otherwise, ignore the fact that it\n\t\t-- looks like an affix and display as specified in the template\n\t\t-- (but pay attention to the detected affix type for\
      \ certain\n\t\t-- tracking purposes)\n\t\tif affix_type == \"infix\" then\n\t\t\ttable.insert(categories_formatted, m_utilities.format_categories({lang:getCanonicalName() .. \" \" .. pos .. \" interfixed with \" .. part_lang:makeEntryName(display_term)},\
      \ lang, part.sort or sort_key))\n\t\telse\n\t\t\tdisplay_term = part.term\n\t\t\tif affix_type then\n\t\t\t\trequire(\"Module:debug\").track{\n\t\t\t\t\t\"compound\",\n\t\t\t\t\t\"compound/\" .. affix_type,\n\t\t\t\t\t\"compound/\" .. affix_type .. \"\
      /lang/\" .. lang:getCode()\n\t\t\t\t}\n\t\t\telse\n\t\t\t\twhole_words = whole_words + 1\n\t\t\tend\n\t\tend\n\t\ttable.insert(parts_formatted, link_term(part, display_term, lang, sc, sort_key))\n\tend\n\n\tif whole_words == 1 then\n\t\trequire(\"Module:debug\"\
      ).track(\"compound/one whole word\")\n\telseif whole_words == 0 then\n\t\trequire(\"Module:debug\").track(\"compound/looks like confix\")\n\tend\n\t\n\treturn table.concat(parts_formatted, \" +&amp;lrm; \") .. (nocat and \"\" or table.concat(categories_formatted))\n\
      end\n\n\nfunction export.show_compound_like(lang, sc, parts, sort_key, text, oftext, cat)\n\tlocal parts_formatted = {}\n\tlocal categories_formatted = {}\n\n\tif cat then\t\n\t\ttable.insert(categories_formatted, m_utilities.format_categories({lang:getCanonicalName()\
      \ .. \" \" .. cat}, lang, sort_key))\n\tend\n\t\n\t-- Make links out of all the parts\n\tfor i, part in ipairs(parts) do\n\t\ttable.insert(parts_formatted, link_term(part, part.term, lang, sc, sort_key))\n\tend\n\n\tlocal text_sections = {}\n\tif text\
      \ then\n\t\ttable.insert(text_sections, text)\n\tend\n\tif #parts &gt; 0 and oftext then\n\t\ttable.insert(text_sections, \" \")\n\t\ttable.insert(text_sections, oftext)\n\t\ttable.insert(text_sections, \" \")\n\tend\n\ttable.insert(text_sections, table.concat(parts_formatted,\
      \ \" +&amp;lrm; \"))\n\ttable.insert(text_sections, table.concat(categories_formatted, \"\"))\n\treturn table.concat(text_sections, \"\")\nend\n\n\n-- Make a given part into an affix of a specific type. For example, if the desired affix type\n-- is \"\
      suffix\", this will (in general) add a hyphen onto the beginning of the term, alt, tr and ts\n-- components of the part if not already present. The hyphen that's added is the \"display hyphen\"\n-- (see above) and may be language-specific. In the case\
      \ of East Asian languages, the display\n-- hyphen is an empty string whereas the template hyphen is the regular hyphen, meaning that any\n-- regular hyphen at the beginning of the part will be effectively removed.\nlocal function make_part_affix(part,\
      \ lang, sc, affix_type)\n\tlocal part_lang = part.lang or lang\n\tlocal part_sc = part.sc or sc\n\n\tpart.term = export.make_affix(part.term, part_lang, part_sc, affix_type)\n\tpart.alt = export.make_affix(part.alt, part_lang, part_sc, affix_type)\n\t\
      part.tr = export.make_affix(part.tr, part_lang, require(\"Module:scripts\").getByCode(\"Latn\"), affix_type)\n\tpart.ts = export.make_affix(part.ts, part_lang, require(\"Module:scripts\").getByCode(\"Latn\"), affix_type)\nend\n\n\nlocal function track_wrong_affix_type(template,\
      \ part, lang, sc, expected_affix_type, part_name)\n\tif part then\n\t\tlocal affix_type = get_affix_type(part.lang or lang, part.sc or sc, part.term)\n\t\tif affix_type ~= expected_affix_type then\n\t\t\trequire(\"Module:debug\").track{\n\t\t\t\ttemplate,\n\
      \t\t\t\ttemplate .. \"/\" .. part_name,\n\t\t\t\ttemplate .. \"/\" .. part_name .. \"/\" .. (affix_type or \"none\"),\n\t\t\t\ttemplate .. \"/\" .. part_name .. \"/\" .. (affix_type or \"none\") .. \"/lang/\" .. lang:getCode()\n\t\t\t}\n\t\tend\n\tend\n\
      end\n\n\nlocal function insert_affix_category(categories, lang, pos, affix_type, part)\n\tif part.term then\n\t\tlocal part_lang = part.lang or lang\n\t\ttable.insert(categories, lang:getCanonicalName() .. \" \" .. pos .. \" \" .. affix_type .. \"ed with\
      \ \" .. part_lang:makeEntryName(part.term) .. (part.id and \" (\" .. part.id .. \")\" or \"\"))\n\tend\nend\n\n\nfunction export.show_circumfix(lang, sc, prefix, base, suffix, pos, sort_key, nocat)\n\tlocal categories = {}\n\tpos = pos or \"word\"\n\t\n\
      \tpos = pluralize(pos)\n\t\n\t-- Hyphenate the affixes\n\tmake_part_affix(prefix, lang, sc, \"prefix\")\n\tmake_part_affix(suffix, lang, sc, \"suffix\")\n\t\n\ttrack_wrong_affix_type(\"circumfix\", prefix, lang, sc, \"prefix\", \"prefix\")\n\ttrack_wrong_affix_type(\"\
      circumfix\", base, lang, sc, nil, \"base\")\n\ttrack_wrong_affix_type(\"circumfix\", suffix, lang, sc, \"suffix\", \"suffix\")\n\t\n\t-- Create circumfix term\n\tlocal circumfix = nil\n\t\n\tif prefix.term and suffix.term then\n\t\tcircumfix = prefix.term\
      \ .. \" \" .. suffix.term\n\t\tprefix.alt = prefix.alt or prefix.term\n\t\tsuffix.alt = suffix.alt or suffix.term\n\t\tprefix.term = circumfix\n\t\tsuffix.term = circumfix\n\tend\n\t\n\t-- Make links out of all the parts\n\tlocal parts_formatted = {}\n\
      \tlocal sort_base = (base.lang or lang):makeEntryName(base.term)\n\t\n\ttable.insert(parts_formatted, link_term(prefix, prefix.term, lang, sc, sort_key))\n\ttable.insert(parts_formatted, link_term(base, base.term, lang, sc, sort_key))\n\ttable.insert(parts_formatted,\
      \ link_term(suffix, suffix.term, lang, sc, sort_key))\n\t\n\t-- Insert the categories\n\ttable.insert(categories, lang:getCanonicalName() .. \" \" .. pos .. \" circumfixed with \" .. (prefix.lang or lang):makeEntryName(circumfix))\n\t\n\treturn table.concat(parts_formatted,\
      \ \" +&amp;lrm; \") .. (nocat and \"\" or m_utilities.format_categories(categories, lang, sort_key, sort_base))\nend\n\n\nfunction export.show_confix(lang, sc, prefix, base, suffix, pos, sort_key, nocat)\n\tpos = pos or \"word\"\n\t\n\tpos = pluralize(pos)\n\
      \t\n\t-- Hyphenate the affixes\n\tmake_part_affix(prefix, lang, sc, \"prefix\")\n\tmake_part_affix(suffix, lang, sc, \"suffix\")\n\t\n\ttrack_wrong_affix_type(\"confix\", prefix, lang, sc, \"prefix\", \"prefix\")\n\ttrack_wrong_affix_type(\"confix\", base,\
      \ lang, sc, nil, \"base\")\n\ttrack_wrong_affix_type(\"confix\", suffix, lang, sc, \"suffix\", \"suffix\")\n\t\n\t-- Make links out of all the parts\n\tlocal parts_formatted = {}\n\tlocal prefix_sort_base\n\tif suffix.term then\n\t\tprefix_sort_base =\
      \ (suffix.lang or lang):makeEntryName(suffix.term)\n\tend\n\tlocal prefix_categories = {}\n\tlocal suffix_categories = {}\n\t\n\ttable.insert(parts_formatted, link_term(prefix, prefix.term, lang, sc, sort_key))\n\tinsert_affix_category(prefix_categories,\
      \ lang, pos, \"prefix\", prefix)\n\t\n\tif base then\n\t\tif base.term then\n\t\t\tprefix_sort_base = (base.lang or lang):makeEntryName(base.term)\n\t\tend\n\t\ttable.insert(parts_formatted, link_term(base, base.term, lang, sc, sort_key))\n\tend\n\t\n\t\
      table.insert(parts_formatted, link_term(suffix, suffix.term, lang, sc, sort_key))\n\tinsert_affix_category(suffix_categories, lang, pos, \"suffix\", suffix)\n\t\n\treturn table.concat(parts_formatted, \" +&amp;lrm; \") .. (nocat and \"\" or m_utilities.format_categories(prefix_categories,\
      \ lang, sort_key, prefix_sort_base) .. m_utilities.format_categories(suffix_categories, lang, sort_key))\nend\n\n\nfunction export.show_infix(lang, sc, base, infix, pos, sort_key, nocat)\n\tlocal categories = {}\n\tpos = pos or \"word\"\n\t\n\tpos = pluralize(pos)\n\
      \t\n\t-- Hyphenate the affixes\n\tmake_part_affix(infix, lang, sc, \"infix\")\n\t\n\ttrack_wrong_affix_type(\"infix\", base, lang, sc, nil, \"base\")\n\ttrack_wrong_affix_type(\"infix\", infix, lang, sc, \"infix\", \"infix\")\n\t\n\t-- Make links out of\
      \ all the parts\n\tlocal parts_formatted = {}\n\t\n\ttable.insert(parts_formatted, link_term(base, base.term, lang, sc, sort_key))\n\ttable.insert(parts_formatted, link_term(infix, infix.term, lang, sc, sort_key))\n\t\n\t-- Insert the categories\n\tinsert_affix_category(categories,\
      \ lang, pos, \"infix\", infix)\n\t\n\treturn table.concat(parts_formatted, \" +&amp;lrm; \") .. (nocat and \"\" or m_utilities.format_categories(categories, lang, sort_key))\nend\n\n\nfunction export.show_prefixes(lang, sc, prefixes, base, pos, sort_key,\
      \ nocat)\n\tpos = pos or \"word\"\n\t\n\tpos = pluralize(pos)\n\t\n\t-- Hyphenate the affixes\n\tfor i, prefix in ipairs(prefixes) do\n\t\tmake_part_affix(prefix, lang, sc, \"prefix\")\n\tend\n\t\n\tfor i, prefix in ipairs(prefixes) do\n\t\ttrack_wrong_affix_type(\"\
      prefix\", prefix, lang, sc, \"prefix\", \"prefix\")\n\tend\n\n\ttrack_wrong_affix_type(\"prefix\", base, lang, sc, nil, \"base\")\n\n\t-- Make links out of all the parts\n\tlocal parts_formatted = {}\n\tlocal first_sort_base = nil\n\tlocal categories =\
      \ {}\n\t\n\tfor i, prefix in ipairs(prefixes) do\n\t\ttable.insert(parts_formatted, link_term(prefix, prefix.term, lang, sc, sort_key))\n\t\tinsert_affix_category(categories, lang, pos, \"prefix\", prefix)\n\t\t\n\t\tif i &gt; 1 and first_sort_base ==\
      \ nil then\n\t\t\tfirst_sort_base = (prefix.lang or lang):makeEntryName(prefix.term)\n\t\tend\n\tend\n\t\n\tif base then\n\t\tif first_sort_base == nil then\n\t\t\tfirst_sort_base = (base.lang or lang):makeEntryName(base.term)\n\t\tend\n\t\t\n\t\ttable.insert(parts_formatted,\
      \ link_term(base, base.term, lang, sc, sort_key))\n\telse\n\t\ttable.insert(parts_formatted, \"\")\n\tend\n\t\n\tlocal first_category = table.remove(categories, 1)\n\treturn table.concat(parts_formatted, \" +&amp;lrm; \") .. (nocat and \"\" or m_utilities.format_categories({first_category},\
      \ lang, sort_key, first_sort_base) .. m_utilities.format_categories(categories, lang, sort_key))\nend\n\n\nfunction export.show_suffixes(lang, sc, base, suffixes, pos, sort_key, nocat)\n\tlocal categories = {}\n\tpos = pos or \"word\"\n\t\n\tpos = pluralize(pos)\n\
      \t\n\t-- Hyphenate the affixes\n\tfor i, suffix in ipairs(suffixes) do\n\t\tmake_part_affix(suffix, lang, sc, \"suffix\")\n\tend\n\t\n\ttrack_wrong_affix_type(\"suffix\", base, lang, sc, nil, \"base\")\n\n\tfor i, suffix in ipairs(suffixes) do\n\t\ttrack_wrong_affix_type(\"\
      suffix\", suffix, lang, sc, \"suffix\", \"suffix\")\n\tend\n\t\n\t-- Make links out of all the parts\n\tlocal parts_formatted = {}\n\t\n\tif base then\n\t\ttable.insert(parts_formatted, link_term(base, base.term, lang, sc, sort_key))\n\telse\n\t\ttable.insert(parts_formatted,\
      \ \"\")\n\tend\n\t\n\tfor i, suffix in ipairs(suffixes) do\n\t\ttable.insert(parts_formatted, link_term(suffix, suffix.term, lang, sc, sort_key))\n\tend\n\t\n\t-- Insert the categories\n\tfor i, suffix in ipairs(suffixes) do\n\t\tif suffix.term then\n\t\
      \t\tinsert_affix_category(categories, lang, pos, \"suffix\", suffix)\n\t\tend\n\t\t\n\t\tif suffix.pos and rfind(suffix.pos, \"patronym\") then\n\t\t\ttable.insert(categories, lang:getCanonicalName() .. \" patronymics\")\n\t\tend\n\tend\n\t\n\treturn table.concat(parts_formatted,\
      \ \" +&amp;lrm; \") .. (nocat and \"\" or m_utilities.format_categories(categories, lang, sort_key))\nend\n\n\nfunction export.show_transfix(lang, sc, base, transfix, pos, sort_key, nocat)\n\tlocal categories = {}\n\tpos = pos or \"word\"\n\t\n\tpos =\
      \ pluralize(pos)\n\t\n\t-- Hyphenate the affixes\n\tmake_part_affix(transfix, lang, sc, \"transfix\")\n\t\n\t-- Make links out of all the parts\n\tlocal parts_formatted = {}\n\t\n\ttable.insert(parts_formatted, link_term(base, base.term, lang, sc, sort_key))\n\
      \ttable.insert(parts_formatted, link_term(transfix, transfix.term, lang, sc, sort_key))\n\t\n\t-- Insert the categories\n\tinsert_affix_category(categories, lang, pos, \"transfix\", transfix)\n\t\n\treturn table.concat(parts_formatted, \" +&amp;lrm; \"\
      ) .. (nocat and \"\" or m_utilities.format_categories(categories, lang, sort_key))\nend\n\n\n-- Add a hyphen to a word in the appropriate place, based on the specified\n-- affix type. For example, if `affix_type` == \"prefix\", we'll add a hyphen\n-- onto\
      \ the end if it's not already there. In general, if the template and\n-- display hyphens are the same and the appropriate hyphen is already\n-- present, we leave it, else we strip off the template hyphen if present\n-- and add the display hyphen.\nfunction\
      \ export.make_affix(term, lang, sc, affix_type)\n\tif not (affix_type == \"prefix\" or affix_type == \"suffix\" or\n\t\taffix_type == \"circumfix\" or affix_type == \"infix\" or\n\t\taffix_type == \"interfix\" or affix_type == \"transfix\") then\n\t\t\
      error(\"Internal error: Invalid affix type \" .. (affix_type or \"(nil)\"))\n\tend\n\t\n\tif not term then\n\t\treturn nil\n\tend\n\n\t-- If the term begins with ^, leave it exactly as-is except for removing the ^.\n\tif usub(term, 1, 1) == \"^\" then\n\
      \t\treturn usub(term, 2)\n\tend\n\t\t\n\tif affix_type == \"circumfix\" or affix_type == \"transfix\" then\n\t\treturn term\n\telseif affix_type == \"interfix\" then\n\t\taffix_type = \"infix\"\n\tend\n\t\n\tlocal scode, thyph, dhyph = get_template_and_display_hyphens(term,\
      \ lang, sc)\n\tthyph = \"([\" .. thyph .. \"])\"\n\t\n\t-- Remove an asterisk if the morpheme is reconstructed and add it in the end.\n\tlocal reconstructed = \"\"\n\tif term:find(\"^%*\") then \n\t\treconstructed = \"*\"\n\t\tterm = term:gsub(\"^%*\"\
      , \"\")\n\tend\n\t\n\tlocal beginning_hyphen = rmatch(term, \"^\" .. thyph .. \".*$\")\n\tlocal ending_hyphen = rmatch(term, \"^.*\" .. thyph .. \"$\")\n\tlocal beginning_dhyph = dhyph(scode, beginning_hyphen)\n\tlocal ending_dhyph = dhyph(scode, ending_hyphen)\n\
      \n\tif affix_type == \"suffix\" then\n\t\tif beginning_hyphen and beginning_hyphen == beginning_dhyph then\n\t\t\t-- leave term alone\n\t\telse\n\t\t\tlocal term_no_hyphen = beginning_hyphen and usub(term, 2) or term\n\t\t\tterm = beginning_dhyph .. term_no_hyphen\n\
      \t\tend\n\telseif affix_type == \"prefix\" then\n\t\tif ending_hyphen and ending_hyphen == ending_dhyph then\n\t\t\t-- leave term alone\n\t\telse\n\t\t\tlocal term_no_hyphen = ending_hyphen and rsub(term, \"^(.-).$\", \"%1\") or term\n\t\t\tterm = term_no_hyphen\
      \ .. ending_dhyph\n\t\tend\n\telseif affix_type == \"infix\" then\n\t\tif (beginning_hyphen and ending_hyphen and\n\t\t\tbeginning_hyphen == beginning_dhyph and\n\t\t\tending_hyphen == ending_dhyph) then\n\t\t\t-- leave term alone\n\t\telseif term == beginning_hyphen\
      \ or term == ending_hyphen then\n\t\t\t-- term is a single hyphen; should probably leave alone\n\t\telse\n\t\t\tlocal term_no_hyphen = beginning_hyphen and usub(term, 2) or term\n\t\t\tterm_no_hyphen = ending_hyphen and rsub(term_no_hyphen, \"^(.-).$\"\
      , \"%1\") or term_no_hyphen\n\t\t\tterm = beginning_dhyph .. term_no_hyphen .. ending_dhyph\n\t\tend\n\telse\n\t\terror(\"Internal error: Bad affix type \" .. affix_type)\n\tend\n\t\n\treturn reconstructed .. term\nend\n\nreturn export\n\n-- For Vim, so\
      \ we get 4-space tabs\n-- vim: set ts=4 sw=4 noet:</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T12:52:51.371Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Alinks&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=38764 t=1556369571249960
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:51 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1285.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1089 pass, cp3032 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 154466802, 492089851, 442945247
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"3935515\" pageid=\"3935515\" ns=\"828\" title=\"Module:links\"><revisions><rev user=\"Rua\" timestamp=\"2019-04-03T18:59:00Z\" contentformat=\"\
      text/plain\" contentmodel=\"Scribunto\" comment=\"\" xml:space=\"preserve\">local export = {}\n\n--[=[\n\t[[Unsupported titles]] and pages with high\n\tmemory usage are listed at [[Module:links/data]].\n\t\n\tOther modules used:\n\t\t[[Module:script utilities]]\n\
      \t\t[[Module:scripts]]\n\t\t[[Module:languages]] and its submodules\n\t\t[[Module:gender and number]]\n\t\t[[Module:utilities]]\n\t\t[[Module:string]]\n\t\t[[Module:debug]]\n]=]\n\n-- These are prefixed with u to avoid confusion with the default string\
      \ methods\n-- of the same name.\nlocal usub = mw.ustring.sub\n\nlocal table_insert = table.insert\nlocal table_concat = table.concat\n\nlocal ignore_cap = {\n\t[\"ko\"] = true,\n}\n\nlocal phonetic_extraction = {\n\t[\"th\"] = \"Module:th\",\n\t[\"km\"\
      ] = \"Module:km\",\n}\n\nlocal pos_tags = {\n\t[\"a\"] = \"adjective\",\n\t[\"adv\"] = \"adverb\",\n\t[\"int\"] = \"interjection\",\n\t[\"n\"] = \"noun\",\n\t[\"pron\"] = \"pronoun\",\n\t[\"v\"] = \"verb\",\n\t[\"vi\"] = \"intransitive verb\",\n\t[\"vt\"\
      ] = \"transitive verb\",\n\t[\"vti\"] = \"transitive and intransitive verb\",\n}\n\nlocal unsupported_titles\nfunction export.getLinkPage(target, lang)\n\tunsupported_titles = unsupported_titles or mw.loadData(\"Module:links/data\").unsupported_titles\n\
      \tif unsupported_titles[target] then\n\t\treturn \"Unsupported titles/\" .. unsupported_titles[target]\n\tend\n\t\n\t-- If the link contains unexpanded template parameters, then don't create a link.\n\tif target:find(\"{{{\") then\n\t\treturn nil\n\tend\n\
      \t\n\tif target:sub(1, 1) == \":\" or target:sub(1, 2) == \"w:\" or target:sub(1, 10) == \"wikipedia:\" then\n\t\treturn target\n\tend\n\t\n\t-- Remove diacritics from the page name\n\ttarget = lang:makeEntryName(target)\n\t\n\tif target:sub(1, 1) == \"\
      /\" then\n\t\treturn \":\" .. target\n\t\n\t-- Link to appendix for reconstructed terms and terms in appendix-only languages\n\telseif target:sub(1, 1) == \"*\" and #target &gt; 1 then\n\t\tif lang:getCode() == \"und\" then\n\t\t\treturn nil\n\t\tend\n\
      \t\t\n\t\ttarget = \"Reconstruction:\" .. lang:getCanonicalName() .. \"/\" .. usub(target, 2)\n\telseif lang:getType() == \"reconstructed\" then\n\t\terror(\"The specified language \" .. lang:getCanonicalName()\n\t\t\t.. \" is unattested, while the given\
      \ word is not marked with '*' to indicate that it is reconstructed\")\n\telseif lang:getType() == \"appendix-constructed\" then\n\t\ttarget = \"Appendix:\" .. lang:getCanonicalName() .. \"/\" .. target\n\tend\n\t\n\treturn target\nend\n\n-- Make a language-specific\
      \ link from given link's parts\nlocal function makeLangLink(link, lang, id, allowSelfLink)\n\t-- Temporary tracking code\n\tlocal langCode = lang:getCode()\n\tif langCode == \"se\" or langCode == \"sia\" or langCode:find(\"^sm[ajns]$\")\n\t\t\tor langCode:find(\"\
      ^sj[dektu]$\") then\n\t\tif link.display and link.display:find(\"'\") then\n\t\t\trequire(\"Module:debug\").track(\"links/Sami apostrophe display\")\n\t\telseif link.target and link.target:find(\"'\") then\n\t\t\trequire(\"Module:debug\").track(\"links/Sami\
      \ apostrophe target\")\n\t\tend\n\tend\n\t\n\t-- Find fragments (when link didn't come from parseLink).\n\t-- Prevents {{l|en|word#Etymology 2|word}} from linking to [[word#Etymology 2#English]].\n\tif link.fragment == nil then\n\t\t-- Replace numeric\
      \ character references with the corresponding character (&amp;#29; → '),\n\t\t-- as they contain #, which causes the numeric character reference to be\n\t\t-- misparsed (wa'a → wa&amp;#29;a → pagename wa&amp;, fragment 29;a).\n\t\tlink.target = link.target:gsub(\"\
      &amp;#(%d+);\",\n\t\t\tfunction(number) return mw.ustring.char(tonumber(number)) end)\n\t\tlocal first, second = link.target:match(\"^([^#]+)#(.+)$\")\n\t\tif first then\n\t\t\tlink.target, link.fragment = first, second\n\t\tend\n\tend\n\t\n\t-- If there\
      \ is no display form, then create a default one\n\tif not link.display then\n\t\tlink.display = link.target\n\t\t\n\t\t-- Strip the prefix from the displayed form\n\t\t-- TODO: other interwiki links?\n\t\tif link.display:sub(1, 1) == \":\" and not mw.loadData(\"\
      Module:links/data\").unsupported_titles[link.display] then\n\t\t\tlink.display = link.display:sub(2) -- remove colon from beginning\n\t\telse\n\t\t\tlocal prefix = link.display:match(\"^([^:]+):\")\n\t\t\tlocal prefixes = {\n\t\t\t\tw = true,\n\t\t\t\t\
      wikipedia = true,\n\t\t\t}\n\t\t\t\n\t\t\tif prefixes[prefix] then\n\t\t\t\tlink.display = link.display:sub(#prefix + 2) -- remove prefix plus colon\n\t\t\tend\n\t\tend\n\tend\n\t\n\t-- Process the target\n\tlink.target = export.getLinkPage(link.target,\
      \ lang)\n\t\n\tif not link.target then\n\t\treturn link.display\n\tend\n\t\n\t-- If the target is the same as the current page and there is no sense id\n\t-- and linking to the same page hasn't been turned on, then return a \"self-link\"\n\t-- like the\
      \ software does.\n\tif not (allowSelfLink or id) and link.target:gsub(\"^:\", \"\") == mw.title.getCurrentTitle().prefixedText then\n\t\treturn \"&lt;strong class=\\\"selflink\\\"&gt;\" .. link.display .. \"&lt;/strong&gt;\"\n\tend\n\t\n\t--[[\n\t\tAdd\
      \ fragment\n\t\tDo not add a section link to \"Undetermined\", as such sections do not exist and are invalid.\n\t\tTabbedLanguages handles links without a section by linking to the \"last visited\" section,\n\t\tbut adding \"Undetermined\" would break\
      \ that feature.\n\t\tFor localized prefixes that make syntax error, please use the format: [\"xyz\"] = true,\n\t]]\n\tlocal prefix = link.target:match(\"^:?([^:]+):\")\n\tlocal prefixes = {\n\t\tw = true,\n\t\twikipedia = true,\n\t\tCategory = true,\n\t\
      }\n\t\n\tif not prefixes[prefix] then\n\t\tif link.fragment or link.target:find(\"#$\") then\n\t\t\trequire(\"Module:debug\").track {\n\t\t\t\t\"links/fragment\",\n\t\t\t\t\"links/fragment/\" .. lang:getCode()\n\t\t\t}\n\t\tend\n\t\t\n\t\tif not link.fragment\
      \ and lang:getCode() ~= \"und\" then\n\t\t\tif id then\n\t\t\t\tlink.fragment = require(\"Module:utilities\").make_id(lang, id)\n\t\t\telseif not mw.ustring.find(link.target, \"^Appendix:\")\n\t\t\t\t\tand not mw.ustring.find(link.target, \"^Reconstruction:\"\
      ) then\n\t\t\t\tlink.fragment = lang:getCanonicalName()\n\t\t\tend\n\t\tend\n\t\t\n\t\t-- This allows linking to pages like [[sms:a]] without it being treated weirdly.\n\t\tlink.target = link.target:gsub(\":\", \"&amp;#x3a;\")\n\tend\n\t\n\treturn \"[[\"\
      \ .. link.target .. (link.fragment and \"#\" .. link.fragment or \"\") .. \"|\" .. link.display .. \"]]\"\nend\n\n\n-- Split a link into its parts\nlocal function parseLink(linktext)\n\tlocal link = { target = linktext }\n\tlocal first, second = link.target:match(\"\
      ^([^|]+)|(.+)$\")\n\t\n\tif first then\n\t\tlink.target = first\n\t\tlink.display = second\n\telse\n\t\tlink.display = link.target\n\tend\n\t\n\tfirst, second = link.target:match(\"^(.+)#(.+)$\")\n\t\n\tif first then\n\t\tlink.target = first\n\t\tlink.fragment\
      \ = second\n\telse\n\t\t-- So that makeLangLink does not look for a fragment again\n\t\tlink.fragment = false\n\tend\n\t\n\treturn link\nend\n\n\n-- Creates a basic wikilink to the given term. If the text already contains\n-- links, these are replaced\
      \ with links to the correct section.\nfunction export.language_link(data, allowSelfLink, dontLinkRecons)\n\tif type(data) ~= \"table\" then\n\t\terror(\"The first argument to the function language_link must be a table. See Module:links/documentation for\
      \ more information.\")\n\tend\n\t\n\tlocal text = data.term\n\t\n\tif ignore_cap[data.lang:getCode()] and text then\n\t\ttext = text:gsub(\"%^\", \"\")\n\tend\n\t\n\t-- If the text begins with * and another character,\n\t-- then act as if each link begins\
      \ with *\n\tlocal allReconstructed = false\n\t\n\tif text:find(\"^*.\") then\n\t\tallReconstructed = true\n\tend\n\t\n\t-- Do we have embedded wikilinks?\n\tif text:find(\"[[\", nil, true) then\n\t\t--[=[\n\t\t[[Special:WhatLinksHere/Template:tracking/links/alt-ignored]]\n\
      \t\t[[Special:WhatLinksHere/Template:tracking/links/id-ignored]]\n\t\t]=]\n\t\t\n\t\tif data.alt then\n\t\t\trequire(\"Module:debug\").track(\"links/alt-ignored\")\n\t\t\tmw.log(\"(from Module:links)\", \"text with embedded wikilinks:\", text,\n\t\t\t\t\
      \"ignored alt:\", data.alt, \"lang:\", data.lang:getCode())\n\t\tend\n\t\t\n\t\tif data.id then\n\t\t\trequire(\"Module:debug\").track(\"links/id-ignored\")\n\t\t\tmw.log(\"(from Module:links)\", \"text with embedded wikilinks:\", text,\n\t\t\t\t\"ignored\
      \ id:\", data.id, \"lang:\", data.lang:getCode())\n\t\tend\n\t\t\n\t\t-- Begins and ends with a wikilink tag\n\t\tif text:find(\"^%[%[(.+)%]%]$\") then\n\t\t\t-- There are no [ ] in between.\n\t\t\t-- This makes the wikilink tag redundant.\n\t\t\tif text:find(\"\
      ^%[%[[^%[%]]+%]%]$\") then\n\t\t\t\trequire(\"Module:debug\").track(\"links/redundant wikilink\")\n\t\t\telse\n\t\t\t\tlocal temp = text:gsub(\"^%[%[(.+)%]%]$\", \"%1\")\n\t\t\t\ttemp = temp:gsub(\"%]%], %[%[\", \"|\")\n\t\t\t\t\n\t\t\t\tif not temp:find(\"\
      [%[%]]\") then\n\t\t\t\t\trequire(\"Module:debug\").track(\"links/list\")\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\t\n\t\ttext = text:gsub(\"%[%[([^%]]+)%]%]\",\n\t\t\tfunction(linktext)\n\t\t\t\tlocal link = parseLink(linktext)\n\t\t\t\t\n\t\t\t\tif allReconstructed\
      \ then\n\t\t\t\t\tlink.target = \"*\" .. link.target\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\treturn makeLangLink(link, data.lang, data.id, allowSelfLink, dontLinkRecons)\n\t\t\tend)\n\t\t\n\t\t-- Remove the extra * at the beginning if it's immediately followed\n\
      \t\t-- by a link whose display begins with * too\n\t\tif allReconstructed then\n\t\t\ttext = text:gsub(\"^%*%[%[([^|%]]+)|%*\", \"[[%1|*\")\n\t\tend\n\telse\n\t\t-- There is no embedded wikilink, make a link using the parameters.\n\t\ttext = makeLangLink({\
      \ target = text, display = data.alt }, data.lang, data.id, allowSelfLink, dontLinkRecons)\n\tend\n\t\n\treturn text\nend\n\nfunction export.mark(text, itemType, face, lang)\n\tlocal tag = { \"\", \"\" }\n\t\n\tif itemType == \"gloss\" then\n\t\ttag = {\
      \ '&lt;span class=\"mention-gloss-double-quote\"&gt;“&lt;/span&gt;&lt;span class=\"mention-gloss\"&gt;',\n\t\t\t'&lt;/span&gt;&lt;span class=\"mention-gloss-double-quote\"&gt;”&lt;/span&gt;' }\n\telseif itemType == \"tr\" then\n\t\tif face == \"term\"\
      \ then\n\t\t\ttag = { '&lt;span lang=\"' .. lang:getCode() .. '\" class=\"tr mention-tr Latn\"&gt;',\n\t\t\t\t'&lt;/span&gt;' }\n\t\telse\n\t\t\ttag = { '&lt;span lang=\"' .. lang:getCode() .. '\" class=\"tr Latn\"&gt;', '&lt;/span&gt;' }\n\t\tend\n\t\
      elseif itemType == \"ts\" then\n\t\ttag = { '&lt;span class=\"ts mention-ts Latn\"&gt;/', '/&lt;/span&gt;' }\n\telseif itemType == \"pos\" then\n\t\ttag = { '&lt;span class=\"ann-pos\"&gt;', '&lt;/span&gt;' }\n\telseif itemType == \"annotations\" then\n\
      \t\ttag = { '&lt;span class=\"mention-gloss-paren annotation-paren\"&gt;(&lt;/span&gt;',\n\t\t\t'&lt;span class=\"mention-gloss-paren annotation-paren\"&gt;)&lt;/span&gt;' }\n\tend\n\t\n\tif type(text) == \"string\" then\n\t\treturn tag[1] .. text .. tag[2]\n\
      \telse\n\t\treturn \"\"\n\tend\nend\n\n-- Format the annotations (things following the linked term)\nfunction export.format_link_annotations(data, face)\n\tlocal output = {}\n\t\n\t-- Interwiki link\n\tif data.interwiki then\n\t\ttable_insert(output, data.interwiki)\n\
      \tend\n\t\n\t-- Genders\n\tif type(data.genders) ~= \"table\" then\n\t\tdata.genders = { data.genders }\n\tend\n\t\n\tif data.genders and #data.genders &gt; 0 then\n\t\tlocal m_gen = require(\"Module:gender and number\")\n\t\ttable_insert(output, \"&amp;nbsp;\"\
      \ .. m_gen.format_list(data.genders, data.lang))\n\tend\n\t\n\tlocal annotations = {}\n\t\n\t-- Transliteration and transcription\n\tif data.tr or data.ts then\n\t\tlocal kind\n\t\tif face == \"term\" then\n\t\t\tkind = face\n\t\telse\n\t\t\tkind = \"\
      default\"\n\t\tend\n\t\t\n\t\tif data.tr and data.ts then\n\t\t\ttable_insert(annotations,\n\t\t\t\trequire(\"Module:script utilities\").tag_translit(data.tr, data.lang, kind)\n\t\t\t\t.. \" \" .. export.mark(data.ts, \"ts\"))\n\t\telseif data.ts then\n\
      \t\t\ttable_insert(annotations, export.mark(data.ts, \"ts\"))\n\t\telse\n\t\t\ttable_insert(annotations,\n\t\t\t\trequire(\"Module:script utilities\").tag_translit(data.tr, data.lang, kind))\n\t\tend\n\tend\n\t\n\t-- Gloss/translation\n\tif data.gloss\
      \ then\n\t\ttable_insert(annotations, export.mark(data.gloss, \"gloss\"))\n\tend\n\t\n\t-- Part of speech\n\tif data.pos then\n\t\t-- debug category for pos= containing transcriptions\n\t\tif data.pos:find(\"/[^&gt;&lt;]*/\") then\n\t\t\tdata.pos = data.pos\
      \ .. \"[[Category:links likely containing transcriptions in pos]]\"\n\t\tend\n\n\t\ttable_insert(annotations, export.mark(pos_tags[data.pos] or data.pos, \"pos\"))\n\tend\n\t\n\t-- Literal/sum-of-parts meaning\n\tif data.lit then\n\t\ttable_insert(annotations,\
      \ \"literally \" .. export.mark(data.lit, \"gloss\"))\n\tend\n\t\n\tif #annotations &gt; 0 then\n\t\ttable_insert(output, \" \" .. export.mark(table_concat(annotations, \", \"), \"annotations\"))\n\tend\n\t\n\treturn table_concat(output)\nend\n\n-- A version\
      \ of {{l}} or {{m}} that can be called from other modules too\nfunction export.full_link(data, face, allowSelfLink, dontLinkRecons)\n\tif type(data) ~= \"table\" then\n\t\terror(\"The first argument to the function full_link must be a table. \"\n\t\t\t\
      .. \"See Module:links/documentation for more information.\")\n\tend\n\t\n\t-- Create the link\n\tlocal output = {}\n\tlocal categories = {}\n\tlocal link = \"\"\n\tlocal annotations\n\t\n\t--local m_utilities = require(\"Module:utilities\")\n\t\n\t-- Is\
      \ there any text to show?\n\tif (data.term or data.alt) then\n\t\t-- Try to detect the script if it was not provided\n\t\tif not data.sc then\n\t\t\tdata.sc = require(\"Module:scripts\").findBestScript(data.alt or data.term, data.lang)\n\t\telse\n\t\t\t\
      -- Track uses of sc parameter\n\t\t\tlocal best = require(\"Module:scripts\").findBestScript(data.alt or data.term, data.lang)\n\t\t\trequire(\"Module:debug\").track(\"links/sc\")\n\t\t\t\n\t\t\tif data.sc:getCode() == best:getCode() then\n\t\t\t\trequire(\"\
      Module:debug\").track(\"links/sc/redundant\")\n\t\t\t\trequire(\"Module:debug\").track(\"links/sc/redundant/\" .. data.sc:getCode())\n\t\t\telse\n\t\t\t\trequire(\"Module:debug\").track(\"links/sc/needed\")\n\t\t\t\trequire(\"Module:debug\").track(\"links/sc/needed/\"\
      \ .. data.sc:getCode())\n\t\t\tend\n\t\tend\n\t\t\n\t\tlocal class = \"\"\n\t\t\n\t\tif data.accel then\n\t\t\tlocal form = data.accel.form and data.accel.form .. \"-form-of\" or \"\"\n\t\t\tlocal gender = data.accel.gender and \"gender-\" .. data.accel.gender\
      \ or \"\"\n\t\t\tlocal translit = data.accel.translit and \"transliteration-\" .. data.accel.translit or \"\"\n\t\t\t-- This is decoded again by [[WT:ACCEL]].\n\t\t\tlocal lemma = data.accel.lemma and \"origin-\" .. data.accel.lemma:gsub(\"%%\", \".\"\
      ):gsub(\" \", \"_\") or \"\" \n\t\t\tlocal lemma_translit = data.accel.lemma_translit and \"origin-transliteration-\" .. data.accel.lemma_translit or \"\"\n\t\t\tlocal no_store = data.accel.no_store and \"form-of-nostore\" or \"\"\n\t\t\t\n\t\t\taccel\
      \ =\n\t\t\t\tform .. \" \" ..\n\t\t\t\tgender .. \" \" ..\n\t\t\t\ttranslit .. \" \" ..\n\t\t\t\tlemma .. \" \" ..\n\t\t\t\tlemma_translit .. \" \" ..\n\t\t\t\tno_store .. \" \"\n\t\t\t\n\t\t\tclass = \"form-of lang-\" .. data.lang:getCode() .. \" \" ..\
      \ accel\n\t\tend\n\t\t\n\t\t-- Only make a link if the term has been given, otherwise just show the alt text without a link\n\t\tlink = require(\"Module:script utilities\").tag_text(\n\t\t\tdata.term and export.language_link(data, allowSelfLink, dontLinkRecons)\n\
      \t\t\tor data.alt, data.lang, data.sc, face, class)\n\telse\n\t\t--[[\tNo term to show.\n\t\t\t\tIs there at least a transliteration we can work from?\t]]\n\t\tlink = require(\"Module:script utilities\").request_script(data.lang, data.sc)\n\t\t\n\t\tif\
      \ link == \"\" or not data.tr or data.tr == \"-\" then\n\t\t\t-- No link to show, and no transliteration either. Show a term request.\n\t\t\tlocal category = \"\"\n\t\t\t\n\t\t\tif mw.title.getCurrentTitle().nsText ~= \"Template\" then\n\t\t\t\ttable_insert(categories,\
      \ \"[[Category:\" .. data.lang:getCanonicalName() .. \" term requests]]\")\n\t\t\tend\n\t\t\t\n\t\t\tlink = \"&lt;small&gt;[Term?]&lt;/small&gt;\"\n\t\tend\n\tend\n\t\n\ttable_insert(output, link)\n\t\n\tif data.tr == \"\" or data.tr == \"-\" then\n\t\t\
      data.tr = nil\n\t\n\telseif phonetic_extraction[data.lang:getCode()] then\n\t\tlocal m_phonetic = require(phonetic_extraction[data.lang:getCode()])\n\t\tdata.tr = data.tr or m_phonetic.getTranslit(export.remove_links(data.term))\n\t\n\telseif (data.term\
      \ or data.alt) and not data.sc:getCode():find(\"Lati?n\") then\n\t\t\n\t\t-- Try to generate a transliteration, unless transliteration has been\n\t\t-- supplied and we are in a high-memory entry.\n\t\tif not (data.tr and mw.loadData(\"Module:links/data\"\
      ).high_memory_entries[mw.title.getCurrentTitle().text]) then\n\t\t\tlocal automated_tr = data.lang:transliterate(export.remove_links(data.alt or data.term), data.sc)\n\t\t\t\n\t\t\tif automated_tr then\n\t\t\t\tlocal manual_tr = data.tr\n\t\t\t\t\n\t\t\
      \t\tif manual_tr then\n\t\t\t\t\tif manual_tr == automated_tr then\n\t\t\t\t\t\ttable_insert(categories,\n\t\t\t\t\t\t\t\"[[Category:Terms with redundant transliterations]]\"\n\t\t\t\t\t\t\t\t\t.. \"[[Category:Terms with redundant transliterations/\" ..\
      \ data.lang:getCode() .. \"]]\")\n\t\t\t\t\telse\n\t\t\t\t\t\t-- Prevents Arabic root categories from flooding the tracking categories.\n\t\t\t\t\t\tif mw.title.getCurrentTitle().nsText ~= \"Category\" then\n\t\t\t\t\t\t\ttable_insert(categories,\n\t\t\
      \t\t\t\t\t\t\"[[Category:Terms with manual transliterations different from the automated ones]]\"\n\t\t\t\t\t\t\t\t\t\t.. \"[[Category:Terms with manual transliterations different from the automated ones/\" .. data.lang:getCode() .. \"]]\")\n\t\t\t\t\t\
      \tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\tif (not manual_tr) or data.lang:overrideManualTranslit() then\n\t\t\t\t\tdata.tr = automated_tr\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\t\n\t-- Link to the transliteration entry for languages that\
      \ require this\n\tif data.tr and data.lang:link_tr() then\n\t\tdata.tr = export.language_link { lang = data.lang, term = data.tr }\n\tend\n\t\n\ttable_insert(output, export.format_link_annotations(data, face))\n\t\n\treturn table_concat(output) .. table_concat(categories)\n\
      end\n\n\n--[[\tStrips links: deletes category links,\n\t\tthe targets of piped links,\n\t\tand all double square brackets.\t\t\t]]\nfunction export.remove_links(text)\n\tif type(text) == \"table\" then\n\t\ttext = text.args[1]\n\tend\n\t\n\tif not text\
      \ or text == \"\" then\n\t\treturn \"\"\n\tend\n\t\n\ttext = mw.ustring.gsub(text, \"%[%[Category:[^|%]]-|?[^|%]]-%]%]\", \"\")\n\ttext = text:gsub(\"%[%[[^|%]]-|\", \"\")\n\ttext = text:gsub(\"%[%[\", \"\")\n\ttext = text:gsub(\"%]%]\", \"\")\n\t\n\t\
      return text\nend\n\nfunction export.english_links(text)\n\tlocal lang = require(\"Module:languages\").getByCode(\"en\")\n\t\n\t-- Parentheses around function call to remove second return value, the\n\t-- number of replacements.\n\treturn (text:gsub(\"\
      %[%[([^%]]+)%]%]\",\n\t\tfunction(linktext)\n\t\t\tlocal link = parseLink(linktext)\n\t\t\treturn makeLangLink(link, lang, nil, true, false)\n\t\tend))\nend\n\nfunction export.light_link(data)\n\tlocal language_names = mw.loadData(\"Module:languages/code\
      \ to canonical name\")\n\tlocal script_codes = mw.loadData(\"Module:scripts/codes\")\n\t\n\tif data.langCode then\n\t\tdata.langName = language_names[data.langCode] or error('The language code \"' .. data.langCode .. '\" is not recognized.')\n\telse\n\t\
      \terror('Language code is required.')\n\tend\n\t\n\tif not data.term then\n\t\terror('Term to link to is required.')\n\tend\n\t\n\tif data.scCode then\n\t\tif not script_codes[data.scCode] then\n\t\t\terror('The script code \"' .. data.sc .. '\" is not\
      \ recognized.')\n\t\tend\n\telse\n\t\terror(\"The function light_link requires a script code.\")\n\tend\n\t\n\tlocal fragment\n\tif data.id then\n\t\tfragment = data.langName .. \"-\" .. mw.uri.encode(data.id, \"WIKI\")\n\telse\n\t\tfragment = data.langName\n\
      \tend\n\t\n\treturn table_concat {\n\t\t'&lt;span class=\"', data.scCode, '\" lang=\"', data.langCode,\n\t\t'\"&gt;[[', data.term, \"#\", fragment, \"|\", (data.alt or data.term), \"]]&lt;/span&gt;\"\n\t}\nend\n\n--[=[\n\tFor example, Norwegian_Bokm.C3.A5l\
      \ → Norwegian_Bokmål. 0xC3 and 0xA5 are the\n\thexadecimal-base representation of the two bytes used to encode the character\n\tå in the UTF-8 encoding:\n\t\t11000011 10100101\n\t\n\tNote that the bytes used to represent a character are actually different\
      \ from\n\tthe Unicode codepoint. For å, the codepoint is 0xE5. The bits (digits) that\n\tactually spell the codepoint are found in the brackets: 110[00011] 10[100101].\n\tFor further explanation, see [[w:UTF-8#Description]].\n]=]\n\n-- The character class\
      \ %x should not be used, as it includes the characters a-f,\n-- which do not occur in these anchor encodings.\nlocal capitalHex = \"[0-9A-F]\"\n\nlocal function decodeAnchor(anchor)\n\treturn (anchor:gsub(\"%.(\" .. capitalHex .. capitalHex .. \")\",\n\
      \t\tfunction(hexByte)\n\t\t\treturn string.char(tonumber(hexByte, 16))\n\t\tend))\nend\n\nfunction export.section_link(link)\n\tif type(link) ~= \"string\" then\n\t\terror(\"The first argument to section_link was a \" .. type(link) .. \", but it should\
      \ be a string.\")\n\tend\n\t\n\tlink = link:gsub(\"_\", \" \")\n\t\n\tlocal numberSigns = require(\"Module:string\").count(link, \"#\")\n\t\n\tif numberSigns &gt; 1 then\n\t\terror(\"The section link should only contain one number sign (#).\")\n\tend\n\
      \t\n\tlocal page, section = link:match(\"^([^#]+)#(.+)$\")\n\t\n\tif page and section then\n\t\tsection = decodeAnchor(section)\n\t\t\n\t\t-- URI-encode (percent-encode) section to allow square brackets, [],\n\t\t-- in section name. If not percent-encoded,\
      \ they prevent the parser from\n\t\t-- recognizing the link.\n\t\treturn table_concat { \"[[\", page, \"#\", mw.uri.encode(section, \"WIKI\"), \"|\", page, \" § \", section, \"]]\" }\n\telse\n\t\terror('The function \"' .. section_link .. '\" could not\
      \ find a number sign marking a section name.')\n\tend\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T12:52:51.597Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Autilities&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=56750 t=1556369571466317
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:51 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1284.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1079 pass, cp3030 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 432819810, 128940344, 452342442
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"4073440\" pageid=\"4073440\" ns=\"828\" title=\"Module:utilities\"><revisions><rev user=\"Erutuon\" timestamp=\"2017-10-30T22:40:37Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"pipe doesn&#039;t have to be escaped\" xml:space=\"preserve\">local export = {}\n\nlocal data = mw.loadData(\"Module:utilities/data\")\nlocal notneeded = data.notneeded\nlocal neededhassubpage\
      \ = data.neededhassubpage\n\n-- A helper function to escape magic characters in a string\n-- Magic characters: ^$()%.[]*+-?\nfunction export.pattern_escape(text)\n\tif type(text) == \"table\" then\n\t\ttext = text.args[1]\n\tend\n\ttext = mw.ustring.gsub(text,\
      \ \"([%^$()%%.%[%]*+%-?])\", \"%%%1\")\n\treturn text\nend\n\nfunction export.plain_gsub(text, pattern, replacement)\n\tlocal invoked = false\n\t\n\tif type(text) == \"table\" then\n\t\tinvoked = true\n\t\t\n\t\tif text.args then\n\t\t\tlocal frame = text\n\
      \t\t\t\n\t\t\tlocal params = {\n\t\t\t\t[1] = {},\n\t\t\t\t[2] = {},\n\t\t\t\t[3] = { allow_empty = true },\n\t\t\t}\n\t\t\t\n\t\t\tlocal args = require(\"Module:parameters\").process(frame.args, params)\n\t\t\t\n\t\t\ttext = args[1]\n\t\t\tpattern = args[2]\n\
      \t\t\treplacement = args[3]\n\t\telse\n\t\t\terror(\"If the first argument to plain_gsub is a table, it should be a frame object.\")\n\t\tend\n\telse\n\t\tif not ( type(pattern) == \"string\" or type(pattern) == \"number\" ) then\n\t\t\terror(\"The second\
      \ argument to plain_gsub should be a string or a number.\")\n\t\tend\n\t\t\n\t\tif not ( type(replacement) == \"string\" or type(replacement) == \"number\" ) then\n\t\t\terror(\"The third argument to plain_gsub should be a string or a number.\")\n\t\t\
      end\n\tend\n\t\n\tpattern = export.pattern_escape(pattern)\n\t\n\tif invoked then\n\t\ttext = mw.ustring.gsub(text, pattern, replacement)\n\t\treturn text\n\telse\n\t\treturn mw.ustring.gsub(text, pattern, replacement)\n\tend\nend\n\n--[[\nFormat the categories\
      \ with the appropriate sort key. CATEGORIES is a list of\ncategories.\n\t-- LANG is an object encapsulating a language; if nil, the object for\n\t   language code 'und' (undetermined) will be used.\n\t-- SORT_KEY is placed in the category invocation, and\
      \ indicates how the\n\t   page will sort in the respective category. Normally this should be nil,\n\t   and a default sort key based on the subpage name (the part after the\n\t   colon) will be used.\n\t-- SORT_BASE lets you override the default sort key\
      \ used when SORT_KEY is\n\t   nil. Normally, this should be nil, and a language-specific default sort\n\t   key is computed from the subpage name (e.g. for Russian this converts\n\t   Cyrillic ё to a string consisting of Cyrillic е followed by U+10FFFF,\n\
      \t   so that effectively ё sorts after е instead of the default Wikimedia\n\t   sort, which (I think) is based on Unicode sort order and puts ё after я,\n\t   the last letter of the Cyrillic alphabet.\n\t-- FORCE_OUTPUT forces normal output in all namespaces.\
      \ Normally, nothing\n\t   is output if the page isn't in the main, Appendix:, Reconstruction: or\n\t   Citations: namespaces.\n]]\nfunction export.format_categories(categories, lang, sort_key, sort_base, force_output, sc)\n\tlocal NAMESPACE = mw.title.getCurrentTitle().nsText\n\
      \t\n\tif type(lang) == \"table\" and not lang.getCode then\n\t\terror(\"The second argument to format_categories should be a language object.\")\n\tend\n\t\n\tif force_output or data.allowedNamespaces[NAMESPACE] then\n\t\tlocal PAGENAME = mw.title.getCurrentTitle().text\n\
      \t\tlocal SUBPAGENAME = mw.title.getCurrentTitle().subpageText\n\t\t\n\t\tif not lang then\n\t\t\tlang = require(\"Module:languages\").getByCode(\"und\")\n\t\tend\n\t\t\n\t\t-- Generate a default sort key\n\t\tsort_base = lang:makeSortKey(sort_base or\
      \ SUBPAGENAME, sc)\n\t\t\n\t\tif sort_key and sort_key ~= \"\" then\n\t\t\t-- Gather some statistics regarding sort keys\n\t\t\tif mw.ustring.upper(sort_key) == sort_base then\n\t\t\t\ttable.insert(categories, \"Sort key tracking/redundant\")\n\t\t\tend\n\
      \t\telse\n\t\t\tsort_key = sort_base\n\t\tend\n\t\t\n\t\t--[[\tIf the resulting key is the same as the wiki software's\n\t\t\t\tdefault, or if the sortkey is empty, remove it\t\t\t ]]\n\t\tif sort_key == PAGENAME or sort_key == \"\" then\n\t\t\tsort_key\
      \ = nil\n\t\tend\n\t\t\n\t\tlocal out_categories = {}\n\t\tfor key, cat in ipairs(categories) do\n\t\t\tout_categories[key] = \"[[Category:\" .. cat .. (sort_key and \"|\" .. sort_key or \"\") .. \"]]\"\n\t\tend\n\t\t\n\t\treturn table.concat(out_categories,\
      \ \"\")\n\telse\n\t\treturn \"\"\n\tend\nend\n\n-- Used by {{categorize}}\nfunction export.template_categorize(frame)\n\tlocal NAMESPACE = mw.title.getCurrentTitle().nsText\n\tlocal format = frame.args[\"format\"]\n\tlocal args = frame:getParent().args\n\
      \t\n\tlocal langcode = args[1]; if langcode == \"\" then langcode = nil end\n\tlocal sort_key = args[\"sort\"]; if sort_key == \"\" then sort_key = nil end\n\tlocal categories = {}\n\t\n\tif not langcode then\n\t\tif NAMESPACE == \"Template\" then return\
      \ \"\" end\n\t\terror(\"Language code has not been specified. Please pass parameter 1 to the template.\")\n\tend\n\t\n\tlocal lang = require(\"Module:languages\").getByCode(langcode)\n\t\n\tif not lang then\n\t\tif NAMESPACE == \"Template\" then return\
      \ \"\" end\n\t\terror(\"The language code \\\"\" .. langcode .. \"\\\" is not valid.\")\n\tend\n\t\n\tlocal prefix = \"\"\n\t\n\tif format == \"pos\" then\n\t\tprefix = lang:getCanonicalName() .. \" \"\n\telseif format == \"topic\" then\n\t\tprefix = lang:getCode()\
      \ .. \":\"\n\tend\n\t\n\tlocal i = 2\n\tlocal cat = args[i]\n\t\n\twhile cat do\n\t\tif cat ~= \"\" then\n\t\t\ttable.insert(categories, prefix .. cat)\n\t\tend\n\t\t\n\t\ti = i + 1\n\t\tcat = args[i]\n\tend\n\t\n\treturn export.format_categories(categories,\
      \ lang, sort_key)\nend\n\nfunction export.catfix(lang, sc)\n\tif not lang then\n\t\trequire(\"Module:debug\").track(\"catfix/no lang\")\n\t\treturn nil\n\telseif type(lang) ~= \"table\" then\n\t\trequire(\"Module:debug\").track(\"catfix/lang not table\"\
      )\n\t\treturn nil\n\tend\n\tlocal canonicalName = lang:getCanonicalName() or error('The first argument to the function \"catfix\" should be a language object from Module:languages.')\n\t\n\tif sc and not sc.getCode then\n\t\terror('The second argument\
      \ to the function \"catfix\" should be a script object from Module:scripts.')\n\tend\n\t\n\t-- To add script classes to links on pages created by category boilerplate templates.\n\tif not sc then\n\t\tsc = data.catfix_scripts[lang:getCode()]\n\t\tif sc\
      \ then\n\t\t\tsc = require(\"Module:scripts\").getByCode(sc)\n\t\tend\n\tend\n\t\n\treturn \"&lt;span id=\\\"catfix\\\" style=\\\"display:none;\\\" class=\\\"CATFIX-\" .. mw.uri.anchorEncode(canonicalName) .. \"\\\"&gt;\" ..\n\t\trequire(\"Module:script\
      \ utilities\").tag_text(\"&amp;nbsp;\", lang, sc, nil) ..\n\t\t\"&lt;/span&gt;\"\nend\n\nfunction export.catfix_template(frame)\n\tlocal params = {\n\t\t[1] = {},\n\t\t[2] = { alias_of = \"sc\" },\n\t\t[\"sc\"] = {},\n\t}\n\t\n\tlocal args = require(\"\
      Module:parameters\").process(frame:getParent().args, params)\n\t\n\tlocal lang = require(\"Module:languages\").getByCode(args[1]) or require(\"Module:languages\").err(args[1], 1)\n\t\n\tlocal sc = args.sc\n\tif sc then\n\t\tsc = require(\"Module:scripts\"\
      ).getByCode(sc) or error('The script code \"' .. sc .. '\", provided in the second parameter, is not valid.')\n\tend\n\t\n\treturn export.catfix(lang, sc)\nend\n\n-- Not exporting because it is not used yet.\nlocal function getDateTense(frame) \n\tlocal\
      \ name_num_mapping = {[\"January\"] = 1, [\"February\"] = 2, [\"March\"] = 3, [\"April\"] = 4, [\"May\"] = 5, [\"June\"] = 6, \n\t\t[\"July\"] = 7, [\"August\"] = 8, [\"September\"] = 9, [\"October\"] = 10, [\"November\"] = 11, [\"December\"] = 12, \n\t\
      \t[1] = 1, [2] = 2, [3] = 3, [4] = 4, [5] = 5, [6] = 6, [7] = 7, [8] = 8, [9] = 9, [10] = 10, [11] = 11, [12] = 12}\n\tlocal month = name_num_mapping[frame.args[2]]\n\tlocal date = os.time({year = frame.args[1], day = frame.args[3], month = month})\n\t\
      local today = os.time() -- 12 AM/PM\n\tlocal diff = os.difftime(date, today)\n\tlocal daylength = 24 * 3600\n\t\n\tif diff &lt; -daylength / 2 then return \"past\"\n\telse \n\t\tif diff &gt; daylength / 2  then return \"future\"\n\t\telse return \"present\"\
      \ end\n\tend\nend\n\nfunction export.make_id(lang, str)\n\t--[[\tIf called with invoke, first argument is a frame object.\n\t\t\tIf called by a module, first argument is a language object. ]]\n\tlocal invoked = false\n\t\n\tif type(lang) == \"table\" then\n\
      \t\tif lang.args then\n\t\t\tinvoked = true\n\t\t\t\n\t\t\tlocal frame = lang\n\t\t\t\n\t\t\tlocal params = {\n\t\t\t\t[1] = {},\n\t\t\t\t[2] = {},\n\t\t\t}\n\t\t\t\n\t\t\tlocal args = require(\"Module:parameters\").process(frame:getParent().args, params)\n\
      \t\t\t\n\t\t\tlocal langCode = args[1]\n\t\t\tstr = args[2]\n\t\t\t\n\t\t\tlocal m_languages = require(\"Module:languages\")\n\t\t\t\n\t\t\tlang = m_languages.getByCode(langCode) or m_languages.err(langCode, 1)\n\t\telseif not lang.getCanonicalName then\n\
      \t\t\terror(\"The first argument to make_id should be a language object.\")\n\t\tend\n\tend\n\n\tif not ( type(str) == \"string\" or type(str) == \"number\" ) then\n\t\terror(\"The second argument to make_id should be a string or a number.\")\n\tend\n\t\
      \n\tlocal canonicalName = lang:getCanonicalName()\n\t\n\tstr = mw.uri.encode(str, \"WIKI\")\n\t\n\tlocal id = canonicalName .. \"-\" .. str\n\t\n\tif invoked then\n\t\treturn '&lt;li class=\"senseid\" id=\"' .. id .. '\"&gt;'\n\telse\n\t\treturn id\n\t\
      end\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T12:52:51.814Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Autilities%2Fdata&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=64658 t=1556369571682849
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:51 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1317.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1081 pass, cp3041 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 353109853, 313231326, 450742045
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"6279245\" pageid=\"6279245\" ns=\"828\" title=\"Module:utilities/data\"><revisions><rev user=\"Erutuon\" timestamp=\"2019-01-04T05:57:22Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"Undo revision 51192985 by [[Special:Contributions/2601:CD:C101:322D:F03C:8688:907:84|2601:CD:C101:322D:F03C:8688:907:84]] ([[User talk:2601:CD:C101:322D:F03C:8688:907:84|talk]]): ???\"\
      \ xml:space=\"preserve\">local data = {}\n\ndata.notneeded = {\n\t[\"und\"] = true,\n\t[\"cmn\"] = true,\n\t[\"ja\"] = true,\n\t[\"zu\"] = true,\n\t[\"nan\"] = true,\n\t[\"yue\"] = true,\n\t[\"ko\"] = true,\n}\n\ndata.neededhassubpage = {\n\t[\"ga\"] =\
      \ true,\n\t[\"gv\"] = true,\n\t[\"nv\"] = true,\n\t[\"roa-jer\"] = true,\n\t[\"fr\"] = true,\n\t[\"rm\"] = true,\n\t[\"prg\"] = true,\n\t[\"gd\"] = true,\n\t[\"twf\"] = true,\n\t[\"en\"] = true,\n\t[\"ro\"] = true,\n\t[\"egl\"] = true,\n\t[\"roa-tar\"\
      ] = true,\n\t[\"gl\"] = true,\n\t[\"ast\"] = true,\n\t[\"br\"] = true,\n}\n\n--[[\n\tScript that should be applied to links in categories.\n]]\ndata.catfix_scripts = {\n\t[\"ab\"] = \"Cyrl\",\n\t[\"ae\"] = \"Avst\",\n\t[\"ar\"] = \"Arab\",\n\t[\"ary\"\
      ] = \"Arab\",\n\t[\"be\"] = \"Cyrl\",\n\t[\"cu\"] = \"Cyrs\",\n\t[\"el\"] = \"Grek\",\n\t[\"grc\"] = \"polytonic\",\n\t[\"he\"] = \"Hebr\",\n\t[\"ka\"] = \"Geor\",\n\t[\"orv\"] = \"Cyrs\",\n\t[\"ru\"] = \"Cyrl\",\n\t[\"sa\"] = \"Deva\",\n\t[\"syl\"] =\
      \ \"Sylo\",\n\t[\"xfa\"] = \"Ital\",\n\t[\"zle-ono\"] = \"Cyrs\",\n\t[\"hi\"] = \"Deva\",\n\t[\"mr\"] = \"Deva\",\n--[[\n\t[\"\"] = \"\",\n]]\n}\n\n-- Namespaces in which format_categories will add categories.\ndata.allowedNamespaces = {\n\t[\"\"] = true,\n\
      \t[\"Appendix\"] = true,\n\t[\"Reconstruction\"] = true,\n\t[\"Citations\"] = true,\n}\n\nreturn data</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T12:52:52.026Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Alanguages&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=42078 t=1556369571904766
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:51 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1278.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1075 pass, cp3042 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 303332151, 93574823, 450147564
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"4453474\" pageid=\"4453474\" ns=\"828\" title=\"Module:languages\"><revisions><rev user=\"Benwing2\" timestamp=\"2019-04-13T02:06:03Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"add getNonEtymological\" xml:space=\"preserve\">local export = {}\n\n--[=[\tThis function checks for things that could plausibly be a language code:\n\t\ttwo or three lowercase letters,\
      \ two or three groups of three lowercase\n\t\tletters with hyphens between them. If such a pattern is not found,\n\t\tit is likely the editor simply forgot to enter a language code. ]=]\n\nfunction export.err(langCode, param, text, template_tag)\n\tlocal\
      \ ordinals = {\n\t\t\"first\", \"second\", \"third\", \"fourth\", \"fifth\", \"sixth\",\n\t\t\"seventh\", \"eighth\", \"ninth\", \"tenth\", \"eleventh\", \"twelfth\",\n\t\t\"thirteenth\", \"fourteenth\", \"fifteenth\", \"sixteenth\", \"seventeenth\",\n\
      \t\t\"eighteenth\", \"nineteenth\", \"twentieth\"\n\t}\n\t\n\tif not template_tag then\n\t\ttemplate_tag = \"\"\n\telse\n\t\tif type(template_tag) ~= \"string\" then\n\t\t\ttemplate_tag = template_tag()\n\t\tend\n\t\ttemplate_tag = \" (Original template:\
      \ \" .. template_tag .. \")\"\n\tend\n\tlocal paramType = type(param)\n\tif paramType == \"number\" then\n\t\tordinal = ordinals[param]\n\t\tparam = ordinal .. ' parameter'\n\telseif paramType == \"string\" then\n\t\tparam = 'parameter \"' .. param ..\
      \ '\"'\n\telse\n\t\terror(\"The parameter name is \"\n\t\t\t\t.. (paramType == \"table\" and \"a table\" or tostring(param))\n\t\t\t\t.. \", but it should be a number or a string.\" .. template_tag, 2)\n\tend\n\t\n\t-- Can use string.find because language\
      \ codes only contain ASCII.\n\tif not langCode or langCode == \"\" then\n\t\terror(\"The \" .. param .. \" (\" .. (text or \"language code\") .. \") is missing.\" .. template_tag, 2)\n\telseif langCode:find(\"^%l%l%l?$\")\n\t\t\tor langCode:find(\"^%l%l%l%-%l%l%l$\"\
      )\n\t\t\tor langCode:find(\"^%l%l%l%-%l%l%l%-%l%l%l$\") then\n\t\terror(\"The language code \\\"\" .. langCode .. \"\\\" is not valid.\" .. template_tag, 2)\n\telse\n\t\terror(\"Please enter a \" .. (text or \"language code\") .. \" in the \" .. param\
      \ .. \".\" .. template_tag, 2)\n\tend\nend\n\nlocal function do_entry_name_or_sort_key_replacements(text, replacements)\n\tif replacements.from then\n\t\tfor i, from in ipairs(replacements.from) do\n\t\t\tlocal to = replacements.to[i] or \"\"\n\t\t\ttext\
      \ = mw.ustring.gsub(text, from, to)\n\t\tend\n\tend\n\t\n\tif replacements.remove_diacritics then\n\t\ttext = mw.ustring.toNFD(text)\n\t\ttext = mw.ustring.gsub(text,\n\t\t\t'[' .. replacements.remove_diacritics .. ']',\n\t\t\t'')\n\t\ttext = mw.ustring.toNFC(text)\n\
      \tend\n\t\n\treturn text\nend\n\nlocal Language = {}\n\nfunction Language:getCode()\n\treturn self._code\nend\n\n\nfunction Language:getCanonicalName()\n\treturn self._rawData[1] or self._rawData.canonicalName\nend\n\n\nfunction Language:getOtherNames()\n\
      \treturn self._rawData.otherNames or {}\nend\n\n\nfunction Language:getType()\n\treturn self._rawData.type or \"regular\"\nend\n\n\nfunction Language:getWikimediaLanguages()\n\tif not self._wikimediaLanguageObjects then\n\t\tlocal m_wikimedia_languages\
      \ = require(\"Module:wikimedia languages\")\n\t\tself._wikimediaLanguageObjects = {}\n\t\tlocal wikimedia_codes = self._rawData.wikimedia_codes or { self._code }\n\t\t\n\t\tfor _, wlangcode in ipairs(wikimedia_codes) do\n\t\t\ttable.insert(self._wikimediaLanguageObjects,\
      \ m_wikimedia_languages.getByCode(wlangcode))\n\t\tend\n\tend\n\t\n\treturn self._wikimediaLanguageObjects\nend\n\nfunction Language:getWikipediaArticle()\n\tif self._rawData.wikipedia_article then\n\t\treturn self._rawData.wikipedia_article \n\telseif\
      \ self._wikipedia_article then\n\t\treturn self._wikipedia_article\n\telseif self:getWikidataItem() and mw.wikibase then\n\t\tself._wikipedia_article = mw.wikibase.sitelink(self:getWikidataItem(), 'enwiki')\n\tend\n\tif not self._wikipedia_article then\n\
      \t\tself._wikipedia_article = mw.ustring.gsub(self:getCategoryName(), \"Creole language\", \"Creole\")\n\tend\n\treturn self._wikipedia_article\nend\n\nfunction Language:makeWikipediaLink()\n\treturn \"[[w:\" .. self:getWikipediaArticle() .. \"|\" .. self:getCanonicalName()\
      \ .. \"]]\"\nend\n\nfunction Language:getWikidataItem()\n\treturn self._rawData[2] or self._rawData.wikidata_item\nend\n\nfunction Language:getScripts()\n\tif not self._scriptObjects then\n\t\tlocal m_scripts = require(\"Module:scripts\")\n\t\tself._scriptObjects\
      \ = {}\n\t\t\n\t\tfor _, sc in ipairs(self._rawData.scripts or { \"None\" }) do\n\t\t\ttable.insert(self._scriptObjects, m_scripts.getByCode(sc))\n\t\tend\n\tend\n\t\n\treturn self._scriptObjects\nend\n\nfunction Language:getScriptCodes()\n\treturn self._rawData.scripts\
      \ or { \"None\" }\nend\n\nfunction Language:getFamily()\n\tif self._familyObject then\n\t\treturn self._familyObject\n\tend\n\t\t\n\tlocal family = self._rawData[3] or self._rawData.family \n\tif family then\n\t\tself._familyObject = require(\"Module:families\"\
      ).getByCode(family)\n\tend\n\t\n\treturn self._familyObject\nend\n\n\nfunction Language:getAncestors()\n\tif not self._ancestorObjects then\n\t\tself._ancestorObjects = {}\n\t\t\n\t\tif self._rawData.ancestors then\n\t\t\tfor _, ancestor in ipairs(self._rawData.ancestors)\
      \ do\n\t\t\t\ttable.insert(self._ancestorObjects, export.getByCode(ancestor) or require(\"Module:etymology languages\").getByCode(ancestor))\n\t\t\tend\n\t\telse\n\t\t\tlocal fam = self:getFamily()\n\t\t\tlocal protoLang = fam and fam:getProtoLanguage()\
      \ or nil\n\t\t\t\n\t\t\t-- For the case where the current language is the proto-language\n\t\t\t-- of its family, we need to step up a level higher right from the start.\n\t\t\tif protoLang and protoLang:getCode() == self:getCode() then\n\t\t\t\tfam =\
      \ fam:getFamily()\n\t\t\t\tprotoLang = fam and fam:getProtoLanguage() or nil\n\t\t\tend\n\t\t\t\n\t\t\twhile not protoLang and not (not fam or fam:getCode() == \"qfa-not\") do\n\t\t\t\tfam = fam:getFamily()\n\t\t\t\tprotoLang = fam and fam:getProtoLanguage()\
      \ or nil\n\t\t\tend\n\t\t\t\n\t\t\ttable.insert(self._ancestorObjects, protoLang)\n\t\tend\n\tend\n\t\n\treturn self._ancestorObjects\nend\n\nlocal function iterateOverAncestorTree(node, func)\n\tfor _, ancestor in ipairs(node:getAncestors()) do\n\t\t\
      if ancestor then\n\t\t\tlocal ret = func(ancestor) or iterateOverAncestorTree(ancestor, func)\n\t\t\tif ret then\n\t\t\t\treturn ret\n\t\t\tend\n\t\tend\n\tend\nend\n\nfunction Language:getAncestorChain()\n\tif not self._ancestorChain then\n\t\tself._ancestorChain\
      \ = {}\n\t\tlocal step = #self:getAncestors() == 1 and self:getAncestors()[1] or nil\n\t\t\n\t\twhile step do\n\t\t\ttable.insert(self._ancestorChain, 1, step)\n\t\t\tstep = #step:getAncestors() == 1 and step:getAncestors()[1] or nil\n\t\tend\n\tend\n\t\
      \n\treturn self._ancestorChain\nend\n\n\nfunction Language:hasAncestor(otherlang)\n\tlocal function compare(ancestor)\n\t\treturn ancestor:getCode() == otherlang:getCode()\n\tend\n\t\n\treturn iterateOverAncestorTree(self, compare) or false\nend\n\n\n\
      function Language:getCategoryName()\n\tlocal name = self:getCanonicalName()\n\t\n\t-- If the name already has \"language\" in it, don't add it.\n\tif name:find(\"[Ll]anguage$\") then\n\t\treturn name\n\telse\n\t\treturn name .. \" language\"\n\tend\nend\n\
      \n\nfunction Language:getStandardCharacters()\n\treturn self._rawData.standardChars\nend\n\n\nfunction Language:makeEntryName(text)\n\ttext = mw.ustring.gsub(text, \"^[¿¡]\", \"\")\n\ttext = mw.ustring.gsub(text, \"(.)[؟?!;՛՜ ՞ ՟？！︖︕।॥။၊་།]$\", \"%1\"\
      )\n\t\n\tif self:getCode() == \"ar\" then\n\t\tlocal U = mw.ustring.char\n\t\tlocal taTwiil = U(0x640)\n\t\tlocal waSla = U(0x671)\n\t\t-- diacritics ordinarily removed by entry_name replacements\n\t\tlocal Arabic_diacritics = U(0x64B, 0x64C, 0x64D, 0x64E,\
      \ 0x64F, 0x650, 0x651, 0x652, 0x670)\n\t\t\n\t\tif text == waSla or mw.ustring.find(text, \"^\" .. taTwiil .. \"?[\" .. Arabic_diacritics .. \"]\" .. \"$\") then\n\t\t\treturn text\n\t\tend\n\tend\n\t\n\tif type(self._rawData.entry_name) == \"table\" then\n\
      \t\ttext = do_entry_name_or_sort_key_replacements(text, self._rawData.entry_name)\n\tend\n\t\n\treturn text\nend\n\n\n-- Add to data tables?\nlocal has_dotted_undotted_i = {\n\t[\"az\"] = true,\n\t[\"crh\"] = true,\n\t[\"gag\"] = true,\n\t[\"kaa\"] = true,\n\
      \t[\"tt\"] = true,\n\t[\"tr\"] = true,\n\t[\"zza\"] = true,\n}\n\nfunction Language:makeSortKey(name, sc)\n\tif has_dotted_undotted_i[self:getCode()] then\n\t\tname = name:gsub(\"I\", \"ı\")\n\tend\n\t\n\tname = mw.ustring.lower(name)\n\t\n\t-- Remove\
      \ initial hyphens and *\n\tlocal hyphens_regex = \"^[-־ـ*]+(.)\"\n\tname = mw.ustring.gsub(name, hyphens_regex, \"%1\")\n\t\n\t-- If there are language-specific rules to generate the key, use those\n\tif type(self._rawData.sort_key) == \"table\" then\n\
      \t\tname = do_entry_name_or_sort_key_replacements(name, self._rawData.sort_key)\n\telseif type(self._rawData.sort_key) == \"string\" then\n\t\tname = require(\"Module:\" .. self._rawData.sort_key).makeSortKey(name, self:getCode(), sc and sc:getCode())\n\
      \tend\n\t\n\t-- Remove parentheses, as long as they are either preceded or followed by something\n\tname = mw.ustring.gsub(name, \"(.)[()]+\", \"%1\")\n\tname = mw.ustring.gsub(name, \"[()]+(.)\", \"%1\")\n\t\n\tif has_dotted_undotted_i[self:getCode()]\
      \ then\n\t\tname = name:gsub(\"i\", \"İ\")\n\tend\n\t\n\treturn mw.ustring.upper(name)\nend\n\nfunction Language:overrideManualTranslit()\n\tif self._rawData.override_translit then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\n\n\nfunction Language:transliterate(text,\
      \ sc, module_override)\n\tif not ((module_override or self._rawData.translit_module) and text) then\n\t\treturn nil\n\tend\n\t\n\tif module_override then\n\t\trequire(\"Module:debug\").track(\"module_override\")\n\tend\n\t\n\treturn require(\"Module:\"\
      \ .. (module_override or self._rawData.translit_module)).tr(text, self:getCode(), sc and sc:getCode() or nil)\nend\n\nfunction Language:hasTranslit()\n\treturn self._rawData.translit_module and true or false\nend\n\n\nfunction Language:link_tr()\n\treturn\
      \ self._rawData.link_tr and true or false\nend\n\n\nfunction Language:toJSON()\n\tlocal entryNamePatterns = nil\n\tlocal entryNameRemoveDiacritics = nil\n\t\n\tif self._rawData.entry_name then\n\t\tentryNameRemoveDiacritics = self._rawData.entry_name.remove_diacritics\n\
      \t\tif self._rawData.entry_name.from then\n\t\t\tentryNamePatterns = {}\n\t\t\tfor i, from in ipairs(self._rawData.entry_name.from) do\n\t\t\t\tlocal to = self._rawData.entry_name.to[i] or \"\"\n\t\t\t\ttable.insert(entryNamePatterns, { from = from, to\
      \ = to })\n\t\t\tend\n\t\tend\n\tend\n\t\n\tlocal ret = {\n\t\tancestors = self._rawData.ancestors,\n\t\tcanonicalName = self:getCanonicalName(),\n\t\tcategoryName = self:getCategoryName(),\n\t\tcode = self._code,\n\t\tentryNamePatterns = entryNamePatterns,\n\
      \t\tfamily = self._rawData[3] or self._rawData.family,\n\t\totherNames = self:getOtherNames(),\n\t\tscripts = self._rawData.scripts,\n\t\ttype = self:getType(),\n\t\twikimediaLanguages = self._rawData.wikimedia_codes,\n\t\twikidataItem = self:getWikidataItem(),\n\
      \t}\n\t\n\treturn require(\"Module:JSON\").toJSON(ret)\nend\n\n\n-- Do NOT use this method!\n-- All uses should be pre-approved on the talk page!\nfunction Language:getRawData()\n\treturn self._rawData\nend\n\nLanguage.__index = Language\n\n\nfunction\
      \ export.getDataModuleName(code)\n\tif code:find(\"^%l%l$\") then\n\t\treturn \"languages/data2\"\n\telseif code:find(\"^%l%l%l$\") then\n\t\tlocal prefix = code:sub(1, 1)\n\t\treturn \"languages/data3/\" .. prefix\n\telseif code:find(\"^[%l-]+$\") then\n\
      \t\treturn \"languages/datax\"\n\telse\n\t\treturn nil\n\tend\nend\n\n\nlocal function getRawLanguageData(code)\n\tlocal modulename = export.getDataModuleName(code)\n\treturn modulename and mw.loadData(\"Module:\" .. modulename)[code] or nil\nend\n\n\n\
      function export.makeObject(code, data)\n\tif data and data.deprecated then\n\t\trequire(\"Module:debug\").track {\n\t\t\t\"languages/deprecated\",\n\t\t\t\"languages/deprecated/\" .. code\n\t\t}\n\tend\n\t\n\treturn data and setmetatable({ _rawData = data,\
      \ _code = code }, Language) or nil\nend\n\n\nfunction export.getByCode(code)\n\tif type(code) ~= \"string\" then\n\t\terror(\"The function getByCode expects a string as its first argument, but received \" .. (code == nil and \"nil\" or \"a \" .. type(code))\
      \ .. \".\")\n\tend\n\t\n\treturn export.makeObject(code, getRawLanguageData(code))\nend\n\n\nfunction export.getByName(name)\n\tlocal byName = mw.loadData(\"Module:languages/by name\")\n\tlocal code = byName.all and byName.all[name] or byName[name]\n\t\
      \n\tif not code then\n\t\treturn nil\n\tend\n\t\n\treturn export.makeObject(code, getRawLanguageData(code))\nend\n\n\nfunction export.getByCanonicalName(name)\n\tlocal byName = mw.loadData(\"Module:languages/canonical names\")\n\tlocal code = byName and\
      \ byName[name]\n\t\n\tif not code then\n\t\treturn nil\n\tend\n\t\n\treturn export.makeObject(code, getRawLanguageData(code))\nend\n\n\nfunction export.iterateAll()\n\tmw.incrementExpensiveFunctionCount()\n\tlocal m_data = mw.loadData(\"Module:languages/alldata\"\
      )\n\tlocal func, t, var = pairs(m_data)\n\t\n\treturn function()\n\t\tlocal code, data = func(t, var)\n\t\treturn export.makeObject(code, data)\n\tend\nend\n\n--[[\tIf language is an etymology language, iterates through parent languages\n\t\tuntil it finds\
      \ a non-etymology language. ]]\nfunction export.getNonEtymological(lang)\n\twhile lang:getType() == \"etymology language\" do\n\t\tlocal parentCode = lang:getParentCode()\n\t\tlocal parent = export.getByCode(parentCode)\n\t\t\tor require(\"Module:etymology\
      \ languages\").getByCode(parentCode)\n\t\t\tor require(\"Module:families\").getByCode(parentCode)\n\t\t\n\t\tlang = parent\n--\t\tmw.log(terminfo.lang:getCode() .. \" \" .. terminfo.lang:getType())\n\tend\n\t\n\treturn lang\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T12:52:52.236Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Adebug&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=44197 t=1556369572122218
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:52 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1315.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1085 pass, cp3040 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 609776381, 335376019, 450444328
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"4109235\" pageid=\"4109235\" ns=\"828\" title=\"Module:debug\"><revisions><rev user=\"Erutuon\" timestamp=\"2018-12-25T05:19:47Z\" contentformat=\"\
      text/plain\" contentmodel=\"Scribunto\" comment=\"Undo revision 51139735 by [[Special:Contributions/Erutuon|Erutuon]] ([[User talk:Erutuon|talk]]): restore if needed\" xml:space=\"preserve\">local export = {}\n\nlocal escape\ndo\n\tlocal escapes = {\n\t\
      \t[\"\\a\"] = \"a\", [\"\\b\"] = \"b\", [\"\\f\"] = \"f\", [\"\\n\"] = \"n\", [\"\\r\"] = \"r\",\n\t\t[\"\\t\"] = \"t\", [\"\\v\"] = \"v\", [\"\\\\\"] = \"\\\\\", [\"\\\"\"] = '\"', [\"'\"] = \"'\",\n\t}\n\t\n\tlocal function helper(char)\n\t\treturn escapes[char]\
      \ and \"\\\\\" .. escapes[char]\n\t\t\tor (\"\\\\%03d\"):format(char:byte())\n\tend\n\t\n\t-- Escape control characters, backslash, double quote, and bytes that aren't\n\t-- used in UTF-8.\n\t-- Escape stuff that can't be saved in a MediaWiki page, like\
      \ invalid UTF-8\n\t-- and NFD character sequences? Hard.\n\t-- Similar to string.format(\"%q\", str), which does not use C-like simple\n\t-- escapes and does not escape bytes that are not used in UTF-8.\n\tescape = function (str)\n\t\treturn (str:gsub(\"\
      [%z\\1-\\31\\\\\\\"\\127\\192\\193\\245-\\255]\", helper))\n\tend\nend\n\nexport.escape = escape\n\n-- Convert a value to a string\nfunction export.dump(value, prefix, tsort)\n\tlocal t = type(value)\n\t\n\tprefix = prefix or \"\"\n\t\n\tif t == \"string\"\
      \ then\n\t\treturn '\"' .. escape(value) .. '\"'\n\telseif t == \"table\" then\n\t\tlocal str_table = {}\n\t\t\n\t\ttable.insert(str_table, \" {\")\n\t\t\n\t\tfor key, val in require(\"Module:table\").sortedPairs(value, tsort) do\n\t\t\ttable.insert(str_table,\
      \ \" \" .. prefix .. \"\\t[\" .. export.dump(key, prefix .. \"\\t\") .. \"] = \" .. export.dump(val, prefix .. \"\\t\"):gsub(\"^ \", \"\") .. \",\")\n\t\tend\n\t\t\n\t\ttable.insert(str_table, \" \" .. prefix .. \"}\")\n\t\t\n\t\treturn table.concat(str_table,\
      \ \"\\n\")\n\telse\n\t\treturn tostring(value)\n\tend\nend\n\n\nfunction export.highlight_dump(value, prefix, tsort, options)\n\toptions = options or {}\n\t\n\tlocal func = options.modified and \"modified_dump\" or \"dump\"\n\t\n\tlocal dump = export[func](value,\
      \ prefix, tsort)\n\t\n\t-- Remove spaces at beginnings of lines (which are simply to force a &lt;pre&gt;&lt;/pre&gt; tag).\n\tdump = dump:gsub(\"^ \", \"\")\n\tdump = dump:gsub(\"\\n \", \"\\n\")\n\t\n\treturn export.highlight(dump)\nend\n\n\n-- Returns\
      \ true if table contains a table as one of its values\nlocal function containsTable(t)\n\tfor key, value in pairs(t) do\n\t\tif type(value) == \"table\" then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\n\n\nlocal function containsTablesWithSize(t,\
      \ size)\n\tfor key, value in pairs(t) do\n\t\tif type(value) == \"table\" and require(\"Module:table\").size(value) ~= size then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\t\n\n\n--[=[\n\tConvert a value to a string.\n\tLike dump below, but\
      \ if a table has consecutive numbered keys and does not\n\thave a table as one of its values, it will be placed on a single line.\n\tUsed by [[Module:User:Erutuon/script recognition]].\n]=]\nfunction export.modified_dump(value, prefix, tsort)\n\tlocal\
      \ t = type(value)\n\t\n\tprefix = prefix or \"\"\n\t\n\tif t == \"string\" then\n\t\treturn '\"' .. value .. '\"'\n\telseif t == \"table\" then\n\t\tlocal str_table = {}\n\t\t\n\t\tlocal containsTable = containsTable(value)\n\t\tlocal consecutive = require(\"\
      Module:table\").isArray(value)\n\t\tif consecutive and not containsTable or containsTable and containsTablesWithSize(value, 3) then\n\t\t\ttable.insert(str_table, \"{\")\n\t\t\t\n\t\t\tfor key, val in require(\"Module:table\").sortedPairs(value, tsort)\
      \ do\n\t\t\t\tif containsTable then\n\t\t\t\t\ttable.insert(str_table, \"\\n\\t\" .. prefix)\n\t\t\t\telse\n\t\t\t\t\ttable.insert(str_table, \" \")\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\tif type(key) == \"string\" then\n\t\t\t\t\ttable.insert(str_table, \"[\"\
      \ .. export.modified_dump(key) .. \"] = \")\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\ttable.insert(str_table, type(key) == \"number\" and type(val) == \"number\" and string.format(\"0x%05X\", val) or export.modified_dump(val))\n\t\t\t\t\n\t\t\t\tif not (consecutive\
      \ and #value == 3) or type(key) == \"number\" and value[key + 1] then\n\t\t\t\t\ttable.insert(str_table, \",\")\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tif containsTable then\n\t\t\t\ttable.insert(str_table, \"\\n\" .. prefix)\n\t\t\telse\n\t\t\t\ttable.insert(str_table,\
      \ \" \")\n\t\t\tend\n\t\t\t\n\t\t\ttable.insert(str_table, \"}\")\n\t\t\treturn table.concat(str_table)\n\t\tend\n\t\t\n\t\ttable.insert(str_table, \" {\")\n\t\t\n\t\tfor key, val in require(\"Module:table\").sortedPairs(value, tsort) do\n\t\t\ttable.insert(str_table,\
      \ \" \" .. prefix .. \"\\t[\" .. export.modified_dump(key, prefix .. \"\\t\") .. \"] = \" .. export.modified_dump(val, prefix .. \"\\t\"):gsub(\"^ \", \"\") .. \",\")\n\t\tend\n\t\t\n\t\ttable.insert(str_table, \" \" .. prefix .. \"}\")\n\t\t\n\t\treturn\
      \ table.concat(str_table, \"\\n\")\n\telseif t == \"number\" and value &gt; 46 then\n\t\treturn string.format(\"0x%05X\", value)\n\telse\n\t\treturn tostring(value)\n\tend\nend\n\t\n\nfunction export.track(key)\n\tlocal frame = mw.getCurrentFrame()\n\t\
      if key then\n\t\tif type(key) ~= \"table\" then\n\t\t\tkey = { key }\n\t\tend\n\t\t\n\t\tfor i, value in pairs(key) do\n\t\t\tpcall(frame.expandTemplate, frame, { title = 'tracking/' .. value })\n\t\tend\n\telse\n\t\terror('No tracking key supplied to\
      \ the function \"' .. track .. '\".')\n\tend\nend\n\n\n-- Trigger a script error from a template\nfunction export.error(frame)\n\terror(frame.args[1] or \"(no message specified)\")\nend\n\n--[[\n\tConvenience function for generating syntaxhighlight tags.\n\
      \tDisplay defaults to block.\n\tOptions is a table. To display inline text with HTML highlighting:\n\t\t{ inline = true, lang = \"html\" }\n]]\nfunction export.highlight(content, options)\n\tif type(content) == \"table\" then\n\t\toptions = content\n\t\
      \toptions = {\n\t\t\tlang = options.lang or \"lua\",\n\t\t\tinline = options.inline and true\n\t\t}\n\t\treturn function(content)\n\t\t\treturn mw.getCurrentFrame():extensionTag{\n\t\t\t\tname = \"syntaxhighlight\",\n\t\t\t\tcontent = content,\n\t\t\t\t\
      args = options\n\t\t\t}\n\t\tend\n\telse\n\t\treturn mw.getCurrentFrame():extensionTag{\n\t\t\tname = \"syntaxhighlight\",\n\t\t\tcontent = content,\n\t\t\targs = {\n\t\t\t\tlang = options and options.lang or \"lua\",\n\t\t\t\tinline = options and options.inline\
      \ and true or nil\n\t\t\t}\n\t\t}\n\tend\nend\n\nfunction export.track_unrecognized_args(args, template_name)\n\tlocal function track(code)\n\t\texport.track(template_name .. \"/\" .. code)\n\tend\n\t\n    track(\"unrecognized arg\")\n\t\n\tlocal arg_list\
      \ = {}\n\tfor arg, value in pairs(args) do\n\t\ttrack(\"unrecognized arg/\" .. arg)\n\t\ttable.insert(arg_list, (\"|%s=%s\"):format(arg, value))\n\tend\n\t\n\tmw.log(\n\t\t(\"Unrecognized parameter%s in {{%s}}: %s.\"):format(\n\t\t\targ_list[2] and \"\
      s\" or \"\",\n\t\t\ttemplate_name,\n\t\t\ttable.concat(arg_list, \", \")))\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T12:52:52.437Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Aparameters&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=42788 t=1556369572320250
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:52 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1227.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1077 pass, cp3032 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 441399410, 487607409, 452734217
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"4797340\" pageid=\"4797340\" ns=\"828\" title=\"Module:parameters\"><revisions><rev user=\"Benwing2\" timestamp=\"2019-03-01T01:32:55Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"OK, resurrect the bug fix for disappearing &quot;falt&quot; and such while I figure out how to clone a table properly\" xml:space=\"preserve\">local export = {}\n\n-- A helper function\
      \ to escape magic characters in a string\n-- Magic characters: ^$()%.[]*+-?\nlocal plain = require(\"Module:string\").pattern_escape\n\n-- A helper function that removes empty numeric indexes in a table,\n-- so that the values are tightly packed like in\
      \ a normal Lua table.\nlocal remove_holes = require(\"Module:table\").compressSparseArray\n\nfunction export.process(args, params, return_unknown)\n\tlocal args_new = {}\n\t\n\t-- Process parameters for specific properties\n\tlocal required = {}\n\tlocal\
      \ patterns = {}\n\tlocal names_with_equal_sign = {}\n\tlocal list_from_index = nil\n\t\n\tfor name, param in pairs(params) do\n\t\tif param.required then\n\t\t\tif param.alias_of then\n\t\t\t\trequire(\"Module:debug\").track(\"parameters/required alias\"\
      )\n\t\t\tend\n\t\t\trequired[name] = true\n\t\tend\n\t\t\n\t\tif param.list then\n\t\t\tlocal key = name\n\t\t\tif type(name) == \"string\" then\n\t\t\t\tkey = string.gsub(name, \"=\", \"\")\n\t\t\tend\n\t\t\tif param.default ~= nil then\n\t\t\t\targs_new[key]\
      \ = {param.default, maxindex = 1}\n\t\t\telse\n\t\t\t\targs_new[key] = {maxindex = 0}\n\t\t\tend\n\t\t\t\n\t\t\tif type(param.list) == \"string\" then\n\t\t\t\t-- If the list property is a string, then it represents the name\n\t\t\t\t-- to be used as the\
      \ prefix for list items. This is for use with lists\n\t\t\t\t-- where the first item is a numbered parameter and the\n\t\t\t\t-- subsequent ones are named, such as 1, pl2, pl3.\n\t\t\t\tif string.find(param.list, \"=\") then\n\t\t\t\t\tpatterns[\"^\" ..\
      \ string.gsub(plain(param.list), \"=\", \"(%%d+)\") .. \"$\"] = name\n\t\t\t\telse\n\t\t\t\t\tpatterns[\"^\" .. plain(param.list) .. \"(%d+)$\"] = name\n\t\t\t\tend\n\t\t\telseif type(name) == \"number\" then\n\t\t\t\t-- If the name is a number, then all\
      \ indexed parameters from\n\t\t\t\t-- this number onwards go in the list.\n\t\t\t\tlist_from_index = name\n\t\t\telse\n\t\t\t\tif string.find(name, \"=\") then\n\t\t\t\t\tpatterns[\"^\" .. string.gsub(plain(name), \"=\", \"(%%d+)\") .. \"$\"] = string.gsub(name,\
      \ \"=\", \"\")\n\t\t\t\telse\n\t\t\t\t\tpatterns[\"^\" .. plain(name) .. \"(%d+)$\"] = name\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tif string.find(name, \"=\") then\n\t\t\t\t-- DO NOT SIDE-EFFECT A TABLE WHILE ITERATING OVER IT.\n\t\t\t\t-- Some elements\
      \ may be skipped or processed twice if you do.\n\t\t\t\t-- Instead, track the changes we want to make to `params`, and\n\t\t\t\t-- do them after the iteration over `params` is done.\n\t\t\t\ttable.insert(names_with_equal_sign, name)\n\t\t\tend\n\t\telseif\
      \ param.default ~= nil then\n\t\t\targs_new[name] = param.default\n\t\tend\n\tend\n\n\t--Process required changes to `params`\n\tfor _, name in ipairs(names_with_equal_sign) do\n\t\trequire(\"Module:debug\").track(\"parameters/name with equals\")\n\t\t\
      params[string.gsub(name, \"=\", \"\")] = params[name]\n\t\tparams[name] = nil\n\tend\n\n\t-- Process the arguments\n\tlocal args_unknown = {}\n\t\n\tfor name, val in pairs(args) do\n\t\tlocal index = nil\n\t\t\n\t\tif type(name) == \"number\" then\n\t\t\
      \tif list_from_index ~= nil and name &gt;= list_from_index then\n\t\t\t\tindex = name - list_from_index + 1\n\t\t\t\tname = list_from_index\n\t\t\tend\n\t\telse\n\t\t\t-- Does this argument name match a pattern?\n\t\t\tfor pattern, pname in pairs(patterns)\
      \ do\n\t\t\t\tindex = mw.ustring.match(name, pattern)\n\t\t\t\t\n\t\t\t\t-- It matches, so store the parameter name and the\n\t\t\t\t-- numeric index extracted from the argument name.\n\t\t\t\tif index then\n\t\t\t\t\tindex = tonumber(index)\n\t\t\t\t\t\
      name = pname\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\t\n\t\tlocal param = params[name]\n\t\t\n\t\t-- If a parameter without the trailing index was found, and\n\t\t-- require_index is set on the param, set the param to nil to treat it\n\t\t\
      -- as if it isn't recognized.\n\t\tif not index and param and param.require_index then\n\t\t\tparam = nil\n\t\tend\n\t\t\n\t\t-- If no index was found, use 1 as the default index.\n\t\t-- This makes list parameters like g, g2, g3 put g at index 1.\n\t\t\
      index = index or 1\n\t\t\n\t\t-- If the argument is not in the list of parameters, trigger an error.\n\t\t-- return_unknown suppresses the error, and stores it in a separate list instead.\n\t\tif not param then\n\t\t\tif return_unknown then\n\t\t\t\targs_unknown[name]\
      \ = val\n\t\t\telse\n\t\t\t\terror(\"The parameter \\\"\" .. name .. \"\\\" is not used by this template.\", 2)\n\t\t\tend\n\t\telse\n\t\t\t-- Remove leading and trailing whitespace unless allow_whitespace is true.\n\t\t\tif not param.allow_whitespace\
      \ then\n\t\t\t\tval = mw.text.trim(val)\n\t\t\tend\n\t\t\t\n\t\t\t-- Empty string is equivalent to nil unless allow_empty is true.\n\t\t\tif val == \"\" and not param.allow_empty then\n\t\t\t\tval = nil\n\t\t\tend\n\t\t\t\n\t\t\t-- Convert to proper type\
      \ if necessary.\n\t\t\tif param.type == \"boolean\" then\n\t\t\t\tval = not (not val or val == \"\" or val == \"0\" or val == \"no\" or val == \"n\" or val == \"false\")\n\t\t\telseif param.type == \"number\" then\n\t\t\t\tval = tonumber(val)\n\t\t\telseif\
      \ param.type then\n\t\t\t\trequire(\"Module:debug\").track {\n\t\t\t\t\t\"parameters/unrecognized type\",\n\t\t\t\t\t\"parameters/unrecognized type/\" .. tostring(param.type)\n\t\t\t\t}\n\t\t\tend\n\t\t\t\n\t\t\t-- Can't use \"if val\" alone, because val\
      \ may be a boolean false.\n\t\t\tif val ~= nil then\n\t\t\t\t-- Mark it as no longer required, as it is present.\n\t\t\t\trequired[param.alias_of or name] = nil\n\t\t\t\t\n\t\t\t\t-- Store the argument value.\n\t\t\t\tif param.list then\n\t\t\t\t\t-- If\
      \ the parameter is an alias of another, store it as the original,\n\t\t\t\t\t-- but avoid overwriting it; the original takes precedence.\n\t\t\t\t\tif not param.alias_of then\n\t\t\t\t\t\targs_new[name][index] = val\n\t\t\t\t\t\t\n\t\t\t\t\t\t-- Store\
      \ the highest index we find.\n\t\t\t\t\t\targs_new[name].maxindex = math.max(index, args_new[name].maxindex)\n\t\t\t\t\telseif args[param.alias_of] == nil then\n\t\t\t\t\t\tif params[param.alias_of] and params[param.alias_of].list then\n\t\t\t\t\t\t\t\
      args_new[param.alias_of][index] = val\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t-- Store the highest index we find.\n\t\t\t\t\t\t\targs_new[param.alias_of].maxindex = math.max(1, args_new[param.alias_of].maxindex)\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\targs_new[param.alias_of]\
      \ = val\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\t-- If the parameter is an alias of another, store it as the original,\n\t\t\t\t\t-- but avoid overwriting it; the original takes precedence.\n\t\t\t\t\tif not param.alias_of then\n\t\t\t\t\
      \t\targs_new[name] = val\n\t\t\t\t\telseif args[param.alias_of] == nil then\n\t\t\t\t\t\tif params[param.alias_of] and params[param.alias_of].list then\n\t\t\t\t\t\t\targs_new[param.alias_of][1] = val\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t-- Store the highest\
      \ index we find.\n\t\t\t\t\t\t\targs_new[param.alias_of].maxindex = math.max(1, args_new[param.alias_of].maxindex)\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\targs_new[param.alias_of] = val\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\
      \t\n\t-- The required table should now be empty.\n\t-- If any entry remains, trigger an error, unless we're in the template namespace.\n\tif mw.title.getCurrentTitle().nsText ~= \"Template\" then\n\t\tlocal list = {}\n\t\tfor name, param in pairs(required)\
      \ do\n\t\t\ttable.insert(list, name)\n\t\tend\n\t\t\n\t\tlocal count = #list\n\t\tif count == 1 then\n\t\t\terror('The parameter \"' .. list[1] .. '\" is required.', 2)\n\t\telseif count == 2 then\n\t\t\terror('The parameters \"' .. table.concat(list,\
      \ '\" and \"') .. '\" are required.', 2)\n\t\telseif count &gt; 2 then\n\t\t\terror('The parameters \"' .. mw.text.listToText(list, '\", \"', '\", and \"') .. '\" are required.', 2)\n\t\tend\n\tend\n\t\n\t-- Remove holes in any list parameters if needed.\n\
      \tfor name, val in pairs(args_new) do\n\t\tif type(val) == \"table\" and not params[name].allow_holes then\n\t\t\targs_new[name] = remove_holes(val)\n\t\tend\n\tend\n\t\n\tif return_unknown then\n\t\treturn args_new, args_unknown\n\telse\n\t\treturn args_new\n\
      \tend\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T12:52:52.663Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Astring&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=36803 t=1556369572532630
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:52 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1224.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1079 pass, cp3032 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 440771758, 482497480, 443833042
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"4099547\" pageid=\"4099547\" ns=\"828\" title=\"Module:string\"><revisions><rev user=\"Surjection\" timestamp=\"2019-04-25T20:40:50Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"Protected &quot;[[Module:string]]&quot;: Highly visible template/module ([Edit=Allow only autoconfirmed users] (indefinite) [Move=Allow only autoconfirmed users] (indefinite))\" xml:space=\"\
      preserve\">local str = {}\n\n-- Cannot include null byte.\nlocal UTF8_char = \"[\\1-\\127\\194-\\244][\\128-\\191]*\"\n\n--[[\nulen\n\nCounts UTF-8 characters. Faster than mw.ustring.len.\n\nAssumes that the encoding is correct. Unlike mw.ustring.len,\
      \ does not return nil\nif encoding is invalid.\n\nDoes not count the bytes 192, 193, and 245-255. They are not used in UTF-8 and\nwill not occur if the string is valid. They are replaced with the replacement\ncharacter (U+FFFD) on MediaWiki pages.\n--]]\n\
      function str.ulen(text)\n\tlocal _, length = string.gsub(text, UTF8_char, \"\")\n\treturn length\nend\n\n--[[\nlen\n\nThis function returns the length of the target string.\n\nUsage:\n{{#invoke:string|len|target_string|}}\nOR\n{{#invoke:string|len|s=target_string}}\n\
      \nParameters\n    s: The string whose length to report\n\nIf invoked using named parameters, Mediawiki will automatically remove any leading or\ntrailing whitespace from the target string.\n]]\nfunction str.len(frame)\n\tlocal new_args = str._getParameters(frame.args,\
      \ { 's' });\n\tlocal s = new_args['s'] or '';\n\treturn mw.ustring.len(s)\nend\n\n--[[\nsub\n\nThis function returns a substring of the target string at specified indices.\n\nUsage:\n{{#invoke:string|sub|target_string|start_index|end_index}}\nOR\n{{#invoke:string|sub|s=target_string|i=start_index|j=end_index}}\n\
      \nParameters\n    s: The string to return a subset of\n    i: The fist index of the substring to return, defaults to 1.\n    j: The last index of the string to return, defaults to the last character.\n    \nThe first character of the string is assigned\
      \ an index of 1.  If either i or j\nis a negative value, it is interpreted the same as selecting a character by\ncounting from the end of the string.  Hence, a value of -1 is the same as\nselecting the last character of the string.\n\nIf the requested\
      \ indices are out of range for the given string, an error is\nreported.\n]]\nfunction str.sub(frame)\n\tlocal new_args = str._getParameters(frame.args, { 's', 'i', 'j' });\n\tlocal s = new_args['s'] or '';\n\tlocal i = tonumber(new_args['i']) or 1;\n\t\
      local j = tonumber(new_args['j']) or -1;\n\t\n\tlocal len = mw.ustring.len(s);\n\t\n\t-- Convert negatives for range checking\n\tif i &lt; 0 then\n\t\ti = len + i + 1;\n\tend\n\tif j &lt; 0 then\n\t\tj = len + j + 1;\n\tend\n\t\n\tif i &gt; len or j &gt;\
      \ len or i &lt; 1 or j &lt; 1 then\n\t\treturn str._error('String subset index out of range');\n\tend\n\tif j &lt; i then\n\t\treturn str._error('String subset indices out of order');\n\tend\n\t\n\treturn mw.ustring.sub(s, i, j)\nend\n\n--[[\nThis function\
      \ implements that features of {{str sub old}} and is kept in order\nto maintain these older templates.\n]]\nfunction str.sublength(frame)\n\tlocal i = tonumber(frame.args.i) or 0\n\tlocal len = tonumber(frame.args.len)\n\treturn mw.ustring.sub(frame.args.s,\
      \ i + 1, len and (i + len))\nend\n\n--[[\nmatch\n\nThis function returns a substring from the source string that matches a\nspecified pattern.\n\nUsage:\n{{#invoke:string|match|source_string|pattern_string|start_index|match_number|plain_flag|nomatch_output}}\n\
      OR\n{{#invoke:string|pos|s=source_string|pattern=pattern_string|start=start_index\n    |match=match_number|plain=plain_flag|nomatch=nomatch_output}}\n\nParameters\n    s: The string to search\n    pattern: The pattern or string to find within the string\n\
      \    start: The index within the source string to start the search.  The first\n        character of the string has index 1.  Defaults to 1.\n    match: In some cases it may be possible to make multiple matches on a single\n        string.  This specifies\
      \ which match to return, where the first match is\n        match= 1.  If a negative number is specified then a match is returned\n        counting from the last match.  Hence match = -1 is the same as requesting\n        the last match.  Defaults to 1.\n\
      \    plain: A flag indicating that the pattern should be understood as plain\n        text.  Defaults to false.\n    nomatch: If no match is found, output the \"nomatch\" value rather than an error.\n\nIf invoked using named parameters, Mediawiki will\
      \ automatically remove any leading or\ntrailing whitespace from each string.  In some circumstances this is desirable, in\nother cases one may want to preserve the whitespace.\n\nIf the match_number or start_index are out of range for the string being\
      \ queried, then\nthis function generates an error.  An error is also generated if no match is found.\nIf one adds the parameter ignore_errors=true, then the error will be suppressed and\nan empty string will be returned on any failure.\n\nFor information\
      \ on constructing Lua patterns, a form of [regular expression], see:\n\n* http://www.lua.org/manual/5.1/manual.html#5.4.1\n* http://www.mediawiki.org/wiki/Extension:Scribunto/Lua_reference_manual#Patterns\n* http://www.mediawiki.org/wiki/Extension:Scribunto/Lua_reference_manual#Ustring_patterns\n\
      \n]]\nfunction str.match(frame)\n\tlocal new_args = str._getParameters(frame.args, { 's', 'pattern', 'start', 'match', 'plain', 'nomatch' });\n\tlocal s = new_args['s'] or '';\n\tlocal start = tonumber(new_args['start']) or 1;\n\tlocal plain_flag = str._getBoolean(new_args['plain']\
      \ or false);\n\tlocal pattern = new_args['pattern'] or '';\n\tlocal match_index = math.floor(tonumber(new_args['match']) or 1);\n\tlocal nomatch = new_args['nomatch'];\n\t\n\tif s == '' then\n\t\treturn str._error('Target string is empty');\n\tend\n\t\
      if pattern == '' then\n\t\treturn str._error('Pattern string is empty');\n\tend\n\tif math.abs(start) &lt; 1 or math.abs(start) &gt; mw.ustring.len(s) then\n\t\treturn str._error('Requested start is out of range');\n\tend\n\tif match_index == 0 then\n\t\
      \treturn str._error('Match index is out of range');\n\tend\n\tif plain_flag then\n\t\tpattern = str.pattern_escape(pattern);\n\tend\n\t\n\tlocal result\n\tif match_index == 1 then\n\t\t-- Find first match is simple case\n\t\tresult = mw.ustring.match(s,\
      \ pattern, start)\n\telse\n\t\tif start &gt; 1 then\n\t\t\ts = mw.ustring.sub(s, start);\n\t\tend\n\t\t\n\t\tlocal iterator = mw.ustring.gmatch(s, pattern);\n\t\tif match_index &gt; 0 then\n\t\t\t-- Forward search\n\t\t\tfor w in iterator do\n\t\t\t\t\
      match_index = match_index - 1;\n\t\t\t\tif match_index == 0 then\n\t\t\t\t\tresult = w;\n\t\t\t\t\tbreak;\n\t\t\t\tend\n\t\t\tend\n\t\telse\n\t\t\t-- Reverse search\n\t\t\tlocal result_table = {};\n\t\t\tlocal count = 1;\n\t\t\tfor w in iterator do\n\t\
      \t\t\tresult_table[count] = w;\n\t\t\t\tcount = count + 1;\n\t\t\tend\n\t\t\t\n\t\t\tresult = result_table[count + match_index];\n\t\tend\n\tend\n\t\n\tif result == nil then\n\t\tif nomatch == nil then\n\t\t\treturn str._error('Match not found');\n\t\t\
      else\n\t\t\treturn nomatch;\n\t\tend\n\telse\n\t\treturn result;\n\tend\nend\n\n--[[\npos\n\nThis function returns a single character from the target string at position pos.\n\nUsage:\n{{#invoke:string|pos|target_string|index_value}}\nOR\n{{#invoke:string|pos|target=target_string|pos=index_value}}\n\
      \nParameters\n    target: The string to search\n    pos: The index for the character to return\n\nIf invoked using named parameters, Mediawiki will automatically remove any leading or\ntrailing whitespace from the target string.  In some circumstances\
      \ this is desirable, in\nother cases one may want to preserve the whitespace.\n\nThe first character has an index value of 1.\n\nIf one requests a negative value, this function will select a character by counting backwards\nfrom the end of the string.\
      \  In other words pos = -1 is the same as asking for the last character.\n\nA requested value of zero, or a value greater than the length of the string returns an error.\n]]\nfunction str.pos(frame)\n\tlocal new_args = str._getParameters(frame.args, {\
      \ 'target', 'pos' });\n\tlocal target_str = new_args['target'] or '';\n\tlocal pos = tonumber(new_args['pos']) or 0;\n\t\n\tif pos == 0 or math.abs(pos) &gt; mw.ustring.len(target_str) then\n\t\treturn str._error('String index out of range');\n\tend\n\t\
      \n\treturn mw.ustring.sub(target_str, pos, pos);\nend\n\n--[[\nstr_find\n\nThis function duplicates the behavior of {{str_find}}, including all of its quirks.\nThis is provided in order to support existing templates, but is NOT RECOMMENDED for\nnew code\
      \ and templates.  New code is recommended to use the \"find\" function instead.\n\nReturns the first index in \"source\" that is a match to \"target\".  Indexing is 1-based,\nand the function returns -1 if the \"target\" string is not present in \"source\"\
      .\n\nImportant Note: If the \"target\" string is empty / missing, this function returns a\nvalue of \"1\", which is generally unexpected behavior, and must be accounted for\nseparatetly.\n]]\nfunction str.str_find(frame)\n\tlocal new_args = str._getParameters(frame.args,\
      \ { 'source', 'target' });\n\tlocal source_str = new_args['source'] or '';\n\tlocal target_str = new_args['target'] or '';\n\t\n\tif target_str == '' then\n\t\treturn 1;\n\tend\n\t\n\tlocal start = mw.ustring.find(source_str, target_str, 1, true)\n\tif\
      \ start == nil then\n\t\tstart = -1\n\tend\n\t\n\treturn start\nend\n\n--[[\nfind\n\nThis function allows one to search for a target string or pattern within another\nstring.\n\nUsage:\n{{#invoke:string|find|source_str|target_string|start_index|plain_flag}}\n\
      OR\n{{#invoke:string|find|source=source_str|target=target_str|start=start_index|plain=plain_flag}}\n\nParameters\n    source: The string to search\n    target: The string or pattern to find within source\n    start: The index within the source string to\
      \ start the search, defaults to 1\n    plain: Boolean flag indicating that target should be understood as plain\n        text and not as a Lua style regular expression, defaults to true\n\nIf invoked using named parameters, Mediawiki will automatically\
      \ remove any leading or\ntrailing whitespace from the parameter.  In some circumstances this is desirable, in\nother cases one may want to preserve the whitespace.\n\nThis function returns the first index &gt;= \"start\" where \"target\" can be found\n\
      within \"source\".  Indices are 1-based.  If \"target\" is not found, then this\nfunction returns an empty string.  If either \"source\" or \"target\" are missing / empty, this\nfunction also returns an empty string.\n\nThis function should be safe for\
      \ UTF-8 strings.\n]]\nfunction str.find(frame)\n\tlocal params = {\n\t\t[1] = { required = true },\n\t\t[2] = { required = true },\n\t\t[3] = { type = \"number\" },\n\t\t[4] = { type = \"boolean\" },\n\t}\n\t\n\tlocal args = require(\"Module:parameters\"\
      ).process(frame.args, params)\n\t\n\treturn mw.ustring.find(args[1], args[2], args[3], args[4])\nend\n\n--[[\nreplace\n\nThis function allows one to replace a target string or pattern within another\nstring.\n\nUsage:\n{{#invoke:string|replace|source_str|pattern_string|replace_string|replacement_count|plain_flag}}\n\
      OR\n{{#invoke:string|replace|source=source_string|pattern=pattern_string|replace=replace_string|\n   count=replacement_count|plain=plain_flag}}\n\nParameters\n    source: The string to search\n    pattern: The string or pattern to find within source\n\
      \    replace: The replacement text\n    count: The number of occurences to replace, defaults to all.\n    plain: Boolean flag indicating that pattern should be understood as plain\n        text and not as a Lua style regular expression, defaults to true\n\
      ]]\nfunction str.replace(frame)\n\tlocal new_args = str._getParameters(frame.args, { 'source', 'pattern', 'replace', 'count', 'plain' });\n\tlocal source_str = new_args['source'] or '';\n\tlocal pattern = new_args['pattern'] or '';\n\tlocal replace = new_args['replace']\
      \ or '';\n\tlocal count = tonumber(new_args['count']);\n\tlocal plain = new_args['plain'] or true;\n\t\n\tif source_str == '' or pattern == '' then\n\t\treturn source_str;\n\tend\n\tplain = str._getBoolean(plain);\n\t\n\tif plain then\n\t\tpattern = str.pattern_escape(pattern);\n\
      \t\treplace = mw.ustring.gsub(replace, \"%%\", \"%%%%\"); --Only need to escape replacement sequences.\n\tend\n\t\n\tlocal result;\n\t\n\tresult = mw.ustring.gsub(source_str, pattern, replace, count);\n\t\n\treturn result;\nend\n\n\nfunction str.gsub(frame)\n\
      \tlocal params = {\n\t\t[1] = { required = true, allow_empty = true },\n\t\t[2] = { required = true, allow_empty = true },\n\t\t[3] = { required = true, allow_empty = true },\n\t\t[4] = { type = \"number\" },\n\t}\n\t\n\tlocal args = require(\"Module:parameters\"\
      ).process(frame.args, params)\n\t\n\treturn (mw.ustring.gsub(args[1], args[2], args[3], args[4]))\nend\n\n\n--[[\n    simple function to pipe string.rep to templates.\n]]\n\nfunction str.rep(frame)\n\tlocal repetitions = tonumber(frame.args[2])\n\tif not\
      \ repetitions then\n\t\treturn str._error('function rep expects a number as second parameter, received \"' .. (frame.args[2] or '') .. '\"')\n\tend\n\treturn string.rep(frame.args[1] or '', repetitions)\nend\n\nfunction str.lower(frame)\n\tlocal text =\
      \ frame.args[1] or ''\n\treturn mw.ustring.lower(text)\nend\n\nstr.lc = str.lower\n\n--[[\nHelper function that populates the argument list given that user may need to use a mix of\nnamed and unnamed parameters.  This is relevant because named parameters\
      \ are not\nidentical to unnamed parameters due to string trimming, and when dealing with strings\nwe sometimes want to either preserve or remove that whitespace depending on the application.\n]]\nfunction str._getParameters(frame_args, arg_list)\n\tlocal\
      \ new_args = {};\n\tlocal index = 1;\n\tlocal value;\n\t\n\tfor _, arg in ipairs(arg_list) do\n\t\tvalue = frame_args[arg]\n\t\tif value == nil then\n\t\t\tvalue = frame_args[index];\n\t\t\tindex = index + 1;\n\t\tend\n\t\tnew_args[arg] = value;\n\tend\n\
      \t\n\treturn new_args;\nend\n\n--[[\nHelper function to handle error messages.\n]]\nfunction str._error(error_str)\n\tlocal frame = mw.getCurrentFrame();\n\tlocal error_category = frame.args.error_category or 'Errors reported by Module String';\n\tlocal\
      \ ignore_errors = frame.args.ignore_errors or false;\n\tlocal no_category = frame.args.no_category or false;\n\t\n\tif str._getBoolean(ignore_errors) then\n\t\treturn '';\n\tend\n\t\n\tlocal error_str = '&lt;strong class=\"error\"&gt;String Module Error:\
      \ ' .. error_str .. '&lt;/strong&gt;';\n\tif error_category ~= '' and not str._getBoolean(no_category) then\n\t\terror_str = '[[Category:' .. error_category .. ']]' .. error_str;\n\tend\n\t\n\treturn error_str;\nend\n\n--[[\nHelper Function to interpret\
      \ boolean strings\n]]\nfunction str._getBoolean(boolean_str)\n\tlocal boolean_value;\n\t\n\tif type(boolean_str) == 'string' then\n\t\tboolean_str = boolean_str:lower();\n\t\tif boolean_str == 'false' or boolean_str == 'no' or boolean_str == '0'\n\t\t\t\
      \tor boolean_str == '' then\n\t\t\tboolean_value = false;\n\t\telse\n\t\t\tboolean_value = true;\n\t\tend\n\telseif type(boolean_str) == 'boolean' then\n\t\tboolean_value = boolean_str;\n\telse\n\t\terror('No boolean value found');\n\tend\n\treturn boolean_value\n\
      end\n\n--[[\nHelper function that escapes all pattern characters – ().%+-*?[^$] – so that they will be treated\nas plain text.\n]]\nfunction str.pattern_escape(pattern_str)\n\tlocal invoked = false\n\t\n\tif type(pattern_str) == \"table\" then\n\t\tif\
      \ pattern_str.args then\n\t\t\tlocal frame = pattern_str\n\t\t\tinvoked = true\n\t\t\t\n\t\t\tif frame.args[1] then\n\t\t\t\tpattern_str = frame.args[1]\n\t\t\telse\n\t\t\t\tpattern_str = frame:getParent().args[1]\n\t\t\tend\n\t\telse\n\t\t\terror(\"First\
      \ argument to pattern_escape should be a string, a number, or a frame object.\")\n\t\tend\n\telseif not (type(pattern_str) == \"string\" or type(pattern_str) == \"number\") then\n\t\terror(\"First argument to pattern_escape should be a string or a number.\"\
      )\n\tend\n\t\n\tif invoked then\n\t\tlocal escaped = mw.ustring.gsub(pattern_str, \"([%(%)%.%%%+%-%*%?%[%^%$%]])\", \"%%%1\")\n\t\treturn escaped\n\telse\n\t\treturn mw.ustring.gsub(pattern_str, \"([%(%)%.%%%+%-%*%?%[%^%$%]])\", \"%%%1\");\n\tend\nend\n\
      \nfunction str.count(text, pattern, plain)\n\tif not (type(text) == \"string\" or type(text) == \"number\") then\n\t\terror('The first argument to the function \"count\" must be a string or a number, not a ' .. type(text) .. '.')\n\tend\n\t\n\tif not (type(pattern)\
      \ == \"string\" or type(pattern) == \"number\") then\n\t\terror('The first argument to the function \"count\" must be a string or a number, not a ' .. type(text) .. '.')\n\tend\n\t\n\tif plain then\n\t\tpattern = str.pattern_escape(pattern)\n\tend\n\t\n\
      \tlocal _, count = mw.ustring.gsub(text, pattern, \"\")\n\t\n\treturn count\nend\n\nfunction str.plain_gsub(text, pattern, replacement)\n\tlocal invoked = false\n\t\n\tif type(text) == \"table\" then\n\t\tinvoked = true\n\t\t\n\t\tif text.args then\n\t\
      \t\tlocal frame = text\n\t\t\t\n\t\t\tlocal params = {\n\t\t\t\t[1] = {},\n\t\t\t\t[2] = {},\n\t\t\t\t[3] = { allow_empty = true },\n\t\t\t}\n\t\t\t\n\t\t\tlocal args = require(\"Module:parameters\").process(frame.args, params)\n\t\t\t\n\t\t\ttext = args[1]\n\
      \t\t\tpattern = args[2]\n\t\t\treplacement = args[3]\n\t\telse\n\t\t\terror(\"If the first argument to plain_gsub is a table, it should be a frame object.\")\n\t\tend\n\telse\n\t\tif not (type(pattern) == \"string\" or type(pattern) == \"number\") then\n\
      \t\t\terror(\"The second argument to plain_gsub should be a string or a number.\")\n\t\tend\n\t\t\n\t\tif not (type(replacement) == \"string\" or type(replacement) == \"number\") then\n\t\t\terror(\"The third argument to plain_gsub should be a string or\
      \ a number.\")\n\t\tend\n\tend\n\t\n\tpattern = str.pattern_escape(pattern)\n\t\n\tif invoked then\n\t\ttext = mw.ustring.gsub(text, pattern, replacement)\n\t\treturn text\n\telse\n\t\treturn mw.ustring.gsub(text, pattern, replacement)\n\tend\nend\n\n\
      function str.matchToArray(text, pattern)\n\tlocal invoked = false\n\t\n\tif type(text) == \"table\" then\n\t\tinvoked = true\n\t\t\n\t\tif text.args then\n\t\t\tlocal frame = text\n\t\t\t\n\t\t\tlocal params = {\n\t\t\t\t[1] = { required = true },\n\t\t\
      \t\t[2] = { required = true },\n\t\t\t}\n\t\t\t\n\t\t\tlocal args = require(\"Module:parameters\").process(frame.args, params)\n\t\t\t\n\t\t\ttext = args[1]\n\t\t\tpattern = args[2]\n\t\telse\n\t\t\terror(\"If the first argument to matchToArray is a table,\
      \ it should be a frame object.\")\n\t\tend\n\telse\n\t\tif not (type(pattern) == \"string\" or type(pattern) == \"number\") then\n\t\t\terror(\"The second argument to matchToArray should be a string or a number.\")\n\t\tend\n\tend\n\t\n\tlocal matches\
      \ = {}\n\tlocal i = 0\n\tfor match in mw.ustring.gmatch(text, pattern) do\n\t\ti = i + 1\n\t\tmatches[i] = match\n\tend\n\t\n\tif i &gt; 0 then\n\t\tif invoked then\n\t\t\treturn table.concat(matches, \", \")\n\t\telse\n\t\t\treturn matches\n\t\tend\n\t\
      else\n\t\tif invoked then\n\t\t\treturn \"\"\n\t\telse\n\t\t\treturn nil\n\t\tend\n\tend\nend\n\n--[=[\n\tSimilar to gmatch, but it returns the count of the match in addition to the\n\tlist of captures, something like ipairs().\n\t\n\tIf the pattern doesn't\
      \ contain any captures, the whole match is returned.\n\t\n\tInvoke thus:\n\t\n\t\tfor i, whole_match in require(\"Module:string\").imatch(text, pattern) do\n\t\t\t[ do something with i and whole_match ]\n\t\tend\n\t\n\tor\n\t\n\t\tfor i, capture1[, capture2[,\
      \ capture3[, ...]]] in require(\"Module:string\").imatch(text, pattern) do\n\t\t\t[ do something with i and capture1 ]\n\t\tend\n\t\n\tFor example, this code\n\t\tfor i, whole_match in require(\"Module:string\").imatch(\"a b c\", \"[a-z]\") do\n\t\t\t\
      mw.log(i, whole_match)\n\t\tend\n\twill log\n\t\t1\ta\n\t\t2\tb\n\t\t3\tc\n]=]\nfunction str.imatch(text, pattern, pos, plain, use_basic_Lua_function)\n\tlocal i = 0\n\tpos = pos or 0\n\tif not string.find(pattern, \"%b()\") then\n\t\tpattern = \"(\" ..\
      \ pattern .. \")\"\n\tend\n\tlocal find = use_basic_Lua_function and string.find or mw.ustring.find\n\treturn function()\n\t\ti = i + 1\n\t\tlocal return_values = { find(text, pattern, pos, plain) }\n\t\tlocal j = return_values[2]\n\t\t\n\t\tif return_values[3]\
      \ then\n\t\t\tpos = j + 1\n\t\t\t-- Skip the first two returned values, which are the indices of the\n\t\t\t-- whole match.\n\t\t\treturn i, unpack(return_values, 3)\n\t\tend\n\tend\nend\n\nfunction str.escapebytes(s)\n\treturn (string.gsub(s,\n\t\t'.',\n\
      \t\tfunction(char)\n\t\t\treturn ('\\\\%03d'):format(string.byte(char))\n\t\tend))\nend\n\nfunction str.URIdecode(frame)\n\treturn mw.uri.decode(frame.args[1], frame.args[2] or \"PATH\")\nend\n\nreturn str</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T12:52:52.876Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Atable&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=40464 t=1556369572751780
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:52 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1290.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1077 pass, cp3040 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 448534615, 346861616, 452962127
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"5122966\" pageid=\"5122966\" ns=\"828\" title=\"Module:table\"><revisions><rev user=\"Benwing2\" timestamp=\"2019-04-14T04:16:37Z\" contentformat=\"\
      text/plain\" contentmodel=\"Scribunto\" comment=\"add deepEquals, deepEqualsList for deep comparisons\" xml:space=\"preserve\">--[[\n------------------------------------------------------------------------------------\n--                      table (formerly\
      \ TableTools)                               --\n--                                                                                --\n-- This module inclcudes a number of functions for dealing with Lua tables.        --\n-- It is a meta-module, meant to\
      \ be called from other Lua modules, and should     --\n-- not be called directly from #invoke.                                           --\n------------------------------------------------------------------------------------\n--]]\n\n--[[\n\tInserting\
      \ new values into a table using a local \"index\" variable, which is\n\tincremented each time, is faster than using \"table.insert(t, x)\" or\n\t\"t[#t + 1] = x\". See the talk page.\n]]\n\nlocal libraryUtil = require('libraryUtil')\n\nlocal export = {}\n\
      \n-- Define often-used variables and functions.\nlocal floor = math.floor\nlocal infinity = math.huge\nlocal checkType = libraryUtil.checkType\nlocal checkTypeMulti = libraryUtil.checkTypeMulti\n\nlocal function _check(funcName, expectType)\n\tif type(expectType)\
      \ == \"string\" then\n\t\treturn function(argIndex, arg, nilOk)\n\t\t\tcheckType(funcName, argIndex, arg, expectType, nilOk)\n\t\tend\n\telse\n\t\treturn function(argIndex, arg, expectType, nilOk)\n\t\t\tif type(expectType) == \"table\" then\n\t\t\t\t\
      checkTypeMulti(funcName, argIndex, arg, expectType, nilOk)\n\t\t\telse\n\t\t\t\tcheckType(funcName, argIndex, arg, expectType, nilOk)\n\t\t\tend\n\t\tend\n\tend\nend\n\n--[[\n------------------------------------------------------------------------------------\n\
      -- isPositiveInteger\n--\n-- This function returns true if the given value is a positive integer, and false\n-- if not. Although it doesn't operate on tables, it is included here as it is\n-- useful for determining whether a given table key is in the array\
      \ part or the\n-- hash part of a table.\n------------------------------------------------------------------------------------\n--]]\nfunction export.isPositiveInteger(v)\n\treturn type(v) == 'number' and v &gt;= 1 and floor(v) == v and v &lt; infinity\n\
      end\n\n--[[\n------------------------------------------------------------------------------------\n-- isNan\n--\n-- This function returns true if the given number is a NaN value, and false\n-- if not. Although it doesn't operate on tables, it is included\
      \ here as it is\n-- useful for determining whether a value can be a valid table key. Lua will\n-- generate an error if a NaN is used as a table key.\n------------------------------------------------------------------------------------\n--]]\nfunction export.isNan(v)\n\
      \tif type(v) == 'number' and tostring(v) == '-nan' then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\n\n--[[\n------------------------------------------------------------------------------------\n-- shallowClone\n--\n-- This returns a clone of\
      \ a table. The value returned is a new table, but all\n-- subtables and functions are shared. Metamethods are respected, but the returned\n-- table will have no metatable of its own.\n------------------------------------------------------------------------------------\n\
      --]]\nfunction export.shallowClone(t)\n\tlocal ret = {}\n\tfor k, v in pairs(t) do\n\t\tret[k] = v\n\tend\n\treturn ret\nend\n\n--[[\nShallow copy\n]]\nfunction export.shallowcopy(orig)\n\tlocal orig_type = type(orig)\n\tlocal copy\n\tif orig_type == 'table'\
      \ then\n\t\tcopy = {}\n\t\tfor orig_key, orig_value in pairs(orig) do\n\t\t\tcopy[orig_key] = orig_value\n\t\tend\n\telse -- number, string, boolean, etc\n\t\tcopy = orig\n\tend\n\treturn copy\nend\n\n--[[\n\tRecursive deep copy function\n\tEquivalent\
      \ to mw.clone?\n]]\nlocal function deepcopy(orig, includeMetatable, already_seen)\n\t-- Stores copies of tables indexed by the original table.\n\talready_seen = already_seen or {}\n\t\n\tlocal copy = already_seen[orig]\n\tif copy ~= nil then\n\t\treturn\
      \ copy\n\tend\n\t\n\tif type(orig) == 'table' then\n\t\tcopy = {}\n\t\tfor orig_key, orig_value in pairs(orig) do\n\t\t\tcopy[deepcopy(orig_key, includeMetatable, already_seen)] = deepcopy(orig_value, includeMetatable, already_seen)\n\t\tend\n\t\talready_seen[orig]\
      \ = copy\n\t\t\n\t\tif includeMetatable then\n\t\t\tlocal mt = getmetatable(orig)\n\t\t\tif mt ~= nil then\n\t\t\t\tlocal mt_copy = deepcopy(mt, includeMetatable, already_seen)\n\t\t\t\tsetmetatable(copy, mt_copy)\n\t\t\tend\n\t\tend\n\telse -- number,\
      \ string, boolean, etc\n\t\tcopy = orig\n\tend\n\treturn copy\nend\n\nfunction export.deepcopy(orig, noMetatable, already_seen)\n\tcheckType(\"deepcopy\", 3, already_seen, \"table\", true)\n\t\n\treturn deepcopy(orig, not noMetatable, already_seen)\nend\n\
      \n--[[\n------------------------------------------------------------------------------------\n-- removeDuplicates\n--\n-- This removes duplicate values from an array. Non-positive-integer keys are\n-- ignored. The earliest value is kept, and all subsequent\
      \ duplicate values are\n-- removed, but otherwise the array order is unchanged.\n------------------------------------------------------------------------------------\n--]]\nfunction export.removeDuplicates(t)\n\tcheckType('removeDuplicates', 1, t, 'table')\n\
      \tlocal isNan = export.isNan\n\tlocal ret, exists = {}, {}\n\tlocal index = 1\n\tfor _, v in ipairs(t) do\n\t\tif isNan(v) then\n\t\t\t-- NaNs can't be table keys, and they are also unique, so we don't need to check existence.\n\t\t\tret[index] = v\n\t\
      \t\tindex = index + 1\n\t\telse\n\t\t\tif not exists[v] then\n\t\t\t\tret[index] = v\n\t\t\t\tindex = index + 1\n\t\t\t\texists[v] = true\n\t\t\tend\n\t\tend\n\tend\n\treturn ret\nend\n\n--[[\n------------------------------------------------------------------------------------\n\
      -- numKeys\n--\n-- This takes a table and returns an array containing the numbers of any numerical\n-- keys that have non-nil values, sorted in numerical order.\n------------------------------------------------------------------------------------\n--]]\n\
      function export.numKeys(t, checked)\n\tif not checked then\n\t\tcheckType('numKeys', 1, t, 'table')\n\tend\n\tlocal isPositiveInteger = export.isPositiveInteger\n\tlocal nums = {}\n\tlocal index = 1\n\tfor k, _ in pairs(t) do\n\t\tif isPositiveInteger(k)\
      \ then\n\t\t\tnums[index] = k\n\t\t\tindex = index + 1\n\t\tend\n\tend\n\ttable.sort(nums)\n\treturn nums\nend\n\nfunction export.maxIndex(t)\n\tcheckType('maxIndex', 1, t, 'table')\n\tlocal positiveIntegerKeys = export.numKeys(t)\n\tif positiveIntegerKeys[1]\
      \ then\n\t\treturn math.max(unpack(positiveIntegerKeys))\n\telse\n\t\treturn 0 -- ???\n\tend\nend\n\n--[[\n------------------------------------------------------------------------------------\n-- affixNums\n--\n-- This takes a table and returns an array\
      \ containing the numbers of keys with the\n-- specified prefix and suffix.\n-- affixNums({a1 = 'foo', a3 = 'bar', a6 = 'baz'}, \"a\")\n--\t\t↓\n-- {1, 3, 6}.\n------------------------------------------------------------------------------------\n--]]\n\
      function export.affixNums(t, prefix, suffix)\n\tlocal check = _check('affixNums')\n\tcheck(1, t, 'table')\n\tcheck(2, prefix, 'string', true)\n\tcheck(3, suffix, 'string', true)\n\t\n\tlocal function cleanPattern(s)\n\t\t-- Cleans a pattern so that the\
      \ magic characters ()%.[]*+-?^$ are interpreted literally.\n\t\ts = s:gsub('([%(%)%%%.%[%]%*%+%-%?%^%$])', '%%%1')\n\t\treturn s\n\tend\n\t\n\tprefix = prefix or ''\n\tsuffix = suffix or ''\n\tprefix = cleanPattern(prefix)\n\tsuffix = cleanPattern(suffix)\n\
      \tlocal pattern = '^' .. prefix .. '([1-9]%d*)' .. suffix .. '$'\n\t\n\tlocal nums = {}\n\tlocal index = 1\n\tfor k, _ in pairs(t) do\n\t\tif type(k) == 'string' then\n\t\t\tlocal num = mw.ustring.match(k, pattern)\n\t\t\tif num then\n\t\t\t\tnums[index]\
      \ = tonumber(num)\n\t\t\t\tindex = index + 1\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(nums)\n\treturn nums\nend\n\n--[[\n------------------------------------------------------------------------------------\n-- numData\n--\n-- Given a table with keys like\
      \ (\"foo1\", \"bar1\", \"foo2\", \"baz2\"), returns a table\n-- of subtables in the format\n-- { [1] = {foo = 'text', bar = 'text'}, [2] = {foo = 'text', baz = 'text'} }\n-- Keys that don't end with an integer are stored in a subtable named \"other\".\n\
      -- The compress option compresses the table so that it can be iterated over with\n-- ipairs.\n------------------------------------------------------------------------------------\n--]]\nfunction export.numData(t, compress)\n\tlocal check = _check('numData')\n\
      \tcheck(1, t, 'table')\n\tcheck(2, compress, 'boolean', true)\n\t\n\tlocal ret = {}\n\tfor k, v in pairs(t) do\n\t\tlocal prefix, num = tostring(k):match('^([^0-9]*)([1-9][0-9]*)$')\n\t\tif num then\n\t\t\tnum = tonumber(num)\n\t\t\tlocal subtable = ret[num]\
      \ or {}\n\t\t\tif prefix == '' then\n\t\t\t\t-- Positional parameters match the blank string; put them at the start of the subtable instead.\n\t\t\t\tprefix = 1\n\t\t\tend\n\t\t\tsubtable[prefix] = v\n\t\t\tret[num] = subtable\n\t\telse\n\t\t\tlocal subtable\
      \ = ret.other or {}\n\t\t\tsubtable[k] = v\n\t\t\tret.other = subtable\n\t\tend\n\tend\n\tif compress then\n\t\tlocal other = ret.other\n\t\tret = export.compressSparseArray(ret)\n\t\tret.other = other\n\tend\n\treturn ret\nend\n\n--[[\n------------------------------------------------------------------------------------\n\
      -- compressSparseArray\n--\n-- This takes an array with one or more nil values, and removes the nil values\n-- while preserving the order, so that the array can be safely traversed with\n-- ipairs.\n------------------------------------------------------------------------------------\n\
      --]]\nfunction export.compressSparseArray(t)\n\tcheckType('compressSparseArray', 1, t, 'table')\n\tlocal ret = {}\n\tlocal index = 1\n\tlocal nums = export.numKeys(t)\n\tfor _, num in ipairs(nums) do\n\t\tret[index] = t[num]\n\t\tindex = index + 1\n\t\
      end\n\treturn ret\nend\n\n--[[\n------------------------------------------------------------------------------------\n-- sparseIpairs\n--\n-- This is an iterator for sparse arrays. It can be used like ipairs, but can\n-- handle nil values.\n------------------------------------------------------------------------------------\n\
      --]]\nfunction export.sparseIpairs(t)\n\tcheckType('sparseIpairs', 1, t, 'table')\n\tlocal nums = export.numKeys(t)\n\tlocal i = 0\n\treturn function()\n\t\ti = i + 1\n\t\tlocal key = nums[i]\n\t\tif key then\n\t\t\treturn key, t[key]\n\t\telse\n\t\t\t\
      return nil, nil\n\t\tend\n\tend\nend\n\n--[[\n------------------------------------------------------------------------------------\n-- size\n--\n-- This returns the size of a key/value pair table. It will also work on arrays,\n-- but for arrays it is more\
      \ efficient to use the # operator.\n------------------------------------------------------------------------------------\n--]]\nfunction export.size(t)\n\tcheckType('size', 1, t, 'table')\n\tlocal i = 0\n\tfor _ in pairs(t) do\n\t\ti = i + 1\n\tend\n\t\
      return i\nend\n\n--[[\n-- This returns the length of a table, or the first integer key n counting from\n-- 1 such that t[n + 1] is nil. It is similar to the operator #, but may return\n-- a different value when there are gaps in the array portion of the\
      \ table.\n-- Intended to be used on data loaded with mw.loadData. For other tables, use #.\n--]]\nfunction export.length(t)\n\tlocal i = 0\n\trepeat\n\t\ti = i + 1\n\tuntil t[i] == nil\n\treturn i - 1\nend\n\n--[[\nTakes table and a value to be found.\n\
      If the value is in the array portion of the table, return true.\nIf the value is in the hashmap or not in the table, return false.\n]]\nfunction export.contains(list, x)\n\tfor _, v in ipairs(list) do\n\t\tif v == x then return true end\n\tend\n\treturn\
      \ false\nend\n\n--[[\nRecursively compare two values that may be tables, including tables with\nnested tables as values. Return true if both values are structurally equal.\nNote that this handles arbitary levels of nesting. If all tables are known\nto\
      \ be lists (with only integral keys), use export.deepEqualsList, which will\nbe more efficient.\n\nNOTE: This is *NOT* smart enough to properly handle cycles; in such a case, it\nwill get into an infinite loop.\n]]\nfunction export.deepEquals(x, y)\n \
      \   if type(x) == \"table\" and type(y) == \"table\" then\n    \t-- Two tables are the same if they have the same number of elements\n    \t-- and all keys that are present in one of the tables compare equal\n    \t-- to the corresponding keys in the other\
      \ table, using structural\n    \t-- comparison.\n    \tlocal sizex = 0\n        for key, value in pairs(x) do\n            if not export.deepEquals(value, y[key]) then\n                return false\n            end\n            sizex = sizex + 1\n    \
      \    end\n        local sizey = export.size(y)\n        if sizex ~= sizey then\n            return false\n        end \n        return true\n    end\n    return x == y\nend\n\n--[[\nRecursively compare two values that may be lists (i.e. tables with integral\n\
      keys), including lists with nested lists as values. Return true if both values\nare structurally equal. Note that this handles arbitary levels of nesting.\nResults are undefined if tables with non-integral keys are present anywhere in\neither structure;\
      \ if that may be the case, use export.deepEquals, which will\nhandle such tables correctly but be less efficient on lists than\nexport.deepEqualsList.\n\nNOTE: This is *NOT* smart enough to properly handle cycles; in such a case, it\nwill get into an infinite\
      \ loop.\n]]\nfunction export.deepEqualsList(x, y)\n    if type(x) == \"table\" and type(y) == \"table\" then\n        if #x ~= #y then\n            return false\n        end \n        for key, value in ipairs(x) do\n            if not export.deepEqualsList(value,\
      \ y[key]) then\n                return false\n            end\n        end\n        return true\n    end\n    return x == y\nend\n\n--[[\n\tFinds key for specified value in a given table.\n\tRoughly equivalent to reversing the key-value pairs in the table\
      \ –\n\t\treversed_table = { [value1] = key1, [value2] = key2, ... }\n\t– and then returning reversed_table[valueToFind].\n\t\n\tThe value can only be a string or a number\n\t(not nil, a boolean, a table, or a function).\n\t\n\tOnly reliable if there is\
      \ just one key with the specified value.\n\tOtherwise, the function returns the first key found,\n\tand the output is unpredictable.\n]]\nfunction export.keyFor(t, valueToFind)\n\tlocal check = _check('keyFor')\n\tcheck(1, t, 'table')\n\tcheck(2, valueToFind,\
      \ { 'string', 'number' })\n\t\n\tfor key, value in pairs(t) do\n\t\tif value == valueToFind then\n\t\t\treturn key\n\t\tend\n\tend\n\t\n\treturn nil\nend\n\n--[[\n\tThe default sorting function used in export.keysToList if no keySort\n\tis defined.\n]]\n\
      local function defaultKeySort(key1, key2)\n\t-- \"number\" &lt; \"string\", so numbers will be sorted before strings.\n\tlocal type1, type2 = type(key1), type(key2)\n\tif type1 ~= type2 then\n\t\treturn type1 &lt; type2\n\telse\n\t\treturn key1 &lt; key2\n\
      \tend\nend\n\n--[[\n\tReturns a list of the keys in a table, sorted using either the default\n\ttable.sort function or a custom keySort function.\n\tIf there are only numerical keys, numKeys is probably more efficient.\n]]\nfunction export.keysToList(t,\
      \ keySort, checked)\n\tif not checked then\n\t\tlocal check = _check('keysToList')\n\t\tcheck(1, t, 'table')\n\t\tcheck(2, keySort, 'function', true)\n\tend\n\t\n\tlocal list = {}\n\tlocal index = 1\n\tfor key, _ in pairs(t) do\n\t\tlist[index] = key\n\
      \t\tindex = index + 1\n\tend\n\t\n\t-- Place numbers before strings, otherwise sort using &lt;.\n\tif not keySort then\n\t\tkeySort = defaultKeySort\n\tend\n\t\n\ttable.sort(list, keySort)\n\t\n\treturn list\nend\n\n--[[\n\tIterates through a table, with\
      \ the keys sorted using the keysToList function.\n\tIf there are only numerical keys, sparseIpairs is probably more efficient.\n]]\nfunction export.sortedPairs(t, keySort)\n\tlocal check = _check('keysToList')\n\tcheck(1, t, 'table')\n\tcheck(2, keySort,\
      \ 'function', true)\n\t\n\tlocal list = export.keysToList(t, keySort, true)\n\t\n\tlocal i = 0\n\treturn function()\n\t\ti = i + 1\n\t\tlocal key = list[i]\n\t\tif key ~= nil then\n\t\t\treturn key, t[key]\n\t\telse\n\t\t\treturn nil, nil\n\t\tend\n\t\
      end\nend\n\nfunction export.reverseIpairs(list)\n\tcheckType('reverse_ipairs', 1, list, 'table')\n\t\n\tlocal i = #list + 1\n\treturn function()\n\t\ti = i - 1\n\t\tif list[i] ~= nil then\n\t\t\treturn i, list[i]\n\t\telse\n\t\t\treturn nil, nil\n\t\t\
      end\n\tend\nend\n\n--[=[\n\tJoins an array with serial comma and serial conjunction, normally \"and\".\n\tAn improvement on mw.text.listToText, which doesn't properly handle serial\n\tcommas.\n\t\n\tOptions:\n\t\t- conj\n\t\t\tConjunction to use; defaults\
      \ to \"and\".\n\t\t- italicizeConj\n\t\t\tItalicize conjunction: for [[Module:Template:also]]\n\t\t- dontTag\n\t\t\tDon't tag the serial comma and serial \"and\". For error messages, in\n\t\t\twhich HTML cannot be used.\n]=]\nfunction export.serialCommaJoin(seq,\
      \ options)\n\tlocal check = _check(\"serialCommaJoin\", \"table\")\n\tcheck(1, seq)\n\tcheck(2, options, true)\n\t\n\tlocal length = #seq\n\t\n\tif not options then\n\t\toptions = {}\n\tend\n\t\n\tlocal conj\n\tif length &gt; 1 then\n\t\tconj = options.conj\
      \ or \"and\"\n\t\tif options.italicizeConj then\n\t\t\tconj = \"''\" .. conj .. \"''\"\n\t\tend\n\tend\n\t\n\tif length == 0 then\n\t\treturn \"\"\n\telseif length == 1 then\n\t\treturn seq[1] -- nothing to join\n\telseif length == 2 then\n\t\treturn seq[1]\
      \ .. \" \" .. conj .. \" \" .. seq[2]\n\telse\n\t\tlocal comma = options.dontTag and \",\" or '&lt;span class=\"serial-comma\"&gt;,&lt;/span&gt;'\n\t\tconj = options.dontTag and ' ' .. conj .. \" \" or '&lt;span class=\"serial-and\"&gt; ' .. conj .. '&lt;/span&gt;\
      \ '\n\t\treturn table.concat(seq, \", \", 1, length - 1) ..\n\t\t\t\tcomma .. conj .. seq[length]\n\tend\nend\n\n--[[\n\tConcatenates all values in the table that are indexed by a number, in order.\n\tsparseConcat{ a, nil, c, d }  =&gt;  \"acd\"\n\tsparseConcat{\
      \ nil, b, c, d }  =&gt;  \"bcd\"\n]]\nfunction export.sparseConcat(t, sep, i, j)\n\tlocal list = {}\n\t\n\tlocal list_i = 0\n\tfor _, v in export.sparseIpairs(t) do\n\t\tlist_i = list_i + 1\n\t\tlist[list_i] = v\n\tend\n\t\n\treturn table.concat(list,\
      \ sep, i, j)\nend\n\n--[[\n\tValues of numberic keys in array portion of table are reversed:\n\t{ \"a\", \"b\", \"c\" } -&gt; { \"c\", \"b\", \"a\" }\n--]]\nfunction export.reverse(t)\n\tcheckType(\"reverse\", 1, t, \"table\")\n\t\n\tlocal new_t = {}\n\
      \tlocal new_t_i = 1\n\tfor i = #t, 1, -1 do\n\t\tnew_t[new_t_i] = t[i]\n\t\tnew_t_i = new_t_i + 1\n\tend\n\treturn new_t\nend\n\nfunction export.reverseConcat(t, sep, i, j)\n\treturn table.concat(export.reverse(t), sep, i, j)\nend\n\n-- { \"a\", \"b\"\
      , \"c\" } -&gt; { a = 1, b = 2, c = 3 }\nfunction export.invert(array)\n\tcheckType(\"invert\", 1, array, \"table\")\n\t\n\tlocal map = {}\n\tfor i, v in ipairs(array) do\n\t\tmap[v] = i\n\tend\n\t\n\treturn map\nend\n\n--[[\n\t{ \"a\", \"b\", \"c\" }\
      \ -&gt; { [\"a\"] = true, [\"b\"] = true, [\"c\"] = true }\n--]]\nfunction export.listToSet(t)\n\tcheckType(\"listToSet\", 1, t, \"table\")\n\t\n\tlocal set = {}\n\tfor _, item in ipairs(t) do\n\t\tset[item] = true\n\tend\n\treturn set\nend\n\n--[[\n\t\
      Returns true if all keys in the table are consecutive integers starting at 1.\n--]]\nfunction export.isArray(t)\n\tcheckType(\"isArray\", 1, t, \"table\")\n\t\n\tlocal i = 0\n\tfor _ in pairs(t) do\n\t\ti = i + 1\n\t\tif t[i] == nil then\n\t\t\treturn\
      \ false\n\t\tend\n\tend\n\treturn true\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T12:52:53.169Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Alanguages%2Fdata2&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=37831 t=1556369573026330
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:53 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1289.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1089 pass, cp3033 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 164608545, 94688580, 441146133
    body: !!binary |-
      PD94bWwgdmVyc2lvbj0iMS4wIj8+PGFwaSBiYXRjaGNvbXBsZXRlPSIiPjx3YXJuaW5ncz48bWFpbiB4bWw6c3BhY2U9InByZXNlcnZlIj5TdWJzY3JpYmUgdG8gdGhlIG1lZGlhd2lraS1hcGktYW5ub3VuY2UgbWFpbGluZyBsaXN0IGF0ICZsdDtodHRwczovL2xpc3RzLndpa2ltZWRpYS5vcmcvbWFpbG1hbi9saXN0aW5mby9tZWRpYXdpa2ktYXBpLWFubm91bmNlJmd0OyBmb3Igbm90aWNlIG9mIEFQSSBkZXByZWNhdGlvbnMgYW5kIGJyZWFraW5nIGNoYW5nZXMuIFVzZSBbW1NwZWNpYWw6QXBpRmVhdHVyZVVzYWdlXV0gdG8gc2VlIHVzYWdlIG9mIGRlcHJlY2F0ZWQgZmVhdHVyZXMgYnkgeW91ciBhcHBsaWNhdGlvbi48L21haW4+PHJldmlzaW9ucyB4bWw6c3BhY2U9InByZXNlcnZlIj5CZWNhdXNlICJydnNsb3RzIiB3YXMgbm90IHNwZWNpZmllZCwgYSBsZWdhY3kgZm9ybWF0IGhhcyBiZWVuIHVzZWQgZm9yIHRoZSBvdXRwdXQuIFRoaXMgZm9ybWF0IGlzIGRlcHJlY2F0ZWQsIGFuZCBpbiB0aGUgZnV0dXJlIHRoZSBuZXcgZm9ybWF0IHdpbGwgYWx3YXlzIGJlIHVzZWQuPC9yZXZpc2lvbnM+PC93YXJuaW5ncz48cXVlcnk+PHBhZ2VzPjxwYWdlIF9pZHg9IjQyMDYxODQiIHBhZ2VpZD0iNDIwNjE4NCIgbnM9IjgyOCIgdGl0bGU9Ik1vZHVsZTpsYW5ndWFnZXMvZGF0YTIiPjxyZXZpc2lvbnM+PHJldiB1c2VyPSJNYWhhZ2FqYSIgdGltZXN0YW1wPSIyMDE5LTA0LTI3VDExOjQ3OjAyWiIgY29udGVudGZvcm1hdD0idGV4dC9wbGFpbiIgY29udGVudG1vZGVsPSJTY3JpYnVudG8iIGNvbW1lbnQ9IiIgeG1sOnNwYWNlPSJwcmVzZXJ2ZSI+bG9jYWwgdSA9IG13LnVzdHJpbmcuY2hhcgoKLS0gVVRGLTggZW5jb2RlZCBzdHJpbmdzIGZvciBzb21lIGNvbW1vbmx5LXVzZWQgZGlhY3JpdGljcwpsb2NhbCBHUkFWRSAgICAgPSB1KDB4MDMwMCkKbG9jYWwgQUNVVEUgICAgID0gdSgweDAzMDEpCmxvY2FsIENJUkMgICAgICA9IHUoMHgwMzAyKQpsb2NhbCBUSUxERSAgICAgPSB1KDB4MDMwMykKbG9jYWwgTUFDUk9OICAgID0gdSgweDAzMDQpCmxvY2FsIEJSRVZFICAgICA9IHUoMHgwMzA2KQpsb2NhbCBET1RBQk9WRSAgPSB1KDB4MDMwNykKbG9jYWwgRElBRVIgICAgID0gdSgweDAzMDgpCmxvY2FsIENBUk9OICAgICA9IHUoMHgwMzBDKQpsb2NhbCBER1JBVkUgICAgPSB1KDB4MDMwRikKbG9jYWwgSU5WQlJFVkUgID0gdSgweDAzMTEpCmxvY2FsIERPVEJFTE9XICA9IHUoMHgwMzIzKQpsb2NhbCBSSU5HQkVMT1cgPSB1KDB4MDMyNSkKbG9jYWwgQ0VESUxMQSAgID0gdSgweDAzMjcpCmxvY2FsIE9HT05FSyAgICA9IHUoMHgwMzI4KQoKLS0gUHVuY3VhdGlvbiB0byBiZSB1c2VkIGZvciBzdGFuZGFyZENoYXJzIGZpZWxkCmxvY2FsIFBVTkNUVUFUSU9OID0gJyAhIyQlJmFtcDsqKywtLi86OyZsdDs9Jmd0Oz9AXl9gfH5cJygpJwoKbG9jYWwgQ3lybCA9IHsiQ3lybCJ9CmxvY2FsIExhdG4gPSB7IkxhdG4ifQpsb2NhbCBMYXRuQXJhYiA9IHsiTGF0biIsICJBcmFiIn0KCmxvY2FsIG0gPSB7fQoKbVsiYWEiXSA9IHsKCSJBZmFyIiwKCSJRMjc4MTEiLAoJImN1cyIsCglvdGhlck5hbWVzID0geyJRYWZhciJ9LAoJc2NyaXB0cyA9IExhdG4sCn0KCm1bImFiIl0gPSB7CgkiQWJraGF6IiwKCSJRNTExMSIsCgkiY2F1LWFieiIsCglvdGhlck5hbWVzID0geyJBYmtoYXppYW4iLCAiQWJ4YXpvIn0sCglzY3JpcHRzID0geyJDeXJsIiwgIkdlb3IiLCAiTGF0biJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gImFiLXRyYW5zbGl0IiwKCW92ZXJyaWRlX3RyYW5zbGl0ID0gdHJ1ZSwKCWVudHJ5X25hbWUgPSB7CgkJZnJvbSA9IHtHUkFWRSwgQUNVVEV9LAoJCXRvICAgPSB7fX0gLAp9CgptWyJhZSJdID0gewoJIkF2ZXN0YW4iLAoJIlEyOTU3MiIsCgkiaXJhLWNlbiIsCglvdGhlck5hbWVzID0geyJaZW5kIiwgIk9sZCBCYWN0cmlhbiJ9LAoJc2NyaXB0cyA9IHsiQXZzdCIsICJHdWpyIn0sCgl0cmFuc2xpdF9tb2R1bGUgPSAiQXZzdC10cmFuc2xpdCIsCgl3aWtpcGVkaWFfYXJ0aWNsZSA9ICJBdmVzdGFuIiwKfQoKbVsiYWYiXSA9IHsKCSJBZnJpa2FhbnMiLAoJIlExNDE5NiIsCgkiZ213IiwKCXNjcmlwdHMgPSBMYXRuQXJhYiwKCWFuY2VzdG9ycyA9IHsibmwifSwKCXNvcnRfa2V5ID0gewoJCWZyb20gPSB7IlvDpMOhw6LDoF0iLCAiW8Orw6nDqsOoXSIsICJbw6/DrcOuw6xdIiwgIlvDtsOzw7TDsl0iLCAiW8O8w7rDu8O5XSIsICJbw7/DvcW34buzXSIsICJeLSIsICInIn0sCgkJdG8gICA9IHsiYSIJICwgImUiCSwgImkiCSwgIm8iCSwgInUiICAsICJ5IiB9fSAsCn0KCm1bImFrIl0gPSB7CgkiQWthbiIsCgkiUTI4MDI2IiwKCSJhbHYta3dhIiwKCW90aGVyTmFtZXMgPSB7IlR3aS1GYW50ZSIsICJUd2kiLCAiRmFudGUiLCAiRmFudGkiLCAiQXNhbnRlIiwgIkFrdWFwZW0ifSwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJhbSJdID0gewoJIkFtaGFyaWMiLAoJIlEyODI0NCIsCgkic2VtLWV0aCIsCglzY3JpcHRzID0geyJFdGhpIn0sCgl0cmFuc2xpdF9tb2R1bGUgPSAiRXRoaS10cmFuc2xpdCIsCn0KCm1bImFuIl0gPSB7CgkiQXJhZ29uZXNlIiwKCSJRODc2NSIsCgkicm9hLWliZSIsCglzY3JpcHRzID0gTGF0biwKCWFuY2VzdG9ycyA9IHsicm9hLW9hbiJ9LAp9CgptWyJhciJdID0gewoJIkFyYWJpYyIsCgkiUTEzOTU1IiwKCSJzZW0tYXJiIiwKCW90aGVyTmFtZXMgPSB7Ik1vZGVybiBTdGFuZGFyZCBBcmFiaWMiLCAiU3RhbmRhcmQgQXJhYmljIiwgIkxpdGVyYXJ5IEFyYWJpYyIsICJDbGFzc2ljYWwgQXJhYmljIn0sCglzY3JpcHRzID0geyJBcmFiIiwgIkJyYWkifSwKCS0tIGFsaWYgd2HhuaNsIHRvIGFsaWYsIHJlbW92ZSBkaWFjcml0aWNzCgllbnRyeV9uYW1lID0gewoJCWZyb20gPSB7dSgweDA2NzEpLCB1KDB4MDY0QiksIHUoMHgwNjRDKSwgdSgweDA2NEQpLCB1KDB4MDY0RSksIHUoMHgwNjRGKSwgdSgweDA2NTApLCB1KDB4MDY1MSksIHUoMHgwNjUyKSwgdSgweDA2NzApLCB1KDB4MDY0MCl9LAoJCXRvICAgPSB7dSgweDA2MjcpfX0sCgl0cmFuc2xpdF9tb2R1bGUgPSAiYXItdHJhbnNsaXQiLAoJc3RhbmRhcmRDaGFycyA9ICLYoS3YutmBLdmS2bDZsSIgLi4gUFVOQ1RVQVRJT04gLi4gItmgLdmp2IzYm9if2avZrNmAIiwKfQoKbVsiYXMiXSA9IHsKCSJBc3NhbWVzZSIsCglvdGhlck5hbWVzID0geyJBc2FtaXlhIn0sCgkiUTI5NDAxIiwKCSJpbmMiLAoJc2NyaXB0cyA9IHsiQmVuZyJ9LAoJYW5jZXN0b3JzID0geyJpbmMtbWFzIn0sCgl0cmFuc2xpdF9tb2R1bGUgPSAiYXMtdHJhbnNsaXQiLAp9CgptWyJhdiJdID0gewoJIkF2YXIiLAoJIlEyOTU2MSIsCgkiY2F1LW5lYyIsCglvdGhlck5hbWVzID0geyJBdmFyaWMifSwKCXNjcmlwdHMgPSBDeXJsLAoJYW5jZXN0b3JzID0geyJvYXYifSwKCXRyYW5zbGl0X21vZHVsZSA9ICJhdi10cmFuc2xpdCIsCglvdmVycmlkZV90cmFuc2xpdCA9IHRydWUsCgllbnRyeV9uYW1lID0gewoJCWZyb20gPSB7R1JBVkUsIEFDVVRFfSwKCQl0byAgID0ge319ICwKfQoKbVsiYXkiXSA9IHsKCSJBeW1hcmEiLAoJIlE0NjI3IiwKCSJzYWktYXltIiwKCW90aGVyTmFtZXMgPSB7IlNvdXRoZXJuIEF5bWFyYSIsICJDZW50cmFsIEF5bWFyYSJ9LAoJc2NyaXB0cyA9IExhdG4sCn0KCm1bImF6Il0gPSB7CgkiQXplcmJhaWphbmkiLAoJIlE5MjkyIiwKCSJ0cmstb2d6IiwKCW90aGVyTmFtZXMgPSB7IkF6ZXJpIiwgIkF6YXJpIiwgIkF6ZXJpIFR1cmtpYyIsICJBemVyYmFpamFuaSBUdXJraWMiLCAiTm9ydGggQXplcmJhaWphbmkiLCAiU291dGggQXplcmJhaWphbmkiLCAiQWZzaGFyIiwgIkFmc2hhcmkiLCAiQWZzaGFyIEF6ZXJiYWlqYW5pIiwgIkFmY2hhciIsICJRYXNocWEnaSIsICJRYXNocWFpIiwgIkthc2hrYXkiLCAiU29ucW9yIn0sCglzY3JpcHRzID0geyJMYXRuIiwgIkN5cmwiLCAiZmEtQXJhYiJ9LAoJYW5jZXN0b3JzID0geyJ0cmstb2F0In0sCn0KCm1bImJhIl0gPSB7CgkiQmFzaGtpciIsCgkiUTEzMzg5IiwKCSJ0cmsta2lwIiwKCXNjcmlwdHMgPSBDeXJsLAoJdHJhbnNsaXRfbW9kdWxlID0gImJhLXRyYW5zbGl0IiwKCW92ZXJyaWRlX3RyYW5zbGl0ID0gdHJ1ZSwKfQoKbVsiYmUiXSA9IHsKCSJCZWxhcnVzaWFuIiwKCSJROTA5MSIsCgkiemxlIiwKCW90aGVyTmFtZXMgPSB7IkJlbG9ydXNzaWFuIiwgIkJlbGFydXNhbiIsICJCaWVsb3J1c3NpYW4iLCAiQnllbG9ydXNzaWFuIiwgIkJlbGFydXNzaWFuIiwgIldoaXRlIFJ1c3NpYW4ifSwKCXNjcmlwdHMgPSBDeXJsLAoJYW5jZXN0b3JzID0geyJvcnYifSwKCXRyYW5zbGl0X21vZHVsZSA9ICJiZS10cmFuc2xpdCIsCglzb3J0X2tleSA9IHsKCQlmcm9tID0geyLQgSIsICLRkSJ9LAoJCXRvICAgPSB7ItCVIiAsICLQtSJ9fSwKCWVudHJ5X25hbWUgPSB7CgkJZnJvbSA9IHsi0IAiLCAi0ZAiLCBHUkFWRSwgQUNVVEV9LAoJCXRvICAgPSB7ItCVIiwgItC1In19LAp9CgptWyJiZyJdID0gewoJIkJ1bGdhcmlhbiIsCgkiUTc5MTgiLAoJInpscyIsCglzY3JpcHRzID0geyJDeXJsIn0sCglhbmNlc3RvcnMgPSB7ImN1In0sCgl0cmFuc2xpdF9tb2R1bGUgPSAiYmctdHJhbnNsaXQiLAoJZW50cnlfbmFtZSA9IHsKCQlmcm9tID0geyLQgCIsICLRkCIsICLQjSIsICLRnSIsIEdSQVZFLCBBQ1VURX0sCgkJdG8gICA9IHsi0JUiLCAi0LUiLCAi0JgiLCAi0LgifX0sCn0KCm1bImJoIl0gPSB7CgkiQmloYXJpIiwKCSJRMTM1MzA1IiwKCSJpbmMiLAoJc2NyaXB0cyA9IHsiRGV2YSJ9LAoJYW5jZXN0b3JzID0geyJpbmMtbWdkIn0sCn0KCm1bImJpIl0gPSB7CgkiQmlzbGFtYSIsCgkiUTM1NDUyIiwKCSJjcnAiLAoJc2NyaXB0cyA9IExhdG4sCglhbmNlc3RvcnMgPSB7ImVuIn0sCn0KCm1bImJtIl0gPSB7CgkiQmFtYmFyYSIsCgkiUTMzMjQzIiwKCSJkbW4tbWFuIiwKCW90aGVyTmFtZXMgPSB7IkJhbWFuYW5rYW4ifSwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJibiJdID0gewoJIkJlbmdhbGkiLAoJIlE5NjEwIiwKCSJpbmMiLAoJb3RoZXJOYW1lcyA9IHsiQmFuZ2xhIn0sCglzY3JpcHRzID0geyJCZW5nIiwgIk5ld2EifSwKCWFuY2VzdG9ycyA9IHsiaW5jLW1ibiJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gImJuLXRyYW5zbGl0IiwKfQoKbVsiYm8iXSA9IHsKCSJUaWJldGFuIiwKCSJRMzQyNzEiLAoJInRicSIsCglvdGhlck5hbWVzID0geyLDnCIsICJEYnVzIiwgIkxoYXNhIiwgIkxoYXNhIFRpYmV0YW4iLCAiQW1kbyBUaWJldGFuIiwgIkFtZG8iLCAiUGFuYW5nIiwgIktoYW1zIiwgIktoYW1zIFRpYmV0YW4iLCAiS2hhbWJhIiwgIlRzZWt1IiwgIkRvbHBvIiwgIkh1bWxhIiwgIkxpbWkiLCAiTGhvbWkiLCAiU2hpbmcgU2FhcGEiLCAiTXVnb20iLCAiTXVndSIsICJOdWJyaSIsICJXYWx1bmdnZSIsICJHb2xhIiwgIlRodWRhbSIsICJMb3dhIiwgIkxva2UiLCAiTXVzdGFuZyIsICJUaWNodXJvbmcifSwgLS0gYW5kICJHeWFsc3VtZG8iLCAiTG93ZXIgTWFuYW5nIj8gIkt5aXJvbmciPwoJc2NyaXB0cyA9IHsiVGlidCJ9LCAtLSBzb21ldGltZXMgRGV2YT8KCWFuY2VzdG9ycyA9IHsieGN0In0sCgl0cmFuc2xpdF9tb2R1bGUgPSAiYm8tdHJhbnNsaXQiLAoJb3ZlcnJpZGVfdHJhbnNsaXQgPSB0cnVlLAp9CgptWyJiciJdID0gewoJIkJyZXRvbiIsCgkiUTEyMTA3IiwKCSJjZWwtYnJ5IiwKCXNjcmlwdHMgPSBMYXRuLAoJYW5jZXN0b3JzID0geyJ4Ym0ifSwKfQoKbVsiY2EiXSA9IHsKCSJDYXRhbGFuIiwKCSJRNzAyNiIsCgkicm9hIiwKCW90aGVyTmFtZXMgPSB7IlZhbGVuY2lhbiJ9LAoJc2NyaXB0cyA9IExhdG4sCglhbmNlc3RvcnMgPSB7InJvYS1vY2EifSwKCXNvcnRfa2V5ID0gewoJCWZyb20gPSB7IsOgIiwgIlvDqMOpXSIsICJbw63Dr10iLCAiW8Oyw7NdIiwgIlvDusO8XSIsICLDpyIsICJswrdsIn0sCgkJdG8gICA9IHsiYSIsICJlIiAgICwgImkiICAgLCAibyIgICAsICJ1IiAgICwgImMiLCAibGwiIH19ICwKfQoKbVsiY2UiXSA9IHsKCSJDaGVjaGVuIiwKCSJRMzMzNTAiLAoJImNhdS1ua2giLAoJc2NyaXB0cyA9IEN5cmwsCgl0cmFuc2xpdF9tb2R1bGUgPSAiY2UtdHJhbnNsaXQiLAoJb3ZlcnJpZGVfdHJhbnNsaXQgPSB0cnVlLAoJZW50cnlfbmFtZSA9IHsKCQlmcm9tID0ge01BQ1JPTn0sCgkJdG8gICA9IHt9fSwKfQoKbVsiY2giXSA9IHsKCSJDaGFtb3JybyIsCgkiUTMzMjYyIiwKCSJwb3otc3VzIiwKCW90aGVyTmFtZXMgPSB7IkNoYW1vcnUifSwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJjbyJdID0gewoJIkNvcnNpY2FuIiwKCSJRMzMxMTEiLAoJInJvYS1pdGQiLAoJb3RoZXJOYW1lcyA9IHsiQ29yc3UifSwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJjciJdID0gewoJIkNyZWUiLAoJIlEzMzM5MCIsCgkiYWxnIiwKCXNjcmlwdHMgPSB7IkNhbnMiLCAiTGF0biJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gImNyLXRyYW5zbGl0IiwKfQoKbVsiY3MiXSA9IHsKCSJDemVjaCIsCgkiUTkwNTYiLAoJInpsdyIsCglzY3JpcHRzID0gTGF0biwKCWFuY2VzdG9ycyA9IHsiemx3LW9jcyJ9LAoJc29ydF9rZXkgPSB7CgkJZnJvbSA9IHsiw6EiLCAiw6kiLCAiw60iLCAiw7MiLCAiW8O6xa9dIiwgIsO9In0sCgkJdG8gICA9IHsiYSIsICJlIiwgImkiLCAibyIsICJ1IiAgICwgInkifX0gLAp9CgptWyJjdSJdID0gewoJIk9sZCBDaHVyY2ggU2xhdm9uaWMiLAoJIlEzNTQ5OSIsCgkiemxzIiwKCW90aGVyTmFtZXMgPSB7Ik9sZCBDaHVyY2ggU2xhdmljIn0sCglzY3JpcHRzID0geyJDeXJzIiwgIkdsYWcifSwKCXRyYW5zbGl0X21vZHVsZSA9ICJDeXJzLUdsYWctdHJhbnNsaXQiLAoJZW50cnlfbmFtZSA9IHsKCQlmcm9tID0ge3UoMHgwNDg0KX0sIC0tIGthbW9yYQoJCXRvICAgPSB7fX0sCglzb3J0X2tleSA9IHsKCQlmcm9tID0geyLQvtGDIiwgItGUIn0sCgkJdG8gICA9IHsi0YMiICwgItC1In19ICwKfQoKbVsiY3YiXSA9IHsKCSJDaHV2YXNoIiwKCSJRMzMzNDgiLAoJInRyay1vZ3IiLAoJc2NyaXB0cyA9IEN5cmwsCgl0cmFuc2xpdF9tb2R1bGUgPSAiY3YtdHJhbnNsaXQiLAoJb3ZlcnJpZGVfdHJhbnNsaXQgPSB0cnVlLAp9CgptWyJjeSJdID0gewoJIldlbHNoIiwKCSJROTMwOSIsCgkiY2VsLWJyeSIsCglzY3JpcHRzID0gTGF0biwKCWFuY2VzdG9ycyA9IHsid2xtIn0sCglzb3J0X2tleSA9IHsKCQlmcm9tID0geyJbw6LDocOgw6RdIiwgImNoIiwgImRkIiwgIlvDqsOpw6jDq10iLCAiZmYiLCAibmdoIiwgIlvDrsOtw6zDr10iLCAibGwiLCAiW8O0w7PDssO2XSIsICJwaCIsICJyaCIsICJ0aCIsICJbw7vDusO5w7xdIiwgIlvFteG6g+G6geG6hV0iLCAiW8W3w73hu7PDv10iLCAiJyJ9LAoJCXRvICAgPSB7ImEiCSAgICAsICJjfiIsICJkfiIsICJlIgkgICwgImZ+IiwgImd+aCIsICJpIgkgICwgImx+IiwgIm8iCSAgLCAicH4iLCAicn4iLCAidH4iLCAidSIJICAsICJ3IiAgICAgLCAieSIJICAgICAgIH19ICwKCXN0YW5kYXJkQ2hhcnMgPSAiQS1JTC1QUi1VV1lhLWlsLXByLXV3eTAtOcOCw6LDisOqw47DrsOUw7TDm8O7xbTFtcW2xbciIC4uIFBVTkNUVUFUSU9OLAp9CgptWyJkYSJdID0gewoJIkRhbmlzaCIsCgkiUTkwMzUiLAoJImdtcSIsCglzY3JpcHRzID0gTGF0biwKCWFuY2VzdG9ycyA9IHsiZ21xLW9kYSJ9LAp9CgptWyJkZSJdID0gewoJIkdlcm1hbiIsCgkiUTE4OCIsCgkiZ213IiwKCW90aGVyTmFtZXMgPSB7IkhpZ2ggR2VybWFuIiwgIk5ldyBIaWdoIEdlcm1hbiIsICJEZXV0c2NoIn0sCglzY3JpcHRzID0geyJMYXRuIiwgIkxhdGYifSwKCWFuY2VzdG9ycyA9IHsiZ21oIn0sCglzb3J0X2tleSA9IHsKCQlmcm9tID0geyJbw6TDoMOhw6LDpV0iLCAiW8Orw6jDqcOqXSIsICJbw6/DrMOtw65dIiwgIlvDtsOyw7PDtF0iLCAiW8O8w7nDusO7XSIsICLDnyIgfSwKCQl0byAgID0geyJhIgkgICwgImUiCSAsICJpIgkgLCAibyIJICwgInUiCSAsICJzcyJ9fSAsCglzdGFuZGFyZENoYXJzID0gIkEtWmEtejAtOcOEw6TDlsO2w5zDvMOfIiAuLiBQVU5DVFVBVElPTiwKfQoKbVsiZHYiXSA9IHsKCSJEaGl2ZWhpIiwKCSJRMzI2NTYiLAoJImluYyIsCglvdGhlck5hbWVzID0geyJEaXZlaGkiLCAiTWFoYWwiLCAiTWFobCIsICJNYWxkaXZpYW4ifSwKCXNjcmlwdHMgPSB7IlRoYWEifSwKCWFuY2VzdG9ycyA9IHsicG1oIn0sCS0tIG9yIEhlbHU/Cgl0cmFuc2xpdF9tb2R1bGUgPSAiZHYtdHJhbnNsaXQiLAoJb3ZlcnJpZGVfdHJhbnNsaXQgPSB0cnVlLAp9CgptWyJkeiJdID0gewoJIkR6b25na2hhIiwKCSJRMzMwODEiLAoJInRicSIsCglzY3JpcHRzID0geyJUaWJ0In0sCglhbmNlc3RvcnMgPSB7InhjdCJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gImJvLXRyYW5zbGl0IiwKCW92ZXJyaWRlX3RyYW5zbGl0ID0gdHJ1ZSwKfQoKbVsiZWUiXSA9IHsKCSJFd2UiLAoJIlEzMDAwNSIsCgkiYWx2LXZvbiIsCglzY3JpcHRzID0gTGF0biwKfQoKbVsiZWwiXSA9IHsKCSJHcmVlayIsCgkiUTkxMjkiLAoJImdyayIsCglvdGhlck5hbWVzID0geyJNb2Rlcm4gR3JlZWsiLCAiTmVvLUhlbGxlbmljIn0sCglzY3JpcHRzID0geyJHcmVrIiwgIkJyYWkifSwKCWFuY2VzdG9ycyA9IHsiZ3JjIn0sCgl0cmFuc2xpdF9tb2R1bGUgPSAiZWwtdHJhbnNsaXQiLAoJb3ZlcnJpZGVfdHJhbnNsaXQgPSB0cnVlLAoJc29ydF9rZXkgPSB7ICAtLSBLZWVwIHRoaXMgc3luY2hyb25pemVkIHdpdGggZ3JjLCBjcGcsIHBudAoJCWZyb20gPSB7IlvhvrPOrOG+tOG9sOG+suG+tuG+t+G8gOG+gOG8hOG+hOG8guG+guG8huG+huG8geG+geG8heG+heG8g+G+g+G8h+G+h10iLCAiW86t4b2y4byQ4byU4byS4byR4byV4byTXSIsICJb4b+Dzq7hv4ThvbThv4Lhv4bhv4fhvKDhvpDhvKThvpThvKLhvpLhvKbhvpbhvKHhvpHhvKXhvpXhvKPhvpPhvKfhvpddIiwgIlvOr+G9tuG/luG8sOG8tOG8suG8tuG8seG8teG8s+G8t8+KzpDhv5Lhv5ddIiwgIlvPjOG9uOG9gOG9hOG9guG9geG9heG9g10iLCAiW8+N4b264b+m4b2Q4b2U4b2S4b2W4b2R4b2V4b2T4b2Xz4vOsOG/ouG/p10iLCAiW+G/s8+O4b+04b284b+y4b+24b+34b2g4b6g4b2k4b6k4b2i4b6i4b2m4b6m4b2h4b6h4b2l4b6l4b2j4b6j4b2n4b6nXSIsICLhv6UiLCAiz4IifSwKCQl0byAgID0geyLOsSIJCQkJCQksICLOtSIJCSAsICLOtyIJCQkJCQksICLOuSIJCQkJLCAizr8iCQkgLCAiz4UiCQkJCSwgIs+JIgkJCQkJCSwgIs+BIiwgIs+DIn19ICwKCXN0YW5kYXJkQ2hhcnMgPSAizbo7zoQtz47PnM+dIiAuLiBQVU5DVFVBVElPTiAuLiAi4byALeG/viIsCn0KCm1bImVuIl0gPSB7CgkiRW5nbGlzaCIsCgkiUTE4NjAiLAoJImdtdyIsCglvdGhlck5hbWVzID0geyJNb2Rlcm4gRW5nbGlzaCIsICJOZXcgRW5nbGlzaCIsICJIYXdhaWlhbiBDcmVvbGUgRW5nbGlzaCIsICJIYXdhaSdpYW4gQ3Jlb2xlIEVuZ2xpc2giLCAiSGF3YWlpYW4gQ3Jlb2xlIiwgIkhhd2FpJ2lhbiBDcmVvbGUiLCAiUG9sYXJpIiwgIllpbmdsaXNoIn0sIC0tIGFsbCBidXQgdGhlIGZpcnN0IHRocmVlIGFyZSBuYW1lcyBvZiBzdWJzdW1lZCBkaWFsZWN0cyB3aGljaCBvbmNlIGhhZCBjb2RlcwoJc2NyaXB0cyA9IHsiTGF0biIsICJCcmFpIiwgIlNoYXciLCAiRHNydCJ9LCAtLSBlbnRyaWVzIGluIFNoYXcgb3IgRHNydCBtaWdodCByZXF1aXJlIHByaW9yIGRpc2N1c3Npb24KCWFuY2VzdG9ycyA9IHsiZW5tIn0sCglzb3J0X2tleSA9IHsKCQlmcm9tID0geyJbw6TDoMOhw6LDpcSBXSIsICJbw6vDqMOpw6rEk10iLCAiW8Ovw6zDrcOuxKtdIiwgIlvDtsOyw7PDtMWNXSIsICJbw7zDucO6w7vFq10iLCAiw6YiICwgIsWTIiAsICJbw6fEjV0iLCAiw7EiLCAiJyJ9LAoJCXRvICAgPSB7ImEiICAgICAgICwgImUiICAgICAgLCAiaSIgICAgICAsICJvIiAgICAgICwgInUiICAgICAgLCAiYWUiLCAib2UiLCAiYyIgICAsICJuIn19LAoJd2lraW1lZGlhX2NvZGVzID0geyJlbiIsICJzaW1wbGUifSwKCXN0YW5kYXJkQ2hhcnMgPSAiQS1aYS16MC05IiAuLiBQVU5DVFVBVElPTiAuLiB1KDB4MjgwMCkgLi4gIi0iIC4uIHUoMHgyOEZGKSwKfQoKbVsiZW8iXSA9IHsKCSJFc3BlcmFudG8iLAoJIlExNDMiLAoJImFydCIsCglzY3JpcHRzID0gTGF0biwKCXNvcnRfa2V5ID0gewoJCWZyb20gPSB7IlvDocOgXSIsICJbw6nDqF0iLCAiW8Otw6xdIiwgIlvDs8OyXSIsICJbw7rDuV0iLCAiW8SJXSIsICJbxJ1dIiwgIlvEpV0iLCAiW8S1XSIsICJbxZ1dIiwgIlvFrV0ifSwKCQl0byAgID0geyJhIgkgICAsICJlIiAgLCAiaSIgICwgIm8iICAsICJ1IiwgImPEiSIsICJnxIkiLCAiaMSJIiwgImrEiSIsICJzxIkiLCAidcSJIn19ICwKfQoKbVsiZXMiXSA9IHsKCSJTcGFuaXNoIiwKCSJRMTMyMSIsCgkicm9hLWliZSIsCglvdGhlck5hbWVzID0geyJDYXN0aWxpYW4iLCAiQW1hem9uaWFuIFNwYW5pc2giLCAiQW1hem9uaWMgU3BhbmlzaCIsICJMb3JldG8tVWNheWFsaSBTcGFuaXNoIn0sCglzY3JpcHRzID0geyJMYXRuIiwgIkJyYWkifSwKCWFuY2VzdG9ycyA9IHsib3NwIn0sCglzb3J0X2tleSA9IHsKCQlmcm9tID0geyLDoSIsICLDqSIsICLDrSIsICLDsyIsICJbw7rDvF0iLCAiw6ciLCAiw7EifSwKCQl0byAgID0geyJhIiwgImUiLCAiaSIsICJvIiwgInUiICAgLCAiYyIsICJuIn19LAoJc3RhbmRhcmRDaGFycyA9ICJBLVZYWVphLXZ4eXowLTnDgcOhw4nDqcONw63Dk8Ozw5rDusORw7HCv8KhIiAuLiBQVU5DVFVBVElPTiwKfQoKbVsiZXQiXSA9IHsKCSJFc3RvbmlhbiIsCgkiUTkwNzIiLAoJImZpdS1maW4iLAoJc2NyaXB0cyA9IExhdG4sCn0KCm1bImV1Il0gPSB7CgkiQmFzcXVlIiwKCSJRODc1MiIsCgkiZXVxIiwKCW90aGVyTmFtZXMgPSB7IkV1c2thcmEifSwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJmYSJdID0gewoJIlBlcnNpYW4iLAoJIlE5MTY4IiwKCSJpcmEtc3dpIiwKCW90aGVyTmFtZXMgPSB7IkZhcnNpIiwgIk5ldyBQZXJzaWFuIiwgIk1vZGVybiBQZXJzaWFuIiwgIldlc3Rlcm4gUGVyc2lhbiIsICJJcmFuaWFuIFBlcnNpYW4iLCAiRWFzdGVybiBQZXJzaWFuIiwgIkRhcmkiLCAiQWltYXEiLCAiQWltYWsiLCAiQXltYXEiLCAiRWltYWsifSwKCXNjcmlwdHMgPSB7ImZhLUFyYWIifSwKCWFuY2VzdG9ycyA9IHsicGFsIn0sIC0tICJpcmEtbWlkIgoJZW50cnlfbmFtZSA9IHsKCQlmcm9tID0ge3UoMHgwNjRFKSwgdSgweDA2NEYpLCB1KDB4MDY1MCksIHUoMHgwNjUxKSwgdSgweDA2NTIpfSwKCQl0byAgID0ge319ICwKfQoKbVsiZmYiXSA9IHsKCSJGdWxhIiwKCSJRMzM0NTQiLAoJImFsdi1zbmciLAoJb3RoZXJOYW1lcyA9IHsiQWRhbWF3YSBGdWxmdWxkZSIsICJCYWdpcm1pIEZ1bGZ1bGRlIiwgIkJvcmd1IEZ1bGZ1bGRlIiwgIkNlbnRyYWwtRWFzdGVybiBOaWdlciBGdWxmdWxkZSIsICJGdWxhbmkiLCAiRnVsZnVsZGUiLCAiTWFhc2luYSBGdWxmdWxkZSIsICJOaWdlcmlhbiBGdWxmdWxkZSIsICJQdWxhciIsICJQdWxhYXIiLCAiV2VzdGVybiBOaWdlciBGdWxmdWxkZSJ9LCAtLSBNYWFzaW5hLCBldGMgYXJlIGRpYWxlY3RzLCBzdWJzdW1lZCBpbnRvIHRoaXMgY29kZQoJc2NyaXB0cyA9IHsiTGF0biIsICJBZGxtIn0sCn0KCm1bImZpIl0gPSB7CgkiRmlubmlzaCIsCgkiUTE0MTIiLAoJImZpdS1maW4iLAoJb3RoZXJOYW1lcyA9IHsiU3VvbWkiLCAiQm90bmlhbiJ9LAoJc2NyaXB0cyA9IExhdG4sCgllbnRyeV9uYW1lID0gewoJCWZyb20gPSB7IsujIn0sICAtLSBVc2VkIHRvIGluZGljYXRlIGdlbWluYXRpb24gb2YgdGhlIG5leHQgY29uc29uYW50CgkJdG8gICA9IHt9fSwKCXNvcnRfa2V5ID0gewoJCWZyb20gPSB7IlvDocOgw6LDo10iLCAiW8Opw6jDquG6vV0iLCAiW8Otw6zDrsSpXSIsICJbw7PDssO0w7VdIiwgIlvDusO5w7vFqV0iLCAiW8O94buzxbfDvMWxXSIsICJbw7jDtcWRXSIsICLDpiIgLCAixZMiICwgIlvEjcOnXSIsICLFoSIsICLFviIsICLDnyIgLCAiWyc6XSJ9LAoJCXRvICAgPSB7ImEiCSAsICJlIgkgLCAiaSIJICwgIm8iCSAsICJ1IgkgLCAgInkiCSAsICLDtiIJLCAiYWUiLCAib2UiLCAiYyIgICAsICJzIiwgInoiLCAic3MifX0gLAp9CgptWyJmaiJdID0gewoJIkZpamlhbiIsCgkiUTMzMjk1IiwKCSJwb3otb2NjIiwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJmbyJdID0gewoJIkZhcm9lc2UiLAoJIlEyNTI1OCIsCgkiZ21xIiwKCXNjcmlwdHMgPSBMYXRuLAoJYW5jZXN0b3JzID0geyJub24ifSwKfQoKbVsiZnIiXSA9IHsKCSJGcmVuY2giLAoJIlExNTAiLAoJInJvYS1vaWwiLAoJb3RoZXJOYW1lcyA9IHsiTW9kZXJuIEZyZW5jaCJ9LAoJc2NyaXB0cyA9IHsiTGF0biIsICJCcmFpIn0sCglhbmNlc3RvcnMgPSB7ImZybSJ9LAoJc29ydF9rZXkgPSB7CgkJZnJvbSA9IHsiW8Ohw6DDosOkXSIsICJbw6nDqMOqw6tdIiwgIlvDrcOsw67Dr10iLCAiW8Ozw7LDtMO2XSIsICJbw7rDucO7w7xdIiwgIlvDveG7s8W3w79dIiwgIsOnIiwgIsOmIiAsICLFkyIgLCAiJyJ9LAoJCXRvICAgPSB7ImEiCSAsICJlIgkgLCAiaSIJICwgIm8iCSAsICJ1IgkgLCAieSIJICwgImMiLCAiYWUiLCAib2UifX0sCglzdGFuZGFyZENoYXJzID0gIkEtWmEtejAtOcOAw4LDh8OJw4jDisOLw47Dj8OUxZLDm8OZw5zDoMOiw6fDqcOow6rDq8Ouw6/DtMWTw7vDucO8wqvCuyIgLi4gUFVOQ1RVQVRJT04sCn0KCm1bImZ5Il0gPSB7CgkiV2VzdCBGcmlzaWFuIiwKCSJRMjcxNzUiLAoJImdtdy1mcmkiLAoJb3RoZXJOYW1lcyA9IHsiV2VzdGVybiBGcmlzaWFuIiwgIkZyaXNpYW4ifSwKCXNjcmlwdHMgPSBMYXRuLAoJYW5jZXN0b3JzID0geyJvZnMifSwKCXNvcnRfa2V5ID0gewoJCWZyb20gPSB7IlvDoMOhw6LDpF0iLCAiW8Oow6nDqsOrXSIsICJbw6zDrcOuw6954buzw73Ft8O/XSIsICJbw7LDs8O0w7ZdIiwgIlvDucO6w7vDvF0iLCAiw6YiLCAiWyAvLi1dIn0sCgkJdG8gICA9IHsiYSIJICwgImUiCSwgImkiCSwgIm8iCSwgInUiLCAiYWUifX0gLAoJc3RhbmRhcmRDaGFycyA9ICJBLVBSLVdZWmEtcHItd3l6MC05w4bDpsOiw6TDoMOpw6rDq8Oow6/DrMO0w7bDssO6w7vDvMO54buzIiAuLiBQVU5DVFVBVElPTiwKfQoKbVsiZ2EiXSA9IHsKCSJJcmlzaCIsCgkiUTkxNDIiLAoJImNlbC1nYWUiLAoJb3RoZXJOYW1lcyA9IHsiSXJpc2ggR2FlbGljIn0sCglzY3JpcHRzID0gTGF0biwKCWFuY2VzdG9ycyA9IHsibWdhIn0sCglzb3J0X2tleSA9IHsKCQlmcm9tID0geyLDoSIsICLDqSIsICLDrSIsICLDsyIsICLDuiIsICLDvSIsICLhuIMiICwgIsSLIiAsICLhuIsiICwgIuG4nyIgLCAixKEiICwgIuG5gSIgLCAi4bmXIiAsICLhuaEiICwgIuG5qyIgfSwKCQl0byAgID0geyJhIiwgImUiLCAiaSIsICJvIiwgInUiLCAieSIsICJiaCIsICJjaCIsICJkaCIsICJmaCIsICJnaCIsICJtaCIsICJwaCIsICJzaCIsICJ0aCJ9fSAsCglzdGFuZGFyZENoYXJzID0gIkEtSUwtUFItVWEtaWwtcHItdTAtOcOBw6HDicOpw43DrcOTw7PDmsO6IiAuLiBQVU5DVFVBVElPTiwKfQoKbVsiZ2QiXSA9IHsKCSJTY290dGlzaCBHYWVsaWMiLAoJIlE5MzE0IiwKCSJjZWwtZ2FlIiwKCW90aGVyTmFtZXMgPSB7IkfDoGlkaGxpZyIsICJIaWdobGFuZCBHYWVsaWMiLCAiU2NvdHMgR2FlbGljIiwgIlNjb3R0aXNoIn0sCglzY3JpcHRzID0gTGF0biwKCWFuY2VzdG9ycyA9IHsibWdhIn0sCglzb3J0X2tleSA9IHsKCQlmcm9tID0geyJbw6HDoF0iLCAiW8Opw6hdIiwgIlvDrcOsXSIsICJbw7PDsl0iLCAiW8O6w7ldIiwgIlvDveG7s10ifSwKCQl0byAgID0geyJhIiAgICwgImUiICAgLCAiaSIgICAsICJvIiAgICwgInUiICAgLCAieSIgICB9fSAsCglzdGFuZGFyZENoYXJzID0gIkEtSUwtUFItVWEtaWwtcHItdTAtOcOAw6DDiMOow4zDrMOSw7LDmcO5IiAuLiBQVU5DVFVBVElPTiwKfQoKbVsiZ2wiXSA9IHsKCSJHYWxpY2lhbiIsCgkiUTkzMDciLAoJInJvYS1pYmUiLAoJc2NyaXB0cyA9IExhdG4sCglhbmNlc3RvcnMgPSB7InJvYS1vcHQifSwKCXNvcnRfa2V5ID0gewoJCWZyb20gPSB7IsOhIiwgIsOpIiwgIsOtIiwgIsOzIiwgIsO6In0sCgkJdG8gICA9IHsiYSIsICJlIiwgImkiLCAibyIsICJ1In19ICwKfQoKbVsiZ24iXSA9IHsKCSJHdWFyYW7DrSIsCgkiUTM1ODc2IiwKCSJ0dXAtZ3VhIiwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJndSJdID0gewoJIkd1amFyYXRpIiwKCSJRNTEzNyIsCgkiaW5jIiwKCXNjcmlwdHMgPSB7Ikd1anIifSwKCWFuY2VzdG9ycyA9IHsiaW5jLW1ndSJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gImd1LXRyYW5zbGl0IiwKfQoKbVsiZ3YiXSA9IHsKCSJNYW54IiwKCSJRMTIxNzUiLAoJImNlbC1nYWUiLAoJb3RoZXJOYW1lcyA9IHsiTWFueCBHYWVsaWMifSwKCXNjcmlwdHMgPSBMYXRuLAoJYW5jZXN0b3JzID0geyJtZ2EifSwKCXNvcnRfa2V5ID0gewoJCWZyb20gPSB7IsOnIiwgIi0ifSwKCQl0byAgID0geyJjIn19ICwKCXN0YW5kYXJkQ2hhcnMgPSAiQS1XWcOHYS13ecOnMC05IiAuLiBQVU5DVFVBVElPTiwKfQoKbVsiaGEiXSA9IHsKCSJIYXVzYSIsCgkiUTU2NDc1IiwKCSJjZGMtd3N0IiwKCXNjcmlwdHMgPSBMYXRuQXJhYiwKICAgIHNvcnRfa2V5ID0gewoJCWZyb20gPSB7IsmTIiwgICAiyZciLCAgICLGmSIsICAiJ3kiLCAixrQiLCAgIiciIH0sCgkJdG8gICA9IHsiYn4iICwgImR+IgksICJrfiIsICJ5fiIsICJ5fiIsICIiICB9fSwKICAgIGVudHJ5X25hbWUgPSB7CgkJZnJvbSA9IHsiUsyDIiwgInLMgyIsICLDgCIsICLDoCIsICLDiCIsICLDqCIsICLDjCIsICLDrCIsICLDkiIsICLDsiIsICLDmSIsICLDuSIsICLDgiIsICLDoiIsICLDiiIsICLDqiIsICLDjiIsICLDriIsICLDlCIsICLDtCIsICLDmyIsICLDuyIsICLEgCIsICLEgSIsICLEkiIsICLEkyIsICLEqiIsICLEqyIsICLFjCIsICLFjSIsICLFqiIsICLFqyIsICLDgSIsICLDoSIsICLDiSIsICLDqSIsICLDjSIsICLDrSIsICLDkyIsICLDsyIsICLDmiIsICLDuiIsICLEgMyAIiwgIsSBzIAiLCAi4biUIiwgIuG4lSIsICLEqsyAIiwgIsSrzIAiLCAi4bmQIiwgIuG5kSIsICLFqsyAIiwgIsWrzIAiLCBHUkFWRSwgQUNVVEV9LAoJCXRvICAgPSB7IlIiLCAiciIsICJBIiwgImEiLCAiRSIsICJlIiwgIkkiLCAiaSIsICJPIiwgIm8iLCAiVSIsICJ1IiwgIkEiLCAiYSIsICJFIiwgImUiLCAiSSIsICJpIiwgIk8iLCAibyIsICJVIiwgInUiLCAiQSIsICJhIiwgIkUiLCAiZSIsICJJIiwgImkiLCAiTyIsICJvIiwgIlUiLCAidSIsICJBIiwgImEiLCAiRSIsICJlIiwgIkkiLCAiaSIsICJPIiwgIm8iLCAiVSIsICJ1IiwgIkEiLCAiYSIsICJFIiwgImUiLCAiSSIsICJpIiwgIk8iLCAibyIsICJVIiwgInUifX0sCn0KCm1bImhlIl0gPSB7CgkiSGVicmV3IiwKCSJROTI4OCIsCgkic2VtLWNhbiIsCglvdGhlck5hbWVzID0geyJJdnJpdCJ9LAoJc2NyaXB0cyA9IHsiSGViciIsICJQaG54IiwgIkJyYWkifSwKCWVudHJ5X25hbWUgPSB7CgkJZnJvbSA9IHsiWyIgLi4gdSgweDA1OTEpIC4uICItIiAuLiB1KDB4MDVCRCkgLi4gdSgweDA1QkYpIC4uICItIiAuLiB1KDB4MDVDNSkgLi4gdSgweDA1QzcpIC4uICJdIn0sCgkJdG8gICA9IHt9fSAsCn0KCm1bImhpIl0gPSB7CgkiSGluZGkiLAoJIlExNTY4IiwKCSJpbmMiLAoJb3RoZXJOYW1lcyA9IHsiSGluZGF2aSIsICJLaGFyaWJvbGkiLCAiS2hhcmkgQm9saSIsICJNYW5hayBIaW5kaSJ9LAoJc2NyaXB0cyA9IHsiRGV2YSIsICJLdGhpIiwgIk5ld2EifSwKCWFuY2VzdG9ycyA9IHsiaW5jLW9oaSJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gImhpLXRyYW5zbGl0IiwKfQoKbVsiaG8iXSA9IHsKCSJIaXJpIE1vdHUiLAoJIlEzMzYxNyIsCgkiY3JwIiwKCW90aGVyTmFtZXMgPSB7IlBpZGdpbiBNb3R1IiwgIlBvbGljZSBNb3R1In0sCglzY3JpcHRzID0gTGF0biwKCWFuY2VzdG9ycyA9IHsibWV1In0sCn0KCm1bImh0Il0gPSB7CgkiSGFpdGlhbiBDcmVvbGUiLAoJIlEzMzQ5MSIsCgkiY3JwIiwKCW90aGVyTmFtZXMgPSB7IkNyZW9sZSIsICJIYWl0aWFuIiwgIktyZXnDsmwifSwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJodSJdID0gewoJIkh1bmdhcmlhbiIsCgkiUTkwNjciLAoJInVyai11Z3IiLAoJb3RoZXJOYW1lcyA9IHsiTWFneWFyIn0sCglzY3JpcHRzID0geyJMYXRuIiwgIkh1bmcifSwKCWFuY2VzdG9ycyA9IHsib2h1In0sCglzb3J0X2tleSA9IHsKCQlmcm9tID0geyLDoSIsICLDqSIsICLDrSIsICLDsyIsICLDuiIsICLFkSIsICLFsSJ9LAoJCXRvICAgPSB7ImEiLCAiZSIsICJpIiwgIm8iLCAidSIsICLDtiIsICLDvCJ9fSAsCn0KCm1bImh5Il0gPSB7CgkiQXJtZW5pYW4iLAoJIlE4Nzg1IiwKCSJoeXgiLAoJb3RoZXJOYW1lcyA9IHsiTW9kZXJuIEFybWVuaWFuIiwgIkVhc3Rlcm4gQXJtZW5pYW4iLCAiV2VzdGVybiBBcm1lbmlhbiJ9LAoJc2NyaXB0cyA9IHsiQXJtbiIsICJCcmFpIn0sCglhbmNlc3RvcnMgPSB7ImF4bSJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gIkFybW4tdHJhbnNsaXQiLAoJb3ZlcnJpZGVfdHJhbnNsaXQgPSB0cnVlLAoJc29ydF9rZXkgPSB7CgkJZnJvbSA9IHsi1bjWgiIsICLWhyIsICLVpdaCIn0sCgkJdG8gICA9IHsi1oIiLCAi1aXVviIsICLVpdW+In19LAoJZW50cnlfbmFtZSA9IHsKCQlmcm9tID0geyLVniIsICLVnCIsICLVmyIsICLVnyIsICLWhyIsICImbHQ7c3VwJmd0O9W1Jmx0Oy9zdXAmZ3Q7IiwgIiZsdDtzdXAmZ3Q71asmbHQ7L3N1cCZndDsifSwKCQl0byAgID0geyIiLCAiIiwgIiIsICIiLCAi1aXWgiIsICLVtSIsICLVqyJ9fSAsCn0KCm1bImh6Il0gPSB7CgkiSGVyZXJvIiwKCSJRMzMzMTUiLAoJImJudCIsCglzY3JpcHRzID0gTGF0biwKfQoKbVsiaWEiXSA9IHsKCSJJbnRlcmxpbmd1YSIsCgkiUTM1OTM0IiwKCSJhcnQiLAoJc2NyaXB0cyA9IExhdG4sCn0KCm1bImlkIl0gPSB7CgkiSW5kb25lc2lhbiIsCgkiUTkyNDAiLAoJInBvei1tbHkiLAoJc2NyaXB0cyA9IExhdG4sCglhbmNlc3RvcnMgPSB7Im1zIn0sCn0KCm1bImllIl0gPSB7CgkiSW50ZXJsaW5ndWUiLAoJIlEzNTg1MCIsCgkiYXJ0IiwKCW90aGVyTmFtZXMgPSB7Ik9jY2lkZW50YWwifSwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJpZyJdID0gewoJIklnYm8iLAoJIlEzMzU3OCIsCgkibmljLWJjbyIsCglzY3JpcHRzID0gTGF0biwKfQoKbVsiaWkiXSA9IHsKCSJTaWNodWFuIFlpIiwKCSJRMzQyMzUiLAoJInRicS1sb2wiLAoJb3RoZXJOYW1lcyA9IHsiTnVvc3UiLCAiTm9zdSIsICJOb3J0aGVybiBZaSIsICJMaWFuZ3NoYW4gWWkifSwKCXNjcmlwdHMgPSB7IllpaWkifSwKCXRyYW5zbGl0X21vZHVsZSA9ICJpaS10cmFuc2xpdCIsCn0KCm1bImlrIl0gPSB7CgkiSW51cGlhayIsCgkiUTI3MTgzIiwKCSJlc3gtaW51IiwKCW90aGVyTmFtZXMgPSB7IkludXBpYXEiLCAiScOxdXBpYXEiLCAiSW51cGlhdHVuIn0sCglzY3JpcHRzID0gTGF0biwKfQoKbVsiaW8iXSA9IHsKCSJJZG8iLAoJIlEzNTIyNCIsCgkiYXJ0IiwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJpcyJdID0gewoJIkljZWxhbmRpYyIsCgkiUTI5NCIsCgkiZ21xIiwKCXNjcmlwdHMgPSBMYXRuLAoJYW5jZXN0b3JzID0geyJub24ifSwKfQoKbVsiaXQiXSA9IHsKCSJJdGFsaWFuIiwKCSJRNjUyIiwKCSJyb2EtaXRkIiwKCXNjcmlwdHMgPSBMYXRuLAoJc29ydF9rZXkgPSB7CgkJZnJvbSA9IHsiW8Ogw6HDosOkw6VdIiwgIlvDqMOpw6rDq10iLCAiW8Osw63DrsOvXSIsICJbw7LDs8O0w7ZdIiwgIlvDucO6w7vDvF0ifSwKCQl0byAgID0geyJhIgkgICwgImUiCSAsICJpIgkgLCAibyIJICwgInUiCSB9fSAsCn0KCm1bIml1Il0gPSB7CgkiSW51a3RpdHV0IiwKCSJRMjk5MjEiLAoJImVzeC1pbnUiLAoJb3RoZXJOYW1lcyA9IHsiRWFzdGVybiBDYW5hZGlhbiBJbnVrdGl0dXQiLCAiRWFzdGVybiBDYW5hZGlhbiBJbnVpdCIsICJXZXN0ZXJuIENhbmFkaWFuIEludWt0aXR1dCIsICJXZXN0ZXJuIENhbmFkaWFuIEludWl0IiwgIldlc3Rlcm4gQ2FuYWRpYW4gSW51a3R1biIsICJJbnVpbm5hcSIsICJJbnVpbm5hcXR1biIsICJJbnV2aWFsdWsiLCAiSW51dmlhbHVrdHVuIiwgIk51bmF2aW1taXV0aXQiLCAiTnVuYXRzaWF2dW1taXV0IiwgIkFpdmlsaW1taXV0IiwgIk5hdHNpbGluZ21pdXQiLCAiS2l2YWxsaXJtaXV0IiwgIlNpZ2xpdCIsICJTaWdsaXR1biJ9LAoJc2NyaXB0cyA9IHsiQ2FucyIsICJMYXRuIn0sCgl0cmFuc2xpdF9tb2R1bGUgPSAiaXUtdHJhbnNsaXQiLAoJb3ZlcnJpZGVfdHJhbnNsaXQgPSB0cnVlLAp9CgptWyJqYSJdID0gewoJIkphcGFuZXNlIiwKCSJRNTI4NyIsCgkianB4IiwKCW90aGVyTmFtZXMgPSB7Ik1vZGVybiBKYXBhbmVzZSIsICJOaXBwb25lc2UiLCAiTmlob25nbyJ9LAoJc2NyaXB0cyA9IHsiSnBhbiIsICJCcmFpIn0sCglhbmNlc3RvcnMgPSB7Im9qcCJ9LAoJLS1bPVsKCS0tIEhhbmRsZWQgYnkganNvcnQgZnVuY3Rpb24gaW4gW1tNb2R1bGU6amFdXS4KCXNvcnRfa2V5ID0gewoJCWZyb20gPSB7IlvjgYHjgqHjgqJdIiwgIlvjgYPjgqPjgqRdIiwgIlvjgYXjgpTjgqXjgqbjg7RdIiwgIlvjgYfjgqfjgqhdIiwgIlvjgYnjgqnjgqpdIiwgIlvjgYzjgpXjgqvjgqzjg7VdIiwgIlvjgY7jgq3jgq5dIiwgIlvjgZDjgq/jgrDjh7BdIiwgIlvjgZLjgpbjgrHjgrLjg7ZdIiwgIlvjgZTjgrPjgrRdIiwgIlvjgZbjgrXjgrZdIiwgIlvjgZjjgrfjgrjjh7FdIiwgIlvjgZrjgrnjgrrjh7JdIiwgIlvjgZzjgrvjgrxdIiwgIlvjgZ7jgr3jgr5dIiwgIlvjgaDjgr/jg4BdIiwgIlvjgaLjg4Hjg4JdIiwgIlvjgaPjgaXjg4Pjg4Tjg4VdIiwgIlvjgafjg4bjg4ddIiwgIlvjganjg4jjg4njh7NdIiwgIuODiiIsICLjg4siLCAiW+ODjOOHtF0iLCAi44ONIiwgIuODjiIsICJb44Gw44Gx44OP44OQ44OR44e1XSIsICJb44Gz44G044OS44OT44OU44e2XSIsICJb44G244G344OV44OW44OX44e3XSIsICJb44G544G644OY44OZ44Oa44e4XSIsICJb44G844G944Ob44Oc44Od44e5XSIsICLjg54iLCAi44OfIiwgIlvjg6Djh7pdIiwgIuODoSIsICLjg6IiLCAiW+OCg+ODo+ODpF0iLCAiW+OCheODpeODpl0iLCAiW+OCh+ODp+ODqF0iLCAiW+ODqeOHu10iLCAiW+ODquOHvF0iLCAiW+ODq+OHvV0iLCAiW+ODrOOHvl0iLCAiW+ODreOHv10iLCAiW+OCjuODruODr+ODt10iLCAiW+ODsOODuF0iLCAiW+ODseODuV0iLCAiW+ODsuODul0iLCAi44OzIiwgIlvjgpnjgprjgpvjgpzjgp3jgp7jg7vjg73jg75dIiwgIvCbgIAifSwKCQl0byAgID0geyLjgYIiLCAi44GEIiwgIuOBhiIsICLjgYgiLCAi44GKIiwgIuOBiyIsICLjgY0iLCAi44GPIiwgIuOBkSIsICLjgZMiLCAi44GVIiwgIuOBlyIsICLjgZkiLCAi44GbIiwgIuOBnSIsICLjgZ8iLCAi44GhIiwgIuOBpCIsICLjgaYiLCAi44GoIiwgIuOBqiIsICLjgasiLCAi44GsIiwgIuOBrSIsICLjga4iLCAi44GvIiwgIuOBsiIsICLjgbUiLCAi44G4IiwgIuOBuyIsICLjgb4iLCAi44G/IiwgIuOCgCIsICLjgoEiLCAi44KCIiwgIuOChCIsICLjgoYiLCAi44KIIiwgIuOCiSIsICLjgooiLCAi44KLIiwgIuOCjCIsICLjgo0iLCAi44KPIiwgIuOCkCIsICLjgpEiLCAi44KSIiwgIuOCkyIsICIiLCAi44GIIn19LAoJLS1dPV0KfQoKbVsianYiXSA9IHsKCSJKYXZhbmVzZSIsCgkiUTMzNTQ5IiwKCSJwb3otc3VzIiwKCXNjcmlwdHMgPSB7IkxhdG4iLCAiSmF2YSJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gImp2LXRyYW5zbGl0IiwKCWFuY2VzdG9ycyA9IHsia2F3In0sCglsaW5rX3RyID0gdHJ1ZSwKfQoKbVsia2EiXSA9IHsKCSJHZW9yZ2lhbiIsCgkiUTgxMDgiLAoJImNjcy1nem4iLAoJb3RoZXJOYW1lcyA9IHsiS2FydHZlbGlhbiIsICJKdWRlby1HZW9yZ2lhbiIsICJLaXZydWxpIiwgIkdydXppbmljIn0sCglzY3JpcHRzID0geyJHZW9yIiwgIkdlb2siLCAiSGViciJ9LCAtLSBIZWJyIGlzIHVzZWQgdG8gd3JpdGUgSnVkZW8tR2VvcmdpYW4KCWFuY2VzdG9ycyA9IHsib2dlIn0sCgl0cmFuc2xpdF9tb2R1bGUgPSAiR2Vvci10cmFuc2xpdCIsCglvdmVycmlkZV90cmFuc2xpdCA9IHRydWUsCgllbnRyeV9uYW1lID0gewoJCWZyb20gPSB7IsyCIn0sCgkJdG8gICA9IHsiIn19LAp9CgptWyJrZyJdID0gewoJIktvbmdvIiwKCSJRMzM3MDIiLAoJImJudCIsCglvdGhlck5hbWVzID0geyJLaWtvbmdvIiwgIktvb25nbyIsICJMYWFyaSIsICJTYW4gU2FsdmFkb3IgS29uZ28iLCAiWW9tYmUifSwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJraSJdID0gewoJIktpa3V5dSIsCgkiUTMzNTg3IiwKCSJibnQiLAoJb3RoZXJOYW1lcyA9IHsiR2lrdXl1IiwgIkfEqWvFqXnFqSJ9LAoJc2NyaXB0cyA9IExhdG4sCn0KCm1bImtqIl0gPSB7CgkiS3dhbnlhbWEiLAoJIlExNDA1MDc3IiwKCSJibnQiLAoJb3RoZXJOYW1lcyA9IHsiS3VhbnlhbWEiLCAiT3NoaWt3YW55YW1hIn0sCglzY3JpcHRzID0gTGF0biwKfQoKbVsia2siXSA9IHsKCSJLYXpha2giLAoJIlE5MjUyIiwKCSJ0cmsta2lwIiwKCXNjcmlwdHMgPSB7IkN5cmwiLCAiTGF0biIsICJray1BcmFiIn0sCgl0cmFuc2xpdF9tb2R1bGUgPSAia2stdHJhbnNsaXQiLAoJb3ZlcnJpZGVfdHJhbnNsaXQgPSB0cnVlLAp9CgptWyJrbCJdID0gewoJIkdyZWVubGFuZGljIiwKCSJRMjUzNTUiLAoJImVzeC1pbnUiLAoJb3RoZXJOYW1lcyA9IHsiS2FsYWFsbGlzdXQifSwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJrbSJdID0gewoJIktobWVyIiwKCSJROTIwNSIsCgkibWtoIiwKCW90aGVyTmFtZXMgPSB7IkNhbWJvZGlhbiJ9LAoJc2NyaXB0cyA9IHsiS2htciJ9LAoJYW5jZXN0b3JzID0geyJta2gtbWttIn0sCgl0cmFuc2xpdF9tb2R1bGUgPSAia20tdHJhbnNsaXQiLAp9CgptWyJrbiJdID0gewoJIkthbm5hZGEiLAoJIlEzMzY3MyIsCgkiZHJhIiwKCXNjcmlwdHMgPSB7IktuZGEifSwKCWFuY2VzdG9ycyA9IHsiZHJhLW1rbiJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gImtuLXRyYW5zbGl0IiwKfQoKbVsia28iXSA9IHsKCSJLb3JlYW4iLAoJIlE5MTc2IiwKCSJxZmEta29yIiwKCW90aGVyTmFtZXMgPSB7Ik1vZGVybiBLb3JlYW4ifSwKCXNjcmlwdHMgPSB7IktvcmUiLCAiQnJhaSJ9LAoJYW5jZXN0b3JzID0geyJva20ifSwKCXRyYW5zbGl0X21vZHVsZSA9ICJrby10cmFuc2xpdCIsCn0KCm1bImtyIl0gPSB7CgkiS2FudXJpIiwKCSJRMzYwOTQiLAoJInNzYS1zYWgiLAoJb3RoZXJOYW1lcyA9IHsiS2FuZW1idSIsICJCaWxtYSBLYW51cmkiLCAiQ2VudHJhbCBLYW51cmkiLCAiTWFuZ2EgS2FudXJpIiwgIlR1bWFyaSBLYW51cmkifSwKCXNjcmlwdHMgPSBMYXRuQXJhYiwKCXNvcnRfa2V5ID0gewoJCWZyb20gPSB7Im55IiwgIsedIiwgInNoIn0sCgkJdG8gICA9IHsibn4iLCAiZX4iLCAic34ifX0gLCAtLSB0aGUgc29ydGtleSBhbmQgZW50cnlfbmFtZSBhcmUgb25seSBmb3Igc3RhbmRhcmQgS2FudXJpOyB3aGVuIGRpYWxlY3RhbCBlbnRyaWVzIGdldCBhZGRlZCwgc29tZW9uZSB3aWxsIGhhdmUgdG8gd29yayBvdXQgaG93IHRoZSBkaWFsZWN0cyBzaG91bGQgYmUgcmVwcmVzZW50ZWQgb3J0aG9ncmFwaGljYWxseQoJZW50cnlfbmFtZSA9IHsKCQlmcm9tID0geyLDgCIsICLDoCIsICLDiCIsICLDqCIsICLGjsyAIiwgIsedzIAiLCAiw4wiLCAiw6wiLCAiw5IiLCAiw7IiLCAiw5kiLCAiw7kiLCAiw4IiLCAiw6IiLCAiw4oiLCAiw6oiLCAixo7MgiIsICLHncyCIiwgIsOOIiwgIsOuIiwgIsOUIiwgIsO0IiwgIsObIiwgIsO7IiwgIsSCIiwgIsSDIiwgIsSUIiwgIsSVIiwgIsaOzIYiLCAix53MhiIsICLErCIsICLErSIsICLFjiIsICLFjyIsICLFrCIsICLFrSIsICLDgSIsICLDoSIsICLDiSIsICLDqSIsICLGjsyBIiwgIsedzIEiLCAiw40iLCAiw60iLCAiw5MiLCAiw7MiLCAiw5oiLCAiw7oiLCBHUkFWRSwgQUNVVEV9LAoJCXRvICAgPSB7IkEiLCAiYSIsICJFIiwgImUiLCAixo4iLCAix50iLCAiSSIsICJpIiwgIk8iLCAibyIsICJVIiwgInUiLCAiQSIsICJhIiwgIkUiLCAiZSIsICLGjiIsICLHnSIsICJJIiwgImkiLCAiTyIsICJvIiwgIlUiLCAidSIsICJBIiwgImEiLCAiRSIsICJlIiwgIsaOIiwgIsedIiwgIkkiLCAiaSIsICJPIiwgIm8iLCAiVSIsICJ1IiwgIkEiLCAiYSIsICJFIiwgImUiLCAixo4iLCAix50iLCAiSSIsICJpIiwgIk8iLCAibyIsICJVIiwgInUifX0sCn0KCm1bImtzIl0gPSB7CgkiS2FzaG1pcmkiLAoJb3RoZXJOYW1lcyA9IHsiS29zaHVyIn0sCgkiUTMzNTUyIiwKCSJpbmMtZGFyIiwKCXNjcmlwdHMgPSB7ImtzLUFyYWIiLCAiRGV2YSIsICJTaHJkIiwgIkxhdG4ifSwKCXRyYW5zbGl0X21vZHVsZSA9ICJ0cmFuc2xpdC1yZWRpcmVjdCIsCglhbmNlc3RvcnMgPSB7ImluYy1kYXItcHJvIn0sCn0KCm1bImt1Il0gPSB7CgkiS3VyZGlzaCIsCgkiUTM2MzY4IiwKCSJpcmEtbndpIiwKCXNjcmlwdHMgPSB7IkxhdG4iLCAia3UtQXJhYiIsICJBcm1uIiwgIkN5cmwifSwKCXRyYW5zbGl0X21vZHVsZSA9ICJ0cmFuc2xpdC1yZWRpcmVjdCIsCn0KCi0tICJrdiIgSVMgVFJFQVRFRCBBUyAia29pIiwgImtwdiIsIFNFRSBXVDpMVAoKbVsia3ciXSA9IHsKCSJDb3JuaXNoIiwKCSJRMjUyODkiLAoJImNlbC1icnkiLAoJc2NyaXB0cyA9IExhdG4sCglhbmNlc3RvcnMgPSB7ImNueCJ9LAp9CgptWyJreSJdID0gewoJIkt5cmd5eiIsCgkiUTkyNTUiLAoJInRyay1raXAiLAoJb3RoZXJOYW1lcyA9IHsiS2lyZ2hpeiIsICJLaXJnaXoifSwKCXNjcmlwdHMgPSB7IkN5cmwiLCAiTGF0biIsICJBcmFiIn0sCgl0cmFuc2xpdF9tb2R1bGUgPSAia3ktdHJhbnNsaXQiLAoJb3ZlcnJpZGVfdHJhbnNsaXQgPSB0cnVlLAp9CgptWyJsYSJdID0gewoJIkxhdGluIiwKCSJRMzk3IiwKCSJpdGMiLAoJc2NyaXB0cyA9IExhdG4sCglhbmNlc3RvcnMgPSB7Iml0Yy1vbGEifSwKCWVudHJ5X25hbWUgPSB7cmVtb3ZlX2RpYWNyaXRpY3MgPSBNQUNST04uLkJSRVZFLi5ESUFFUn0sCglzdGFuZGFyZENoYXJzID0gIkEtWmEtesOGw6bFksWTxIAtxIPEki3ElcSqLcStxYwtxY/Fqi3FrciyyLMiIC4uIE1BQ1JPTiAuLiBCUkVWRSAuLiBQVU5DVFVBVElPTiwKfQoKbVsibGIiXSA9IHsKCSJMdXhlbWJvdXJnaXNoIiwKCSJROTA1MSIsCgkiZ213IiwKCXNjcmlwdHMgPSBMYXRuLAoJYW5jZXN0b3JzID0geyJnbWgifSwKfQoKbVsibGciXSA9IHsKCSJMdWdhbmRhIiwKCSJRMzMzNjgiLAoJImJudCIsCglvdGhlck5hbWVzID0geyJHYW5kYSIsICJPbHVnYW5kYSJ9LAoJc2NyaXB0cyA9IExhdG4sCgllbnRyeV9uYW1lID0gewoJCWZyb20gPSB7IsOhIiwgIsOBIiwgIsOpIiwgIsOJIiwgIsOtIiwgIsONIiwgIsOzIiwgIsOTIiwgIsO6IiwgIsOaIiwgIsWEIiwgIsWDIiwgIuG4vyIsICLhuL4iLCAiw6IiLCAiw4IiLCAiw6oiLCAiw4oiLCAiw64iLCAiw44iLCAiw7QiLCAiw5QiLCAiw7siLCAiw5siIH0sCgkJdG8gICA9IHsiYSIsICJBIiwgImUiLCAiRSIsICJpIiwgIkkiLCAibyIsICJPIiwgInUiLCAiVSIsICJuIiwgIk4iLCAibSIsICJNIiwgImEiLCAiQSIsICJlIiwgIkUiLCAiaSIsICJJIiwgIm8iLCAiTyIsICJ1IiwgIlUiLH19LAoJc29ydF9rZXkgPSB7CgkJZnJvbSA9IHsixYsifSwKCQl0byAgID0geyJu7oChIn19ICwKfQoKbVsibGkiXSA9IHsKCSJMaW1idXJnaXNoIiwKCSJRMTAyMTcyIiwKCSJnbXciLAoJb3RoZXJOYW1lcyA9IHsiTGltYnVyZ2FuIiwgIkxpbWJ1cmdpYW4iLCAiTGltYnVyZ2ljIn0sCglzY3JpcHRzID0gTGF0biwKCWFuY2VzdG9ycyA9IHsiZHVtIn0sCn0KCm1bImxuIl0gPSB7CgkiTGluZ2FsYSIsCgkiUTM2MjE3IiwKCSJibnQiLAoJb3RoZXJOYW1lcyA9IHsiTmdhbGEifSwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJsbyJdID0gewoJIkxhbyIsCgkiUTkyMTEiLAoJInRhaS1zd2UiLAoJb3RoZXJOYW1lcyA9IHsiTGFvdGlhbiJ9LAoJc2NyaXB0cyA9IHsiTGFvbyJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gImxvLXRyYW5zbGl0IiwKCXNvcnRfa2V5ID0gewoJCWZyb20gPSB7IiVwIiwgIlvgu4gt4LuNXSIsICLgurwiLCAi4Lq9IiwgIuC7nCIsICLgu50iLCAiKFvgu4Dgu4Hgu4Lgu4Pgu4RdKShb4LqBLeC6rl0pIn0sCgkJdG8gICA9IHsiIiwgIiIsICLguqUiLCAi4LqNIiwgIuC6q+C6mSIsICLguqvguqEiLCAiJTIlMSJ9fSwKfQoKbVsibHQiXSA9IHsKCSJMaXRodWFuaWFuIiwKCSJROTA4MyIsCgkiYmF0IiwKCXNjcmlwdHMgPSBMYXRuLAoJYW5jZXN0b3JzID0geyJvbHQifSwKCWVudHJ5X25hbWUgPSB7CgkJZnJvbSA9IHsiW8Ohw6PDoF0iLCAiW8OBw4PDgF0iLCAiW8Op4bq9w6hdIiwgIlvDieG6vMOIXSIsICJbw63EqcOsXSIsICJbw43EqMOMXSIsICJbw73hu7ldIiwgIlvDneG7uF0iLCAiw7EiLCAiW8Ozw7XDsl0iLCAiW8OTw5XDkl0iLCAiW8O6xanDuV0iLCAiW8OaxajDmV0iLCBBQ1VURSwgR1JBVkUsIFRJTERFfSwKCQl0byAgID0geyJhIiwgICAgICAgIkEiLCAgICAgImUiLCAgICAgIkUiLCAgICAgImkiLCAgICAgIkkiLCAgICAgInkiLCAgICJZIiwgICAibiIsICAgIm8iLCAgICAiTyIsICAgICAidSIsICAgICAgIlUifX0gLAp9CgptWyJsdSJdID0gewoJIkx1YmEtS2F0YW5nYSIsCgkiUTM2MTU3IiwKCSJibnQiLAoJc2NyaXB0cyA9IExhdG4sCn0KCm1bImx2Il0gPSB7CgkiTGF0dmlhbiIsCgkiUTkwNzgiLAoJImJhdCIsCglvdGhlck5hbWVzID0geyJMZXR0aXNoIiwgIkxldHQifSwKCXNjcmlwdHMgPSBMYXRuLAoJZW50cnlfbmFtZSA9IHsKCQktLSBUaGlzIGF0dGVtcHRzIHRvIGNvbnZlcnQgdm93ZWxzIHdpdGggdG9uZSBtYXJrcyB0byB2b3dlbHMgZWl0aGVyIHdpdGgKCQktLSBvciB3aXRob3V0IG1hY3JvbnMuIFNwZWNpZmljYWxseSwgdGhlcmUgc2hvdWxkIGJlIG5vIG1hY3JvbnMgaWYgdGhlCgkJLS0gdm93ZWwgaXMgcGFydCBvZiBhIGRpcGh0aG9uZyAoaW5jbHVkaW5nIHJlc29uYW50IGRpcGh0aG9uZ3Mgc3VjaAoJCS0tIHDDrHJrc3RzIC0mZ3Q7IHBpcmtzdHMgbm90ICNwxKtya3N0cykuIFdoYXQgd2UgZG8gaXMgZmlyc3QgY29udmVydCB0aGUKCQktLSB2b3dlbCArIHRvbmUgbWFyayB0byBhIHZvd2VsICsgdGlsZGUgaW4gYSBkZWNvbXBvc2VkIGZhc2hpb24sCgkJLS0gdGhlbiByZW1vdmUgdGhlIHRpbGRlIGluIGRpcGh0aG9uZ3MsIHRoZW4gY29udmVydCB0aGUgcmVtYWluaW5nCgkJLS0gdm93ZWwgKyB0aWxkZSBzZXF1ZW5jZXMgdG8gbWFjcm9uZWQgdm93ZWxzLCB0aGVuIGRlbGV0ZSBhbnkgb3RoZXIKCQktLSB0aWxkZS4gV2UgbGVhdmUgYWxyZWFkeS1tYWNyb25lZCB2b3dlbHMgYWxvbmU6IEJvdGggZS5nLiBhciBhbmQgxIFyCgkJLS0gb2NjdXIgYmVmb3JlIGNvbnNvbmFudHMuIEZJWE1FOiBUaGlzIHN0aWxsIG1pZ2h0IG5vdCBiZSBzdWZmaWNpZW50LgoJCWZyb20gPSB7IsioIiwgIsipIiwgIlvDgsODw4BdIiwgIlvDosOjw6BdIiwgIlvDiuG6vMOIXSIsICJbw6rhur3DqF0iLCAiW8OOxKjDjF0iLCAiW8OuxKnDrF0iLCAiW8OUw5XDkl0iLCAiW8O0w7XDsl0iLCAiW8ObxajDmV0iLCAiW8O7xanDuV0iLCAiW8ORx7hdIiwgIlvDsce5XSIsICJbIiAuLiBDSVJDIC4uIFRJTERFIC4uR1JBVkUgLi4iXSIsICIoW2FBZUVpSW9PdVVdKSIgLi4gVElMREUgLi4iPyhbbHJubXVpTFJOTVVJXSkiIC4uIFRJTERFIC4uICI/KFteYUFlRWlJb091VcSBxIDEk8SSxKvEqsWrxapdKSIsICIoW2FBZUVpSW9PdVVdKSIgLi4gVElMREUgLi4iPyhbbHJubXVpTFJOTVVJXSkiIC4uIFRJTERFIC4uIj8kIiwgIihbaUldKSIgLi4gVElMREUgLi4gIj8oW2VFXSkiIC4uIFRJTERFIC4uICI/IiwgIkEiIC4uIFRJTERFLCAiYSIgLi4gVElMREUsICJFIiAuLiBUSUxERSwgImUiIC4uIFRJTERFLCAiSSIgLi4gVElMREUsICJpIiAuLiBUSUxERSwgIlUiIC4uIFRJTERFLCAidSIgLi4gVElMREUsIFRJTERFfSwKCQl0byAgID0geyJFIiwgImUiLCAiQSIgLi4gVElMREUsICJhIiAuLiBUSUxERSwgIkUiIC4uIFRJTERFLCAiZSIgLi4gVElMREUsICJJIiAuLiBUSUxERSwgImkiIC4uIFRJTERFLCAiTyIsICJvIiwgIlUiIC4uIFRJTERFLCAidSIgLi4gVElMREUsICJOIiwgIm4iLCBUSUxERSwgIiUxJTIlMyIsICIlMSUyIiwgIiUxJTIiLCAixIAiLCAixIEiLCAixJIiLCAixJMiLCAixKoiLCAixKsiLCAixaoiLCAixasiLCAiIn19LAp9CgptWyJtZyJdID0gewoJIk1hbGFnYXN5IiwKCSJRNzkzMCIsCgkicG96LWJyZSIsCglvdGhlck5hbWVzID0geyJCZXRzaW1pc2FyYWthIE1hbGFnYXN5IiwgIkJldHNpbWlzYXJha2EiLCAiTm9ydGhlcm4gQmV0c2ltaXNhcmFrYSBNYWxhZ2FzeSIsICJOb3J0aGVybiBCZXRzaW1pc2FyYWthIiwgIlNvdXRoZXJuIEJldHNpbWlzYXJha2EgTWFsYWdhc3kiLCAiU291dGhlcm4gQmV0c2ltaXNhcmFrYSIsICJCYXJhIE1hbGFnYXN5IiwgIkJhcmEiLCAiTWFzaWtvcm8gTWFsYWdhc3kiLCAiTWFzaWtvcm8iLCAiQW50YW5rYXJhbmEiLCAiQW50YW5rYXJhbmEgTWFsYWdhc3kiLCAiUGxhdGVhdSBNYWxhZ2FzeSIsICJTYWthbGF2YSIsICJUYW5kcm95IE1hbGFnYXN5IiwgIlRhbmRyb3kiLCAiVGFub3N5IiwgIlRhbm9zeSBNYWxhZ2FzeSIsICJUZXNha2EiLCAiVHNpbWloZXR5IiwgIlRzaW1paGV0eSBNYWxhZ2FzeSIsICJCdXNoaSIsICJTaGlidXNoaSIsICJLaWJ1c2hpIn0sCglzY3JpcHRzID0gTGF0biwKfQoKbVsibWgiXSA9IHsKCSJNYXJzaGFsbGVzZSIsCgkiUTM2MjgwIiwKCSJwb3otbWljIiwKCXNjcmlwdHMgPSBMYXRuLAoJc29ydF9rZXkgPSB7CgkJZnJvbSA9IHsixIEiICwgIsS8IiAsICJtzKciICwgIsWGIiAsICJuzIQiICAsICJvzKciICwgIsWNIiAgLCAixasiIH0sCgkJdG8gICA9IHsiYX4iLCAibH4iLCAibX4iLCAibn4iLCAibn5+IiwgIm9+IiwgIm9+fiIsICJ1fiJ9fSAsCn0KCm1bIm1pIl0gPSB7CgkiTWFvcmkiLAoJIlEzNjQ1MSIsCgkicG96LXBlcCIsCglvdGhlck5hbWVzID0geyJNxIFvcmkifSwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJtayJdID0gewoJIk1hY2Vkb25pYW4iLAoJIlE5Mjk2IiwKCSJ6bHMiLAoJc2NyaXB0cyA9IEN5cmwsCgl0cmFuc2xpdF9tb2R1bGUgPSAibWstdHJhbnNsaXQiLAoJZW50cnlfbmFtZSA9IHsKCQlmcm9tID0ge0FDVVRFfSwKCQl0byAgID0ge319LAp9CgptWyJtbCJdID0gewoJIk1hbGF5YWxhbSIsCgkiUTM2MjM2IiwKCSJkcmEiLAoJc2NyaXB0cyA9IHsiTWx5bSJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gIm1sLXRyYW5zbGl0IiwKCW92ZXJyaWRlX3RyYW5zbGl0ID0gdHJ1ZSwKfQoKbVsibW4iXSA9IHsKCSJNb25nb2xpYW4iLAoJIlE5MjQ2IiwKCSJ4Z24iLAoJb3RoZXJOYW1lcyA9IHsiS2hhbGtoYSBNb25nb2xpYW4ifSwKCXNjcmlwdHMgPSB7IkN5cmwiLCAiTW9uZyIsICJTb3lvIiwgIlphbmIifSwgLS0gZW50cmllcyBpbiBTb3lvIG9yIFphbmIgbWlnaHQgcmVxdWlyZSBwcmlvciBkaXNjdXNzaW9uCglhbmNlc3RvcnMgPSB7ImNtZyJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gIm1uLXRyYW5zbGl0IiwKCW92ZXJyaWRlX3RyYW5zbGl0ID0gdHJ1ZSwKfQoKLS0gIm1vIiBJUyBUUkVBVEVEIEFTICJybyIsIFNFRSBXVDpMVAoKbVsibXIiXSA9IHsKCSJNYXJhdGhpIiwKCSJRMTU3MSIsCgkiaW5jIiwKCXNjcmlwdHMgPSB7IkRldmEiLCAiTW9kaSJ9LAoJYW5jZXN0b3JzID0geyJvbXIifSwKCXRyYW5zbGl0X21vZHVsZSA9ICJtci10cmFuc2xpdCIsCn0KCm1bIm1zIl0gPSB7CgkiTWFsYXkiLAoJIlE5MjM3IiwKCSJwb3otbWx5IiwKCW90aGVyTmFtZXMgPSB7Ik1hbGF5c2lhbiIsICJTdGFuZGFyZCBNYWxheSJ9LAoJc2NyaXB0cyA9IHsiTGF0biIsICJtcy1BcmFiIn0sCn0KCm1bIm10Il0gPSB7CgkiTWFsdGVzZSIsCgkiUTkxNjYiLAoJInNlbS1hcmIiLAoJc2NyaXB0cyA9IExhdG4sCglhbmNlc3RvcnMgPSB7InNxciJ9LAp9CgptWyJteSJdID0gewoJIkJ1cm1lc2UiLAoJIlE5MjI4IiwKCSJ0YnEtYnJtIiwKCW90aGVyTmFtZXMgPSB7Ik15YW5tYXIifSwKCXNjcmlwdHMgPSB7Ik15bXIifSwKCWFuY2VzdG9ycyA9IHsib2JyIn0sCgl0cmFuc2xpdF9tb2R1bGUgPSAibXktdHJhbnNsaXQiLAoJb3ZlcnJpZGVfdHJhbnNsaXQgPSB0cnVlLAp9CgptWyJuYSJdID0gewoJIk5hdXJ1YW4iLAoJIlExMzMwNyIsCgkicG96LW1pYyIsCglvdGhlck5hbWVzID0geyJOYXVydSJ9LAoJc2NyaXB0cyA9IExhdG4sCn0KCm1bIm5iIl0gPSB7CgkiTm9yd2VnaWFuIEJva23DpWwiLAoJIlEyNTE2NyIsCgkiZ21xIiwKCW90aGVyTmFtZXMgPSB7IkJva23DpWwifSwKCXNjcmlwdHMgPSBMYXRuLAoJYW5jZXN0b3JzID0geyJnbXEtbW5vIn0sCgl3aWtpbWVkaWFfY29kZXMgPSB7Im5vIn0sCn0KCm1bIm5kIl0gPSB7CgkiTm9ydGhlcm4gTmRlYmVsZSIsCgkiUTM1NjEzIiwKCSJibnQtbmd1IiwKCW90aGVyTmFtZXMgPSB7Ik5vcnRoIE5kZWJlbGUifSwKCXNjcmlwdHMgPSBMYXRuLAoJZW50cnlfbmFtZSA9IHsKCQlmcm9tID0geyJbxIHDoMOhw6LHjl0iLCAiW8STw6jDqcOqxJtdIiwgIlvEq8Osw63DrseQXSIsICJbxY3DssOzw7THkl0iLCAiW8Wrw7nDusO7x5RdIiwgIuG4vyIsICJbx7nFhMWIXSIsIE1BQ1JPTiwgQUNVVEUsIEdSQVZFLCBDSVJDLCBDQVJPTn0sCgkJdG8gICA9IHsiYSIgICAgICAsICJlIiAgICAgICwgImkiICAgICAgLCAibyIgICAgICAsICJ1IiAgICAgICwgIm0iLCAibiIgICAgfX0sCn0KCm1bIm5lIl0gPSB7CgkiTmVwYWxpIiwKCSJRMzM4MjMiLAoJImluYy1wYWgiLAoJb3RoZXJOYW1lcyA9IHsiTmVwYWxlc2UifSwKCXNjcmlwdHMgPSB7IkRldmEiLCAiTmV3YSJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gIm5lLXRyYW5zbGl0IiwKCWFuY2VzdG9ycyA9IHsicHN1In0sCn0KCm1bIm5nIl0gPSB7CgkiTmRvbmdhIiwKCSJRMzM5MDAiLAoJImJudCIsCglzY3JpcHRzID0gTGF0biwKfQoKbVsibmwiXSA9IHsKCSJEdXRjaCIsCgkiUTc0MTEiLAoJImdtdyIsCglvdGhlck5hbWVzID0geyJOZXRoZXJsYW5kaWMiLCAiRmxlbWlzaCJ9LAoJc2NyaXB0cyA9IExhdG4sCglhbmNlc3RvcnMgPSB7ImR1bSJ9LAoJc29ydF9rZXkgPSB7CgkJZnJvbSA9IHsiW8Okw6HDosOlXSIsICJbw6vDqcOqXSIsICJbw6/DrcOuXSIsICJbw7bDs8O0XSIsICJbw7zDusO7XSIsICLDpyIsICLDsSIsICJeLSJ9LAoJCXRvICAgPSB7ImEiCSAsICJlIgksICJpIgksICJvIgksICJ1IgksICJjIiwgIm4ifX0gLAoJc3RhbmRhcmRDaGFycyA9ICJBLVphLXowLTkiIC4uIFBVTkNUVUFUSU9OIC4uIHUoMHgyODAwKSAuLiAiLSIgLi4gdSgweDI4RkYpLAp9CgptWyJubiJdID0gewoJIk5vcndlZ2lhbiBOeW5vcnNrIiwKCSJRMjUxNjQiLAoJImdtcSIsCglvdGhlck5hbWVzID0geyJOZXcgTm9yd2VnaWFuIiwgIk55bm9yc2sifSwKCXNjcmlwdHMgPSBMYXRuLAoJYW5jZXN0b3JzID0geyJnbXEtbW5vIn0sCn0KCm1bIm5vIl0gPSB7CgkiTm9yd2VnaWFuIiwKCSJROTA0MyIsCgkiZ21xIiwKCXNjcmlwdHMgPSBMYXRuLAoJYW5jZXN0b3JzID0geyJnbXEtbW5vIn0sCn0KCm1bIm5yIl0gPSB7CgkiU291dGhlcm4gTmRlYmVsZSIsCgkiUTM2Nzg1IiwKCSJibnQtbmd1IiwKCW90aGVyTmFtZXMgPSB7IlNvdXRoIE5kZWJlbGUifSwKCXNjcmlwdHMgPSBMYXRuLAoJZW50cnlfbmFtZSA9IHsKCQlmcm9tID0geyJbxIHDoMOhw6LHjl0iLCAiW8STw6jDqcOqxJtdIiwgIlvEq8Osw63DrseQXSIsICJbxY3DssOzw7THkl0iLCAiW8Wrw7nDusO7x5RdIiwgIuG4vyIsICJbx7nFhMWIXSIsIE1BQ1JPTiwgQUNVVEUsIEdSQVZFLCBDSVJDLCBDQVJPTn0sCgkJdG8gICA9IHsiYSIgICAgICAsICJlIiAgICAgICwgImkiICAgICAgLCAibyIgICAgICAsICJ1IiAgICAgICwgIm0iLCAibiIgICAgfX0sCn0KCm1bIm52Il0gPSB7CgkiTmF2YWpvIiwKCSJRMTMzMTAiLAoJImFwYSIsCglvdGhlck5hbWVzID0geyJOYXZhaG8iLCAiRGluw6kgYml6YWFkIn0sCglzY3JpcHRzID0geyJudi1MYXRuIn0sCglzb3J0X2tleSA9IHsKCQlmcm9tID0geyJbw6HEhV0iLCAiW8OpxJldIiwgIlvDrcSvXSIsICJbw7PHq10iLCAixYQiLCAiXm4oW2RqbHRdKSIsICLFgiIgLCAiW8q84oCZJ10iLCBBQ1VURX0sCgkJdG8gICA9IHsiYSIgICAsICJlIiAgICwgImkiICAgLCAibyIgICAsICJuIiwgIm5pJTEiCSAgLCAibH4ifX0sIC0tIHRoZSB0aWxkZSBpcyB1c2VkIHRvIGd1YXJhbnRlZSB0aGF0IMWCIHdpbGwgYWx3YXlzIGJlIHNvcnRlZCBhZnRlciBhbGwgb3RoZXIgd29yZHMgd2l0aCBsCn0KCm1bIm55Il0gPSB7CgkiQ2hpY2hld2EiLAoJIlEzMzI3MyIsCgkiYm50IiwKCW90aGVyTmFtZXMgPSB7IkNoaWNoZcW1YSIsICJDaGlueWFuamEiLCAiTnlhbmphIiwgIkNoZXdhIiwgIkNpY2V3YSIsICJDZXdhIiwgIkNpbnlhbmphIn0sCglzY3JpcHRzID0gTGF0biwKCWVudHJ5X25hbWUgPSB7CgkJZnJvbSA9IHsixbUiLCAixbQiLCAiw6EiLCAiw4EiLCAiw6kiLCAiw4kiLCAiw60iLCAiw40iLCAiw7MiLCAiw5MiLCAiw7oiLCAiw5oiLCAixYQiLCAixYMiLCAi4bi/IiwgIuG4viIgfSwKCQl0byAgID0geyJ3IiwgIlciLCAiYSIsICJBIiwgImUiLCAiRSIsICJpIiwgIkkiLCAibyIsICJPIiwgInUiLCAiVSIsICJuIiwgIk4iLCAibSIsICJNIn19LAoJc29ydF9rZXkgPSB7CgkJZnJvbSA9IHsibmcnIn0sCgkJdG8gICA9IHsibmcifX0gLAp9CgptWyJvYyJdID0gewoJIk9jY2l0YW4iLAoJIlExNDE4NSIsCgkicm9hIiwKCW90aGVyTmFtZXMgPSB7IlByb3ZlbsOnYWwiLCAiQXV2ZXJnbmF0IiwgIkF1dmVybmhhdCIsICJHYXNjb24iLCAiTGFuZ3VlZG9jaWVuIiwgIkxlbmdhZG9jaWFuIiwgIlNodWFkaXQiLCAiQ2hvdWhhZGl0ZSIsICJDaG91aGFkaXQiLCAiQ2hvdWFkaXRlIiwgIkNob3VhZGl0IiwgIlNodWhhZGl0IiwgIkp1ZGVvLVByb3ZlbsOnYWwiLCAiSnVkZW8tUHJvdmVuY2FsIiwgIkp1ZGVvLUNvbXRhZGluIn0sCglzY3JpcHRzID0geyJMYXRuIiwgIkhlYnIifSwKCWFuY2VzdG9ycyA9IHsicHJvIn0sCglzb3J0X2tleSA9IHsKCQlmcm9tID0geyJbw6DDoV0iLCAiW8Oow6ldIiwgIlvDrcOvXSIsICJbw7LDs10iLCAiW8O6w7xdIiwgIsOnIiwgIihbbG5zXSnCt2gifSwKCQl0byAgID0geyJhIiAgICwgImUiICAgLCAiaSIgICAsICJvIiAgICwgInUiICAgLCAiYyIsICIlMWgiCSAgfX0gLAp9CgptWyJvaiJdID0gewoJIk9qaWJ3ZSIsCgkiUTMzODc1IiwKCSJhbGciLAoJb3RoZXJOYW1lcyA9IHsiQ2hpcHBld2EiLCAiT2ppYndheSIsICJPamlid2Vtb3dpbiIsICJTb3V0aHdlc3Rlcm4gT2ppYndhIn0sCglzY3JpcHRzID0geyJDYW5zIiwgIkxhdG4ifSwKfQoKbVsib20iXSA9IHsKCSJPcm9tbyIsCgkiUTMzODY0IiwKCSJjdXMiLAoJb3RoZXJOYW1lcyA9IHsiT3JtYSIsICJCb3JhbmEtQXJzaS1HdWppIE9yb21vIiwgIldlc3QgQ2VudHJhbCBPcm9tbyJ9LAoJc2NyaXB0cyA9IHsiTGF0biIsICJFdGhpIn0sCn0KCm1bIm9yIl0gPSB7CgkiT3JpeWEiLAoJIlEzMzgxMCIsCgkiaW5jIiwKCW90aGVyTmFtZXMgPSB7Ik9kaWEiLCAiT29yeWEifSwKCXNjcmlwdHMgPSB7Ik9yeWEifSwKCWFuY2VzdG9ycyA9IHsiaW5jLW1vciJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gIm9yLXRyYW5zbGl0IiwKfQoKbVsib3MiXSA9IHsKCSJPc3NldGlhbiIsCgkiUTMzOTY4IiwKCSJpcmEtc2N5IiwKCW90aGVyTmFtZXMgPSB7Ik9zc2V0ZSIsICJPc3NldGljIiwgIkRpZ29yIiwgIklyb24ifSwKCXNjcmlwdHMgPSB7IkN5cmwiLCAiR2VvciIsICJMYXRuIn0sCglhbmNlc3RvcnMgPSB7Im9vcyJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gIm9zLXRyYW5zbGl0IiwKCW92ZXJyaWRlX3RyYW5zbGl0ID0gdHJ1ZSwKCWVudHJ5X25hbWUgPSB7CgkJZnJvbSA9IHtHUkFWRSwgQUNVVEV9LAoJCXRvICAgPSB7fX0gLAp9CgptWyJwYSJdID0gewoJIlB1bmphYmkiLAoJIlE1ODYzNSIsCgkiaW5jIiwKCW90aGVyTmFtZXMgPSB7IlBhbmphYmkifSwKCXNjcmlwdHMgPSB7Ikd1cnUiLCAicGEtQXJhYiIsICJEZXZhIn0sCglhbmNlc3RvcnMgPSB7InBzdSJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gInRyYW5zbGl0LXJlZGlyZWN0IiwKCWVudHJ5X25hbWUgPSB7CgkJZnJvbSA9IHt1KDB4MDY0QiksIHUoMHgwNjRDKSwgdSgweDA2NEQpLCB1KDB4MDY0RSksIHUoMHgwNjRGKSwgdSgweDA2NTApLCB1KDB4MDY1MSksIHUoMHgwNjUyKX0sCgkJdG8gICA9IHt9fSAsCn0KCm1bInBpIl0gPSB7CgkiUGFsaSIsCgkiUTM2NzI3IiwKCSJpbmMtb2xkIiwKCXNjcmlwdHMgPSB7IkxhdG4iLCAiQnJhaCIsICJEZXZhIiwgIkJlbmciLCAiU2luaCIsICJNeW1yIiwgIlRoYWkiLCAiTGFuYSIsICJLaG1yIn0sIC0tIGhvbGRzIExhb28sIG5vdCBlbm91Z2ggZ2x5cGhlcyB0byByZW5kZXIKCWFuY2VzdG9ycyA9IHsic2EifSwKCXNvcnRfa2V5ID0gewoJCWZyb20gPSB7IsSBIiwgIsSrIiwgIsWrIiwgIuG4jSIsICLhuLciLCAiW+G5geG5g10iLCAiW+G5h8Ox4bmFXSIsICLhua0iLCAiKFvguYDguYHguYLguYPguYRdKShb4LiBLeC4rl0pIiwgIuGplCIsICLhqZUiLCAi4amWIiwgIuGpmCIsICIoW+GorS3hqLFdKeGpmyIsICIoW+Goty3hqL5dKeGpmyIsICLhqaQiLCB1KDB4RkUwMCl9LAoJCXRvICAgPSB7ImEiLCAiaSIsICJ1IiwgImQiLCAibCIsICJtIiAgICwgIm4iCSwgInQiLCAiJTIlMSIsICLhqYjhqaDhqYgiLCAi4amg4amBIiwgIuGpoOGpgyIsICLhqKbhqaAiLCAiJTHhqaDhqK4iLCAiJTHhqaDhqLsiLCAi4amjIn19ICwKCWVudHJ5X25hbWUgPSB7CgkJZnJvbSA9IHt1KDB4RkUwMCl9LAoJCXRvICAgPSB7fX0sCn0KCm1bInBsIl0gPSB7CgkiUG9saXNoIiwKCSJRODA5IiwKCSJ6bHciLAoJc2NyaXB0cyA9IExhdG4sCglhbmNlc3RvcnMgPSB7Inpsdy1vcGwifSwKCXNvcnRfa2V5ID0gewoJCWZyb20gPSB7IlvEhMSFXSIsICJbxIbEh10iLCAiW8SYxJldIiwgIlvFgcWCXSIsICJbxYPFhF0iLCAiW8OTw7NdIiwgIlvFmsWbXSIsICJbxbvFvF0iLCAiW8W5xbpdIn0sCgkJdG8gICA9IHsKCQkJImEiIC4uIHUoMHgxMEZGRkYpLAoJCQkiYyIgLi4gdSgweDEwRkZGRiksCgkJCSJlIiAuLiB1KDB4MTBGRkZGKSwKCQkJImwiIC4uIHUoMHgxMEZGRkYpLAoJCQkibiIgLi4gdSgweDEwRkZGRiksCgkJCSJvIiAuLiB1KDB4MTBGRkZGKSwKCQkJInMiIC4uIHUoMHgxMEZGRkYpLAoJCQkieiIgLi4gdSgweDEwRkZGRiksCgkJCSJ6IiAuLiB1KDB4MTBGRkZFKX19ICwKfQoKbVsicHMiXSA9IHsKCSJQYXNodG8iLAoJIlE1ODY4MCIsCgkiaXJhLXBhdCIsCglvdGhlck5hbWVzID0geyJQYXNodHVuIiwgIlB1c2h0byIsICJQYXNodHUiLCAiQ2VudHJhbCBQYXNodG8iLCAiTm9ydGhlcm4gUGFzaHRvIiwgIlNvdXRoZXJuIFBhc2h0byIsICJQdWtodG8iLCAiUGFraHRvIiwgIlBha2todG8iLCAiQWZnaGFuaSJ9LAoJc2NyaXB0cyA9IHsicHMtQXJhYiJ9LAoJYW5jZXN0b3JzID0geyJpcmEtcGF0LXBybyJ9LAp9CgptWyJwdCJdID0gewoJIlBvcnR1Z3Vlc2UiLAoJIlE1MTQ2IiwKCSJyb2EtaWJlIiwKCW90aGVyTmFtZXMgPSB7Ik1vZGVybiBQb3J0dWd1ZXNlIn0sCglzY3JpcHRzID0geyJMYXRuIiwgIkJyYWkifSwKCWFuY2VzdG9ycyA9IHsicm9hLW9wdCJ9LAoJc29ydF9rZXkgPSB7CgkJZnJvbSA9IHsiW8Ogw6PDocOiw6RdIiwgIlvDqOG6vcOpw6rDq10iLCAiW8OsxKnDrcOvXSIsICJbw7LDs8O0w7XDtl0iLCAiW8O8w7rDucWpXSIsICLDpyIsICLDsSJ9LAoJCXRvICAgPSB7ImEiCSAgLCAiZSIJICAsICJpIgkgLCAibyIJICAsICJ1IgkgLCAiYyIsICJuIn19ICwKfQoKbVsicXUiXSA9IHsKCSJRdWVjaHVhIiwKCSJRNTIxOCIsCgkicXdlIiwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJybSJdID0gewoJIlJvbWFuc2NoIiwKCSJRMTMxOTkiLAoJInJvYS1yaGUiLAoJb3RoZXJOYW1lcyA9IHsiUm9tYW5zaCIsICJSdW1hbnRzY2giLCAiUm9tYW5jaGUifSwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJybyJdID0gewoJIlJvbWFuaWFuIiwKCSJRNzkxMyIsCgkicm9hLWVhcyIsCglvdGhlck5hbWVzID0geyJEYWNvLVJvbWFuaWFuIiwgIlJvdW1hbmlhbiIsICJSdW1hbmlhbiJ9LAoJc2NyaXB0cyA9IHsiTGF0biIsICJDeXJsIn0sCglzb3J0X2tleSA9IHsKICAgICAgICBmcm9tID0geyLEgyIgLCAiw6IiICAsICLDriIgLCAiyJkiICwgIsibIiB9LAogICAgICAgIHRvICAgPSB7ImF+IiwgImF+fiIsICJpfiIsICJzfiIsICJ0fiJ9fSwKfQoKbVsicnUiXSA9IHsKCSJSdXNzaWFuIiwKCSJRNzczNyIsCgkiemxlIiwKCXNjcmlwdHMgPSB7IkN5cmwiLCAiQnJhaSJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gInJ1LXRyYW5zbGl0IiwKCXNvcnRfa2V5ID0gewoJCWZyb20gPSB7ItGRIn0sCgkJdG8gICA9IHsi0LUiIC4uIG13LnVzdHJpbmcuY2hhcigweDEwRkZGRil9fSwKCWVudHJ5X25hbWUgPSB7CgkJZnJvbSA9IHsi0IAiLCAi0ZAiLCAi0I0iLCAi0Z0iLCBHUkFWRSwgQUNVVEV9LAoJCXRvICAgPSB7ItCVIiwgItC1IiwgItCYIiwgItC4In19LAoJc3RhbmRhcmRDaGFycyA9ICLQgdCG0JAt0Y/RkdGWMC054oCUIiAuLiBQVU5DVFVBVElPTiwKfQoKbVsicnciXSA9IHsKCSJSd2FuZGEtUnVuZGkiLAoJIlEzMzU3MyIsCgkiYm50IiwKCW90aGVyTmFtZXMgPSB7IlJ3YW5kYSIsICJLaW55YXJ3YW5kYSIsICJSdW5kaSIsICJLaXJ1bmRpIiwgIkhhIiwgIkdpaGEiLCAiSGFuZ2F6YSIsICJWaW56YSIsICJTaHViaSIsICJTdWJpIn0sCglzY3JpcHRzID0gTGF0biwKfQoKbVsic2EiXSA9IHsKCSJTYW5za3JpdCIsCgkiUTExMDU5IiwKCSJpbmMtb2xkIiwKCXNjcmlwdHMgPSB7IkRldmEiLCAiQmFsaSIsICJhcy1CZW5nIiwgIkJlbmciLCAiQmhrcyIsICJCcmFoIiwgIkdyYW4iLCAiR3VqciIsICJHdXJ1IiwgIkphdmEiLCAiS2hhciIsICJLaG1yIiwgIktuZGEiLCAiTGFuYSIsICJNbHltIiwgIk15bXIiLCAiTmV3YSIsICJPcnlhIiwgIlNhdXIiLCAiU2hyZCIsICJTaWRkIiwgIlNpbmgiLCAiVGFtbCIsICJUZWx1IiwgIlRoYWkiLCAiVGlidCIsICJUaXJoIn0sIC0tIGhvbGRzIExhb28sIG5vdCBlbm91Z2ggZ2x5cGhlcyB0byByZW5kZXIKCXNvcnRfa2V5ID0gewoJCWZyb20gPSB7IsSBIiwgIsSrIiwgIsWrIiwgIuG4jSIsICLhuLciLCAiW+G5geG5g10iLCAiW+G5h8Ox4bmFXSIsICLhua0iLCAiKFvguYDguYHguYLguYPguYRdKShb4LiBLeC4rl0pIiwgIuGplCIsICLhqZUiLCAi4amWIiwgIuGpmCIsICIoW+GorS3hqLFdKeGpmyIsICIoW+Goty3hqL5dKeGpmyIsICLhqaQiLCB1KDB4RkUwMCl9LAoJCXRvICAgPSB7ImEiLCAiaSIsICJ1IiwgImQiLCAibCIsICJtIiAgICwgIm4iCSwgInQiLCAiJTIlMSIsICLhqYjhqaDhqYgiLCAi4amg4amBIiwgIuGpoOGpgyIsICLhqKbhqaAiLCAiJTHhqaDhqK4iLCAiJTHhqaDhqLsiLCAi4amjIn19ICwKCWVudHJ5X25hbWUgPSB7CgkJZnJvbSA9IHt1KDB4RkUwMCl9LAoJCXRvICAgPSB7fX0sCgl0cmFuc2xpdF9tb2R1bGUgPSAidHJhbnNsaXQtcmVkaXJlY3QiLAp9CgptWyJzYyJdID0gewoJIlNhcmRpbmlhbiIsCgkiUTMzOTc2IiwKCSJyb2EiLAoJb3RoZXJOYW1lcyA9IHsiQ2FtcGlkYW5lc2UiLCAiQ2FtcGlkYW5lc2UgU2FyZGluaWFuIiwgIkxvZ3Vkb3Jlc2UiLCAiTG9ndWRvcmVzZSBTYXJkaW5pYW4iLCAiTnVvcmVzZSIsICJOdW9yZXNlIFNhcmRpbmlhbiJ9LAoJc2NyaXB0cyA9IExhdG4sCn0KCm1bInNkIl0gPSB7CgkiU2luZGhpIiwKCSJRMzM5OTciLAoJImluYyIsCglzY3JpcHRzID0geyJzZC1BcmFiIiwgIkRldmEiLCAiU2luZCIsICJLaG9qIn0sCgllbnRyeV9uYW1lID0gewoJCWZyb20gPSB7dSgweDA2NzEpLCB1KDB4MDY0QiksIHUoMHgwNjRDKSwgdSgweDA2NEQpLCB1KDB4MDY0RSksIHUoMHgwNjRGKSwgdSgweDA2NTApLCB1KDB4MDY1MSksIHUoMHgwNjUyKSwgdSgweDA2NzApLCB1KDB4MDY0MCl9LAoJCXRvICAgPSB7dSgweDA2MjcpfX0sCglhbmNlc3RvcnMgPSB7InBzdSJ9LAp9CgptWyJzZSJdID0gewoJIk5vcnRoZXJuIFNhbWkiLAoJIlEzMzk0NyIsCgkic21pIiwKCW90aGVyTmFtZXMgPSB7Ik5vcnRoIFNhbWkiLCAiTm9ydGhlcm4gU2FhbWkiLCAiTm9ydGggU2FhbWkifSwKCXNjcmlwdHMgPSBMYXRuLAoJZW50cnlfbmFtZSA9IHsKCQlmcm9tID0geyLhuqEiLCAiW8ST4bq5XSIsICLEqyIsICJbxY3hu41dIiwgIsWrIiwgIsuIIn0sCgkJdG8gICA9IHsiYSIsICJlIiAgICwgImkiLCAibyIgICAsICJ1In0gfSwKCXNvcnRfa2V5ID0gewoJCWZyb20gPSB7IsOhIiAsICLEjSIgLCAixJEiICwgIsWLIiAsICLFoSIgLCAixaciICwgIsW+IiB9LAoJCXRvICAgPSB7ImHCsiIsICJjwrIiLCAiZMKyIiwgIm7CsiIsICJzwrIiLCAidMKyIiwgInrCsiJ9IH0sCglzdGFuZGFyZENoYXJzID0gIkEtUFItVlphLXByLXZ6MC05w4HDocSMxI3EkMSRxYrFi8WgxaHFpsWnxb3FviIgLi4gUFVOQ1RVQVRJT04sCn0KCm1bInNnIl0gPSB7CgkiU2FuZ28iLAoJIlEzMzk1NCIsCgkiY3JwIiwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJzaCJdID0gewoJIlNlcmJvLUNyb2F0aWFuIiwKCSJROTMwMSIsCgkiemxzIiwKCW90aGVyTmFtZXMgPSB7IkJDUyIsICJDcm9hdG8tU2VyYmlhbiIsICJTZXJib2Nyb2F0aWFuIiwgIkJvc25pYW4iLCAiQ3JvYXRpYW4iLCAiTW9udGVuZWdyaW4iLCAiU2VyYmlhbiJ9LAoJc2NyaXB0cyA9IHsiTGF0biIsICJDeXJsIn0sCgllbnRyeV9uYW1lID0gewoJCWZyb20gPSB7IlvIgMOAyILDgcSAw4NdIiwgIlvIgcOgyIPDocSBw6NdIiwgIlvIhMOIyIbDicSS4bq8XSIsICJbyIXDqMiHw6nEk+G6vV0iLCAiW8iIw4zIisONxKrEqF0iLCAiW8iJw6zIi8OtxKvEqV0iLCAiW8iMw5LIjsOTxYzDlV0iLCAiW8iNw7LIj8OzxY3DtV0iLCAiW8iQyJLFlF0iLCAiW8iRyJPFlV0iLCAiW8iUw5nIlsOaxarFqF0iLCAiW8iVw7nIl8O6xavFqV0iLCAi0IAiLCAi0ZAiLCAiW9Oi0I1dIiwgIlvTo9GdXSIsICJb065dIiwgIlvTr10iLCBHUkFWRSwgQUNVVEUsIERHUkFWRSwgSU5WQlJFVkUsIE1BQ1JPTiwgVElMREV9LAoJCXRvICAgPSB7IkEiCSAgLCAiYSIJICAsICJFIgkgICwgImUiCSAgLCAiSSIJICAsICJpIgkgICwgIk8iCSAgLCAibyIJICAsICJSIgksICJyIgksICJVIgkgICwgInUiCSAgLCAi0JUiLCAi0LUiLCAi0JgiICAgLCAi0LgiLCAi0KMiLCAi0YMiICAgfX0sCgl3aWtpbWVkaWFfY29kZXMgPSB7InNoIiwgImJzIiwgImhyIiwgInNyIn0sCn0KCm1bInNpIl0gPSB7CgkiU2luaGFsZXNlIiwKCSJRMTMyNjciLAoJImluYyIsCglvdGhlck5hbWVzID0geyJTaW5naGFsZXNlIiwgIlNpbmhhbGEifSwKCXNjcmlwdHMgPSB7IlNpbmgifSwKCWFuY2VzdG9ycyA9IHsiZWx1LXByayJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gInNpLXRyYW5zbGl0IiwKCW92ZXJyaWRlX3RyYW5zbGl0ID0gdHJ1ZSwKfQoKbVsic2siXSA9IHsKCSJTbG92YWsiLAoJIlE5MDU4IiwKCSJ6bHciLAoJc2NyaXB0cyA9IExhdG4sCglzb3J0X2tleSA9IHsKCQlmcm9tID0geyJbw6HDpF0iLCAiw6kiLCAiw60iLCAiW8Ozw7RdIiwgIsO6IiwgIsO9IiwgIsWVIiwgIsS6IiwgIlsiIC4uIERJQUVSIC4uIEFDVVRFIC4uIENJUkMgLi4gIl0ifSwKCQl0byAgID0geyJhIiAgICwgImUiLCAiaSIsICJvIiAgICwgInUiLCAieSIsICJyIiwgImwiLCAiIn19ICwKfQoKbVsic2wiXSA9IHsKCSJTbG92ZW5lIiwKCSJROTA2MyIsCgkiemxzIiwKCW90aGVyTmFtZXMgPSB7IlNsb3ZlbmlhbiJ9LAoJc2NyaXB0cyA9IExhdG4sCgllbnRyeV9uYW1lID0gewoJCWZyb20gPSB7IlvDgcOAw4LIgsiAXSIsICJbw6HDoMOiyIPIgV0iLCAiW8OJw4jDisiGyIThu4bhurhdIiwgIlvDqcOow6rIh8iF4buH4bq5yZldIiwgIlvDjcOMw47IisiIXSIsICJbw63DrMOuyIvIiV0iLCAiW8OTw5LDlMiOyIzhu5jhu4xdIiwgIlvDs8Oyw7TIj8iN4buZ4buNXSIsICJbxZTIksiQXSIsICJbxZXIk8iRXSIsICJbw5rDmcObyJbIlF0iLCAiW8O6w7nDu8iXyJVdIiwgIsWCIiwgR1JBVkUsIEFDVVRFLCBER1JBVkUsIElOVkJSRVZFLCBDSVJDLCBET1RCRUxPV30sCgkJdG8gICA9IHsiQSIJICAsICJhIgkgICwgIkUiCQksICJlIgkJICwgIkkiCSAgLCAiaSIJICAsICJPIgkJLCAibyIJCSwgIlIiCSwgInIiCSwgIlUiCSAgLCAidSIJICAsICJsIn19ICwKfQoKbVsic20iXSA9IHsKCSJTYW1vYW4iLAoJIlEzNDAxMSIsCgkicG96LXBucCIsCglzY3JpcHRzID0gTGF0biwKfQoKbVsic24iXSA9IHsKCSJTaG9uYSIsCgkiUTM0MDA0IiwKCSJibnQiLAoJc2NyaXB0cyA9IExhdG4sCgllbnRyeV9uYW1lID0gewogICAgICAgIGZyb20gPSB7QUNVVEV9LAogICAgICAgIHRvID0ge319ICwKfQoKbVsic28iXSA9IHsKCSJTb21hbGkiLAoJIlExMzI3NSIsCgkiY3VzIiwKCXNjcmlwdHMgPSB7IkxhdG4iLCAiQXJhYiIsICJPc21hIn0sCgllbnRyeV9uYW1lID0gewoJCWZyb20gPSB7IlvDgcOAw4JdIiwgIlvDocOgw6JdIiwgIlvDicOIw4pdIiwgIlvDqcOow6pdIiwgIlvDjcOMw45dIiwgIlvDrcOsw65dIiwgIlvDk8OSw5RdIiwgIlvDs8Oyw7RdIiwgIlvDmsOZw5tdIiwgIlvDusO5w7tdIiwgIlvDneG7sl0iLCAiW8O94buzXSJ9LAoJCXRvICAgPSB7IkEiCSAgLCAiYSIJICAsICJFIgksICJlIiAsICJJIgkgICwgImkiCSAgLCAiTyIJLCAibyIJLCAiVSIgICwgInUiLCAiWSIsICJ5In19ICwKfQoKbVsic3EiXSA9IHsKCSJBbGJhbmlhbiIsCgkiUTg3NDgiLAoJInNxaiIsCglvdGhlck5hbWVzID0geyJUb3NrIiwgIkdoZWciLCAiQXJ2YW5pdGlrYSIsICJBcmLDq3Jlc2jDqyIsICJBcmLDq3Jlc2gifSwKCXNjcmlwdHMgPSB7IkxhdG4iLCAiR3JlayIsICJFbGJhIn0sCglzb3J0X2tleSA9IHsKCQlmcm9tID0geyAnW8Oiw6PDpF0nLCAnW8OCw4PDhF0nLCAnW8Oq4bq9w6tdJywgJ1vDiuG6vMOLXScsICfEqScsICfEqCcsICfDtScsICfDlScsICfFqScsICfFqCcsICfhu7knLCAn4bu4JywgJ8OnJywgJ8OHJyB9LAoJCXRvICAgPSB7ICAgICAnYScsICAgICAnQScsICAgICAnZScsICAgICAnRScsICdpJywgJ0knLCAnbycsICdPJywgJ3UnLCAnVScsICd5JywgJ1knLCAnYycsICdDJyB9IH0gLAp9CgptWyJzcyJdID0gewoJIlN3YXppIiwKCSJRMzQwMTQiLAoJImJudC1uZ3UiLAoJb3RoZXJOYW1lcyA9IHsiU3dhdGkifSwKCXNjcmlwdHMgPSBMYXRuLAoJZW50cnlfbmFtZSA9IHsKCQlmcm9tID0geyJbxIHDoMOhw6LHjl0iLCAiW8STw6jDqcOqxJtdIiwgIlvEq8Osw63DrseQXSIsICJbxY3DssOzw7THkl0iLCAiW8Wrw7nDusO7x5RdIiwgIuG4vyIsICJbx7nFhMWIXSIsIE1BQ1JPTiwgQUNVVEUsIEdSQVZFLCBDSVJDLCBDQVJPTn0sCgkJdG8gICA9IHsiYSIgICAgICAsICJlIiAgICAgICwgImkiICAgICAgLCAibyIgICAgICAsICJ1IiAgICAgICwgIm0iLCAibiIgICAgfX0sCn0KCm1bInN0Il0gPSB7CgkiU290aG8iLAoJIlEzNDM0MCIsCgkiYm50LXN0cyIsCglvdGhlck5hbWVzID0geyJTZXNvdGhvIiwgIlNvdXRoZXJuIFNlc290aG8iLCAiU291dGhlcm4gU290aG8ifSwKCXNjcmlwdHMgPSBMYXRuLAoJZW50cnlfbmFtZSA9IHsKCQlmcm9tID0geyJbxIHDoMOhw6LHjl0iLCAiW8STw6jDqcOqxJtdIiwgIlvEq8Osw63DrseQXSIsICJbxY3DssOzw7THkl0iLCAiW8Wrw7nDusO7x5RdIiwgIuG4vyIsICJbx7nFhMWIXSIsIE1BQ1JPTiwgQUNVVEUsIEdSQVZFLCBDSVJDLCBDQVJPTn0sCgkJdG8gICA9IHsiYSIgICAgICAsICJlIiAgICAgICwgImkiICAgICAgLCAibyIgICAgICAsICJ1IiAgICAgICwgIm0iLCAibiIgICAgfX0sCn0KCm1bInN1Il0gPSB7CgkiU3VuZGFuZXNlIiwKCSJRMzQwMDIiLAoJInBvei1tc2EiLAoJc2NyaXB0cyA9IHsiTGF0biIsICJTdW5kIn0sCgl0cmFuc2xpdF9tb2R1bGUgPSAic3UtdHJhbnNsaXQiLAp9CgptWyJzdiJdID0gewoJIlN3ZWRpc2giLAoJIlE5MDI3IiwKCSJnbXEiLAoJc2NyaXB0cyA9IExhdG4sCglhbmNlc3RvcnMgPSB7ImdtcS1vc3cifSwKfQoKbVsic3ciXSA9IHsKCSJTd2FoaWxpIiwKCSJRNzgzOCIsCgkiYm50IiwKCW90aGVyTmFtZXMgPSB7IlNldHRsZXIgU3dhaGlsaSIsICJLaVNldGxhIiwgIktpU2V0dGxhIiwgIlNldGxhIiwgIlNldHRsYSIsICJLaXRjaGVuIFN3YWhpbGkiLCAiS2loaW5kaSIsICJJbmRpYW4gU3dhaGlsaSIsICJLaVNoYW1iYSIsICJLaXNoYW1iYSIsICJGaWVsZCBTd2FoaWxpIiwgIktpYmFidSIsICJBc2lhbiBTd2FoaWxpIiwgIktpbWFuZ2EiLCAiQXJhYiBTd2FoaWxpIiwgIktpdHZpdGEiLCAiQXJteSBTd2FoaWxpIn0sCglzY3JpcHRzID0gTGF0bkFyYWIsCglzb3J0X2tleSA9IHsKCQlmcm9tID0geyJuZyciLCAiXi0ifSwKCQl0byAgID0geyJuZ3oifX0gLAp9CgptWyJ0YSJdID0gewoJIlRhbWlsIiwKCSJRNTg4NSIsCgkiZHJhIiwKCXNjcmlwdHMgPSB7IlRhbWwifSwKCWFuY2VzdG9ycyA9IHsib3R5In0sCgl0cmFuc2xpdF9tb2R1bGUgPSAidGEtdHJhbnNsaXQiLAoJb3ZlcnJpZGVfdHJhbnNsaXQgPSB0cnVlLAp9CgptWyJ0ZSJdID0gewoJIlRlbHVndSIsCgkiUTgwOTciLAoJImRyYSIsCglzY3JpcHRzID0geyJUZWx1In0sCgl0cmFuc2xpdF9tb2R1bGUgPSAidGUtdHJhbnNsaXQiLAoJb3ZlcnJpZGVfdHJhbnNsaXQgPSB0cnVlLAp9CgptWyJ0ZyJdID0gewoJIlRhamlrIiwKCSJROTI2MCIsCgkiaXJhLXN3aSIsCglvdGhlck5hbWVzID0geyJUYWRqaWsiLCAiVGFkemhpayIsICJUYWppa2kiLCAiVGFqaWsgUGVyc2lhbiIsICJUYWppa2kgUGVyc2lhbiJ9LAoJc2NyaXB0cyA9IHsiQ3lybCIsICJmYS1BcmFiIiwgIkxhdG4ifSwKCWFuY2VzdG9ycyA9IHsicGFsIn0sIC0tIHNhbWUgYXMgImZhIiwgc2VlIFdUOlQ6QUZBCgl0cmFuc2xpdF9tb2R1bGUgPSAidGctdHJhbnNsaXQiLAoJb3ZlcnJpZGVfdHJhbnNsaXQgPSB0cnVlLAoJc29ydF9rZXkgPSB7CgkJZnJvbSA9IHsi0IEiLCAi0ZEifSwKCQl0byAgID0geyLQlSIgLCAi0LUifX0gLAoJZW50cnlfbmFtZSA9IHsKCQlmcm9tID0ge0FDVVRFfSwKCQl0byAgID0ge319ICwKfQoKbVsidGgiXSA9IHsKCSJUaGFpIiwKCSJROTIxNyIsCgkidGFpLXN3ZSIsCglvdGhlck5hbWVzID0geyJTaWFtZXNlIiwgIkNlbnRyYWwgVGhhaSJ9LAoJc2NyaXB0cyA9IHsiVGhhaSIsICJCcmFpIn0sCgl0cmFuc2xpdF9tb2R1bGUgPSAidGgtdHJhbnNsaXQiLAoJc29ydF9rZXkgPSB7CgkJZnJvbSA9IHsiJXAiLCAiW+C5hy3guY5dIiwgIihb4LmA4LmB4LmC4LmD4LmEXSkoW+C4gS3guK5dKSJ9LAoJCXRvICAgPSB7IiIsICIiLCAiJTIlMSJ9fSwKfQoKbVsidGkiXSA9IHsKCSJUaWdyaW55YSIsCgkiUTM0MTI0IiwKCSJzZW0tZXRoIiwKCW90aGVyTmFtZXMgPSB7IlRpZ3JpZ25hIn0sCglzY3JpcHRzID0geyJFdGhpIn0sCgl0cmFuc2xpdF9tb2R1bGUgPSAiRXRoaS10cmFuc2xpdCIsCn0KCm1bInRrIl0gPSB7CgkiVHVya21lbiIsCgkiUTkyNjciLAoJInRyay1vZ3oiLAoJc2NyaXB0cyA9IHsiTGF0biIsICJDeXJsIn0sCgllbnRyeV9uYW1lID0gewoJCWZyb20gPSB7IsSBIiwgIsSTIiwgIsSrIiwgIsWNIiwgIsWrIiwgIsizIiwgIsirIiwgIseWIiwgTUFDUk9OfSwKCQl0byAgID0geyJhIiwgImUiLCAiaSIsICJvIiwgInUiLCAieSIsICLDtiIsICLDvCIsICIifX0sCglhbmNlc3RvcnMgPSB7InRyay1vZ3otcHJvIn0sCn0KCm1bInRsIl0gPSB7CgkiVGFnYWxvZyIsCgkiUTM0MDU3IiwKCSJwaGkiLAoJc2NyaXB0cyA9IHsiTGF0biIsICJUZ2xnIn0sCgllbnRyeV9uYW1lID0gewoJCWZyb20gPSB7IlvDocOgw6JdIiwgIlvDqcOow6pdIiwgIlvDrcOsw65dIiwgIlvDs8Oyw7RdIiwgIlvDusO5w7tdIiwgQUNVVEUsIEdSQVZFLCBDSVJDfSwKCQl0byAgID0geyJhIiAgICAsICJlIiAgICAsICJpIiAgICAsICJvIiAgICAsICJ1IiAgICB9fSwKfQoKbVsidG4iXSA9IHsKCSJUc3dhbmEiLAoJIlEzNDEzNyIsCgkiYm50LXN0cyIsCglvdGhlck5hbWVzID0geyJTZXRzd2FuYSJ9LAoJc2NyaXB0cyA9IExhdG4sCn0KCm1bInRvIl0gPSB7CgkiVG9uZ2FuIiwKCSJRMzQwOTQiLAoJInBvei1wb2wiLAoJc2NyaXB0cyA9IExhdG4sCn0KCm1bInRyIl0gPSB7CgkiVHVya2lzaCIsCgkiUTI1NiIsCgkidHJrLW9neiIsCglzY3JpcHRzID0gTGF0biwKCWFuY2VzdG9ycyA9IHsib3RhIn0sCn0KCm1bInRzIl0gPSB7CgkiVHNvbmdhIiwKCSJRMzQzMjciLAoJImJudCIsCglzY3JpcHRzID0gTGF0biwKfQoKbVsidHQiXSA9IHsKCSJUYXRhciIsCgkiUTI1Mjg1IiwKCSJ0cmsta2lwIiwKCXNjcmlwdHMgPSB7IkN5cmwiLCAiTGF0biIsICJ0dC1BcmFiIn0sCgl0cmFuc2xpdF9tb2R1bGUgPSAidHQtdHJhbnNsaXQiLAoJb3ZlcnJpZGVfdHJhbnNsaXQgPSB0cnVlLAp9CgotLSAidHciIElTIFRSRUFURUQgQVMgImFrIiwgU0VFIFdUOkxUCgptWyJ0eSJdID0gewoJIlRhaGl0aWFuIiwKCSJRMzQxMjgiLAoJInBvei1wZXAiLAoJc2NyaXB0cyA9IExhdG4sCn0KCm1bInVnIl0gPSB7CgkiVXlnaHVyIiwKCSJRMTMyNjMiLAoJInRyayIsCglvdGhlck5hbWVzID0geyJVaWd1ciIsICJVaWdodXIiLCAiVXlndXIifSwKCXNjcmlwdHMgPSB7InVnLUFyYWIiLCAiTGF0biIsICJDeXJsIn0sCglhbmNlc3RvcnMgPSB7ImNoZyJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gInVnLXRyYW5zbGl0IiwKCW92ZXJyaWRlX3RyYW5zbGl0ID0gdHJ1ZSwKfQoKbVsidWsiXSA9IHsKCSJVa3JhaW5pYW4iLAoJIlE4Nzk4IiwKCSJ6bGUiLAoJc2NyaXB0cyA9IEN5cmwsCglhbmNlc3RvcnMgPSB7Im9ydiJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gInVrLXRyYW5zbGl0IiwKCWVudHJ5X25hbWUgPSB7CgkJZnJvbSA9IHsi0IAiLCAi0ZAiLCAi0I0iLCAi0Z0iLCBHUkFWRSwgQUNVVEV9LAoJCXRvICAgPSB7ItCVIiwgItC1IiwgItCYIiwgItC4In19LAoJc3RhbmRhcmRDaGFycyA9ICLQhNCG0IfQkC3QqdCr0KzQri3RidGL0YzRjtGP0ZTRltGXIiAuLiBQVU5DVFVBVElPTiwKfSAKbVsidXIiXSA9IHsKCSJVcmR1IiwKCSJRMTYxNyIsCgkiaW5jIiwKCXNjcmlwdHMgPSB7InVyLUFyYWIifSwKCWFuY2VzdG9ycyA9IHsiaW5jLXNhcCJ9LAoJZW50cnlfbmFtZSA9IHsKCQlmcm9tID0ge3UoMHgwNjRCKSwgdSgweDA2NEMpLCB1KDB4MDY0RCksIHUoMHgwNjRFKSwgdSgweDA2NEYpLCB1KDB4MDY1MCksIHUoMHgwNjUxKSwgdSgweDA2NTIpfSwKCQl0byAgID0ge319ICwKfQoKbVsidXoiXSA9IHsKCSJVemJlayIsCgkiUTkyNjQiLAoJInRyayIsCglvdGhlck5hbWVzID0geyJOb3J0aGVybiBVemJlayIsICJTb3V0aGVybiBVemJlayJ9LAoJc2NyaXB0cyA9IHsiTGF0biIsICJDeXJsIiwgImZhLUFyYWIifSwKCWFuY2VzdG9ycyA9IHsiY2hnIn0sCn0KCm1bInZlIl0gPSB7CgkiVmVuZGEiLAoJIlEzMjcwNCIsCgkiYm50IiwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJ2aSJdID0gewoJIlZpZXRuYW1lc2UiLAoJIlE5MTk5IiwKCSJta2gtdmllIiwKCW90aGVyTmFtZXMgPSB7IkFubmFtZXNlIiwgIkFubmFtaXRlIn0sCglzY3JpcHRzID0geyJMYXRuIiwgIkhhbmkifSwKCWFuY2VzdG9ycyA9IHsibWtoLW12aSJ9LAoJc29ydF9rZXkgPSAidmktc29ydGtleSIsCn0KCm1bInZvIl0gPSB7CgkiVm9sYXDDvGsiLAoJIlEzNjk4NiIsCgkiYXJ0IiwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJ3YSJdID0gewoJIldhbGxvb24iLAoJIlEzNDIxOSIsCgkicm9hLW9pbCIsCglvdGhlck5hbWVzID0geyJMacOpZ2VvaXMiLCAiTmFtdXJvaXMiLCAiV2FsbG8tUGljYXJkIiwgIldhbGxvLUxvcnJhaW4ifSwKCXNjcmlwdHMgPSBMYXRuLAoJYW5jZXN0b3JzID0geyJmcm8ifSwKCXNvcnRfa2V5ID0gewoJCWZyb20gPSB7IlvDocOgw6LDpMOlXSIsICJbw6nDqMOqw6tdIiwgIlvDrcOsw67Dr10iLCAiW8Ozw7LDtMO2XSIsICJbw7rDucO7w7xdIiwgIlvDveG7s8W3w79dIiwgIsOnIiwgIicifSwKCQl0byAgID0geyJhIgkgICwgImUiCSAsICJpIgkgLCAibyIJICwgInUiCSAsICJ5IgkgLCAiYyJ9fSAsCn0KCm1bIndvIl0gPSB7CgkiV29sb2YiLAoJIlEzNDI1NyIsCgkiYWx2LXNuZyIsCglvdGhlck5hbWVzID0geyJHYW1iaWFuIFdvbG9mIn0sIC0tIHRoZSBzdWJzdW1lZCBkaWFsZWN0ICd3b2YnCglzY3JpcHRzID0gTGF0bkFyYWIsCn0KCm1bInhoIl0gPSB7CgkiWGhvc2EiLAoJIlExMzIxOCIsCgkiYm50LW5ndSIsCglzY3JpcHRzID0gTGF0biwKCWVudHJ5X25hbWUgPSB7CgkJZnJvbSA9IHsiW8SBw6DDocOix45dIiwgIlvEk8Oow6nDqsSbXSIsICJbxKvDrMOtw67HkF0iLCAiW8WNw7LDs8O0x5JdIiwgIlvFq8O5w7rDu8eUXSIsICLhuL8iLCAiW8e5xYTFiF0iLCBNQUNST04sIEFDVVRFLCBHUkFWRSwgQ0lSQywgQ0FST059LAoJCXRvICAgPSB7ImEiICAgICAgLCAiZSIgICAgICAsICJpIiAgICAgICwgIm8iICAgICAgLCAidSIgICAgICAsICJtIiwgIm4iICAgIH19LAp9CgptWyJ5aSJdID0gewoJIllpZGRpc2giLAoJIlE4NjQxIiwKCSJnbXciLAoJc2NyaXB0cyA9IHsiSGViciJ9LAoJYW5jZXN0b3JzID0geyJnbWgifSwKCXNvcnRfa2V5ID0gewoJCWZyb20gPSB7IlvXkNa315DWuF0iLCAi15HWvCIsICJb15XWudeV1rxdIiwgIteZ1rQiLCAi17LWtyIsICLXpNa/In0sCgkJdG8gPSB7IteQIiwgIteRIiwgIteVIiwgIteZIiwJIteZ15kiLCAi16QifX0gLAoJdHJhbnNsaXRfbW9kdWxlID0gInlpLXRyYW5zbGl0IiwKfQoKbVsieW8iXSA9IHsKCSJZb3J1YmEiLAoJIlEzNDMxMSIsCgkiYWx2LXZvbiIsCglzY3JpcHRzID0gTGF0biwKfQoKbVsiemEiXSA9IHsKCSJaaHVhbmciLAoJIlExMzIxNiIsCgkidGFpIiwKCW90aGVyTmFtZXMgPSB7IlN0YW5kYXJkIFpodWFuZyIsICJEYWkgWmh1YW5nIiwgIldlbm1hIFpodWFuZyIsICJXZW5tYSBUaHUiLCAiV2VubWEiLCAiTm9uZyBaaHVhbmciLCAiWW91amlhbmcgWmh1YW5nIiwgIllvbmdiZWkgWmh1YW5nIiwgIllhbmcgWmh1YW5nIiwgIllvbmduYW4gWmh1YW5nIiwgIlp1b2ppYW5nIFpodWFuZyIsICJDZW50cmFsIEhvbmdzaHVpaGUgWmh1YW5nIiwgIkVhc3Rlcm4gSG9uZ3NodWloZSBaaHVhbmciLCAiR3VpYmVpIFpodWFuZyIsICJNaW56IFpodWFuZyIsICJHdWliaWFuIFpodWFuZyIsICJMaXVqaWFuZyBaaHVhbmciLCAiTGlhbnNoYW4gWmh1YW5nIiwgIkxpdXFpYW4gWmh1YW5nIiwgIlFpdWJlaSBaaHVhbmciLCAiQ2hvbmd6dW8gWmh1YW5nIiwgIlNoYW5nc2kgWmh1YW5nIn0sCglzY3JpcHRzID0geyJMYXRuIiwgIkhhbmkifSwKfQoKbVsiemgiXSA9IHsKCSJDaGluZXNlIiwKCSJRNzg1MCIsCgkiemh4IiwKCXNjcmlwdHMgPSB7IkhhbmkiLCAiQnJhaSIsICJOc2h1In0sCglhbmNlc3RvcnMgPSB7Imx0YyJ9LAoJc29ydF9rZXkgPSAiemgtc29ydGtleSIsCn0KCm1bInp1Il0gPSB7CgkiWnVsdSIsCgkiUTEwMTc5IiwKCSJibnQtbmd1IiwKCW90aGVyTmFtZXMgPSB7ImlzaVp1bHUifSwKCXNjcmlwdHMgPSBMYXRuLAoJZW50cnlfbmFtZSA9IHsKICAgICAgICAgICAgICAgIGZyb20gPSB7IlvEgcOgw6HDoseOXSIsICJbxJPDqMOpw6rEm10iLCAiW8Srw6zDrcOux5BdIiwgIlvFjcOyw7PDtMeSXSIsICJbxavDucO6w7vHlF0iLCAi4bi/IiwgIlvHucWExYhdIiwgTUFDUk9OLCBBQ1VURSwgR1JBVkUsIENJUkMsIENBUk9OfSwKICAgICAgICAgICAgICAgIHRvICAgPSB7ImEiICAgICAgLCAiZSIgICAgICAsICJpIiAgICAgICwgIm8iICAgICAgLCAidSIgICAgICAsICJtIiwgIm4iICAgIH19LAp9CgpyZXR1cm4gbTwvcmV2PjwvcmV2aXNpb25zPjwvcGFnZT48L3BhZ2VzPjwvcXVlcnk+PC9hcGk+
- recorded: 2019-04-27T12:52:53.417Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Ascripts&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=38927 t=1556369573307978
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:53 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1228.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1075 pass, cp3032 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 311575893, 489083706, 459376254
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"4216643\" pageid=\"4216643\" ns=\"828\" title=\"Module:scripts\"><revisions><rev user=\"Erutuon\" timestamp=\"2018-02-03T10:53:06Z\" contentformat=\"\
      text/plain\" contentmodel=\"Scribunto\" comment=\"that was incorrect, but it turns out there aren&#039;t even any scripts whose canonical names contain &quot;script&quot;, so it didn&#039;t cause problems\" xml:space=\"preserve\">local export = {}\nlocal\
      \ Script = {}\n\nfunction Script:getCode()\n\treturn self._code\nend\n\nfunction Script:getCanonicalName()\n\treturn self._rawData.canonicalName\nend\n\nfunction Script:getOtherNames()\n\treturn self._rawData.otherNames or {}\nend\n\nfunction Script:getParent()\n\
      \treturn self._rawData.parent\nend\n\nfunction Script:getSystems()\n\tif not self._systemObjects then\n\t\tlocal m_systems = require(\"Module:writing systems\")\n\t\tself._systemObjects = {}\n\t\t\n\t\tfor _, sys in ipairs(self._rawData.systems or {})\
      \ do\n\t\t\ttable.insert(self._systemObjects, m_systems.getByCode(sys))\n\t\tend\n\tend\n\t\n\treturn self._systemObjects\nend\n\n--function Script:getAllNames()\n--\treturn self._rawData.names\n--end\n\n\nfunction Script:getType()\n\treturn \"script\"\
      \nend\n\n\nfunction Script:getCategoryName()\n\tlocal name = self._rawData.canonicalName\n\t\n\t-- If the name already has \"code\" or \"semaphore\" in it, don't add it.\n\t-- No names contain \"script\".\n\tif name:find(\"[Cc]ode$\") or name:find(\"[Ss]emaphore$\"\
      ) then\n\t\treturn name\n\telse\n\t\treturn name .. \" script\"\n\tend\nend\n\n\nfunction Script:getWikipediaArticle()\n\treturn self._rawData.wikipedia_article or self:getCategoryName()\nend\n\n\nfunction Script:getCharacters()\n\tif self._rawData.characters\
      \ then\n\t\treturn self._rawData.characters\n\telse\n\t\treturn nil\n\tend\nend\n\n\nfunction Script:countCharacters(text)\n\tif not self._rawData.characters then\n\t\treturn 0\n\telse\n\t\tlocal _, num = mw.ustring.gsub(text, \"[\" .. self._rawData.characters\
      \ .. \"]\", \"\")\n\t\treturn num\n\tend\nend\n\nfunction Script:getDirection()\n\tlocal direction = self._rawData.direction\n\tif not direction then\n\t\treturn nil\n\telse\n\t\treturn direction\n\tend\nend\n\n\nfunction Script:getRawData()\n\treturn\
      \ self._rawData\nend\n\n\nfunction Script:toJSON()\n\tlocal ret = {\n\t\tcanonicalName = self:getCanonicalName(),\n\t\tcategoryName = self:getCategoryName(),\n\t\tcode = self._code,\n\t\totherNames = self:getOtherNames(),\n\t\ttype = self:getType(),\n\t\
      \t}\n\t\n\treturn require(\"Module:JSON\").toJSON(ret)\nend\n\n\nScript.__index = Script\n\n\nfunction export.makeObject(code, data)\n\treturn data and setmetatable({ _rawData = data, _code = code }, Script) or nil\nend\n\n\nfunction export.getByCode(code)\n\
      \tif code == \"IPAchar\" then\n\t\trequire(\"Module:debug\").track(\"IPAchar\")\n\tend\n\treturn export.makeObject(code, mw.loadData(\"Module:scripts/data\")[code])\nend\n\nfunction export.getByCanonicalName(name)\n\tlocal code = mw.loadData(\"Module:scripts/by\
      \ name\")[name]\n\t\n\tif not code then\n\t\treturn nil\n\tend\n\t\n\treturn export.makeObject(code, mw.loadData(\"Module:scripts/data\")[code])\nend\n\n-- Find the best script to use, based on the characters of a string.\nfunction export.findBestScript(text,\
      \ lang)\n\tif not text or not lang or not lang.getScripts then\n\t\treturn export.getByCode(\"None\")\n\tend\n\t\n\tlocal scripts = lang:getScripts()\n\t\n\tif not scripts[2] then\n\t\treturn scripts[1]\n\tend\n\t\n\t--[=[\n\t\tRemove any HTML entities;\
      \ catfix function in [[Module:utilities]]\n\t\tadds tagging to a no-break space (&amp;nbsp;), which contains Latin characters;\n\t\thence Latin was returned as the script if \"Latn\" is one of the language's scripts.\n\t]=]\n\ttext = string.gsub(text,\
      \ \"&amp;[a-zA-Z0-9]+;\", \"\")\n\t\n\t-- Try to match every script against the text,\n\t-- and return the one with the most matching characters.\n\tlocal bestcount = 0\n\tlocal bestscript = nil\n\t\n\t-- Get length of text minus any spacing or punctuation\
      \ characters.\n\t-- Counting instances of UTF-8 character pattern is faster than mw.ustring.len.\n\tlocal _, length = string.gsub(mw.ustring.gsub(text, \"[%s%p]+\", \"\"), \"[\\1-\\127\\194-\\244][\\128-\\191]*\", \"\")\n\t\n\tif length == 0 then\n\t\t\
      return export.getByCode(\"None\")\n\tend\n\t\n\tfor i, script in ipairs(scripts) do\n\t\tlocal count = script:countCharacters(text)\n\t\t\n\t\tif count &gt;= length then\n\t\t\treturn script\n\t\tend\n\t\t\n\t\tif count &gt; bestcount then\n\t\t\tbestcount\
      \ = count\n\t\t\tbestscript = script\n\t\tend\n\tend\n\t\n\tif bestscript then\n\t\treturn bestscript\n\tend\n\t\n\t-- No matching script was found. Return \"None\".\n\treturn export.getByCode(\"None\")\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T12:52:53.840Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Ascripts%2Fdata&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=44608 t=1556369573583211
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:53 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1224.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1083 pass, cp3030 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 664736068, 153028177, 455480262
    body: !!binary |-
      
- recorded: 2019-04-27T12:52:54.050Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Ascript+utilities&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=43417 t=1556369573931142
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:54 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1313.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1077 pass, cp3033 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 451871202, 88070430, 450341955
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"4099100\" pageid=\"4099100\" ns=\"828\" title=\"Module:script utilities\"><revisions><rev user=\"Rua\" timestamp=\"2019-04-03T16:56:29Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"Undo revision 52248476 by [[Special:Contributions/Rua|Rua]] ([[User talk:Rua|talk]])\" xml:space=\"preserve\">local export = {}\n\n--[=[\n\tModules used:\n\t[[Module:script utilities/data]]\n\
      \t[[Module:scripts]]\n\t[[Module:languages]]\n\t[[Module:parameters]]\n\t[[Module:utilities]]\n\t[[Module:debug]]\n]=]\n\nfunction export.is_Latin_script(sc)\n\t-- Latn, Latf, Latinx, nv-Latn, pjt-Latn\n\treturn sc:getCode():find(\"Lat\") and true or false\n\
      end\n\n-- Used by [[Template:lang]]\nfunction export.lang_t(frame)\n\tparams = {\n\t\t[1] = {},\n\t\t[2] = { allow_empty = true, default = \"\" },\n\t\t[\"sc\"] = {},\n\t\t[\"face\"] = {},\n\t\t[\"class\"] = {},\n\t}\n\t\n\tlocal args = require(\"Module:parameters\"\
      ).process(frame:getParent().args, params)\n\tlocal NAMESPACE = mw.title.getCurrentTitle().nsText\n\t\n\tlocal lang = args[1] or (NAMESPACE == \"Template\" and \"und\") or error(\"Language code has not been specified. Please pass parameter 1 to the template.\"\
      )\n\tlang = require(\"Module:languages\").getByCode(lang) or require(\"Module:languages\").err(lang, 1)\n\t\n\tlocal text = args[2]\n\t\n\tlocal sc = args[\"sc\"]\n\tsc = (sc and (require(\"Module:scripts\").getByCode(sc) or error(\"The script code \\\"\
      \" .. sc .. \"\\\" is not valid.\")) or nil)\n\t\n\tlocal face = args[\"face\"]\n\t\n\treturn export.tag_text(text, lang, sc, face, class)\nend\n\n-- Ustring turns on the codepoint-aware string matching. The basic string function\n-- should be used for\
      \ simple sequences of characters, Ustring function for\n-- sets – [].\nlocal function trackPattern(text, pattern, tracking, ustring)\n\tlocal find = ustring and mw.ustring.find or string.find\n\tif pattern and find(text, pattern) then\n\t\trequire(\"Module:debug\"\
      ).track(\"script/\" .. tracking)\n\tend\nend\n\nlocal function track(text, lang, sc)\n\tlocal U = mw.ustring.char\n\t\n\tif lang and text then\n\t\tlocal langCode = lang:getCode()\n\t\t\n\t\t-- [[Special:WhatLinksHere/Template:tracking/script/ang/acute]]\n\
      \t\tif langCode == \"ang\" then\n\t\t\tlocal decomposed = mw.ustring.toNFD(text)\n\t\t\tlocal acute = U(0x301)\n\t\t\t\n\t\t\ttrackPattern(decomposed, acute, \"ang/acute\")\n\t\t\n\t\t--[=[\n\t\t[[Special:WhatLinksHere/Template:tracking/script/Greek/wrong-phi]]\n\
      \t\t[[Special:WhatLinksHere/Template:tracking/script/Greek/wrong-theta]]\n\t\t[[Special:WhatLinksHere/Template:tracking/script/Greek/wrong-kappa]]\n\t\t[[Special:WhatLinksHere/Template:tracking/script/Greek/wrong-rho]]\n\t\t\tϑ, ϰ, ϱ, ϕ should generally\
      \ be replaced with θ, κ, ρ, φ.\n\t\t]=]\n\t\telseif langCode == \"el\" or langCode == \"grc\" then\n\t\t\ttrackPattern(text, \"ϑ\", \"Greek/wrong-theta\")\n\t\t\ttrackPattern(text, \"ϰ\", \"Greek/wrong-kappa\")\n\t\t\ttrackPattern(text, \"ϱ\", \"Greek/wrong-rho\"\
      )\n\t\t\ttrackPattern(text, \"ϕ\", \"Greek/wrong-phi\")\n\t\t\n\t\t\t--[=[\n\t\t\t[[Special:WhatLinksHere/Template:tracking/script/Ancient Greek/spacing-coronis]]\n\t\t\t[[Special:WhatLinksHere/Template:tracking/script/Ancient Greek/spacing-smooth-breathing]]\n\
      \t\t\t[[Special:WhatLinksHere/Template:tracking/script/Ancient Greek/wrong-apostrophe]]\n\t\t\t\tWhen spacing coronis and spacing smooth breathing are used as apostrophes, \n\t\t\t\tthey should be replaced with right single quotation marks (’).\n\t\t\t\
      ]=]\n\t\t\tif langCode == \"grc\" then\n\t\t\t\ttrackPattern(text, U(0x1FBD), \"Ancient Greek/spacing-coronis\")\n\t\t\t\ttrackPattern(text, U(0x1FBF), \"Ancient Greek/spacing-smooth-breathing\")\n\t\t\t\ttrackPattern(text, \"[\" .. U(0x1FBD) .. U(0x1FBF)\
      \ .. \"]\", \"Ancient Greek/wrong-apostrophe\", true)\n\t\t\tend\n\t\t\n\t\t-- [[Special:WhatLinksHere/Template:tracking/script/Russian/grave-accent]]\n\t\telseif langCode == \"ru\" then\n\t\t\tlocal decomposed = mw.ustring.toNFD(text)\n\t\t\t\n\t\t\t\
      trackPattern(decomposed, U(0x300), \"Russian/grave-accent\")\n\t\t\n\t\t-- [[Special:WhatLinksHere/Template:tracking/script/Tibetan/trailing-punctuation]]\n\t\telseif langCode == \"bo\" then\n\t\t\ttrackPattern(text, \"[་།]$\", \"Tibetan/trailing-punctuation\"\
      , true)\n\t\t\ttrackPattern(text, \"[་།]%]%]$\", \"Tibetan/trailing-punctuation\", true)\n\n\t\t--[=[\n\t\t[[Special:WhatLinksHere/Template:tracking/script/Thai/broken-ae]]\n\t\t[[Special:WhatLinksHere/Template:tracking/script/Thai/broken-am]]\n\t\t[[Special:WhatLinksHere/Template:tracking/script/Thai/wrong-rue-lue]]\n\
      \t\t]=]\n\t\telseif langCode == \"th\" then\n\t\t\ttrackPattern(text, \"เ\"..\"เ\", \"Thai/broken-ae\")\n\t\t\ttrackPattern(text, \"ํ[่้๊๋]?า\", \"Thai/broken-am\", true)\n\t\t\ttrackPattern(text, \"[ฤฦ]า\", \"Thai/wrong-rue-lue\", true)\n\n\t\t--[=[\n\
      \t\t[[Special:WhatLinksHere/Template:tracking/script/Lao/broken-ae]]\n\t\t[[Special:WhatLinksHere/Template:tracking/script/Lao/broken-am]]\n\t\t]=]\n\t\telseif langCode == \"lo\" then\n\t\t\ttrackPattern(text, \"ເ\"..\"ເ\", \"Lao/broken-ae\")\n\t\t\ttrackPattern(text,\
      \ \"ໍ[່້໊໋]?າ\", \"Lao/broken-am\", true)\n\t\tend\n\tend\nend\n\n-- Wrap text in the appropriate HTML tags with language and script class.\nfunction export.tag_text(text, lang, sc, face, class, id)\n\tif not sc then\n\t\tsc = require(\"Module:scripts\"\
      ).findBestScript(text, lang)\n\tend\n\t\n\ttrack(text, lang, sc)\n\t\t\n\t-- Replace space characters with newlines in Mongolian-script text, which is written top-to-bottom.\n\tif sc and sc:getDirection() == \"down\" then\n\t\t--[[\tFirst, escape targets\
      \ of wikilinks and HTML tags,\n\t\t\t\twhich should not have their spaces\n\t\t\t\treplaced with line breaks. ]]\n\t\tlocal escaped = {}\n\t\tlocal i = 0\n\t\tlocal escape_format = \"$%d\"\n\t\t\n\t\tlocal function escape(text, pattern, prefix)\n\t\t\t\
      return text:gsub(\n\t\t\t\tpattern,\n\t\t\t\tfunction(item)\n\t\t\t\t\ti = i + 1\n\t\t\t\t\tescaped[i] = item\n\t\t\t\t\treturn (prefix or \"\") .. escape_format:format(i)\n\t\t\t\tend)\n\t\tend\n\t\t\n\t\ttext = escape(text, \"%[%[([^|]+|)\", \"[[\")\n\
      \t\ttext = escape(text, \"&lt;[^&gt;]+&gt;\")\n\t\t\n\t\ttext = text:gsub(\" +\", \"&lt;br&gt;\")\n\t\t\n\t\t-- Unescape whatever was escaped.\n\t\ttext = text:gsub(\n\t\t\t\"$(%d)\",\n\t\t\tfunction(a)\n\t\t\t\ta = tonumber(a)\n\t\t\t\treturn escaped[a]\n\
      \t\t\tend\n\t\t)\n\tend\n\n\tif sc:getCode() == \"Imag\" then\n\t\tface = nil\n\tend\n\n\tlocal function class_attr(classes)\n\t\ttable.insert(classes, 1, sc:getCode())\n\t\tif class and class ~= '' then\n\t\t\ttable.insert(classes, class)\n\t\tend\n\t\
      \treturn 'class=\"' .. table.concat(classes, ' ') .. '\"'\n\tend\n\t\n\tlocal function tag_attr(...)\n\t\tlocal output = {}\n\t\tif id then\n\t\t\ttable.insert(output, 'id=\"' .. require(\"Module:utilities\").make_id(lang, id) .. '\"')\n\t\tend\n\t\t\n\
      \t\ttable.insert(output, class_attr({...}) )\n\t\t\n\t\tif lang then\n\t\t\ttable.insert(output, 'lang=\"' .. lang:getCode() .. '\"')\n\t\tend\n\t\t\n\t\treturn table.concat(output, \" \")\n\tend\n\t\n\tif face == \"hypothetical\" then\n\t-- [[Special:WhatLinksHere/Template:tracking/script-utilities/face/hypothetical]]\n\
      \t\trequire(\"Module:debug\").track(\"script-utilities/face/hypothetical\")\n\tend\n\t\n\tlocal data = mw.loadData(\"Module:script utilities/data\").faces[face or \"nil\"]\n\t\n\tlocal post = \"\"\n\tif sc:getDirection() == \"rtl\" and (face == \"translation\"\
      \ or mw.ustring.find(text, \"%p$\")) then\n\t\tpost = \"&amp;lrm;\"\n\tend\n\t\n\t-- Add a script wrapper\n\tif data then\n\t\treturn ( data.prefix or \"\" ) .. '&lt;' .. data.tag .. ' ' .. tag_attr(data.class) .. '&gt;' .. text .. '&lt;/' .. data.tag\
      \ .. '&gt;' .. post\n\telse\n\t\terror('Invalid script face \"' .. face .. '\".')\n\tend\nend\n\nfunction export.tag_translit(translit, lang, kind, attributes, is_manual)\n\tif type(lang) == \"table\" then\n\t\tlang = lang.getCode and lang:getCode()\n\t\
      \t\tor error(\"Third argument to tag_translit should be a language code or language object.\")\n\tend\n\t\n\tlocal data = mw.loadData(\"Module:script utilities/data\").translit[kind or \"default\"]\n\t\n\tlocal opening_tag = {}\n\t\n\ttable.insert(opening_tag,\
      \ data.tag)\n\tif lang == \"ja\" then\n\t\ttable.insert(opening_tag, 'class=\"' .. (data.classes and data.classes .. \" \" or \"\") .. (is_manual and \"manual-tr \" or \"\") .. 'tr\"')\n\telse\n\t\ttable.insert(opening_tag, 'lang=\"' .. lang .. '-Latn\"\
      ')\n\t\ttable.insert(opening_tag, 'class=\"' .. (data.classes and data.classes .. \" \" or \"\") .. (is_manual and \"manual-tr \" or \"\") .. 'tr Latn\"')\n\tend\n\t\n\tif data.dir then\n\t\ttable.insert(opening_tag, 'dir=\"' .. data.dir .. '\"')\n\tend\n\
      \t\n\ttable.insert(opening_tag, attributes)\n\t\n\treturn \"&lt;\" .. table.concat(opening_tag, \" \") .. \"&gt;\" .. translit .. \"&lt;/\" .. data.tag .. \"&gt;\"\nend\n\nfunction export.tag_transcription(transcription, lang, kind, attributes)\n\tif type(lang)\
      \ == \"table\" then\n\t\tlang = lang.getCode and lang:getCode()\n\t\t\tor error(\"Third argument to tag_translit should be a language code or language object.\")\n\tend\n\t\n\tlocal data = mw.loadData(\"Module:script utilities/data\").transcription[kind\
      \ or \"default\"]\n\t\n\tlocal opening_tag = {}\n\t\n\ttable.insert(opening_tag, data.tag)\n\tif lang == \"ja\" then\n\t\ttable.insert(opening_tag, 'class=\"' .. (data.classes and data.classes .. \" \" or \"\") .. 'ts\"')\n\telse\n\t\ttable.insert(opening_tag,\
      \ 'lang=\"' .. lang .. '-Latn\"')\n\t\ttable.insert(opening_tag, 'class=\"' .. (data.classes and data.classes .. \" \" or \"\") .. 'ts Latn\"')\n\tend\n\t\n\tif data.dir then\n\t\ttable.insert(opening_tag, 'dir=\"' .. data.dir .. '\"')\n\tend\n\t\n\ttable.insert(opening_tag,\
      \ attributes)\n\t\n\treturn \"&lt;\" .. table.concat(opening_tag, \" \") .. \"&gt;\" .. transcription .. \"&lt;/\" .. data.tag .. \"&gt;\"\t\nend\n\n-- Add a notice to request the native script of a word\nfunction export.request_script(lang, sc)\n\tlocal\
      \ scripts = lang.getScripts and lang:getScripts() or error('The language \"' .. lang:getCode() .. '\" does not have the method getScripts. It may be unwritten.')\n\t\n\t-- By default, request for \"native\" script\n\tlocal cat_script = \"native\"\n\tlocal\
      \ disp_script = \"script\"\n\t\n\t-- If the script was not specified, and the language has only one script, use that.\n\tif not sc and #scripts == 1 then\n\t\tsc = scripts[1]\n\tend\n\t\n\t-- Is the script known?\n\tif sc then\n\t\t-- If the script is\
      \ Latin, return nothing.\n\t\tif export.is_Latin_script(sc) then\n\t\t\treturn \"\"\n\t\tend\n\t\t\n\t\tif sc:getCode() ~= scripts[1]:getCode() then\n\t\t\tdisp_script = sc:getCanonicalName()\n\t\tend\n\t\t\n\t\t-- The category needs to be specific to\
      \ script only if there is chance\n\t\t-- of ambiguity. This occurs when lang=und, or when the language has\n\t\t-- multiple scripts.\n\t\tif lang:getCode() == \"und\" or scripts[2] then\n\t\t\tcat_script = sc:getCanonicalName()\n\t\tend\n\telse\n\t\t--\
      \ The script is not known.\n\t\t-- Does the language have at least one non-Latin script in its list?\n\t\tlocal has_nonlatin = false\n\t\t\n\t\tfor i, val in ipairs(scripts) do\n\t\t\tif not export.is_Latin_script(val) then\n\t\t\t\thas_nonlatin = true\n\
      \t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\t\n\t\t-- If there are non-Latin scripts, return nothing.\n\t\tif not has_nonlatin then\n\t\t\treturn \"\"\n\t\tend\n\tend\n\t\n\tlocal category = \"\"\n\t\n\tif mw.title.getCurrentTitle().nsText ~= \"Template\" then\n\
      \t\tcategory = \"[[Category:\" .. lang:getCanonicalName() .. \" terms needing \" .. cat_script .. \" script]]\"\n\tend\n\t\n\treturn \"&lt;small&gt;[\" .. disp_script .. \" needed]&lt;/small&gt;\" .. category\nend\n\nfunction export.template_rfscript(frame)\n\
      \tlocal args = frame.args\n\tlocal lang = args[1] or error(\"The first parameter (language code) has not been given\")\n\tlocal sc = args[\"sc\"]; if sc == \"\" then sc = nil end\n\tlang = require(\"Module:languages\").getByCode(lang) or error(\"The language\
      \ code \\\"\" .. lang .. \"\\\" is not valid.\")\n\tsc = (sc and (require(\"Module:scripts\").getByCode(sc) or error(\"The script code \\\"\" .. sc .. \"\\\" is not valid.\")) or nil)\n\t\n\tlocal ret = export.request_script(lang, sc)\n\t\n\tif ret ==\
      \ \"\" then\n\t\terror(\"This language is written in the Latin alphabet. It does not need a native script.\")\n\telse\n\t\treturn ret\n\tend\nend\n\nfunction export.checkScript(text, scriptCode, result)\n\tlocal scriptObject = require(\"Module:scripts\"\
      ).getByCode(scriptCode)\n\t\n\tif not scriptObject then\n\t\terror('The script code \"' .. scriptCode .. '\" is not recognized.')\n\tend\n\t\n\tlocal originalText = text\n\t\n\t-- Remove non-letter characters.\n\ttext = mw.ustring.gsub(text, \"[%A]\",\
      \ \"\")\n\t\n\t-- Remove all characters of the script in question.\n\ttext = mw.ustring.gsub(text, \"[\" .. scriptObject:getCharacters() .. \"]\", \"\")\n\t\n\tif text ~= \"\" then\n\t\tif type(result) == \"string\" then\n\t\t\terror(result)\n\t\telse\n\
      \t\t\terror('The text \"' .. originalText .. '\" contains the letters \"' .. text .. '\" that do not belong to the ' .. scriptObject:getCategoryName() .. '.', 2)\n\t\tend\n\tend\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T12:52:54.282Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Alinks%2Fdata&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=48336 t=1556369574160514
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:54 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1315.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1075 pass, cp3030 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 320501308, 130971576, 448227626
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"6246525\" pageid=\"6246525\" ns=\"828\" title=\"Module:links/data\"><revisions><rev user=\"Erutuon\" timestamp=\"2019-03-13T02:26:26Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"add [[Unsupported titles/MeToo]]\" xml:space=\"preserve\">local data = {}\n\ndata.high_memory_entries = {\n\t\"a\",\n\t\"animal\",\n\t\"book\",\n\t\"coffee\",\n\t\"do\",\n\t\"e\",\n\t\"\
      language\",\n\t\"night\",\n\t\"smoke\",\n\t\"son\",\n\t\"sun\",\n\t\"water\",\n\t\"wind\",\n}\n\n\nlocal U = mw.ustring.char\nlocal soft_hyphen = U(0xAD)\n\n--[[\tThe \"actual title\" is the page name with the prefix \"Unsupported titles/\" removed.\n\t\
      \t[\"displayed_title\"] = \"actual title\"\t]]\ndata.unsupported_titles = {\n\t[\" \"] = \"Space\",\n\t[\"{\"] = \"Left curly bracket\",\n\t[\"}\"] = \"Right curly bracket\",\n\t[\"[\"] = \"Left square bracket\",\n\t[\"]\"] = \"Right square bracket\",\n\
      \t[\"&lt;\"] = \"Less than\",\n\t[\"&gt;\"] = \"Greater than\",\n\t[\"=&lt;\"] = \"Equal less than\",\n\t[\"=&gt;\"] = \"Equal greater than\",\n\t[\"&gt;=\"] = \"Greater than equal\",\n\t[\"&lt;=\"] = \"Less than equal\",\n\t[\"-&gt;\"] = \"Hyphen greater\
      \ than\",\n\t[\"&lt;-\"] = \"Less than hyphen\",\n\t[\"&gt;_&lt;\"] = \"Greater than low line less than\",\n\t[\"::\"] = \"Double colon\",\n\t[\": :\"] = \"Enclosing colons\",\n\t[\":=\"] = \"Colon equals\",\n\t[\":Þ\"] = \"Colon capital thorn\",\n\t[\"\
      :(\"] = \"Colon left paren\",\n\t[\":)\"] = \"Colon right paren\",\n\t[\"&lt;&gt;\"] = \"Less than greater than\",\n\t[\"&lt;3\"] = \"Less than three\",\n\t[\"&lt;/3\"] = \"Less than slash three\",\n\t[\"&lt; &gt;\"] = \"Enclosing less than greater than\"\
      ,\n\t[\"&lt; /&gt;\"] = \"Less than trailing slash greater than\",\n\t[\"&lt; &gt; &lt;/ &gt;\"] = \"HTML start tag end tag\",\n\t[\"&lt;!-- --&gt;\"] = \"HTML comment\",\n\t[\"&lt;g&gt;\"] = \"g tag\",\n\t[\":-(\"] = \"Colon hyphen left paren\",\n\t[\"\
      :-)\"] = \"Colon hyphen right paren\",\n\t[\"|\"] = \"Vertical line\",\n\t[\"||\"] = \"Vertical line vertical line\",\n\t[\"| |\"] = \"Enclosing vertical lines\",\n\t[\"C#\"] = \"C sharp\",\n\t[\"#\"] = \"Number sign\",\n\t[\"# #\"] = \"Enclosing number\
      \ signs\",\n\t[\":\"] = \"Colon\",\n\t[\"..\"] = \"Double period\",\n\t[\".\"] = \"Full stop\",\n\t[\"_\"] = \"Low line\",\n\t[\"-_-\"] = \"Low line interfix\",\n\t[U(0xFFFD)] = \"Replacement character\",\n\t[U(0x1680)] = \"Ogham space\",\n\t[\"[ ]\"]\
      \ = \"Square brackets\",\n\t[\"{ }\"] = \"Curly brackets\",\n\t[\"[…]\"] = \"Square bracketed ellipsis\",\n\t[\"_ _\"] = \"Enclosing low lines\",\n\t[\"C|N&gt;K\"] = \"C through N to K\",\n\t[\"#MeToo\"] = \"MeToo\",\n\t[\"о/.\"] = \"о slash dot\",\n\t\
      [\"กรุงเทพมหานคร อมรรัตนโกสินทร์ มหินทรายุธยา มหาดิลกภพ นพรัตนราชธานีบูรีรมย์ อุดมราชนิเวศน์มหาสถาน อมรพิมานอวตารสถิต สักกะทัตติยวิษณุกรรมประสิทธิ์\"] = \"Thai name of Bangkok\",\n\t[\"λοπαδοτεμαχοσελαχογαλεοκρανιολειψανοδριμυποτριμματοσιλφιοκαραβομελι\
      τοκατακεχυμενοκιχλ\" .. soft_hyphen .. \"επικοσσυφοφαττοπεριστεραλεκτρυονοπτοκεφαλλιοκιγκλοπελειολαγῳοσιραιοβαφητραγανοπτερύγων\"] = \"Ancient Greek dish\",\n\t[\":≠\"] = \":≠\",\n\t[\"S:t\"] = \"S:t\",\n\t[\"S:ta\"] = \"S:ta\",\n\t[\"c:a\"] = \"c:a\"\
      ,\n\t[\"n:a\"] = \"n:a\",\n\t[\"n:o\"] = \"n:o\",\n\t[\"n:r\"] = \"n:r\",\n\t[\"s:a\"] = \"s:a\",\n\t[\"st:a\"] = \"st:a\",\n\t[\"v:a\"] = \"v:a\",\n}\n\nfor i, item in ipairs(data.high_memory_entries) do\n\tdata.high_memory_entries[i] = nil\n\tdata.high_memory_entries[item]\
      \ = true\nend\n\nreturn data</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T12:52:54.479Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Ascript+utilities%2Fdata&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=47937 t=1556369574366120
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:54 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1346.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1081 pass, cp3030 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 336911979, 139839678, 442421375
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"6149597\" pageid=\"6149597\" ns=\"828\" title=\"Module:script utilities/data\"><revisions><rev user=\"DTLHS\" timestamp=\"2018-03-12T01:54:08Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"\" xml:space=\"preserve\">local data = {}\n\ndata.translit = {\n\t[\"term\"] = {\n--[=[\tcan't be done until Kana transliterations are correctly parsed by [[Module:links]]\n\t\t[\"tag\"\
      ] = \"i\",\n\t\t]=]\n\t\t[\"classes\"] = \"mention-tr\",\n\t},\n\t[\"usex\"] = {\n\t\t[\"tag\"] = \"i\",\n\t\t[\"classes\"] = \"e-transliteration\",\n\t},\n\t[\"head\"] = {\n\t\t[\"classes\"] = \"headword-tr\",\n\t\t[\"dir\"] = \"ltr\",\n\t},\n\t[\"default\"\
      ] = {},\n}\n\ndata.transcription = {\n\t[\"head\"] = {\n\t\t[\"tag\"] = \"span\",\n\t\t[\"classes\"] = \"headword-ts\",\n\t\t[\"dir\"] = \"ltr\",\n\t},\n\t[\"default\"] = {},\n}\n\nfor key, value in pairs(data.translit) do\n\tif not value.tag then\n\t\t\
      value.tag = \"span\"\n\tend\nend\n\ndata.faces = {\n\t[\"term\"] = {\n\t\ttag = \"i\",\n\t\tclass = \"mention\",\n\t},\n\t[\"head\"] = {\n\t\ttag = \"strong\",\n\t\tclass = \"headword\",\n\t},\n\t[\"hypothetical\"] = {\n\t\tprefix = '&lt;span class=\"\
      hypothetical-star\"&gt;*&lt;/span&gt;',\n\t\ttag = \"i\",\n\t\tclass = \"hypothetical\",\n\t},\n\t[\"bold\"] = {\n\t\ttag = \"b\",\n\t},\n\t[\"translation\"] = {\n\t\ttag = \"span\",\n\t},\n\t[\"nil\"] = {\n\t\ttag = \"span\",\n\t},\n}\n\nreturn data</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T12:52:54.859Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Template%3Aaudio&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=202018 t=1556369574564223
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:54 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1348.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1089 pass, cp3041 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 169420838, 313787892, 447368062
    body: |-
      <?xml version="1.0"?><api batchcomplete=""><warnings><main xml:space="preserve">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space="preserve">Because "rvslots" was not specified, a legacy format has been used for the output. This format is deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx="87947" pageid="87947" ns="10" title="Template:audio"><revisions><rev user="Benwing2" timestamp="2019-04-03T03:52:30Z" contentformat="text/x-wiki" contentmodel="wikitext" comment="make language code mandatory" xml:space="preserve">&lt;templatestyles src="audio/styles.css" /&gt;&lt;!--
      --&gt;&lt;table class="audiotable" style="vertical-align: bottom; display:inline-block; list-style:none;line-height: 1em; border-collapse:collapse;"&gt;&lt;!--
      --&gt;&lt;tr&gt;&lt;!--

      --&gt;{{#ifeq:{{{format|}}}|1&lt;!--
      --&gt;|&lt;!--
        Do nothing
      --&gt;|&lt;!--
        --&gt;{{#if:{{#if:{{{lang|}}}|{{{2|}}}|{{{3|}}}}}&lt;!--
        --&gt;|&lt;td class="unicode audiolink" style="padding-right:5px; padding-left: 0;"&gt;{{#if:{{{lang|}}}|{{{2|&lt;noinclude&gt;{{{2}}}&lt;/noinclude&gt;}}}|{{{3|&lt;noinclude&gt;{{{3}}}&lt;/noinclude&gt;}}}}}&lt;/td&gt;&lt;!--
        --&gt;}}&lt;!--
      --&gt;}}&lt;!--

      --&gt;&lt;td class="audiofile"&gt;&lt;!--
      --&gt;[[File:{{#if:{{{lang|}}}|{{{1|&lt;noinclude&gt;Example.ogg&lt;/noinclude&gt;}}}|{{{2|&lt;noinclude&gt;Example.ogg&lt;/noinclude&gt;}}}}}|noicon|175px]]&lt;!--
      --&gt;&lt;/td&gt;&lt;!--

      --&gt;&lt;td class="audiometa" style="font-size: 80%;"&gt;&lt;!--
      --&gt;([[:File:{{#if:{{{lang|}}}|{{{1|&lt;noinclude&gt;Example.ogg&lt;/noinclude&gt;}}}|{{{2|&lt;noinclude&gt;Example.ogg&lt;/noinclude&gt;}}}}}|file]])&lt;!--
      --&gt;&lt;/td&gt;&lt;!--

      --&gt;&lt;/tr&gt;&lt;!--

      --&gt;{{#ifeq:{{{format|}}}|1&lt;!--
      --&gt;|&lt;!--
        --&gt;&lt;tr&gt;&lt;!--
        --&gt;&lt;td style="font-size: 90%; width: 25%;"&gt;{{#if:{{{lang|}}}|{{#if:{{{2|}}}|{{{2}}}}}|{{#if:{{{3|}}}|{{{3}}}}}}}&lt;/td&gt;&lt;!--
        --&gt;&lt;/tr&gt;&lt;!--
      --&gt;}}&lt;!--

      --&gt;&lt;/table&gt;&lt;!--

      --&gt;&lt;includeonly&gt;&lt;!--
      --&gt;{{#if:{{{lang|{{{1|}}}}}}||{{#invoke:debug|error|Missing language code.}}}}&lt;!--
      --&gt;{{#ifeq:{{{format|}}}|1&lt;!--
      --&gt;|&lt;!--
        Do nothing
      --&gt;|&lt;!--
        --&gt;{{#ifeq:{{NAMESPACE}}||&lt;!--
          --&gt;{{catlangname|{{{lang|{{{1|}}}}}}|terms with audio links}}&lt;!--
        --&gt;}}&lt;!--
      --&gt;}}&lt;!--
      --&gt;&lt;/includeonly&gt;&lt;!--

      --&gt;&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</rev></revisions></page></pages></query></api>
- recorded: 2019-04-27T12:52:55.054Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Template%3Acatlangname&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=41981 t=1556369574946371
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:55 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1287.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1077 pass, cp3041 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 435050903, 313330132, 451588735
    body: |-
      <?xml version="1.0"?><api batchcomplete=""><warnings><main xml:space="preserve">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space="preserve">Because "rvslots" was not specified, a legacy format has been used for the output. This format is deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx="2130756" pageid="2130756" ns="10" title="Template:catlangname"><revisions><rev user="TheDaveRoss" timestamp="2016-10-25T17:33:58Z" contentformat="text/x-wiki" contentmodel="wikitext" comment="Changed protection level for &quot;[[Template:catlangname]]&quot;: Adjusting the protection level from &#039;sysop&#039; to &#039;template editor&#039;. ([Edit=Allow only template editors and administrators] (indefinite) [Move=Allow only template editors and administrators] (indefi..." xml:space="preserve">{{#invoke:utilities|template_categorize|format=pos}}&lt;!--

      --&gt;&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</rev></revisions></page></pages></query></api>
- recorded: 2019-04-27T12:52:55.317Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Template%3Aeo-IPA&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=45109 t=1556369575207658
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:55 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1225.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1089 pass, cp3040 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 167293107, 335175156, 449164337
    body: |-
      <?xml version="1.0"?><api batchcomplete=""><warnings><main xml:space="preserve">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space="preserve">Because "rvslots" was not specified, a legacy format has been used for the output. This format is deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx="4974276" pageid="4974276" ns="10" title="Template:eo-IPA"><revisions><rev user="Mahagaja" timestamp="2017-02-10T10:21:47Z" contentformat="text/x-wiki" contentmodel="wikitext" comment="Angr moved page [[Template:eo-pron]] to [[Template:eo-IPA]]: to match other pronunciation template names" xml:space="preserve">&lt;includeonly&gt;{{#invoke:eo-pron|pronunciation_section|{{{1}}}|{{{2}}}|{{{3}}}|{{{a}}}}}&lt;/includeonly&gt;&lt;!--

      --&gt;&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</rev></revisions></page></pages></query></api>
- recorded: 2019-04-27T12:52:55.561Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Aeo-pron&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=62114 t=1556369575425859
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:55 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1339.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1077 pass, cp3042 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 438095121, 97179162, 431521601
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"4937799\" pageid=\"4937799\" ns=\"828\" title=\"Module:eo-pron\"><revisions><rev user=\"Jberkel\" timestamp=\"2019-04-27T12:41:08Z\" contentformat=\"\
      text/plain\" contentmodel=\"Scribunto\" comment=\"IPA template now takes language as first parameter\" xml:space=\"preserve\">local export = {}\nlocal lang = require(\"Module:languages\").getByCode(\"eo\")\n\n-- un-globalifying\nlocal has_vowel, term_to_words,\
      \ string_to_letters, string_to_syllables,\n\tstring_to_ipa, letters_to_syllables, strip_initial_consonants,\n\tterm_to_IPA_and_rhyme, parse_input, get_artificial_breaks\n\nlocal consonants = {\n\t[\"b\"] = \"b\",\n\t[\"c\"] = \"t͡s\",\n\t[\"ĉ\"] = \"t͡\
      ʃ\",\n\t[\"d\"] = \"d\",\n\t[\"f\"] = \"f\",\n\t[\"g\"] = \"ɡ\",\n\t[\"ĝ\"] = \"d͡ʒ\",\n\t[\"h\"] = \"h\",\n\t[\"ĥ\"] = \"x\",\n\t[\"j\"] = \"j\",\n\t[\"ĵ\"] = \"ʒ\",\n\t[\"k\"] = \"k\",\n\t[\"l\"] = \"l\",\n\t[\"m\"] = \"m\",\n\t[\"n\"] = \"n\",\n\t[\"\
      p\"] = \"p\",\n\t[\"r\"] = \"r\",\n\t[\"s\"] = \"s\",\n\t[\"ŝ\"] = \"ʃ\",\n\t[\"t\"] = \"t\",\n\t[\"v\"] = \"v\",\n\t[\"z\"] = \"z\",\n\t['ŭ'] = \"w\"}\n\nlocal vowels = {\n\t[\"a\"] = \"a\",\n\t[\"e\"] = \"e\",\n\t[\"i\"] = \"i\",\n\t[\"o\"] = \"o\",\n\
      \t[\"u\"] = \"u\",\n\n}\n\nlocal letters_phonemes = {}\n\n-- combine into single table\nfor k, v in pairs(vowels) do letters_phonemes[k] = v end\nfor k, v in pairs(consonants) do letters_phonemes[k] = v end\n\nfunction term_to_words(term)\n\t-- split by\
      \ spaces, hyphens, or periods\n\treturn mw.text.split(term, '[%s%-%.]')\nend\nfunction string_to_letters(term)\n\treturn mw.text.split(term, \"\")\nend\n\nfunction letters_to_syllables(letters)\n\n\tif not letters[2] then\n\t\treturn {[1] = letters[1]}\n\
      \tend\n\tlocal l_r_exceptions = {[\"m\"] = true, [\"n\"] = true, [\"ŭ\"] = true, [\"j\"] = true}\n\n\tlocal result = {[1] = \"\"}\n\tlocal j = 1\n\tfor i = 1, #letters - 2 do\n\t\tresult[j] = result[j] .. letters[i]\n\t\tlocal letter = mw.ustring.lower(letters[i])\n\
      \t\tlocal letter1 = mw.ustring.lower(letters[i + 1])\n\t\tlocal letter2 = mw.ustring.lower(letters[i + 2])\n\t\t\n\t\tif vowels[letter] then\n\t\t\tif consonants[letter1] and vowels[letter2] then\n\t\t\t\t-- single consonant goes with following vowel\n\
      \t\t\t\tif has_vowel(result[j]) and (letter1 ~= 'ŭ') then\n\t\t\t\t\tj = j + 1\n\t\t\t\t\tresult[j] = \"\"\n\t\t\t\tend\n\t\t\t\t\n\t\t\telseif consonants[letter1] and not l_r_exceptions[letter1] and (letter2 == 'l' or letter2 == 'r') and (letter1 ~= 'l'\
      \ and letter1 ~= 'r') then\n\t\t\t\t-- consonant followed by l or r goes with l or r\n\t\t\t\tif has_vowel(result[j]) then\n\t\t\t\t\tj = j + 1\n\t\t\t\t\tresult[j] = \"\"\n\t\t\t\tend\n\n\t\t\telseif vowels[letter1] then\n\t\t\t\t-- two vowels\n\t\t\t\
      \tif has_vowel(result[j]) then\n\t\t\t\t\tj = j + 1\n\t\t\t\t\tresult[j] = \"\"\n\t\t\t\tend\n\t\t\tend\n\t\telseif consonants[letter] then\n\t\t\tif consonants[letter1] and vowels[letter2] then\n\t\t\t\tif (mw.ustring.len(result[j]) ~= 1) then\n\t\t\t\
      \t\t-- single consonant goes with following vowel\n\t\t\t\t\tif has_vowel(result[j]) then\n\t\t\t\t\t\tj = j + 1\n\t\t\t\t\t\tresult[j] = \"\"\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\telseif consonants[letter1] and not l_r_exceptions[letter1] and (letter2 ==\
      \ 'l' or letter2 == 'r') and (letter1 ~= 'l' and letter1 ~= 'r') then\n\t\t\t\t-- consonant followed by l or r goes with l or r\n\t\t\t\tif has_vowel(result[j]) then\n\t\t\t\t\tj = j + 1\n\t\t\t\t\tresult[j] = \"\"\n\t\t\t\tend\n\n\t\t\telseif vowels[letter1]\
      \ then\n\t\t\t\t-- two vowels\n\t\t\t\tif has_vowel(result[j]) then\n\t\t\t\t\tj = j + 1\n\t\t\t\t\tresult[j] = \"\"\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\t\n\t-- add last two letters\n\tif letters[2] then\n\t\tlocal c1 = letters[#letters - 1]\n\t\t\
      local c2 = letters[#letters]\n\t\t\t\n\t\tif c1 ~= 'ŭ' then\n            if vowels[c1] and vowels[c2] then\n                result[j] = result[j] .. c1\n                j = j + 1\n                result[j] = c2\n            elseif has_vowel(result[j])\
      \ and has_vowel(c1 .. c2) then\n            \tj = j + 1\n            \tresult[j] = c1 .. c2\n        \telse\n        \t\tresult[j] = result[j] .. c1 .. c2\n    \t\tend\n        \t\n        else\n            if vowels[letters[#letters - 2]] and vowels[c2]\
      \ then\n            \tresult[j] = result[j] .. c1\n                j = j + 1\n                result[j] = c2\n            elseif has_vowel(result[j]) and has_vowel(c1 .. c2) then\n            \tj = j + 1\n            \tresult[j] = c1 .. c2\n        \t\
      else\n        \t\tresult[j] = result[j] .. c1 .. c2\n    \t\tend\n        end\n    end\n    \n\n\tlocal result2 = {}\n\tfor i, j in pairs(result) do\n\t\tif j and j ~= \"\" then\n\t\t\ttable.insert(result2, j)\n\t\tend\n\tend\n\treturn result2\nend\n\n\
      function string_to_syllables(term)\n\t-- split if given artificial syllable breaks\n\tlocal split_input = mw.text.split(term, '‧', true)\n\tlocal result = {}\n\tfor _, split in pairs(split_input) do\n\t\tfor j, syllable in pairs(letters_to_syllables(string_to_letters(split)))\
      \ do\n\t\t\ttable.insert(result, syllable)\n\t\tend\n\tend\n\t\n\treturn result\n\t\nend\n\nfunction string_to_ipa(syllable)\n\n\tlocal syllable_letters = string_to_letters(syllable)\n\tlocal syllable_ipa = \"\"\n\t\n\tfor k, letter in pairs(syllable_letters)\
      \ do\n\t\tif letters_phonemes[mw.ustring.lower(letter)] then\n\t\t\tsyllable_ipa = syllable_ipa .. letters_phonemes[mw.ustring.lower(letter)]\n\t\tend\n\n\tend\n\treturn syllable_ipa\nend\n\nfunction has_vowel(term)\n\treturn mw.ustring.lower(term):find(\"\
      [aeiou]\") ~= nil\nend\n\nfunction strip_initial_consonants(term)\n\tlocal letters = string_to_letters(term)\n\tlocal result = {}\n\t\n\tlocal gate = false\n\tfor i, j in pairs(letters) do\n\t\tif vowels[j] then\n\t\t\tgate = true\n\t\tend\n\t\t\n\t\t\
      if gate then\n\t\t\ttable.insert(result, j)\n\t\tend\n\tend\n\t\n\treturn table.concat(result)\nend\n\t\n\nfunction term_to_IPA_and_rhyme(term)\n\t\n\tlocal words = term_to_words(term)\n\tlocal result = {}\n\tlocal rhyme_letters\n\n\tfor i, word in pairs(words)\
      \ do\n\t\tif word ~= \"\" then\n\t\t\t-- add /o/ if word is a single character and a consonant\n\t\t\tif mw.ustring.len(word) == 1 then\n\t\t\t\tif consonants[word] then\n\t\t\t\t\tword = word .. 'o'\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\t-- break into\
      \ syllables and make each into IPA\n\t\t\tlocal hyphenated = string_to_syllables(word)\n\t\t\tlocal word_result = {}\n\t\t\tfor j, syllable in pairs(hyphenated) do\n\t\t\t\tlocal syllable_ipa = string_to_ipa(syllable)\n\t\t\t\tword_result[j] = syllable_ipa\n\
      \t\t\tend\n\n\t\t\t-- add stress to penultimate syllable, and set rhyme to last two syllables\n\t\t\tif word_result[2] then\n\t\t\t\trhyme_letters = strip_initial_consonants(hyphenated[#hyphenated - 1] .. hyphenated[#hyphenated])\n\t\t\t\t\n\t\t\t\tword_result[#word_result\
      \ - 1] = \"ˈ\" .. word_result[#word_result - 1]\n\t\t\t\t\n\t\t\tend\n\t\t\t\n\t\t\tresult[i] = table.concat(word_result)\n\t\tend\n\tend\n\n\t-- rhyme to ipa\n\tlocal rhyme = nil\n\tif rhyme_letters then\n\t\trhyme = string_to_ipa(rhyme_letters)\n\tend\n\
      \t\n\treturn {['IPA'] = result, ['rhyme'] = rhyme}\n\nend\n\nfunction parse_input(input)\n\t\n\t-- no input -&gt; use page title\n\treturn input or mw.title.getCurrentTitle().text\nend\n\nfunction export.IPA(IPA_input)\n\tIPA_input = mw.ustring.lower(parse_input(IPA_input))\n\
      \t\n\treturn  \"/\" .. table.concat(term_to_IPA_and_rhyme(IPA_input).IPA, \" \") .. \"/\"\nend\n\nfunction export.rhyme(rhyme_input)\n\trhyme_input = parse_input(rhyme_input)\n\t\n\treturn term_to_IPA_and_rhyme(rhyme_input).rhyme\nend\n\nfunction export.hyphenation(hyphenation_input)\n\
      \thyphenation_input = parse_input(hyphenation_input)\n\t\n\tlocal words = term_to_words(hyphenation_input)\n\tlocal result = {}\n\tlocal hyphenated\n\t\n\tfor i, word in pairs(words) do\n\t\thyphenated = string_to_syllables(word)\n\t\ttable.insert(result,\
      \ table.concat(hyphenated, \"‧\"))\n\tend\n\t\n\treturn table.concat(result, ' ')\nend\n\nfunction export.letters(letters_input)\n\tletters_input = parse_input(letters_input)\n\t\n\treturn table.concat(string_to_letters(letters_input), '-')\nend\n\nfunction\
      \ get_artificial_breaks(frame)\n\t-- override for syllable breaks\n\tlocal args = frame:getParent().args\n\tif not args[1] then\n\t\treturn nil\n\tend\n\t\n\tparam = 1\n\tlocal result = {}\n\twhile true do\n\t\tif not args[param] then\n\t\t\tif not result\
      \ then\n\t\t\t\treturn nil\n\t\t\tend\n\t\t\t\n\t\t\treturn table.concat(result, \"‧\")\n\n\t\tend\n\t\ttable.insert(result, args[param])\n\t\tparam = param + 1\n\tend\n\t\nend\n\nfunction export.pronunciation_section(frame)\n\t\n\tlocal args = frame:getParent().args\n\
      \tlocal artificial_breaks = get_artificial_breaks(frame)\n\t\n\tIPA_override = args[\"i\"]\n\tif not IPA_override then\n\t\tIPA_override = export.IPA(artificial_breaks)\n\tend\n\n\thyphenation_override = args[\"h\"]\n\tif not hyphenation_override then\n\
      \t\thyphenation_override = export.hyphenation(artificial_breaks)\n\tend\n\t\n\trhyme_override = args[\"r\"]\n\tif not rhyme_override then\n\t\trhyme_override = export.rhyme(artificial_breaks)\n\tend\n\t\t\n\taudio = args[\"a\"]\n\n\t-- TODO: Use module\
      \ functions instead.\n\tif rhyme_override then\n\t\trhyme_override = frame:expandTemplate{ title = \"rhymes\", args = {[1] = rhyme_override, [\"lang\"] = \"eo\"}}\n\tend\n\tIPA_override = frame:expandTemplate{ title = \"IPA\", args = {\"eo\", IPA_override\
      \ }}\n\n\tlocal result = \"&lt;ul&gt;\"\n\tresult = result .. \"&lt;li&gt;\" .. IPA_override .. \"&lt;/li&gt;\"\n\tresult = result .. \"&lt;li&gt;Hyphenation: \" .. hyphenation_override .. \"&lt;/li&gt;\"\n\t\n\tif rhyme_override then\n\t\tresult = result\
      \ .. \"&lt;li&gt;\" .. rhyme_override .. \"&lt;/li&gt;\"\n\tend\n\t\n\tif audio then\n\t\taudio = frame:expandTemplate{ title = \"audio\", args = {[1] = audio, [\"lang\"] = \"eo\"}}\n\t\tresult = result .. \"&lt;li&gt;Audio: \" .. audio .. \"&lt;/li&gt;\"\
      \n\tend\n\t\n\tresult = result .. \"&lt;/ul&gt;\"\n\t\n\treturn result\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T12:52:55.812Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Template%3Arhymes&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=47214 t=1556369575698599
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:55 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1344.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1085 pass, cp3033 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 634323593, 97689570, 442814928
    body: <?xml version="1.0"?><api batchcomplete=""><warnings><main xml:space="preserve">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space="preserve">Because "rvslots" was not specified, a legacy format has been used for the output. This format is deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx="481649" pageid="481649" ns="10" title="Template:rhymes"><revisions><rev user="Rua" timestamp="2019-03-31T20:56:04Z" contentformat="text/x-wiki" contentmodel="wikitext" comment="" xml:space="preserve">{{#invoke:rhymes|show}}&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</rev></revisions></page></pages></query></api>
- recorded: 2019-04-27T12:52:56.048Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Arhymes&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=39866 t=1556369575936175
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:56 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1279.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1077 pass, cp3040 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 429718120, 341886340, 444814840
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"4542843\" pageid=\"4542843\" ns=\"828\" title=\"Module:rhymes\"><revisions><rev user=\"Benwing2\" timestamp=\"2019-03-27T14:39:13Z\" contentformat=\"\
      text/plain\" contentmodel=\"Scribunto\" comment=\"support 1= for language as well as lang=\" xml:space=\"preserve\">local export = {}\n\nlocal m_IPA = require(\"Module:IPA\")\n\nlocal function make_rhyme_link(lang, link_IPA, display_IPA)\n\tif not link_IPA\
      \ then\n\t\treturn table.concat{'[[Rhymes:', lang:getCanonicalName(), '|', lang:getCanonicalName(), ']]'}\n\telse\n\t\tlocal formatted_IPA, cat = m_IPA.format_IPA(lang, display_IPA or link_IPA, true)\n\t\treturn table.concat{'[[Rhymes:', lang:getCanonicalName(),\
      \ '/', link_IPA, '|', formatted_IPA, ']]', cat}\n\tend\nend\n\nfunction export.show_row(frame)\n\tlocal params = {\n\t\t[1] = {required = true},\n\t\t[2] = {required = true},\n\t\t[3] = {},\n\t}\n\t\n\tlocal args = frame.getParent and frame:getParent().args\
      \ or frame\n\t\n\tif (not args[1] or args[1] == '') and mw.title.getCurrentTitle().nsText == \"Template\" then\n\t\treturn '[[Rhymes:English/aɪmz|&lt;span class=\"IPA\"&gt;-aɪmz&lt;/span&gt;]]'\n\tend\n\t\n\tlocal args = require(\"Module:parameters\").process(args,\
      \ params)\n\tlocal lang = require(\"Module:languages\").getByCode(args[1]) or require(\"Module:languages\").err(args[1], 1)\n\t\n\treturn make_rhyme_link(lang, args[2], '-' .. args[2]) .. (args[3] and (\" (''\" .. args[3] .. \"'')\") or '')\nend\n\nfunction\
      \ export.show(frame)\n\tlocal args = frame.getParent and frame:getParent().args or frame\n\tlocal compat = args[\"lang\"]\n\tlocal offset = compat and 0 or 1\n\t\n\tlocal params = {\n\t\t[1 + offset] = {required = true, list = true},\n\t\t[compat and \"\
      lang\" or 1] = {required = true},\n\t}\n\t\n\tif (not args[1 + offset] or args[1 + offset] == '') and mw.title.getCurrentTitle().nsText == \"Template\" then\n\t\treturn 'Rhymes: [[Rhymes:English/aɪmz|&lt;span class=\"IPA\"&gt;-aɪmz&lt;/span&gt;]]'\n\t\
      end\n\t\n\tlocal args = require(\"Module:parameters\").process(args, params)\n\tlocal lang = args[compat and \"lang\" or 1]\n\tlocal lang = require(\"Module:languages\").getByCode(lang) or require(\"Module:languages\").err(lang, compat and \"lang\" or\
      \ 1)\n\t\n\tlocal links = {}\n\tfor _, r in ipairs(args[1 + offset]) do\n\t\ttable.insert(links, make_rhyme_link(lang, r, '-' .. r))\n\tend\n\t\n\treturn \"Rhymes: \" .. table.concat(links, ', ')\nend\n\n-- {{rhymes nav}}\nfunction export.show_nav(frame)\n\
      \t-- Gather parameters\n\tlocal args = frame:getParent().args\n\tlocal lang = args[1] or (mw.title.getCurrentTitle().nsText == \"Template\" and \"und\") or error(\"Language code has not been specified. Please pass parameter 1 to the template.\")\n\tlang\
      \ = require(\"Module:languages\").getByCode(lang) or require(\"Module:languages\").err(lang, 1)\n\t\n\tlocal parts = {}\n\tlocal i = 2\n\t\n\twhile args[i] do\n\t\tlocal part = args[i]; if part == \"\" then part = nil end\n\t\ttable.insert(parts, part)\n\
      \t\ti = i + 1\n\tend\n\t\n\t-- Create steps\n\tlocal steps = {\"» [[Wiktionary:Rhymes|Rhymes]]\", \"» \" .. make_rhyme_link(lang)}\n\tlocal categories = {}\n\t\n\tif #parts &gt; 0 then\n\t\tlocal last = parts[#parts]\n\t\tparts[#parts] = nil\n\t\tlocal\
      \ prefix = \"\"\n\n\t\tfor i, part in ipairs(parts) do\n\t\t\tprefix = prefix .. part\n\t\t\tparts[i] = prefix\n\t\tend\n\t\t\n\t\tfor _, part in ipairs(parts) do\n\t\t\ttable.insert(steps, \"» \" .. make_rhyme_link(lang, part .. '-', '-' .. part .. '-'))\n\
      \t\tend\n\t\t\n\t\tif last == \"-\" then\n\t\t\ttable.insert(steps, \"» \" .. make_rhyme_link(lang, prefix, '-' .. prefix))\n\t\t\ttable.insert(categories, \"[[Category:\" .. lang:getCanonicalName() .. \" rhymes\" .. (prefix == \"\" and \"\" or \"/\" ..\
      \ prefix .. \"-\") .. \"| ]]\")\n\t\telseif mw.title.getCurrentTitle().text == lang:getCanonicalName() .. \"/\" .. prefix .. last .. \"-\" then\n\t\t\ttable.insert(steps, \"» \" .. make_rhyme_link(lang, prefix .. last .. '-', \"-\" .. prefix .. last ..\
      \ \"-\"))\n\t\t\ttable.insert(categories, \"[[Category:\" .. lang:getCanonicalName() .. \" rhymes/\" .. prefix .. last .. \"-|-]]\")\n\t\telse\n\t\t\ttable.insert(steps, \"» \" .. make_rhyme_link(lang, prefix .. last, \"-\" .. prefix .. last))\n\t\t\t\
      table.insert(categories, \"[[Category:\" .. lang:getCanonicalName() .. \" rhymes\" .. (prefix == \"\" and \"\" or \"/\" .. prefix .. \"-\") .. \"|\" .. last .. \"]]\")\n\t\tend\n\telseif lang ~= \"und\" then\n\t\ttable.insert(categories, \"[[Category:\"\
      \ .. lang:getCanonicalName() .. \" rhymes| ]]\")\n\tend\n\t\n\tframe:callParserFunction(\"DISPLAYTITLE\", mw.title.getCurrentTitle().fullText:gsub(\"/(.+)$\", '/&lt;span class=\"IPA\"&gt;%1&lt;/span&gt;'))\n\t\n\treturn table.concat(steps, \" \") .. table.concat(categories)\n\
      end\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T12:52:56.260Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3AIPA&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=48380 t=1556369576134027
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:56 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1284.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1077 pass, cp3030 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 449384928, 134893152, 446917418
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"3923940\" pageid=\"3923940\" ns=\"828\" title=\"Module:IPA\"><revisions><rev user=\"Suzukaze-c\" timestamp=\"2019-02-27T02:22:09Z\" contentformat=\"\
      text/plain\" contentmodel=\"Scribunto\" comment=\"move leading space inside .previewonly.error\" xml:space=\"preserve\">local export = {}\n-- [[Module:IPA/data]]\n\nlocal m_data = mw.loadData('Module:IPA/data') -- [[Module:IPA/data]]\nlocal m_symbols =\
      \ mw.loadData('Module:IPA/data/symbols') -- [[Module:IPA/data/symbols]]\nlocal m_syllables -- [[Module:syllables]]; loaded below if needed\n\nlocal sub = mw.ustring.sub\nlocal find = mw.ustring.find\nlocal gsub = mw.ustring.gsub\nlocal match = mw.ustring.match\n\
      local gmatch = mw.ustring.gmatch\nlocal U = mw.ustring.char\n\nfunction export.format_IPA_full(lang, items, err, separator, sortKey, no_count)\n\tlocal IPA_key, key_link, err_text, prefix, IPAs, category\n\tlocal hasKey = m_data.langs_with_infopages\n\t\
      local namespace = mw.title.getCurrentTitle().nsText\n\t\n\tif err then\n\t\terr_text = '&lt;span class=\"error\"&gt;' .. err .. '&lt;/span&gt;'\n\telse\n\t\tif hasKey[lang:getCode()] then\n\t\t\tIPA_key = \"Appendix:\" .. lang:getCanonicalName() .. \"\
      \ pronunciation\"\n\t\telse\n\t\t\tIPA_key = \"wikipedia:\" .. lang:getCanonicalName() .. \" phonology\"\n\t\tend\n\t\t\n\t\tkey_link = \"[[\" .. IPA_key .. \"|key]]\"\n\tend\n\n\t\n\tlocal prefix = \"[[Wiktionary:International Phonetic Alphabet|IPA]]&lt;sup&gt;(\"\
      \ .. ( key_link or err_text ) .. \")&lt;/sup&gt;:&amp;#32;\"\n\t\n\tIPAs = export.format_IPA_multiple(lang, items, separator, no_count)\n\t\n\tif lang and (namespace == \"\" or namespace == \"Reconstruction\") then\n\t\tsortKey = sortKey or lang:makeSortKey(mw.title.getCurrentTitle().text)\n\
      \t\tsortKey = sortKey and (\"|\" .. sortKey) or \"\"\n\t\tcategory = \"[[Category:\" .. lang:getCanonicalName() .. \" terms with IPA pronunciation\" .. sortKey .. \"]]\"\n\telse\n\t\tcategory = \"\"\n\tend\n\n\treturn prefix .. IPAs .. category\nend\n\n\
      local function determine_repr(pron)\n\tlocal repr_mark = {}\n\tlocal repr, reconstructed\n\t\n\t-- remove initial asterisk before representation marks, used on some Reconstruction pages\n\tif find(pron, \"^%*\") then\n\t\treconstructed = true\n\t\tpron\
      \ = sub(pron, 2)\n\tend\n\t\n\tlocal representation_types = {\n\t\t['/'] = { right = '/', type = 'phonemic', },\n\t\t['['] = { right = ']', type = 'phonetic', },\n\t\t['⟨'] = { right = '⟩', type = 'orthographic', },\n\t\t['-'] = { type = 'rhyme' },\n\t\
      }\n\t\n\trepr_mark.i, repr_mark.f, repr_mark.left, repr_mark.right = find(pron, '^(.).-(.)$')\n\t\n\tlocal representation_type = representation_types[repr_mark.left]\n\t\n\tif representation_type then\n\t\tif representation_type.right then\n\t\t\tif repr_mark.right\
      \ == representation_type.right then\n\t\t\t\trepr = representation_type.type\n\t\t\tend\n\t\telse\n\t\t\trepr = representation_type.type\n\t\tend\n\telse\n\t\trepr = nil\n\tend\n\t\n\treturn repr, reconstructed\nend\n\nlocal function hasInvalidSeparators(transcription)\n\
      \tif find(transcription, \"%.[ˈˌ]\") then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\n\nfunction export.format_IPA_multiple(lang, items, separator, no_count)\n\tlocal notes = {}\n\tlocal categories = {}\n\tseparator = separator or ', '\n\t\n\
      \t-- Format\n\tif not items[1] then\n\t\tif mw.title.getCurrentTitle().nsText == \"Template\" then\n\t\t\ttable.insert(items, {pron = \"/aɪ piː ˈeɪ/\"})\n\t\telse\n\t\t\ttable.insert(categories, \"[[Category:Pronunciation templates without a pronunciation]]\"\
      )\n\t\tend\n\tend\n\t\n\tlocal bits = {}\n\t\n\tfor _, item in ipairs(items) do\n\t\tlocal bit = export.format_IPA(lang, item.pron)\n\t\t\n\t\tif item.qualifiers and item.qualifiers[1] then\n\t\t\tbit = require(\"Module:qualifier\").format_qualifier(item.qualifiers)\
      \ .. \" \" .. bit\n\t\tend\n\t\t\n\t\tif item.note then\n\t\t\tbit = bit .. mw.getCurrentFrame():extensionTag(\"ref\", item.note)\n\t\tend\n\t\t\n\t\ttable.insert(bits, bit)\n\t\t\n\t\t--[=[\t[[Special:WhatLinksHere/Template:tracking/IPA/syntax-error]]\n\
      \t\t\t\tThe length or gemination symbol should not appear after a syllable break or stress symbol.\t]=]\n\t\t\n\t\tif find(item.pron, \"[ˈˌ%.][ːˑ]\") then\n\t\t\trequire(\"Module:debug\").track(\"IPA/syntax-error\")\n\t\tend\n\t\t\n\t\tif lang then\n\t\
      \t\t-- Add syllable count if the language's diphthongs are listed in [[Module:syllables]].\n\t\t\tif not no_count and mw.title.getCurrentTitle().namespace == 0 then\n\t\t\t\tm_syllables = m_syllables or require('Module:syllables')\n\t\t\t\tif m_syllables.hasDiphthongs(lang)\
      \ then\n\t\t\t\t\tif determine_repr(item.pron) == \"phonemic\" or lang:getCode() == \"ru\" then\n\t\t\t\t\t\tlocal syllable_count = m_syllables.getVowels(item.pron, lang)\n\t\t\t\t\t\tif syllable_count then\n\t\t\t\t\t\t\ttable.insert(categories, \"[[Category:\"\
      \ .. lang:getCanonicalName() .. \" \" .. syllable_count .. \"-syllable words]]\")\n\t\t\t\t\t\tend\t\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\n\t\t\tif lang:getCode() == \"en\" then\n\t\t\t\tif hasInvalidSeparators(item.pron) then\n\t\t\t\t\ttable.insert(categories,\
      \ \"[[Category:IPA for English using .ˈ or .ˌ]]\")\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\n\treturn table.concat(bits, separator) .. table.concat(categories)\nend\n\n-- Takes an IPA pronunciation and formats it and adds cleanup categories.\nfunction\
      \ export.format_IPA(lang, pron, split_output)\n\tlocal err = {}\n\tlocal categories = {}\n\t\n\t-- Remove wikilinks, so that wikilink brackets are not misinterpreted as\n\t-- indicating phonemic transcription\n\tlocal str_gsub = string.gsub\n\tlocal without_links\
      \ = str_gsub(pron, '%[%[[^|%]]+|([^%]]+)%]%]', '%1')\n\twithout_links = str_gsub(without_links, '%[%[[^%]]+%]%]', '%1')\n\t\n\t-- Detect whether this is a phonemic or phonetic transcription\n\tlocal repr, reconstructed = determine_repr(without_links)\n\
      \t\n\tif reconstructed then\n\t\tpron = sub(pron, 2)\n\tend\n\t\n\t-- If valid, strip the representation marks\n\tif repr == \"phonemic\" then\n\t\tpron = sub(pron, 2, -2)\n\t\twithout_links = sub(without_links, 2, -2)\n\telseif repr == \"phonetic\" then\n\
      \t\tpron = sub(pron, 2, -2)\n\t\twithout_links = sub(without_links, 2, -2)\n\telseif repr == \"orthographic\" then\n\t\tpron = sub(pron, 2, -2)\n\t\twithout_links = sub(without_links, 2, -2)\n\telseif repr == \"rhyme\" then\n\t\tpron = sub(pron, 2)\n\t\
      \twithout_links = sub(without_links, 2)\n\telse\n\t\ttable.insert(categories, \"[[Category:IPA pronunciations with invalid representation marks]]\")\n\t\t-- table.insert(err, \"invalid representation marks\")\n\t\t-- Removed because it's annoying when\
      \ previewing pronunciation pages.\n\tend\n\t\n\t-- Check for obsolete and nonstandard symbols\n\tfor i, symbol in ipairs(m_data.nonstandard) do\n\t\tlocal result\n\t\tfor nonstandard in gmatch(pron, symbol) do\n\t\t\tif not result then\n\t\t\t\tresult\
      \ = {}\n\t\t\tend\n\t\t\ttable.insert(result, nonstandard)\n\t\t\ttable.insert(categories, \"[[Category:IPA pronunciations with obsolete or nonstandard characters|\" .. nonstandard .. \"]]\")\n\t\tend\n\t\t\n\t\tif result then\n\t\t\ttable.insert(err,\
      \ \"obsolete or nonstandard characters (\" .. table.concat(result) .. \")\")\n\t\t\tbreak\n\t\tend\n\tend\n\t\n\t--[[ Check for invalid symbols after removing the following:\n\t\t\t1. wikilinks (handled above)\n\t\t\t2. paired HTML tags\n\t\t\t3. bolding\n\
      \t\t\t4. italics\n\t\t\t5. HTML entity for space\n\t\t\t6. asterisk at beginning of transcription\n\t\t\t7. comma followed by spacing characters\n\t\t\t8. superscripts enclosed in superscript parentheses\t\t]]\n\tlocal found_HTML\n\tlocal result = str_gsub(without_links,\
      \ \"&lt;(%a+)[^&gt;]*&gt;([^&lt;]+)&lt;/%1&gt;\",\n\t\tfunction(tagName, content)\n\t\t\tfound_HTML = true\n\t\t\treturn content\n\t\tend)\n\tresult = str_gsub(result, \"'''([^']*)'''\", \"%1\")\n\tresult = str_gsub(result, \"''([^']*)''\", \"%1\")\n\t\
      result = str_gsub(result, \"&amp;[^;]+;\", \"\") -- This may catch things that are not valid character entities.\n\tresult = str_gsub(result, \"^%*\", \"\")\n\tresult = gsub(result, \",%s+\", \"\")\n\tresult = gsub(result, \"⁽[\".. m_symbols.superscripts\
      \ .. \"]+⁾\", \"\")\n\tresult = gsub(result, '[' .. m_symbols.valid .. ']', '')\n\tif result ~= '' then\n\t\tlocal suggestions = {}\n\t\tmw.log(pron, result)\n\t\tlocal namespace = mw.title.getCurrentTitle().namespace\n\t\tlocal category\n\t\tif namespace\
      \ == 0 then\n\t\t\t-- main namespace\n\t\t\tcategory = \"IPA pronunciations with invalid IPA characters\"\n\t\telseif namespace == 118 then\n\t\t\t-- reconstruction namespace\n\t\t\tcategory = \"IPA pronunciations with invalid IPA characters/reconstruction\"\
      \n\t\telse\n\t\t\tcategory = \"IPA pronunciations with invalid IPA characters/non_mainspace\"\n\t\tend\n\t\tfor character in gmatch(result, \".\") do\n\t\t\tlocal suggestion = m_symbols.suggestions[character]\n\t\t\tif suggestion then\n\t\t\t\ttable.insert(suggestions,\
      \ character .. \" with \" .. suggestion)\n\t\t\tend\n\t\t\ttable.insert(categories, \"[[Category:\" .. category .. \"|\" .. character .. \"]]\")\n\t\tend\n\t\ttable.insert(err, \"invalid IPA characters (\" .. result .. \")\")\n\t\tif suggestions[1] then\n\
      \t\t\ttable.insert(err, \"replace \" .. table.concat(suggestions, \", \"))\n\t\tend\n\tend\n\t\n\tif found_HTML then\n\t\ttable.insert(categories, \"[[Category:IPA pronunciations with paired HTML tags]]\")\n\tend\n\t\n\t-- Reference inside IPA template\
      \ usage\n\t-- FIXME: Doesn't work; you can't put HTML in module output.\n\t--if mw.ustring.find(pron, '&lt;/ref&gt;') then\n\t--\ttable.insert(categories, \"[[Category:IPA pronunciations with reference]]\")\n\t--end\n\t\n\tif repr == \"phonemic\" or repr\
      \ == \"rhyme\" then\n\t\tif lang and m_data.phonemes[lang:getCode()] then\n\t\t\tlocal valid_phonemes = m_data.phonemes[lang:getCode()]\n\t\t\tlocal rest = pron\n\t\t\tlocal phonemes = {}\n\t\t\t\n\t\t\twhile mw.ustring.len(rest) &gt; 0 do\n\t\t\t\tlocal\
      \ longestmatch = \"\"\n\t\t\t\t\n\t\t\t\tif sub(rest, 1, 1) == \"(\" or sub(rest, 1, 1) == \")\" then\n\t\t\t\t\tlongestmatch = sub(rest, 1, 1)\n\t\t\t\telse\n\t\t\t\t\tfor _, phoneme in ipairs(valid_phonemes) do\n\t\t\t\t\t\tif mw.ustring.len(phoneme)\
      \ &gt; mw.ustring.len(longestmatch) and sub(rest, 1, mw.ustring.len(phoneme)) == phoneme then\n\t\t\t\t\t\t\tlongestmatch = phoneme\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\tif mw.ustring.len(longestmatch) &gt; 0 then\n\t\t\t\t\t\
      table.insert(phonemes, longestmatch)\n\t\t\t\t\trest = sub(rest, mw.ustring.len(longestmatch) + 1)\n\t\t\t\telse\n\t\t\t\t\tlocal phoneme = sub(rest, 1, 1)\n\t\t\t\t\ttable.insert(phonemes, \"&lt;span style=\\\"color: red\\\"&gt;\" .. phoneme .. \"&lt;/span&gt;\"\
      )\n\t\t\t\t\trest = sub(rest, 2)\n\t\t\t\t\ttable.insert(categories, \"[[Category:IPA pronunciations with invalid phonemes/\" .. lang:getCode() .. \"]]\")\n\t\t\t\t\trequire(\"Module:debug\").track(\"IPA/invalid phonemes/\" .. phoneme)\n\t\t\t\tend\n\t\
      \t\tend\n\t\t\t\n\t\t\tpron = table.concat(phonemes)\n\t\tend\n\t\t\n\t\tif repr == \"phonemic\" then\n\t\t\tpron = \"/\" .. pron .. \"/\"\n\t\telse\n\t\t\tpron = \"-\" .. pron\n\t\tend\n\telseif repr == \"phonetic\" then\n\t\tpron = \"[\" .. pron .. \"\
      ]\"\n\telseif repr == \"orthographic\" then\n\t\tpron = \"⟨\" .. pron .. \"⟩\"\n\tend\n\t\n\tif reconstructed then\n\t\tpron = \"*\" .. pron\n\tend\n\t\n\tif err[1] then\n\t\terr = '&lt;span class=\"previewonly error\" style=\"font-size: small;&gt;&amp;#32;'\
      \ .. table.concat(err, ', ') .. '&lt;/span&gt;'\n\telse\n\t\terr = \"\"\n\tend\n\t\n\tif split_output then -- for use of IPA in links \n\t\treturn '&lt;span class=\"IPA\"&gt;' .. pron .. '&lt;/span&gt;', table.concat(categories), err\n\telse\n\t\treturn\
      \ '&lt;span class=\"IPA\"&gt;' .. pron .. '&lt;/span&gt;' .. err .. table.concat(categories)\n\tend\nend\n\nfunction export.example(frame)\n\tlocal output = {}\n\t\n\tlocal m_links = require('Module:links')\n\tlocal m_languages = require('Module:languages')\n\
      \t\n\ttable.insert(\n\t\toutput,\n[[\n{| class=\"wikitable\"\n! Term !! IPA !! Generated X-SAMPA !! Regenerated IPA !! Matched?\n]]\n\t)\n\tlocal row =\n[[\n|-\n| link || IPA || XSAMPA || regenerated_IPA || matched\n]]\n\t\n\tlocal examples = mw.text.split(frame.args[1],\
      \ \",%s*\")\n\t\n\tlocal m_XSAMPA = require(\"Module:IPA/X-SAMPA\")\n\t\n\tfor _, example in pairs(examples) do\n\t\tlocal lang, word = match(example, \"(%l%l%l?):(.+) [/%[]\")\n\t\t\n\t\tif lang then\n\t\t\tlang = m_languages.getByCode(lang) or error('\"\
      ' .. lang .. '\" is not a valid language code.')\n\t\tend\n\t\t\n\t\tlocal IPA = match(example, \"/[^/]+/\")\n\t\t\tor match(example, \"%[[^%]]+%]\")\n\t\t\tor error('No IPA transcription found in \"' .. example .. '\".')\n\t\tlocal XSAMPA = m_XSAMPA.IPA_to_XSAMPA(IPA)\n\
      \t\tlocal regenerated_IPA = m_XSAMPA.XSAMPA_to_IPA(XSAMPA)\n\t\t\n\t\tcontent = {\n\t\t\tlink = lang and word and m_links.full_link{ term = word, lang = lang },\n\t\t\tmatched = IPA == regenerated_IPA\n\t\t\t\tand '&lt;span style=\"color: green;\"&gt;yes&lt;/span&gt;'\n\
      \t\t\t\tor '&lt;span style=\"color: red;\"&gt;no&lt;/span&gt;',\n\t\t\tIPA = '&lt;span class=\"IPA\"&gt;' .. IPA .. '&lt;/span&gt;',\n\t\t\tXSAMPA = '&lt;code&gt;' .. XSAMPA .. '&lt;/span&gt;',\n\t\t\tregenerated_IPA = '&lt;span class=\"IPA\"&gt;' .. regenerated_IPA\
      \ .. '&lt;/span&gt;'\n\t\t}\n\t\t\n\t\tlocal function add_content(item)\n\t\t\treturn content[item] or \"\"\n\t\tend\n\t\tlocal row = gsub(row, \"[%a_]+\", add_content)\n\t\ttable.insert(output, row)\n\tend\n\t\n\ttable.insert(output, \"|}\")\n\t\n\treturn\
      \ table.concat(output)\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T12:52:56.500Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3AIPA%2Fdata&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=48956 t=1556369576357965
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:56 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1315.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1085 pass, cp3030 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 609776695, 134893156, 444166629
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"4118506\" pageid=\"4118506\" ns=\"828\" title=\"Module:IPA/data\"><revisions><rev user=\"Rua\" timestamp=\"2019-04-18T13:52:48Z\" contentformat=\"\
      text/plain\" contentmodel=\"Scribunto\" comment=\"\" xml:space=\"preserve\">local data = {}\n\n--[=[\tPlease add language codes for new pronunciation keys to the list below.\n\t\tThis will allow [[Template:IPA]] and the functions in [[Module:IPA]] to\n\
      \t\tautomatically link to the key.\t]=]\nlocal langcodes = {\n\t\"ca\",\n\t\"cy\",\n\t\"de\",\n\t\"dsb\",\n\t\"el\",\n\t\"en\",\n\t\"eo\",\n\t\"es\",\n\t\"fr\",\n\t\"fy\",\n\t\"ga\",\n\t\"gd\",\n\t\"got\",\n\t\"hu\",\n\t\"it\",\n\t\"la\",\n\t\"liv\",\n\
      \t\"mdf\",\n\t\"mfe\",\n\t\"my\",\n\t\"nci\",\n\t\"nl\",\n\t\"no\",\n\t\"pjt\",\n\t\"pl\",\n\t\"pt\",\n\t\"sl\",\n\t\"sga\",\n\t\"sv\",\n\t\"ug\",\n\t\"wlm\",\n\t\"yi\",\n}\n\ndata.langs_with_infopages = {}\n\n--[=[\tThis goes through the list of langcodes,\
      \ and fills\n\t\tthe table data.langs_with_infopages with items\n\t\tsuch as [\"ca\"] = true, [\"cy\"] = true, ... ,\n\t\tso that [[Module:IPA]] can easily access them. ]=]\nfor _, langcode in ipairs(langcodes) do\n\tdata.langs_with_infopages[langcode]\
      \ = true\nend\n\n-- Non-standard or obsolete IPA symbols.\ndata.nonstandard = {\n\t--[[\tThe following symbols consist of more than one character,\n\t\t\tso we can't put them in the line below.\t\t]]\n\t\"ɑ̢\", \"d̂\", \"t̂\", \"n̂\", \"l̂\", \"k̫\", \"\
      ɔ̗\", \"ɔ̖\",\n\t\n\t\"[ʦʣʧʤʨʥ?ƍσƺƪƻƾƞᶀᶁᶂᶃᶄᶅᶆᶈᶇᶉᶊᶋƫᶌᶍᶎʓʆλƛłščžǰǧǯẋᵻᵿⱻʚ\"\n\t.. \"ɷωıȹȸ∅ØƥƭƈƙʠʇʗʖʞɩɼȣяɿʅʮʯᴀᴀᴇGRŒQȡȶȵȴKPT]\"\n}\n\n-- See valid IPA characters at [[Module:IPA/data/symbols]].\n\ndata.phonemes = {}\ndata.phonemes[\"nl\"] = {\n\t\"m\",\
      \ \"n\", \"ŋ\",\n\t\"p\", \"b\", \"t\", \"d\", \"k\", \"ɡ\",\n\t\"f\", \"v\", \"s\", \"z\", \"ʃ\", \"ʒ\", \"x\", \"ɣ\", \"ɦ\",\n\t\"ʋ\", \"l\", \"j\", \"r\",\n\t\"ɪ\", \"ʏ\", \"ɛ\", \"ə\", \"ɔ\", \"ɑ\",\n\t\"i\", \"iː\", \"y\", \"yː\", \"u\", \"uː\", \"\
      eː\", \"øː\", \"oː\", \"ɛː\", \"œː\", \"ɔː\", \"aː\",\n\t\"ɛi̯\", \"œy̯\", \"ɔi̯\", \"ɑu̯\", \"ɑi̯\",\n\t\"iu̯\", \"yu̯\", \"ui̯\", \"eːu̯\", \"oːi̯\", \"aːi̯\",\n\t\"ˈ\", \"ˌ\", \".\", \" \",\n\t}\ndata.phonemes[\"hy\"] = {\n\t\"ɑ\", \"b\", \"ɡ\", \"\
      d\", \"ɛ\", \"z\", \"ɛ\", \"ə\", \"tʰ\", \"ʒ\", \"i\", \"l\", \"χ\", \"t͡s\",\n\t\"k\", \"h\", \"d͡z\", \"ʁ\", \"t͡ʃ\", \"m\", \"j\", \"n\", \"ʃ\", \"ɔ\", \"t͡ʃʰ\", \"p\", \"d͡ʒ\",\n\t\"r\", \"s\", \"v\", \"t\", \"ɾ\", \"t͡sʰ\", \"v\", \"pʰ\", \"kʰ\",\
      \ \"ɔ\", \"f\", \"ŋɡ\", \"ŋk\",\n\t\"ŋχ\", \"u\", \"ˈ\", \"ˌ\", \".\", \" \", \"ː\",\n\t}\n\nreturn data</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T12:52:56.706Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3AIPA%2Fdata%2Fsymbols&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=36354 t=1556369576587329
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:56 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1225.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1089 pass, cp3030 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 160914820, 130350251, 446515809
    body: !!binary |-
      
- recorded: 2019-04-27T12:52:56.930Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Template%3AIPA&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=41627 t=1556369576820456
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:56 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1344.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1085 pass, cp3033 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 626075829, 105808088, 456693170
    body: <?xml version="1.0"?><api batchcomplete=""><warnings><main xml:space="preserve">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space="preserve">Because "rvslots" was not specified, a legacy format has been used for the output. This format is deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx="82468" pageid="82468" ns="10" title="Template:IPA"><revisions><rev user="Rua" timestamp="2019-04-18T21:59:52Z" contentformat="text/x-wiki" contentmodel="wikitext" comment="" xml:space="preserve">{{#invoke:IPA/templates|IPA}}&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</rev></revisions></page></pages></query></api>
- recorded: 2019-04-27T12:52:57.152Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3AIPA%2Ftemplates&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=43918 t=1556369577039634
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:57 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1225.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1081 pass, cp3041 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 339496925, 314279453, 446917486
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"4463906\" pageid=\"4463906\" ns=\"828\" title=\"Module:IPA/templates\"><revisions><rev user=\"Rua\" timestamp=\"2019-03-31T20:38:27Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"\" xml:space=\"preserve\">local export = {}\n\nlocal m_IPA = require(\"Module:IPA\")\n\nlocal U = mw.ustring.char\nlocal syllabic = U(0x0329)\n\n-- Used for [[Template:IPA]].\nfunction\
      \ export.IPA(frame)\n\tlocal parent_args = frame.getParent and frame:getParent().args or frame\n\tlocal compat = parent_args[\"lang\"]\n\tlocal offset = compat and 0 or 1\n\tlocal params = {\n\t\t[compat and \"lang\" or 1] = {required = true, default =\
      \ \"\"},\n\t\t[1 + offset] = {list = true, allow_holes = true},\n\t\t[\"n\"] = {list = true, allow_holes = true},\n\t\t[\"qual\"] = {list = true, allow_holes = true},\n\t\t[\"nocount\"] = {type = \"boolean\"},\n\t\t[\"sort\"] = {},\n\t}\n\t\n\tlocal args\
      \ = require(\"Module:parameters\").process(parent_args, params)\n\tlocal langarg = args[compat and \"lang\" or 1]\n\tlocal lang = mw.title.getCurrentTitle().nsText == \"Template\" and \"en\" or langarg\n\tlang = require(\"Module:languages\").getByCode(lang)\n\
      \n\t-- [[Special:WhatLinksHere/Template:tracking/IPA/grc]]\n\tif lang and lang:getCode() == \"grc\" then\n\t\trequire(\"Module:debug\").track(\"IPA/grc\")\n\tend\n\t\n\tlocal items = {}\n\t\n\tfor i = 1, math.max(args[1 + offset].maxindex, args[\"n\"].maxindex)\
      \ do\n\t\tlocal pron = args[1 + offset][i]\n\t\tlocal note = args[\"n\"][i]\n\t\tlocal qual = args[\"qual\"][i]\n\t\t\n\t\tif lang then\n\t\t\trequire(\"Module:IPA/tracking\").run_tracking(pron, lang)\n\t\tend\n\t\t\n\t\tif pron or note or qual then\n\t\
      \t\ttable.insert(items, {pron = pron, note = note, qualifiers = {qual}})\n\t\tend\n\tend\n\t\n\treturn m_IPA.format_IPA_full(lang, items, nil, nil, args.sort, args.nocount)\nend\n\n-- Used for [[Template:IPAchar]].\nfunction export.IPAchar(frame)\n\tlocal\
      \ params = {\n\t\t[1] = {list = true, allow_holes = true},\n\t\t[\"n\"] = {list = true, allow_holes = true},\n\t\t[\"lang\"] = {}, -- This parameter is not used and does nothing, but is allowed for futureproofing.\n\t}\n\t\n\tlocal args = require(\"Module:parameters\"\
      ).process(frame.getParent and frame:getParent().args or frame, params)\n\t\n\tlocal items = {}\n\t\n\tfor i = 1, math.max(args[1].maxindex, args[\"n\"].maxindex) do\n\t\tlocal pron = args[1][i]\n\t\tlocal note = args[\"n\"][i]\n\t\t\n\t\tif pron or note\
      \ then\n\t\t\ttable.insert(items, {pron = pron, note = note})\n\t\tend\n\tend\n\t\n\t-- Format\n\treturn m_IPA.format_IPA_multiple(nil, items)\nend\n\nfunction export.XSAMPA(frame)\n\tlocal params = {\n\t\t[1] = { required = true },\n\t}\n\tlocal args\
      \ = require(\"Module:parameters\").process(frame:getParent().args, params)\n\t\n\treturn m_IPA.XSAMPA_to_IPA(args[1] or \"[Eg'zA:mp5=]\")\nend\n\n-- Used by [[Template:X2IPA]]\nfunction export.X2IPAtemplate(frame)\n\tlocal parent_args = frame.getParent\
      \ and frame:getParent().args or frame\n\tlocal compat = parent_args[\"lang\"]\n\tlocal offset = compat and 0 or 1\n\n\tlocal params = {\n\t\t[compat and \"lang\" or 1] = {required = true, default = \"und\"},\n\t\t[1 + offset] = {list = true, allow_holes\
      \ = true},\n\t\t[\"n\"] = { list = true, allow_holes = true },\n\t\t[\"qual\"] = { list = true, allow_holes = true },\n\t}\n\t\n\tlocal args = require(\"Module:parameters\").process(parent_args, params)\n\t\n\tlocal m_XSAMPA = require(\"Module:IPA/X-SAMPA\"\
      )\n\t\n\tpronunciations, notes, qualifiers, lang = args[1 + offset], args[\"n\"], args[\"qual\"], args[compat and \"lang\" or 1]\n\t\n\tlocal output = {}\n\ttable.insert(output, \"{{IPA\")\n\t\n\ttable.insert(output, \"|\" .. lang)\n\n\tfor i = 1, math.max(pronunciations.maxindex,\
      \ notes.maxindex, qualifiers.maxindex) do\n\t\tif pronunciations[i] then\n\t\t\ttable.insert(output, \"|\"..m_XSAMPA.XSAMPA_to_IPA(pronunciations[i]))\n\t\tend\n\t\tif notes[i] then\n\t\t\ttable.insert(output, \"|n\"..i..\"=\"..notes[i])\n\t\tend\n\t\t\
      if qualifiers[i] then\n\t\t\ttable.insert(output, \"|qual\"..i..\"=\"..qualifiers[i])\n\t\tend\n\tend\n\t\n\ttable.insert(output, \"}}\")\n\n\treturn table.concat(output)\nend\n\n-- Used by [[Template:X2IPAchar]]\nfunction export.X2IPAchar(frame)\n\tlocal\
      \ params = {\n\t\t[1] = { list = true, allow_holes = true },\n\t\t[\"n\"] = { list = true, allow_holes = true },\n\t\t[\"lang\"] = { },\n\t}\n\t\n\tlocal args = require(\"Module:parameters\").process(frame:getParent().args, params)\n\t\n\tlocal m_XSAMPA\
      \ = require(\"Module:IPA/X-SAMPA\")\n\t\n\tpronunciations, notes, lang = args[1], args[\"n\"], args[\"lang\"]\n\t\n\tlocal output = {}\n\ttable.insert(output, \"{{IPAchar\")\n\t\n\tfor i = 1, math.max(pronunciations.maxindex, notes.maxindex) do\n\t\tif\
      \ pronunciations[i] then\n\t\t\ttable.insert(output, \"|\"..m_XSAMPA.XSAMPA_to_IPA(pronunciations[i]))\n\t\tend\n\t\tif notes[i] then\n\t\t\ttable.insert(output, \"|n\"..i..\"=\"..notes[i])\n\t\tend\n\tend\n\t\n\tif lang then\n\t\ttable.insert(output,\
      \ \"|lang=\"..lang)\n\tend\n\t\n\ttable.insert(output, \"}}\")\n\t\n\treturn table.concat(output)\nend\n\n-- Used by [[Template:x2rhymes]]\nfunction export.X2rhymes(frame)\n\tlocal parent_args = frame.getParent and frame:getParent().args or frame\n\tlocal\
      \ compat = parent_args[\"lang\"]\n\tlocal offset = compat and 0 or 1\n\n\tlocal params = {\n\t\t[compat and \"lang\" or 1] = {required = true, default = \"und\"},\n\t\t[1 + offset] = {required = true, list = true, allow_holes = true},\n\t}\n\t\n\tlocal\
      \ args = require(\"Module:parameters\").process(parent_args, params)\n\t\n\tlocal m_XSAMPA = require(\"Module:IPA/X-SAMPA\")\n\t\n\tpronunciations, lang = args[1 + offset], args[compat and \"lang\" or 1]\n\t\n\tlocal output =  {}\n\ttable.insert(output,\
      \ \"{{rhymes\")\n\t\n\ttable.insert(output, \"|\" .. lang)\n\n\tfor i = 1, pronunciations.maxindex do\n\t\tif pronunciations[i] then\n\t\t\ttable.insert(output, \"|\"..m_XSAMPA.XSAMPA_to_IPA(pronunciations[i]))\n\t\tend\n\tend\n\t\n\ttable.insert(output,\
      \ \"}}\")\n\t\n\treturn table.concat(output)\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T12:52:57.442Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3AIPA%2Ftracking&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=40557 t=1556369577332252
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:57 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1344.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1075 pass, cp3040 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 314104300, 339692145, 433385974
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"6315460\" pageid=\"6315460\" ns=\"828\" title=\"Module:IPA/tracking\"><revisions><rev user=\"Erutuon\" timestamp=\"2017-11-21T19:51:11Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"fixing module error in [[pianoforte]]\" xml:space=\"preserve\">local export = {}\n\n--[[\n\tsymb is what is tracked. It can be a literal symbol or a Lua pattern.\n\tIf it is a table, tracking\
      \ is added for any of the symbols in the list.\n\t\n\tcat is the subtemplate that is added to the default path \"IPA/\" + language code + \"/\".\n]]\n\nlocal U = mw.ustring.char\n\nlocal syllabic = U(0x329)\n\nexport.tracking = {\n\ten = {\n\t\t{\n\t\t\
      \tsymb = \"iə\",\n\t\t\tcat = \"ambig\",\n\t\t},\n\t\t{\n\t\t\tsymb = { \"ɪi\", \"ʊu\", \"ɪj\", \"ʊw\" },\n\t\t\tcat = \"eeoo\",\n\t\t},\n\t\t{\n\t\t\tsymb = { \"r\" },\n\t\t\tcat = \"plain r\",\n\t\t},\n\t},\n\tcs = {\n\t\t{\n\t\t\tsymb = \"[mnrl]\" ..\
      \ syllabic,\n\t\t\tcat = \"syllabic-consonant\",\n\t\t},\n\t},\n\tps = {\n\t\t{\n\t\t\tsymb = \"ɤ\",\n\t\t\tcat = \"Pashto\",\n\t\t},\n\t},\n\tfa = {\n\t\t{\n\t\t\tsymb = \"ʔ\",\n\t\t\tcat = \"glottal-stop\",\n\t\t},\n\t},\n\t{\n\t\t{\n\t\t\tsymb = \"\"\
      ,\n\t\t\tcat = \"\",\n\t\t},\n\t},\n}\n\nfunction export.run_tracking(IPA, lang)\n\tif not IPA or IPA == \"\" then\n\t\treturn nil\n\tend\n\t\n\tlang = lang:getCode()\n\t\n\tif not export.tracking[lang] or type(export.tracking[lang]) ~= \"table\" then\n\
      \t\treturn nil\n\tend\n\t\n\tfor i, arguments in ipairs(export.tracking[lang]) do\n\t\tif type(arguments) == \"table\" then\n\t\t\tlocal required = { \"symb\", \"cat\" }\n\t\t\t\n\t\t\thasArgs = true\n\t\t\t\n\t\t\tfor i, arg in pairs(required) do\n\t\t\
      \t\tif not arguments[arg] or arguments[arg] == \"\" then\n\t\t\t\t\thasArgs = false\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tif hasArgs == true then\n\t\t\t\tlocal symbols = arguments.symb\n\t\t\t\tlocal category = arguments.cat\n\t\t\t\t\n\t\t\t\tif type(symbols)\
      \ == \"string\" then\n\t\t\t\t\tsymbols = { symbols }\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\tfor _, symbol in pairs(symbols) do\n\t\t\t\t\tif type(symbol) ~= \"string\" then\n\t\t\t\t\t\treturn nil\n\t\t\t\t\tend\n\t\t\t\t\tif mw.ustring.find(IPA, symbol) then\n\
      \t\t\t\t\t\trequire(\"Module:debug\").track(\"IPA/\" .. lang .. \"/\" .. category)\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T12:52:57.687Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Asyllables&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=75535 t=1556369577540423
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:57 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1290.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1085 pass, cp3030 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 614580180, 137775678, 458230820
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"5882110\" pageid=\"5882110\" ns=\"828\" title=\"Module:syllables\"><revisions><rev user=\"Hazarasp\" timestamp=\"2018-08-21T12:20:37Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"\" xml:space=\"preserve\">local export = {}\n\nlocal vowels = mw.loadData(\"Module:IPA/data/symbols\").vowels .. \"ᵻ\" .. \"ᵿ\"\n\nlocal U = mw.ustring.char\n\n--[[\nAdd diphthongs to\
      \ the list if they do not contain semivowel symbols: /j w ɰ ɥ/.\nDo not include non-syllabic diacritics: /au/, not /au̯/.\nThe module automatically does not count vowels with non-syllabic diacritics.\n]]--\nlocal diphthongs = {\n\t[\"de\"] = {\n\t\t\"\
      a[ɪʊ]\",\n\t\t\"ɔ[ʏɪ]\",\n\t\t},\n\t[\"ca\"] = {\t-- Catalan has diphthongs, but they are generally transcribed using\n\t\t\t\t-- /w/ and /j/, so do not need to be listed (see [[w:Catalan language#Diphthongs and triphthongs]].\n\t\t},\n\t[\"cs\"] = { --\
      \ [[w:Czech phonology#Diphthongs]]\n\t\t\"[aeo]u\",\n\t\t},\n\t[\"en\"] = { -- from [[Appendix:English pronunciation]] mostly, but /ʌɪ/ is from the OED\n\t\t\"[aɑeɛoɔʌ][ɪi]\",\n\t\t\"[ɑɒæo]e\",\n\t\t\"[əɐ]ʉ\",\n\t\t\"[aɒəoɔʌ]ʊ\",\n\t\t\"æo\",\n\t\t\"[ɛ\
      eɪiɔʊʉ]ə\",\t-- /iə/ is a diphthong in NZE, but a disyllabic sequence in GA.\n\t\t\t\t\t\t-- /ɪə/ is both a disyllabic sequence and a diphthong in old-fashioned RP.\n\t\t\"[aʌ][ʊɪ]ə\",\t-- May be a disyllabic sequence in some or all dialects?\n\t\t},\n\
      \t[\"fi\"] = {\t\t\t-- [[w:Finnish phonology#Diphthongs]]\n\t\t\"[ɑeouyæø]i\",\n\t\t\"[ɑoei]u\",\n\t\t\"[eiæø]y\",\n\t\t\"uo\",\n\t\t\"ie\",\n\t\t\"yø\",\n\t\t},\n\t[\"fr\"] = {\t\t\t-- French has diphthongs, but they are transcribed\n\t\t},\t\t\t\t--\
      \ with semivowel symbols: [[w:French phonology#Glides and diphthongs]].\n\t[\"grc\"] = {\n\t\t\"[aeyo]i\",\n\t\t\"[ae]u\",\n\t\t\"[ɛɔa]ː[iu]\",\n\t\t},\n\t[\"is\"] = {\t\t\t-- [[w:Icelandic phonology#Vowels]]\n\t\t\"[aeø][iɪy]\",\t-- Wikipedia is oddly\
      \ specific about the second element: ei and ai, but øɪ.\n\t\t\"[ao]u\",\n\t\t},\n\t[\"it\"] = {\n\t\t\"[aeɛoɔu]i\",\n\t\t\"[aeɛioɔ]u\",\n\t\t},\n\t[\"la\"] = {\n\t\t\"[eaou]i\",\n\t\t\"[eao]u\",\n\t\t\"[ao]e\",\n\t\t},\n\t[\"lb\"] = {\n\t\t\"[iu]ə\",\n\
      \t\t\"[ɜoæɑ]ɪ\",\n\t\t\"[əæɑ]ʊ\",\n\t},\n\t[\"sl\"] = {\t\t\t-- No diphthongs, properly speaking; sequences of a vowel, /j/ and /w/ though\n\t},\n\t[\"sk\"] = {\t\t\t-- Slovak has rising diphthongs, /i̯e, i̯a, i̯u, u̯o/, which are probably always spelled\
      \ with the nonsyllabic diacritic, so do not need to be listed.\n\t},\n\t[\"ru\"] = {\t\t\t-- No diphthongs, properly speaking; sequences of a vowel and /j/ though.\n\t},\n\t[\"sq\"] = {\t\t\t-- [[w:Albanian language#Vowels]] doesn't mention anything about\
      \ diphthongs.\n\t},\n\t[\"ug\"] = {\t\t\t-- No diphthongs.\n\t},\n}\n\n--[[ No use for this at the moment, though it is an interesting catalogue.\n\tIt might be usable for phonetic transcriptions.\n\tDiacritics added to vowels:\n\tinverted breve above,\
      \ inverted breve below,\n\tup tack, down tack,\n\tleft tack, right tack,\n\tdiaeresis (above), diaeresis below,\n\tright half ring, left half ring,\n\tplus sign below, minus sign below,\n\tcombining x above, rhotic hook,\n\ttilde (above), tilde below\n\
      \tligature tie (combining double breve), ligature tie below\n\t]]\nlocal diacritics = U(0x311)..U(0x32F)\n\t..U(0x31D)..U(0x31E)\n\t..U(0x318)..U(0x319)\n\t..U(0x308)..U(0x324)\n\t..U(0x339)..U(0x31C)\n\t..U(0x31F)..U(0x320)\n\t..U(0x33D)..U(0x2DE)\n\t\
      ..U(0x303)..U(0x330)\n\t..U(0x361)..U(0x35C)\n\n--[[\ncombining acute and grave tone marks, circumflex\n]]--\nlocal tone = \"[\" .. U(0x341) .. U(0x340) ..U (0x302) .. \"]\"\nlocal nonsyllabicDiacritics = U(0x311) .. U(0x32F)\nlocal syllabicDiacritics\
      \ = U(0x0329) .. U(0x030D)\nlocal ties = U(0x361) .. U(0x35C)\n\n-- long, half-long, extra short\nlocal lengthDiacritics = U(0x2D0) .. U(0x2D1) .. U(0x306)\nlocal vowel = \"[\" .. vowels .. \"]\" .. tone .. \"?\"\nlocal tie = \"[\" .. ties .. \"]\"\nlocal\
      \ nonsyllabicDiacritic = \"[\" .. nonsyllabicDiacritics .. \"]\"\nlocal syllabicDiacritic = \"[\" .. syllabicDiacritics .. \"]\"\n\nlocal UTF8Char = \"[\\1-\\127\\194-\\244][\\128-\\191]*\"\n\n\nfunction export.getVowels(remainder, lang)\n\tif string.find(remainder,\
      \ \"^[%\\[/]?%-\") or string.find(remainder, \"%-[%\\[/]?$\") then\n\t\treturn nil\n\tend\t-- If a hyphen is at the beginning or end of the transcription, do not count syllables.\n\t\n\tlocal count = 0\n\tlocal diphs = diphthongs[lang:getCode()] or {}\n\
      \t\n\tremainder = mw.ustring.toNFD(remainder)\n\tremainder = string.gsub(remainder, \"%((.*)%)\", \"%1\") -- Remove parentheses.\n\n\twhile remainder ~= \"\" do\n\t\t-- Ignore nonsyllabic vowels\n\t\tremainder = mw.ustring.gsub(remainder, \"^\" .. vowel\
      \ .. nonsyllabicDiacritic, \"\")\n\t\t\n\t\tlocal m =\n\t\t\tmw.ustring.match(remainder, \"^.\" .. syllabicDiacritic) or  -- Syllabic consonant\n\t\t\tmw.ustring.match(remainder, \"^\" .. vowel .. tie .. vowel)  -- Tie bar\n\t\t\n\t\t-- Starts with a recognised\
      \ diphthong?\n\t\tfor _, diph in ipairs(diphs) do\n\t\t\tif m then\n\t\t\t\tbreak\n\t\t\tend\n\t\t\t\n\t\t\tm = m or mw.ustring.match(remainder, \"^\" .. diph)\n\t\tend\n\t\t\n\t\t-- If we haven't found anything yet, just match on a single vowel\n\t\t\
      m = m or mw.ustring.match(remainder, \"^\" .. vowel)\n\t\t\n\t\tif m then\n\t\t\t-- Found a vowel, add it\n\t\t\tcount = count + 1\n\t\t\tremainder = string.sub(remainder, #m + 1)\n\t\telse\n\t\t\t-- Found a non-vowel, skip it\n\t\t\tremainder = string.gsub(remainder,\
      \ \"^\" .. UTF8Char, \"\")\n\t\tend\n\tend\n\t\n\tif count ~= 0 then return count end\n\t\n\treturn nil\n\t\nend\n\n\nfunction export.countVowels2Test(frame)\n\tlocal params = {\n\t\t[1] = {required = true},\n\t\t[2] = {default = \"\"},\n\t}\n\t\n\tlocal\
      \ args = require(\"Module:parameters\").process(frame.args, params)\n\t\n\tlocal lang = require(\"Module:languages\").getByCode(args[1]) or require(\"Module:languages\").err(args[1], 1)\n\t\n\tlocal count = export.getVowels(args[2], lang)\n\t\n\treturn\
      \ 'The text \"' .. args[2] .. '\" contains ' .. count .. ' vowels.'\nend\n\n\nlocal function countVowels(text)\n\ttext = mw.ustring.toNFD(text) or error(\"Invalid UTF-8\")\n\t\n\tlocal _, count = mw.ustring.gsub(text, vowel, \"\")\n\tlocal _, sequenceCount\
      \ = mw.ustring.gsub(text, vowel..\"+\", \"\")\n\tlocal _, nonsyllabicCount = mw.ustring.gsub(text, vowel .. nonsyllabicDiacritic, \"\")\n\tlocal _, tieCount = mw.ustring.gsub(text, vowel .. tie .. vowel, \"\")\n\t\n\tlocal diphthongCount = count - (nonsyllabicCount\
      \ + tieCount)\n\t\n\treturn count, sequenceCount, diphthongCount\nend\n\n\nlocal function countDiphthongs(text, lang)\n\ttext = mw.ustring.toNFD(text) or error(\"Invalid UTF-8\")\n\t\n\tlocal diphthongs = diphthongs[lang:getCode()] or {}\n\t\n\tlocal _,\
      \ count\n\tlocal total = 0\n\t\n\tif diphthongs then\n\t\tfor i, diphthong in pairs(diphthongs) do\n\t\t\t_, count = mw.ustring.gsub(text, diphthong, \"\")\n\t\t\ttotal = total + count\n\t\tend\n\tend\n\t\n\treturn total\nend\n\n-- Used by [[Module:IPA]]\n\
      function export.hasDiphthongs(lang)\n\tif  (diphthongs[lang:getCode()]) then\n\t\treturn true\n\tend\n\treturn false\nend\n\nfunction export.countVowels(frame)\n\tlocal params = {\n\t\t[1] = {default = \"\"},\n\t}\n\t\n\tlocal args = require(\"Module:parameters\"\
      ).process(frame.args, params)\n\t\n\tlocal count, sequenceCount, diphthongCount = countVowels(args[1])\n\t\n\tlocal outputs = {}\n\ttable.insert(outputs, (count or 'an unknown number of') .. ' vowels')\n\ttable.insert(outputs, (sequenceCount or 'an unknown\
      \ number of') .. ' vowel sequences')\n\ttable.insert(outputs, (diphthongCount or 'an unknown number of') .. ' vowels or vowels and diphthongs')\n\t\n\treturn 'The text \"' .. args[1] .. '\" contains ' .. mw.text.listToText(outputs) .. \".\"\nend\n\n\n\
      function export.countVowelsDiphthongs(frame)\n\tlocal params = {\n\t\t[1] = {required = true},\n\t\t[2] = {default = \"\"},\n\t}\n\t\n\tlocal args = require(\"Module:parameters\").process(frame.args, params)\n\t\n\tlocal lang = require(\"Module:languages\"\
      ).getByCode(args[1]) or require(\"Module:languages\").err(args[1], 1)\n\t\n\tlocal vowels = countVowels(args[2])\n\tlocal count = vowels - countDiphthongs(args[2], lang) or 0\n\t\n\tlocal out = 'The text \"' .. args[2] .. '\" contains ' .. (count or 'an\
      \ unknown number of')\n\t\n\tif count == 1 then\n\t\tout = out .. ' vowel or diphthong.'\n\telse\n\t\tout = out .. ' vowels or diphthongs.'\n\tend\n\t\n\treturn out\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T12:52:57.903Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Template%3Aeo-head&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=49978 t=1556369577789060
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:57 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1287.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1075 pass, cp3040 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 329058317, 352817708, 450865985
    body: |-
      <?xml version="1.0"?><api batchcomplete=""><warnings><main xml:space="preserve">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space="preserve">Because "rvslots" was not specified, a legacy format has been used for the output. This format is deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx="4479965" pageid="4479965" ns="10" title="Template:eo-head"><revisions><rev user="TheDaveRoss" timestamp="2016-02-05T04:44:57Z" contentformat="text/x-wiki" contentmodel="wikitext" comment="Adding closing noinclude tag." xml:space="preserve">{{#invoke:eo-headword|show}}&lt;!--

      --&gt;&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</rev></revisions></page></pages></query></api>
- recorded: 2019-04-27T12:52:58.124Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Aeo-headword&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=39570 t=1556369578010433
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:58 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1287.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1079 pass, cp3040 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 434193883, 353438640, 447368202
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"4479963\" pageid=\"4479963\" ns=\"828\" title=\"Module:eo-headword\"><revisions><rev user=\"Octahedron80\" timestamp=\"2019-02-21T06:33:39Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"Undo revision 51586579 by [[Special:Contributions/Octahedron80|Octahedron80]] ([[User talk:Octahedron80|talk]])\" xml:space=\"preserve\">local export = {}\nlocal pos_functions = {}\n\n\
      local PAGENAME = mw.title.getCurrentTitle().text \nlocal lang = require(\"Module:languages\").getByCode(\"eo\")\nlocal except = require(\"Module:eo-headword/exceptions\")\n\n-- Verb stem must have at least two letters.\nlocal participle_pattern = \"..([aio]n?t[aeo]j?n?)$\"\
      \n\nlocal function monosyllabic(word)\n\treturn select(2, mw.ustring.gsub(word, \"[AEIOUaeiou]\", \"\")) == 1\nend\n\nlocal function check(data, tracking_categories)\n\tlocal catname = \"Missing Esperanto noun forms\"\n\t\n\tif data.pos_category == \"\
      adjectives\" or data.pos_category == \"determiners\" or data.pos_category == \"adjectival participles\" then\n\t\tcatname = \"Missing Esperanto adjective forms\"\n\tend\n\t\n\tfor _, entry in ipairs(data.check) do\n\t\tlocal t = mw.title.new(entry)\n\t\
      \tif t and not t.exists then\n\t\t\ttable.insert(tracking_categories, catname)\n\t\tend\n\tend\nend\n\n-- Determines which function in pos_functions should be used for a word in {{eo-head}}.\nlocal function getPOS(word)\n\t-- deal with some exceptions\n\
      \tif except[word] then\n\t\treturn except[word]\n\tend\n\t\n\t-- delete anything after \"de\"\n\tword = mw.ustring.gsub(word, \" de .+$\", \"\")\n\t\n\tif word:find(\" \") then\n\t\tif word:find(\"o%f[%z%s]\") and word:find(\"a%f[%z%s]\") then\n\t\t\t\
      return \"nouns\"\n\t\tend\n\tend\n\t\n\t-- deal with letters\n\tif mw.ustring.match(word,\"^[aeiou]$\") or mw.ustring.match(word,\"^[bcĉdfgĝhĥjĵklmnprsŝtŭvz]o$\") then\n\t\treturn \"nouns\"\n\tend\n\t\n\t-- Words with only one vowel are always irregular\n\
      \tif monosyllabic(word) then\n\t\treturn nil\n\telseif mw.ustring.find(word, participle_pattern) then -- detect this firstly\n\t\treturn \"participles\"\n\tend\n\t\n\tlocal ending = word:match(\"[aeiou][^aeiou]*$\")\n\t\n\tif ending == \"a\" then\n\t\t\
      return \"adjectives\"\n\telseif ending == \"aj\" or ending == \"an\" or ending == \"ajn\" then\n\t\treturn \"adjective forms\"\n\telseif ending == \"e\" or ending == \"en\" then\n\t\treturn \"adverbs\"\n\telseif ending == \"o\" then\n\t\tif mw.ustring.find(word,\
      \ \"^%u\") then\n\t\t\treturn \"proper nouns\"\n\t\telse\n\t\t\treturn \"nouns\"\n\t\tend\n\telseif ending == \"oj\" or ending == \"on\" or ending == \"ojn\" then\n\t\tif mw.ustring.find(word, \"^%u\") then\n\t\t\treturn \"proper noun forms\"\n\t\telse\n\
      \t\t\treturn \"noun forms\"\n\t\tend\n\telseif ending == \"i\" then\n\t\treturn \"verbs\"\n\telseif ending:find(\"^[iaou]s$\") or ending == \"u\" then\n\t\treturn \"verb forms\"\n\telse\n\t\treturn nil\n\tend\nend\nexport.getPOS = getPOS\n\n-- The main\
      \ entry point\nfunction export.show(frame)\n\tlocal tracking_categories = {}\n\t\n\tlocal parent_args = frame:getParent().args\n\tlocal poscat = parent_args[\"pos\"] or frame.args[\"poscat\"] or getPOS(PAGENAME)\n\t\n\tif not poscat then\n\t\tif mw.title.getCurrentTitle().nsText\
      \ == \"Template\" then\n\t\t\tposcat = \"nouns\"\n\t\telse\n\t\t\terror(\"Part of speech of \\\"\" .. PAGENAME .. \"\\\" cannot be automatically determined.\")\n\t\tend\n\telse\n\t\tif poscat == \"plurale tantum\" then\n\t\t\tposcat = \"pluralia tantum\"\
      \n\t\telseif not (poscat == \"pluralia tantum\" or poscat:find(\"s$\")) then\n\t\t\tposcat = poscat .. \"s\" -- Pluralize part of speech.\n\t\tend\n\tend\n\t\n\tlocal params = {\n\t\t[\"head\"] = {list = true, default = \"\"},\n\t\t[\"pos\"] = {},\n\t\t\
      [\"suff\"] = {type = \"boolean\"},\n\t}\n\t\n\tif pos_functions[poscat] then\n\t\tfor key, val in pairs(pos_functions[poscat].params) do\n\t\t\tparams[key] = val\n\t\tend\n\tend\n\t\n\tlocal args = require(\"Module:parameters\").process(parent_args, params)\n\
      \tlocal data = {lang = lang, pos_category = poscat, categories = {}, heads = args[\"head\"], genders = {}, inflections = {}, check = {}}\n\t\n\tif pos_functions[poscat] then\n\t\tpos_functions[poscat].func(args, data)\n\tend\n\t\n\tcheck(data, tracking_categories)\n\
      \t\n\treturn require(\"Module:headword\").full_headword(data) .. require(\"Module:utilities\").format_categories(tracking_categories, lang)\nend\n\npos_functions[\"adjectives\"] = {\n\tparams = {\n\t},\n\tfunc = function(args, data)\n\t\ttable.insert(data.inflections,\
      \ {label = \"accusative singular\", accel = {form = \"acc|s\"}, PAGENAME .. \"n\"})\n\t\ttable.insert(data.inflections, {label = \"plural\", accel = {form = \"p\"}, PAGENAME .. \"j\"})\n\t\ttable.insert(data.inflections, {label = \"accusative plural\"\
      , accel = {form = \"acc|p\"}, PAGENAME .. \"jn\"})\n\t\ttable.insert(data.check, PAGENAME .. \"n\")\n\t\ttable.insert(data.check, PAGENAME .. \"j\")\n\t\ttable.insert(data.check, PAGENAME .. \"jn\")\n\tend\n}\n\npos_functions[\"determiners\"] = {\n\tparams\
      \ = {\n\t},\n\tfunc = function(args, data)\n\t\ttable.insert(data.inflections, {label = \"accusative singular\", accel = {form = \"acc|s\"}, PAGENAME .. \"n\"})\n\t\ttable.insert(data.inflections, {label = \"plural\", accel = {form = \"p\"}, PAGENAME ..\
      \ \"j\"})\n\t\ttable.insert(data.inflections, {label = \"accusative plural\", accel = {form = \"acc|p\"}, PAGENAME .. \"jn\"})\n\t\ttable.insert(data.check, PAGENAME .. \"n\")\n\t\ttable.insert(data.check, PAGENAME .. \"j\")\n\t\ttable.insert(data.check,\
      \ PAGENAME .. \"jn\")\n\tend\n}\n\npos_functions[\"nouns\"] = {\n\tparams = {\n\t\t[1] = {list = true, allow_holes = true},\n\t},\n\tfunc = function(args, data)\n\t\t-- Get the parameters\n\t\tlocal inflected_words_specified = false\n\t\tlocal inflected_words\
      \ = {}\n\t\t\n\t\tfor i = 1, args[1].maxindex do\n\t\t\tlocal word = args[1][i]\n\t\t\t\n\t\t\tif word == \"+\" or word == \"-\" then\n\t\t\t\tword = nil\n\t\t\tend\n\t\t\t\n\t\t\tif word then\n\t\t\t\tinflected_words[word] = true\n\t\t\t\tinflected_words_specified\
      \ = true\n\t\t\tend\n\t\tend\n\t\t\n\t\tlocal pl = {}\n\t\tlocal acc = {}\n\t\tlocal acc_pl = {}\n\t\t\n\t\t-- Split multi-word terms\n\t\tfor word in mw.text.gsplit(PAGENAME, \" \", true) do\n\t\t\tlocal pos = getPOS(word)\n\t\t\t\n\t\t\t-- Inflect each\
      \ word separately\n\t\t\tif (not inflected_words_specified or inflected_words[word]) and (pos == \"adjectives\" or pos == \"nouns\" or pos == \"proper nouns\") then\n\t\t\t\tlocal is_letter = \"\"\n\t\t\t\tif mw.ustring.match(word,\"^[aeiou]$\") or mw.ustring.match(word,\"\
      ^[bcĉdfgĝhĥjĵklmnprsŝtŭvz]o$\")then\n\t\t\t\t\tis_letter = \"-o\"\n\t\t\t\tend\n\t\t\t\ttable.insert(acc, word .. is_letter .. \"n\")\n\t\t\t\ttable.insert(pl, word .. is_letter .. \"j\")\n\t\t\t\ttable.insert(acc_pl, word .. is_letter .. \"jn\")\n\t\t\
      \telse\n\t\t\t\ttable.insert(acc, word)\n\t\t\t\ttable.insert(pl, word)\n\t\t\t\ttable.insert(acc_pl, word)\n\t\t\tend\n\t\tend\n\t\t\n\t\t-- Merge back together\n\t\tacc = table.concat(acc, \" \")\n\t\tpl = table.concat(pl, \" \")\n\t\tacc_pl = table.concat(acc_pl,\
      \ \" \")\n\t\t\n\t\tlocal acc2, pl2, acc_pl2\n\t\t\n\t\tif PAGENAME == \"sozo\" then\n\t\t\tacc2 = \"sozo-on\"\n\t\t\tpl2 = \"sozo-oj\"\n\t\t\tacc_pl2 = \"sozo-ojn\"\n\t\tend\n\t\t\n\t\tif args[1][1] == \"-\" then\n\t\t\ttable.insert(data.inflections,\
      \ {label = \"uncountable\"})\n\t\t\ttable.insert(data.inflections, {label = \"accusative\", accel = {form = \"acc\"}, acc})\n\t\t\ttable.insert(data.categories, lang:getCanonicalName() .. \" uncountable nouns\")\n\t\t\ttable.insert(data.check, acc)\n\t\
      \telse\n\t\t\ttable.insert(data.inflections, {label = \"accusative singular\", accel = {form = \"acc|s\"}, acc, acc2})\n\t\t\ttable.insert(data.inflections, {label = \"plural\", accel = {form = \"p\"}, pl, pl2})\n\t\t\ttable.insert(data.inflections, {label\
      \ = \"accusative plural\", accel = {form = \"acc|p\"}, acc_pl, acc_pl2})\n\t\t\ttable.insert(data.check, acc)\n\t\t\ttable.insert(data.check, pl)\n\t\t\ttable.insert(data.check, acc_pl)\n\t\tend\n\tend\n}\n\npos_functions[\"proper nouns\"] = {\n\tparams\
      \ = {\n\t\t[1] = {list = true, allow_holes = true},\n\t},\n\tfunc = function(args, data)\n\t\t-- Get the parameters\n\t\tlocal inflected_words_specified = false\n\t\tlocal inflected_words = {}\n\t\t\n\t\tfor i = 1, args[1].maxindex do\n\t\t\tlocal word\
      \ = args[1][i]\n\t\t\t\n\t\t\tif word == \"+\" or word == \"-\" then\n\t\t\t\tword = nil\n\t\t\tend\n\t\t\t\n\t\t\tif word then\n\t\t\t\tinflected_words[word] = true\n\t\t\t\tinflected_words_specified = true\n\t\t\tend\n\t\tend\n\t\t\n\t\tlocal acc = {}\n\
      \t\tlocal pl = {}\n\t\tlocal acc_pl = {}\n\t\t\n\t\tlocal de = false\n\t\t\n\t\t-- Split multi-word terms\n\t\tfor word in mw.text.gsplit(PAGENAME, \" \", true) do\n\t\t\tlocal pos = getPOS(word)\n\t\t\t\n\t\t\tif word == \"de\" then de = true end\n\t\t\
      \t\n\t\t\t-- Inflect each word separately\n\t\t\tif (not inflected_words_specified or inflected_words[word]) and (pos == \"adjectives\" or pos == \"nouns\" or pos == \"proper nouns\" or mw.ustring.match(word,'[ao]j$') and not monosyllabic(word)) and not\
      \ de then\n\t\t\t\ttable.insert(acc, word .. \"n\")\n\t\t\t\ttable.insert(pl, word .. \"j\")\n\t\t\t\ttable.insert(acc_pl, word .. \"jn\")\n\t\t\telse\n\t\t\t\ttable.insert(acc, word)\n\t\t\t\ttable.insert(pl, word)\n\t\t\t\ttable.insert(acc_pl, word)\n\
      \t\t\tend\n\t\tend\n\t\t\n\t\t-- Merge back together\n\t\tacc = table.concat(acc, \" \")\n\t\tpl = table.concat(pl, \" \")\n\t\tacc_pl = table.concat(acc_pl, \" \")\n\t\t\n\t\tif args[1][1] == \"+\" then\n\t\t\ttable.insert(data.inflections, {label = \"\
      accusative singular\", accel = {form = \"acc|s\"}, acc})\n\t\t\ttable.insert(data.inflections, {label = \"plural\", accel = {form = \"p\"}, pl})\n\t\t\ttable.insert(data.inflections, {label = \"accusative plural\", accel = {form = \"acc|p\"}, acc_pl})\n\
      \t\t\ttable.insert(data.check, acc)\n\t\t\ttable.insert(data.check, pl)\n\t\t\ttable.insert(data.check, acc_pl)\n\t\telse\n\t\t\ttable.insert(data.inflections, {label = \"accusative\", accel = {form = \"acc\"}, acc})\n\t\t\ttable.insert(data.check, acc)\n\
      \t\tend\n\tend\n}\n\npos_functions[\"verbs\"] = {\n\tparams = {\n\t},\n\tfunc = function(args, data)\n\t\tlocal stem = PAGENAME:sub(1, -2)\n\t\t\n\t\ttable.insert(data.inflections, {label = \"present\", accel = {form = \"pres\"}, stem .. \"as\"})\n\t\t\
      table.insert(data.inflections, {label = \"past\", accel = {form = \"past\"}, stem .. \"is\"})\n\t\ttable.insert(data.inflections, {label = \"future\", accel = {form = \"futr\"}, stem .. \"os\"})\n\t\ttable.insert(data.inflections, {label = \"conditional\"\
      , accel = {form = \"cond\"}, stem .. \"us\"})\n\t\ttable.insert(data.inflections, {label = \"volitive\", accel = {form = \"voli\"}, stem .. \"u\"})\n\tend\n}\n\npos_functions[\"noun forms\"] = {\n\tparams = {\n\t\t[1] = {},\n\t},\n\tfunc = function(args,\
      \ data)\n\t\tif args[1] == \"p\" or args[1] == \"p+\" then\n\t\t\ttable.insert(data.genders, \"p\")\n\t\t\tdata.categories = {\"Esperanto nouns\", \"Esperanto pluralia tantum\"}\n\t\t\ttable.insert(data.inflections, {label = \"accusative\", accel = {form\
      \ = \"acc\"}, PAGENAME .. \"n\"})\n\t\t\ttable.insert(data.check, PAGENAME .. \"n\")\n\t\t\tif args[1] == \"p+\" then\n\t\t\t\tlocal singular = mw.ustring.gsub(PAGENAME, \"j$\", \"\")\n\t\t\t\ttable.insert(data.inflections, {label = \"singular\", singular})\n\
      \t\t\t\ttable.insert(data.check, singular)\n\t\t\tend\n\t\tend\n\tend\n}\n\npos_functions[\"pluralia tantum\"] = {\n\tparams = {\n\t\t[1] = {},\n\t},\n\tfunc = function(args, data)\n\t\ttable.insert(data.categories, 1, \"Esperanto nouns\")\n\t\ttable.insert(data.inflections,\
      \ {label = \"accusative\", accel = {form = \"acc\"}, PAGENAME .. \"n\"})\n\t\ttable.insert(data.check, PAGENAME .. \"n\")\n\t\tif args[1] == \"+\" then\n\t\t\tlocal singular = mw.ustring.gsub(PAGENAME, \"j$\", \"\")\n\t\t\ttable.insert(data.inflections,\
      \ {label = \"singular\", singular})\n\t\t\ttable.insert(data.check, singular)\n\t\tend\n\tend\n}\n\npos_functions[\"participles\"] = {\n\tparams = {\n\t\t[1] = {}, [2] = {}, --these will be phased out\n\t},\n\tfunc = function(args, data)\n\t\tlocal ending\
      \ = mw.ustring.match(PAGENAME, participle_pattern)\n\t\tif ending then\n\t\t\tlocal vowel, consonant = ending:match(\"([aoe])(j?n?)$\")\n\t\t\tif consonant == \"\" then\n\t\t\t\tif vowel == \"a\" or vowel == \"o\" then\n\t\t\t\t\ttable.insert(data.inflections,\
      \ {label = \"accusative singular\", accel = {form = ending .. \"n\"}, PAGENAME .. \"n\"})\n\t\t\t\t\ttable.insert(data.inflections, {label = \"plural\", accel = {form = ending .. \"j\"}, PAGENAME .. \"j\"})\n\t\t\t\t\ttable.insert(data.inflections, {label\
      \ = \"accusative plural\", accel = {form = ending .. \"jn\"}, PAGENAME .. \"jn\"})\n\t\t\t\t\ttable.insert(data.check, PAGENAME .. \"n\")\n\t\t\t\t\ttable.insert(data.check, PAGENAME .. \"j\")\n\t\t\t\t\ttable.insert(data.check, PAGENAME .. \"jn\")\n\t\
      \t\t\telseif vowel == \"e\" then\n\t\t\t\t\tdata.categories = {\"Esperanto adverbial participles\"}\n\t\t\t\tend\n\t\t\telseif vowel == \"e\" then\n\t\t\t\terror(\"-e\" .. consonant .. \" is not a valid participle ending!\")\n\t\t\tend\n\t\t\tif vowel\
      \ == \"a\" then\n\t\t\t\tdata.categories = {\"Esperanto adjectival participles\"}\n\t\t\telseif vowel == \"o\" then\n\t\t\t\tdata.categories = {\"Esperanto nominal participles\"}\n\t\t\tend\n\t\telse\n\t\t\terror(\"This term is not a participle!\")\n\t\
      \tend\n\tend\n}\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T12:52:58.376Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Aeo-headword%2Fexceptions&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=55930 t=1556369578244200
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:58 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1285.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1085 pass, cp3040 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 628662076, 346275258, 450254015
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"6454715\" pageid=\"6454715\" ns=\"828\" title=\"Module:eo-headword/exceptions\"><revisions><rev user=\"Lingo Bingo Dingo\" timestamp=\"\
      2018-02-21T12:10:42Z\" contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"\" xml:space=\"preserve\">local N, NF, PN, PNF, A, AF, V, VF, Av\n\t= \"nouns\", \"noun forms\", \"proper nouns\", \"proper noun forms\",\n\t\"adjectives\", \"adjective\
      \ forms\", \"verbs\", \"verb forms\", \"adverbs\"\n\nreturn {\n\t[\"adjutanto\"] = N, [\"adjutanton\"] = NF, [\"adjutantoj\"] = NF, [\"adjutantojn\"] = NF,\n\t[\"advokato\"] = N, [\"advokaton\"] = NF, [\"advokatoj\"] = NF, [\"advokatojn\"] = NF,\n\t[\"\
      aerpirato\"] = N, [\"aerpiraton\"] = NF, [\"aerpiratoj\"] = NF, [\"aerpiratojn\"] = NF,\n\t[\"aferstato\"] = N, [\"aferstaton\"] = NF, [\"aferstatoj\"] = NF, [\"aferstatojn\"] = NF,\n\t[\"aferŝarĝito\"] = N, [\"aferŝarĝiton\"] = NF, [\"aferŝarĝitoj\"]\
      \ = NF, [\"aferŝarĝitojn\"] = NF,\n\t[\"agato\"] = N, [\"agaton\"] = NF, [\"agatoj\"] = NF, [\"agatojn\"] = NF,\n\t[\"akanto\"] = N, [\"akanton\"] = NF, [\"akantoj\"] = NF, [\"akantojn\"] = NF,\n\t[\"akolito\"] = N, [\"akoliton\"] = NF, [\"akolitoj\"]\
      \ = NF, [\"akolitojn\"] = NF,\n\t[\"akrobato\"] = N, [\"akrobaton\"] = NF, [\"akrobatoj\"] = NF, [\"akrobatojn\"] = NF,\n\t[\"anglaparolanto\"] = N, [\"anglaparolanton\"] = NF, [\"anglaparolantoj\"] = NF, [\"anglaparolantojn\"] = NF,\n\t[\"angloparolanto\"\
      ] = N, [\"angloparolanton\"] = NF, [\"angloparolantoj\"] = NF, [\"angloparolantojn\"] = NF,\n\t[\"aŭtokrato\"] = N, [\"aŭtokraton\"] = NF, [\"aŭtokratoj\"] = NF, [\"aŭtokratojn\"] = NF,\n\t[\"aŭtomato\"] = N, [\"aŭtomaton\"] = NF, [\"aŭtomatoj\"] = NF,\
      \ [\"aŭtomatojn\"] = NF,\n\n\t[\"bandikoto\"] = N, [\"bandikoton\"] = NF, [\"bandikotoj\"] = NF, [\"bandikotojn\"] = NF,\n\t[\"bankaŭtomato\"] = N, [\"bankaŭtomaton\"] = NF, [\"bankaŭtomatoj\"] = NF, [\"bankaŭtomatojn\"] = NF,\n\t[\"banknoto\"] = N, [\"\
      banknoton\"] = NF, [\"banknotoj\"] = NF, [\"banknotojn\"] = NF,\n\t[\"baŭksito\"] = N, [\"baŭksiton\"] = NF,\n\t[\"bigoto\"] = N, [\"bigoton\"] = NF, [\"bigotoj\"] = NF, [\"bigotojn\"] = NF,\n\t[\"bildrakonto\"] = N, [\"bildrakonton\"] = NF, [\"bildrakontoj\"\
      ] = NF, [\"bildrakontojn\"] = NF,\n\t[\"birdkanto\"] = N, [\"birdkanton\"] = NF, [\"birdkantoj\"] = NF, [\"birdkantojn\"] = NF,\n\t[\"birdokanto\"] = N, [\"birdokanton\"] = NF, [\"birdokantoj\"] = NF, [\"birdokantojn\"] = NF,\n\t[\"bito\"] = N, [\"biton\"\
      ] = NF, [\"bitoj\"] = NF, [\"bitojn\"] = NF,\n\t[\"bronkito\"] = N, [\"bronkiton\"] = NF, [\"bronkitoj\"] = NF, [\"bronkitojn\"] = NF,\n\n\t[\"centra aparato\"] = N, [\"centran aparaton\"] = NF, [\"centraj aparatoj\"] = NF, [\"centrajn aparatojn\"] = NF,\n\
      \t[\"cirkvito\"] = N, [\"cirkviton\"] = NF, [\"cirkvitoj\"] = NF, [\"cirkvitojn\"] = NF,\n\n\t[\"ĉefabato\"] = N, [\"ĉefabaton\"] = NF, [\"ĉefabatoj\"] = NF, [\"ĉefabatojn\"] = NF,\n\t[\"ĉefinstiginto\"] = N, [\"ĉefinstiginton\"] = NF, [\"ĉefinstigintoj\"\
      ] = NF, [\"ĉefinstigintojn\"] = NF,\n\t[\"ĉefkomandanto\"] = N, [\"ĉefkomandanton\"] = NF, [\"ĉefkomandantoj\"] = NF, [\"ĉefkomandantojn\"] = NF,\n\t[\"ĉefleŭtenanto\"] = N, [\"ĉefleŭtenanton\"] = NF, [\"ĉefleŭtenantoj\"] = NF, [\"ĉefleŭtenantojn\"] =\
      \ NF,\n\t[\"ĉefstrato\"] = N, [\"ĉefstraton\"] = NF, [\"ĉefstratoj\"] = NF, [\"ĉefstratojn\"] = NF,\n\t[\"ĉefsubtenanto\"] = N, [\"ĉefsubtenanton\"] = NF, [\"ĉefsubtenantoj\"] = NF, [\"ĉefsubtenantojn\"] = NF,\n\t[\"ĉefuzanto\"] = N, [\"ĉefuzanton\"] =\
      \ NF, [\"ĉefuzantoj\"] = NF, [\"ĉefuzantojn\"] = NF,\n\n\t[\"delegito\"] = N, [\"delegiton\"] = NF, [\"delegitoj\"] = NF, [\"delegitojn\"] = NF,\n\t[\"demokrato\"] = N, [\"demokraton\"] = NF, [\"demokratoj\"] = NF, [\"demokratojn\"] = NF,\n\t[\"despoto\"\
      ] = N, [\"despoton\"] = NF, [\"despotoj\"] = NF, [\"despotojn\"] = NF,\n\t[\"drato\"] = N, [\"draton\"] = NF, [\"dratoj\"] = NF, [\"dratojn\"] = NF,\n\t[\"dungosoldato\"] = N, [\"dungosoldaton\"] = NF, [\"dungosoldatoj\"] = NF, [\"dungosoldatojn\"] = NF,\n\
      \t[\"dungsoldato\"] = N, [\"dungsoldaton\"] = NF, [\"dungsoldatoj\"] = NF, [\"dungsoldatojn\"] = NF,\n\t[\"duonfrato\"] = N, [\"duonfraton\"] = NF, [\"duonfratoj\"] = NF, [\"duonfratojn\"] = NF,\n\n\t[\"ebonito\"] = N, [\"eboniton\"] = NF, [\"ebonitoj\"\
      ] = NF, [\"ebonitojn\"] = NF,\n\t[\"ekscito\"] = N, [\"eksciton\"] = NF, [\"ekscitoj\"] = NF, [\"ekscitojn\"] = NF,\n\t[\"elito\"] = N, [\"eliton\"] = NF, [\"elitoj\"] = NF, [\"elitojn\"] = NF,\n\t[\"eterna komencanto\"] = N, [\"eternan komencanton\"]\
      \ = NF, [\"eternaj komencantoj\"] = NF, [\"eternajn komencantojn\"] = NF,\n\n\t[\"fanto\"] = N, [\"fanton\"] = NF, [\"fantoj\"] = NF, [\"fantojn\"] = NF,\n\t[\"fingropinto\"] = N, [\"fingropinton\"] = NF, [\"fingropintoj\"] = NF, [\"fingropintojn\"] =\
      \ NF,\n\t[\"francparolanto\"] = N, [\"francparolanton\"] = NF, [\"francparolantoj\"] = NF, [\"francparolantojn\"] = NF,\n\t[\"frato\"] = N, [\"fraton\"] = NF, [\"fratoj\"] = NF, [\"fratojn\"] = NF,\n\n\t[\"gasgiganto\"] = N, [\"gasgiganton\"] = NF, [\"\
      gasgigantoj\"] = NF, [\"gasgigantojn\"] = NF,\n\t[\"gasogiganto\"] = N, [\"gasogiganton\"] = NF, [\"gasogigantoj\"] = NF, [\"gasogigantojn\"] = NF,\n\t[\"gefrato\"] = N, [\"gefraton\"] = NF, [\"gefratoj\"] = NF, [\"gefratojn\"] = NF,\n\t[\"germanparolanto\"\
      ] = N, [\"germanparolanton\"] = NF, [\"germanparolantoj\"] = NF, [\"germanparolantojn\"] = NF,\n\t[\"giganto\"] = N, [\"giganton\"] = NF, [\"gigantoj\"] = NF, [\"gigantojn\"] = NF,\n\t[\"groto\"] = N, [\"groton\"] = NF, [\"grotoj\"] = NF, [\"grotojn\"\
      ] = NF,\n\n\t[\"hepato\"] = N, [\"hepaton\"] = NF, [\"hepatoj\"] = NF, [\"hepatojn\"] = NF,\n\t[\"hermafrodito\"] = N, [\"hermafroditon\"] = NF, [\"hermafroditoj\"] = NF, [\"hermafroditojn\"] = NF,\n\t[\"hezito\"] = N, [\"heziton\"] = NF,\n\t[\"hiacinto\"\
      ] = N, [\"hiacinton\"] = NF, [\"hiacintoj\"] = NF, [\"hiacintojn\"] = NF,\n\t[\"hierofanto\"] = N, [\"hierofanton\"] = NF, [\"hierofantoj\"] = NF, [\"hierofantojn\"] = NF,\n\t[\"hipofizito\"] = N, [\"hipofiziton\"] = NF, [\"hipofizitoj\"] = NF, [\"hipofizitojn\"\
      ] = NF,\n\t[\"hipokrito\"] = N, [\"hipokriton\"] = NF, [\"hipokritoj\"] = NF, [\"hipokritojn\"] = NF,\n\t[\"hispanparolanto\"] = N, [\"hispanparolanton\"] = NF, [\"hispanparolantoj\"] = NF, [\"hispanparolantojn\"] = NF,\n\t[\"hobito\"] = N, [\"hobiton\"\
      ] = NF, [\"hobitoj\"] = NF, [\"hobitojn\"] = NF,\n\t[\"homaŭtomato\"] = N, [\"homaŭtomaton\"] = NF, [\"homaŭtomatoj\"] = NF, [\"homaŭtomatojn\"] = NF,\n\t[\"homeopato\"] = N, [\"homeopaton\"] = NF, [\"homeopatoj\"] = NF, [\"homeopatojn\"] = NF,\n\n\t[\"\
      infansoldato\"] = N, [\"infansoldaton\"] = NF, [\"infansoldatoj\"] = NF, [\"infansoldatojn\"] = NF,\n\t[\"iniciato\"] = N, [\"iniciaton\"] = NF, [\"iniciatoj\"] = NF, [\"iniciatojn\"] = NF,\n\t[\"interrilato\"] = N, [\"interrilaton\"] = N, [\"interrilatoj\"\
      ] = N, [\"interrilatojn\"] = N,\n\n\t[\"japanparolanto\"] = N, [\"japanparolanton\"] = NF, [\"japanparolantoj\"] = NF, [\"japanparolantojn\"] = NF,\n\n\t[\"kalcito\"] = N, [\"kalciton\"] = NF, [\"kalcitoj\"] = NF, [\"kalcitojn\"] = NF,\n\t[\"kapoto\"]\
      \ = N, [\"kapoton\"] = NF, [\"kapotoj\"] = NF, [\"kapotojn\"] = NF,\n\t[\"kato\"] = N, [\"katon\"] = NF, [\"katoj\"] = NF, [\"katojn\"] = NF,\n\t[\"karbonhidrato\"] = N, [\"karbonhidraton\"] = NF, [\"karbonhidratoj\"] = NF, [\"karbonhidratojn\"] = NF,\n\
      \t[\"koito\"] = N, [\"koiton\"] = NF,\n\t[\"kojoto\"] = N, [\"kojoton\"] = NF, [\"kojotoj\"] = NF, [\"kojotojn\"] = NF,\n\t[\"kokrito\"] = N, [\"kokriton\"] = NF, [\"kokritoj\"] = NF, [\"kokritojn\"] = NF,\n\t[\"komitato\"] = N, [\"komitaton\"] = NF, [\"\
      komitatoj\"] = NF, [\"komitatojn\"] = NF,\n\t[\"kompato\"] = N, [\"kompaton\"] = NF, [\"kompatoj\"] = NF, [\"kompatojn\"] = NF,\n\t[\"koordinato\"] = N, [\"koordinaton\"] = NF, [\"koordinatoj\"] = NF, [\"koordinatojn\"] = NF,\n\t[\"krizostato\"] = N, [\"\
      krizostaton\"] = NF, [\"krizostatoj\"] = NF, [\"krizostatojn\"] = NF,\n\t[\"kroato\"] = N, [\"kroaton\"] = NF, [\"kroatoj\"] = NF, [\"kroatojn\"] = NF,\n\t[\"kunfondinto\"] = N, [\"kunfondinton\"] = NF, [\"kunfondintoj\"] = NF, [\"kunfondintojn\"] = NF,\n\
      \t[\"kunloĝanto\"] = N, [\"kunloĝanton\"] = NF, [\"kunloĝantoj\"] = NF, [\"kunloĝantojn\"] = NF,\n\n\t[\"labormerkato\"] = N, [\"labormerkaton\"] = NF, [\"labormerkatoj\"] = NF, [\"labormerkatojn\"] = NF,\n\t[\"laŭreato\"] = N, [\"laŭreaton\"] = NF, [\"\
      laŭreatoj\"] = NF, [\"laŭreatojn\"] = NF,\n\t[\"leŭkocito\"] = N, [\"leŭkociton\"] = NF, [\"leŭkocitoj\"] = NF, [\"leŭkocitojn\"] = NF,\n\t[\"leŭtenanto\"] = N, [\"leŭtenanton\"] = NF, [\"leŭtenantoj\"] = NF, [\"leŭtenantojn\"] = NF,\n\n\t[\"malakito\"\
      ] = N, [\"malakiton\"] = NF, [\"malakitoj\"] = NF, [\"malakitojn\"] = NF,\n\t[\"malbato\"] = N, [\"malbaton\"] = NF, [\"malbatoj\"] = NF, [\"malbatojn\"] = NF,\n\t[\"malbonfaranto\"] = N, [\"malbonfaranton\"] = NF, [\"malbonfarantoj\"] = NF, [\"malbonfarantojn\"\
      ] = NF,\n\t[\"mampinto\"] = N, [\"mampinton\"] = NF, [\"mampintoj\"] = NF, [\"mampintojn\"] = NF,\n\t[\"mefito\"] = N, [\"mefiton\"] = NF, [\"mefitoj\"] = NF, [\"mefitojn\"] = NF,\n\t[\"misbato\"] = N, [\"misbaton\"] = NF, [\"misbatoj\"] = NF, [\"misbatojn\"\
      ] = NF,\n\t[\"montopinto\"] = N, [\"montopinton\"] = NF, [\"montopintoj\"] = NF, [\"montopintojn\"] = NF,\n\n\t[\"NIFO\"] = N, [\"NIFOn\"] = NF, [\"NIFOj\"] = NF, [\"NIFOjn\"] = NF,\n\t\n\t[\"pirato\"] = N, [\"piraton\"] = NF, [\"piratoj\"] = NF, [\"piratojn\"\
      ] = NF,\n\t[\"prezidanto\"] = N, [\"prezidanton\"] = NF, [\"prezidantoj\"] = NF, [\"prezidantojn\"] = NF,\n\n\t[\"stato\"] = N, [\"staton\"] = NF, [\"statoj\"] = NF, [\"statojn\"] = NF,\n\t[\"splito\"] = N, [\"spliton\"] = NF, [\"splitoj\"] = NF, [\"splitojn\"\
      ] = NF,\n\n\t[\"ŝato\"] = N, [\"ŝaton\"] = NF, [\"ŝatoj\"] = NF, [\"ŝatojn\"] = NF,\n\t[\"sindikato\"] = N, [\"sindikaton\"] = NF, [\"sindikatoj\"] = NF, [\"sindikatojn\"] = NF,\n\t[\"ŝvito\"] = N, [\"ŝviton\"] = NF,\n\n\t[\"teokrato\"] = N, [\"teokraton\"\
      ] = NF, [\"teokratoj\"] = NF, [\"teokratojn\"] = NF,\n\t[\"terakoto\"] = N, [\"terakoton\"] = NF, [\"terakotoj\"] = NF, [\"terakotojn\"] = NF,\n\t[\"tomato\"] = N, [\"tomaton\"] = NF, [\"tomatoj\"] = NF, [\"tomatojn\"] = NF,\n\t[\"triosonato\"] = N, [\"\
      triosonaton\"] = NF, [\"triosonatoj\"] = NF, [\"triosonatojn\"] = NF,\n\n\t[\"vendaŭtomato\"] = N, [\"vendaŭtomaton\"] = NF, [\"vendaŭtomatoj\"] = NF, [\"vendaŭtomatojn\"] = NF,\n\t[\"vicprezidanto\"] = N, [\"vicprezidanton\"] = NF, [\"vicprezidantoj\"\
      ] = NF, [\"vicprezidantojn\"] = NF,\n\t[\"virkato\"] = N, [\"virkaton\"] = NF, [\"virkatoj\"] = NF, [\"virkatojn\"] = NF,\n\t[\"visigoto\"] = N, [\"visigoton\"] = NF, [\"visigotoj\"] = NF, [\"visigotojn\"] = NF,\n\t\n\t[\"universitato\"] = N, [\"universitaton\"\
      ] = NF, [\"universitatoj\"] = NF, [\"universitatojn\"] = NF,\n\n\t[\"zeloto\"] = N, [\"zeloton\"] = NF, [\"zelotoj\"] = NF, [\"zelotojn\"] = NF,\n\n\t----\n\n\t[\"Savanto\"] = PN, [\"Savanton\"] = PNF,\n\n\t----\n\n\t[\"1a\"] = A, [\"1an\"] = AF, [\"1aj\"\
      ] = AF, [\"1ajn\"] = AF,\n\t[\"19-a\"] = A, [\"19-an\"] = AF, [\"19-aj\"] = AF, [\"19-ajn\"] = AF,\n\t[\"2a\"] = A, [\"2an\"] = AF, [\"2aj\"] = AF, [\"2ajn\"] = AF,\n\t[\"3a\"] = A, [\"3an\"] = AF, [\"3aj\"] = AF, [\"3ajn\"] = AF,\n\t[\"4a\"] = A, [\"\
      4an\"] = AF, [\"4aj\"] = AF, [\"4ajn\"] = AF,\n\t[\"5a\"] = A, [\"5an\"] = AF, [\"5aj\"] = AF, [\"5ajn\"] = AF,\n\t[\"8-a\"] = A, [\"8-an\"] = AF, [\"8-aj\"] = AF, [\"8-ajn\"] = AF,\n\n\t[\"giganta\"] = A, [\"gigantan\"] = AF, [\"gigantaj\"] = AF, [\"\
      gigantajn\"] = AF,\n\n\t----\n\n\t[\"sti\"] = V, [\"stas\"] = VF, [\"stis\"] = VF, [\"stos\"] = VF, [\"stus\"] = VF, [\"stu\"] = VF,\n\n\t----\n\n\t[\"eĉ\"] = Av,\n\t[\"ech\"] = Av,\n\t[\"for\"] = Av,\n\t[\"jes\"] = Av,\n\t[\"nun\"] = Av,\n\t[\"nur\"]\
      \ = Av,\n\t[\"sob\"] = Av,\n\t[\"sor\"] = Av,\n\t[\"tre\"] = Av,\n\t[\"tro\"] = Av,\n}</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T12:52:58.599Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Aheadword&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=36276 t=1556369578482052
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:58 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1314.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1085 pass, cp3041 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 632916065, 294744215, 458431039
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"3989053\" pageid=\"3989053\" ns=\"828\" title=\"Module:headword\"><revisions><rev user=\"Rua\" timestamp=\"2019-04-04T11:34:46Z\" contentformat=\"\
      text/plain\" contentmodel=\"Scribunto\" comment=\"\" xml:space=\"preserve\">local export = {}\n\nlocal m_data = mw.loadData(\"Module:headword/data\")\n\nlocal title = mw.title.getCurrentTitle()\n\nlocal isLemma = m_data.lemmas\nlocal isNonLemma = m_data.nonlemmas\n\
      local notranslit = m_data.notranslit\nlocal toBeTagged = m_data.toBeTagged\n\nlocal parameters = {\n\tlang = { type = \"object\" },\n\tscript = { type = \"object\" },\n\theads = { type = \"table\" },\n\ttranslits = { type = \"table\" },\n\ttranscriptions\
      \ = { type = \"table\" },\n\tinflections = { type = \"table\" },\n\tgenders = { type = \"table\" },\n\tcategories = { type = \"table\" },\n\tpos_category = { type = \"string\" },\n\tsort_key = { type = \"string\" },\n\tid = { type = \"string\" },\n}\n\n\
      local function test_script(text, script_code)\n\tif type(text) == \"string\" and type(script_code) == \"string\" then\n\t\tlocal sc = require(\"Module:scripts\").getByCode(script_code)\n\t\tlocal characters\n\t\tif sc then\n\t\t\tcharacters = sc:getCharacters()\n\
      \t\tend\n\t\t\n\t\tlocal out\n\t\tif characters then\n\t\t\ttext = mw.ustring.gsub(text, \"%W\", \"\")\n\t\t\tout = mw.ustring.find(text, \"[\" .. characters .. \"]\")\n\t\tend\n\t\t\n\t\tif out then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\
      \tend\n\telse\n\t\tmw.log(\"Parameters to test_script were incorrect.\")\n\t\treturn nil\n\tend\nend\n\n\nlocal function preprocess(data)\n\t--[=[\n\t[[Special:WhatLinksHere/Template:tracking/headword/heads-not-table]]\n\t[[Special:WhatLinksHere/Template:tracking/headword/translits-not-table]]\n\
      \t]=]\n\tif type(data.heads) ~= \"table\" then\n\t\tif data.heads then\n\t\t\trequire(\"Module:debug\").track(\"headword/heads-not-table\")\n\t\tend\n\t\t\n\t\tdata.heads = { data.heads }\n\tend\n\t\n\tif type(data.translits) ~= \"table\" then\n\t\tif\
      \ data.translits then\n\t\t\trequire(\"Module:debug\").track(\"headword/translits-not-table\")\n\t\tend\n\t\t\n\t\tdata.translits = { data.translits }\n\tend\n\t\n\tif type(data.transcriptions) ~= \"table\" then\n\t\tif data.transcriptions then\n\t\t\t\
      require(\"Module:debug\").track(\"headword/transcriptions-not-table\")\n\t\tend\n\t\t\n\t\tdata.transcriptions = { data.transcriptions }\n\tend\n\t\n\tif not data.heads or #data.heads == 0 then\n\t\tdata.heads = {\"\"}\n\tend\n\t\n\t-- Determine if term\
      \ is reconstructed\n\tlocal is_reconstructed = data.lang:getType() == \"reconstructed\"\n\t\tor title.nsText == \"Reconstruction\"\n\t\n\t-- Create a default headword.\n\tlocal subpagename = title.subpageText\n\tlocal pagename = title.text\n\tlocal default_head\n\
      \tif is_reconstructed then\n\t\tdefault_head = require(\"Module:utilities\").plain_gsub(pagename, data.lang:getCanonicalName() .. \"/\", \"\")\n\telse\n\t\tdefault_head = subpagename\n\tend\n\t\n\t-- Add links to multi-word page names when appropriate\n\
      \tif data.lang:getCode() ~= \"zh\" then\n\t\tlocal spacingPunctuation = \"([%s%p]+)\"\n\t\t--[[ \tVariable containing anything that is\n\t\t\t\tnot a punctuation character found inside of words.\n\t\t\t\tUsed to exclude characters from the above regex.\t\
      ]]\n\t\tlocal notWordPunc = \"([^-־׳״'.·*’]+)\"\n\t\tlocal contains_words = false\n\t\t\n\t\tfor possibleWordBreak in mw.ustring.gmatch(default_head, spacingPunctuation) do\n\t\t\tif mw.ustring.find(possibleWordBreak, notWordPunc) then\n\t\t\t\tcontains_words\
      \ = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\t\n\t\tif (not is_reconstructed) and contains_words then\n\t\t\tlocal function workaround_to_exclude_chars(s)\n\t\t\t\treturn mw.ustring.gsub(s, notWordPunc, \"]]%1[[\")\n\t\t\tend\n\t\t\t\n\t\t\tdefault_head\
      \ = \"[[\"\n\t\t\t\t.. mw.ustring.gsub(\n\t\t\t\t\tdefault_head,\n\t\t\t\t\tspacingPunctuation,\n\t\t\t\t\tworkaround_to_exclude_chars\n\t\t\t\t\t)\n\t\t\t\t.. \"]]\"\n\t\t\t--[=[\n\t\t\tuse this when workaround is no longer needed:\n\t\t\tdefault_head\
      \ = \"[[\"\n\t\t\t\t.. mw.ustring.gsub(default_head, WORDBREAKCHARS, \"]]%1[[\")\n\t\t\t\t.. \"]]\"\n\t\t\t\n\t\t\tRemove any empty links, which could have been created above\n\t\t\tat the beginning or end of the string.\n\t\t\t]=]\n\t\t\tdefault_head\
      \ = mw.ustring.gsub(default_head, \"%[%[%]%]\", \"\")\n\t\tend\n\tend\n\t\n\tif is_reconstructed then\n\t\tdefault_head = \"*\" .. default_head\n\tend\n\t\n\t-- If a head is the empty string \"\", then replace it with the default\n\tfor i, head in ipairs(data.heads)\
      \ do\n\t\tif head == \"\" then\n\t\t\thead = default_head\n\t\telse\n\t\t\tif head == default_head and data.lang:getCanonicalName() == \"English\" then\n\t\t\t\ttable.insert(data.categories, data.lang:getCanonicalName() .. \" terms with redundant head\
      \ parameter\")\n\t\t\tend\t\t\t\n\t\tend\n\t\tdata.heads[i] = head\n\tend\n\t\n\t--[[\tTry to detect the script if it was not provided\n\t\t\tWe use the first headword for this, and assume\n\t\t\tthat all of them have the same script\n\t\t\tThis *should*\
      \ always be true, right?\t\t]]\n\tif not data.sc then\n\t\tdata.sc = require(\"Module:scripts\").findBestScript(data.heads[1], data.lang)\n\tend\n\t\n\tfor i, val in pairs(data.translits) do\n\t\tdata.translits[i] = {display = val, is_manual = true}\n\t\
      end\n\t\n\t-- Make transliterations\n\tfor i, head in ipairs(data.heads) do\n\t\tlocal translit = data.translits[i]\n\t\t\n\t\t-- Try to generate a transliteration if necessary\n\t\t-- Generate it if the script is not Latn or similar, and if no transliteration\
      \ was provided\n\t\tif translit and translit.display == \"-\" then\n\t\t\ttranslit = nil\n\t\telseif not translit and not (data.sc:getCode():find(\"Latn\", nil, true) or data.sc:getCode() == \"Latinx\" or data.sc:getCode() == \"None\") and (not data.sc\
      \ or data.sc:getCode() ~= \"Imag\") then\n\t\t\ttranslit = data.lang:transliterate(require(\"Module:links\").remove_links(head), data.sc)\n\t\t\t\n\t\t\t-- There is still no transliteration?\n\t\t\t-- Add the entry to a cleanup category.\n\t\t\tif not\
      \ translit and not notranslit[data.lang:getCode()] then\n\t\t\t\ttranslit = \"&lt;small&gt;transliteration needed&lt;/small&gt;\"\n\t\t\t\ttable.insert(data.categories, data.lang:getCanonicalName() .. \" terms needing transliteration\")\n\t\t\tend\n\t\t\
      \t\n\t\t\tif translit then\n\t\t\t\ttranslit = {display = translit, is_manual = false}\n\t\t\tend\n\t\tend\n\t\t\n\t\t-- Link to the transliteration entry for languages that require this\n\t\tif translit and data.lang:link_tr() then\n\t\t\ttranslit.display\
      \ = require(\"Module:links\").full_link{\n\t\t\t\tterm = translit.display,\n\t\t\t\tlang = data.lang,\n\t\t\t\tsc = require(\"Module:scripts\").getByCode(\"Latn\"),\n\t\t\t\ttr = \"-\"\n\t\t\t\t}\n\t\tend\n\t\t\n\t\tdata.translits[i] = translit\n\tend\n\
      \t\n\tif data.id and type(data.id) ~= \"string\" then\n\t\terror(\"The id in the data table should be a string.\")\n\tend\nend\n\n\n-- Format a headword with transliterations\nlocal function format_headword(data)\n\tlocal m_links = require(\"Module:links\"\
      )\n\tlocal m_scriptutils = require(\"Module:script utilities\")\n\t\n\t-- Are there non-empty transliterations?\n\t-- Need to do it this way because translit[1] might be nil while translit[2] is not\n\tlocal has_translits = false\n\t\n\t-- Format the headwords\n\
      \tfor i, head in ipairs(data.heads) do\n\t\tif data.translits[i] or data.transcriptions[i] then\n\t\t\thas_translits = true\n\t\tend\n\t\t\n\t\t-- Apply processing to the headword, for formatting links and such\n\t\tif head:find(\"[[\", nil, true) and\
      \ (not data.sc or data.sc:getCode() ~= \"Imag\") then\n\t\t\thead = m_links.language_link({term = head, lang = data.lang}, false)\n\t\tend\n\t\t\n\t\t-- Add language and script wrapper\n\t\tif i == 1 then\n\t\t\thead = m_scriptutils.tag_text(head, data.lang,\
      \ data.sc, \"head\", nil, data.id)\n\t\telse\n\t\t\thead = m_scriptutils.tag_text(head, data.lang, data.sc, \"head\", nil)\n\t\tend\n\t\t\n\t\tdata.heads[i] = head\n\tend\n\t\n\tlocal translits_formatted = \"\"\n\t\n\tif has_translits then\n\t\t-- Format\
      \ the transliterations\n\t\tlocal translits = data.translits\n\t\tlocal transcriptions = data.transcriptions\n\t\t\n\t\tif translits then\n\t\t\t-- using pairs() instead of ipairs() in case there is a gap\n\t\t\tfor i, _ in pairs(translits) do\n\t\t\t\t\
      if type(i) == \"number\" then\n\t\t\t\t\ttranslits[i] = m_scriptutils.tag_translit(translits[i].display, data.lang:getCode(), \"head\", nil, translits[i].is_manual)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\n\t\tif transcriptions then\n\t\t\tfor i, _ in pairs(transcriptions)\
      \ do\n\t\t\t\tif type(i) == \"number\" then\n\t\t\t\t\ttranscriptions[i] = m_scriptutils.tag_transcription(transcriptions[i], data.lang:getCode(), \"head\")\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\n\t\tfor i = 1, math.max(#translits, #transcriptions) do\n\t\
      \t\tlocal translits_formatted = {}\n\t\t\ttable.insert(translits_formatted, translits[i] and translits[i] or \"\")\n\t\t\ttable.insert(translits_formatted, (translits[i] and transcriptions[i]) and \" \" or \"\")\n\t\t\ttable.insert(translits_formatted,\
      \ transcriptions[i] and \"/\" .. transcriptions[i] .. \"/\" or \"\")\n\t\t\tdata.translits[i] = table.concat(translits_formatted)\n\t\tend\n\t\t\n\t\ttranslits_formatted = \" (\" .. table.concat(data.translits, \" &lt;i&gt;or&lt;/i&gt; \") .. \")\"\n\t\
      \t\n\t\tlocal transliteration_page = mw.title.new(data.lang:getCanonicalName() .. \" transliteration\", \"Wiktionary\")\n\t\t\n\t\tif transliteration_page then\n\t\t\tlocal success, exists = pcall(function () return transliteration_page.exists end)\n\t\
      \t\tif success and exists then\n\t\t\t\ttranslits_formatted = \" [[Wiktionary:\" .. data.lang:getCanonicalName() .. \" transliteration|•]]\" .. translits_formatted\n\t\t\tend\n\t\tend\n\tend\n\t\n\treturn table.concat(data.heads, \" &lt;i&gt;or&lt;/i&gt;\
      \ \") .. translits_formatted\nend\n\n\nlocal function format_genders(data)\n\tif data.genders and #data.genders &gt; 0 then\n\t\tlocal gen = require(\"Module:gender and number\")\n\t\treturn \"&amp;nbsp;\" .. gen.format_list(data.genders, data.lang)\n\t\
      else\n\t\treturn \"\"\n\tend\nend\n\n\nlocal function format_inflection_parts(data, parts)\n\tlocal m_links = require(\"Module:links\")\n\t\n\tfor key, part in ipairs(parts) do\n\t\tif type(part) ~= \"table\" then\n\t\t\tpart = {term = part}\n\t\tend\n\
      \t\t\n\t\tlocal qualifiers = \"\"\n\t\t\n\t\tif part.qualifiers and #part.qualifiers &gt; 0 then\n\t\t\tqualifiers = require(\"Module:qualifier\").format_qualifier(part.qualifiers) .. \" \"\n\t\t\t\n\t\t\t-- [[Special:WhatLinksHere/Template:tracking/headword/qualifier]]\n\
      \t\t\trequire(\"Module:debug\").track(\"headword/qualifier\")\n\t\tend\n\t\t\n\t\tlocal partaccel = part.accel\n\t\tlocal face = part.hypothetical and \"hypothetical\" or \"bold\"\n\t\tlocal nolink = part.hypothetical or part.nolink\n\t\t\n\t\t-- Convert\
      \ the term into a full link\n\t\t-- Don't show a transliteration here, the consensus seems to be not to\n\t\t-- show them in headword lines to avoid clutter.\n\t\tpart = m_links.full_link(\n\t\t\t{\n\t\t\t\tterm = not nolink and part.term or nil,\n\t\t\
      \t\talt = part.alt or (nolink and part.term or nil),\n\t\t\t\tlang = part.lang or data.lang,\n\t\t\t\tsc = part.sc or parts.sc or (not part.lang and data.sc),\n\t\t\t\tid = part.id,\n\t\t\t\tgenders = part.genders,\n\t\t\t\ttr = part.translit or (not (parts.enable_auto_translit\
      \ or data.inflections.enable_auto_translit) and \"-\" or nil),\n\t\t\t\tts = part.transcription,\n\t\t\t\taccel = parts.accel or partaccel,\n\t\t\t},\n\t\t\tface,\n\t\t\tfalse\n\t\t\t)\n\t\t\n\t\tpart = qualifiers .. part\n\t\t\n\t\tparts[key] = part\n\
      \tend\n\t\n\tlocal parts_output = \"\"\n\t\n\tif #parts &gt; 0 then\n\t\tparts_output = \" \" .. table.concat(parts, \" &lt;i&gt;or&lt;/i&gt; \")\n\telseif parts.request then\n\t\tparts_output = \" &lt;small&gt;[please provide]&lt;/small&gt;\"\n\t\t\t\
      .. require(\"Module:utilities\").format_categories(\n\t\t\t\t{data.lang:getCanonicalName() .. \" entries needing inflection\"},\n\t\t\t\tlang,\n\t\t\t\tnil,\n\t\t\t\tnil,\n\t\t\t\tdata.force_cat_output,\n\t\t\t\tdata.sc\n\t\t\t\t)\n\tend\n\t\n\treturn\
      \ \"&lt;i&gt;\" .. parts.label .. \"&lt;/i&gt;\" .. parts_output\nend\n\n-- Format the inflections following the headword\nlocal function format_inflections(data)\n\tif data.inflections and #data.inflections &gt; 0 then\n\t\t-- Format each inflection individually\n\
      \t\tfor key, infl in ipairs(data.inflections) do\n\t\t\tdata.inflections[key] = format_inflection_parts(data, infl)\n\t\tend\n\t\t\n\t\treturn \" (\" .. table.concat(data.inflections, \", \") .. \")\"\n\telse\n\t\treturn \"\"\n\tend\nend\n\nlocal function\
      \ show_headword_line(data)\n\tlocal namespace = title.nsText\n\n\t-- Check the namespace against the language type\n\tif namespace == \"\" then\n\t\tif data.lang:getType() == \"reconstructed\" then\n\t\t\terror(\"Entries for this language must be placed\
      \ in the Reconstruction: namespace.\")\n\t\telseif data.lang:getType() == \"appendix-constructed\" then\n\t\t\terror(\"Entries for this language must be placed in the Appendix: namespace.\")\n\t\tend\n\tend\n\t\n\tlocal tracking_categories = {}\n\n\tif\
      \ not data.noposcat then\t\n\t\tlocal pos_category = data.lang:getCanonicalName() .. \" \" .. data.pos_category\n\t\tif pos_category ~= \"Translingual Han characters\" then\n\t\t\ttable.insert(data.categories, 1, pos_category)\n\t\tend\n\tend\n\t\n\t--\
      \ Is it a lemma category?\n\tif isLemma[data.pos_category] or isLemma[data.pos_category:gsub(\"^reconstructed \", \"\")] then\n\t\tif not data.noposcat then\n\t\t\ttable.insert(data.categories, 1, data.lang:getCanonicalName() .. \" lemmas\")\n\t\tend\n\
      \t-- Is it a nonlemma category?\n\telseif isNonLemma[data.pos_category]\n\t\tor isNonLemma[data.pos_category:gsub(\"^reconstructed \", \"\")]\n\t\tor isLemma[data.pos_category:gsub(\"^mutated \", \"\")]\n\t\tor isNonLemma[data.pos_category:gsub(\"^mutated\
      \ \", \"\")] then\n\t\t\n\t\tif not data.noposcat then\n\t\t\ttable.insert(data.categories, 1, data.lang:getCanonicalName() .. \" non-lemma forms\")\n\t\tend\n\t-- It's neither; we don't know what this category is, so tag it with a tracking category.\n\
      \telse\n\t\t--[=[\n\t\t[[Special:WhatLinksHere/Template:tracking/headword/unrecognized pos]]\n\t\t]=]\n\t\ttable.insert(tracking_categories, \"head tracking/unrecognized pos\")\n\t\trequire(\"Module:debug\").track{\n\t\t\t\"headword/unrecognized pos\"\
      ,\n\t\t\t\"headword/unrecognized pos/lang/\" .. data.lang:getCode(),\n\t\t\t\"headword/unrecognized pos/pos/\" .. data.pos_category\n\t\t}\n\tend\n\t\n\t-- Preprocess\n\tpreprocess(data)\n\t\n\tlocal m_links = require(\"Module:links\")\n\t\n\tif namespace\
      \ == \"\" and data.lang:getType() ~= \"reconstructed\" then\n\t\tfor _, head in ipairs(data.heads) do\n\t\t\tif title.prefixedText ~= m_links.getLinkPage(m_links.remove_links(head), data.lang) then\n\t\t\t\t--[=[\n\t\t\t\t[[Special:WhatLinksHere/Template:tracking/headword/pagename\
      \ spelling mismatch]]\n\t\t\t\t]=]\n\t\t\t\trequire(\"Module:debug\").track{\n\t\t\t\t\t\"headword/pagename spelling mismatch\",\n\t\t\t\t\t\"headword/pagename spelling mismatch/\" .. data.lang:getCode()\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\
      end\n\t\n\t-- Format and return all the gathered information\n\treturn\n\t\tformat_headword(data) ..\n\t\tformat_genders(data) ..\n\t\tformat_inflections(data) ..\n\t\trequire(\"Module:utilities\").format_categories(\n\t\t\ttracking_categories, data.lang,\
      \ data.sort_key, nil, data.force_cat_output, data.sc\n\t\t\t)\nend\n\nfunction export.full_headword(data)\n\tlocal tracking_categories = {}\n\t\n\t-- Script-tags the topmost header.\n\tlocal pagename = title.text\n\tlocal fullPagename = title.fullText\n\
      \tlocal namespace = title.nsText\n\t\n\tif not data.lang or type(data.lang) ~= \"table\" or not data.lang.getCode then\n\t\terror(\"In data, the first argument to full_headword, data.lang should be a language object.\")\n\tend\n\t\n\tif not data.sc then\n\
      \t\tdata.sc = require(\"Module:scripts\").findBestScript(data.heads and data.heads[1] ~= \"\" and data.heads[1] or pagename, data.lang)\n\telse\n\t\t-- Track uses of sc parameter\n\t\tlocal best = require(\"Module:scripts\").findBestScript(pagename, data.lang)\n\
      \t\trequire(\"Module:debug\").track(\"headword/sc\")\n\t\t\n\t\tif data.sc:getCode() == best:getCode() then\n\t\t\trequire(\"Module:debug\").track(\"headword/sc/redundant\")\n\t\t\trequire(\"Module:debug\").track(\"headword/sc/redundant/\" .. data.sc:getCode())\n\
      \t\telse\n\t\t\trequire(\"Module:debug\").track(\"headword/sc/needed\")\n\t\t\trequire(\"Module:debug\").track(\"headword/sc/needed/\" .. data.sc:getCode())\n\t\tend\n\tend\n\t\n\tlocal displayTitle\n\t-- Assumes that the scripts in \"toBeTagged\" will\
      \ never occur in the Reconstruction namespace.\n\tif namespace == \"\" and data.sc and toBeTagged[data.sc:getCode()] or\n\t\t\tdata.sc:getCode() == \"Jpan\" and (test_script(pagename, \"Hira\") or test_script(pagename, \"Kana\")) then\n\t\tdisplayTitle\
      \ = '&lt;span class=\"' .. data.sc:getCode() .. '\"&gt;' .. pagename .. '&lt;/span&gt;'\n\telseif namespace == \"Reconstruction\" then\n\t\tdisplayTitle, matched = mw.ustring.gsub(\n\t\t\tfullPagename,\n\t\t\t\"^(Reconstruction:[^/]+/)(.+)$\",\n\t\t\t\
      function(before, term)\n\t\t\t\treturn before ..\n\t\t\t\t\trequire(\"Module:script utilities\").tag_text(\n\t\t\t\t\t\tterm,\n\t\t\t\t\t\tdata.lang,\n\t\t\t\t\t\tdata.sc\n\t\t\t\t\t)\n\t\t\tend\n\t\t)\n\t\t\n\t\tif matched == 0 then\n\t\t\tdisplayTitle\
      \ = nil\n\t\tend\n\tend\n\t\n\tif displayTitle then\n\t\tlocal frame = mw.getCurrentFrame()\n\t\tframe:callParserFunction(\n\t\t\t\"DISPLAYTITLE\",\n\t\t\tdisplayTitle\n\t\t)\n\tend\n\t\n\tif data.force_cat_output then\n\t\t--[=[\n\t\t[[Special:WhatLinksHere/Template:tracking/headword/force\
      \ cat output]]\n\t\t]=]\n\t\trequire(\"Module:debug\").track(\"headword/force cat output\")\n\tend\n\t\n\tif data.getCanonicalName then\n\t\terror('The \"data\" variable supplied to \"full_headword\" should not be a language object.')\n\tend\n\t\t\n\t\
      -- Were any categories specified?\n\tif data.categories and #data.categories &gt; 0 then\n\t\tlocal lang_name = require(\"Module:string\").pattern_escape(data.lang:getCanonicalName())\n\t\tfor _, cat in ipairs(data.categories) do\n\t\t\t-- Does the category\
      \ begin with the language name? If not, tag it with a tracking category.\n\t\t\tif not mw.ustring.find(cat, \"^\" .. lang_name) then\n\t\t\t\tmw.log(cat, data.lang:getCanonicalName())\n\t\t\t\ttable.insert(tracking_categories, \"head tracking/no lang category\"\
      )\n\t\t\t\t\n\t\t\t\t--[=[\n\t\t\t\t[[Special:WhatLinksHere/Template:tracking/head tracking/no lang category]]\n\t\t\t\t]=]\n\t\t\t\trequire(\"Module:debug\").track{\n\t\t\t\t\t\"headword/no lang category\",\n\t\t\t\t\t\"headword/no lang category/lang/\"\
      \ .. data.lang:getCode()\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\t\t\n\t\tif not data.pos_category\n\t\t\tand mw.ustring.find(data.categories[1], \"^\" .. data.lang:getCanonicalName())\n\t\t\t\tthen\n\t\t\tdata.pos_category = mw.ustring.gsub(data.categories[1],\
      \ \"^\" .. data.lang:getCanonicalName() .. \" \", \"\")\n\t\t\ttable.remove(data.categories, 1)\n\t\tend\n\tend\n\t\n\tif not data.pos_category then\n\t\terror(\n\t\t\t'No valid part-of-speech categories were found in the list '\n\t\t\t.. 'of categories\
      \ passed to the function \"full_headword\". '\n\t\t\t.. 'The part-of-speech category should consist of a language\\'s '\n\t\t\t.. 'canonical name plus a part of speech.'\n\t\t\t)\n\tend\n\t\n\t-- Categorise for unusual characters\n\tlocal standard = data.lang:getStandardCharacters()\n\
      \t\n\tif standard then\n\t\tif mw.ustring.len(title.subpageText) ~= 1 and not mw.ustring.match(title.text, \"^Unsupported titles/\") then\n\t\t\tfor character in mw.ustring.gmatch(title.subpageText, \"([^\" .. standard .. \"])\") do\n\t\t\t\tlocal upper\
      \ = mw.ustring.upper(character)\n\t\t\t\tif not mw.ustring.find(upper, \"[\" .. standard .. \"]\") then\n\t\t\t\t\tcharacter = upper\n\t\t\t\tend\n\t\t\t\ttable.insert(\n\t\t\t\t\tdata.categories,\n\t\t\t\t\tdata.lang:getCanonicalName() .. \" terms spelled\
      \ with \" .. character\n\t\t\t\t)\n\t\t\tend\n\t\tend\n\tend\n\t\n\t-- Categorise for palindromes\n\tif title.nsText ~= \"Reconstruction\"\n\t\tand require('Module:palindromes').is_palindrome(\n\t\t\ttitle.subpageText, data.lang, data.sc\n\t\t\t) then\n\
      \t\ttable.insert(data.categories, data.lang:getCanonicalName() .. \" palindromes\")\n\tend\n\t\n\treturn\n\t\tshow_headword_line(data) ..\n\t\trequire(\"Module:utilities\").format_categories(\n\t\t\tdata.categories, data.lang, data.sort_key, nil, data.force_cat_output,\
      \ data.sc\n\t\t\t) ..\n\t\trequire(\"Module:utilities\").format_categories(\n\t\t\ttracking_categories, data.lang, data.sort_key, nil, data.force_cat_output, data.sc\n\t\t\t)\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T12:52:58.792Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Aheadword%2Fdata&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=38732 t=1556369578685963
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:58 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1339.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1075 pass, cp3032 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 315933405, 504303409, 458623300
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"6074448\" pageid=\"6074448\" ns=\"828\" title=\"Module:headword/data\"><revisions><rev user=\"Surjection\" timestamp=\"2019-01-11T21:27:17Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"they are not lemmas just because you say they are\" xml:space=\"preserve\">local data = {}\n\ndata.invariable = {\n\t\"cmavo\",\n\t\"cmene\",\n\t\"fu'ivla\",\n\t\"gismu\",\n\t\"Han tu\"\
      ,\n\t\"hanzi\",\n\t\"hanja\",\n\t\"jyutping\",\n\t\"kanji\",\n\t\"lujvo\",\n\t\"phrasebook\",\n\t\"pinyin\",\n\t\"rafsi\",\n\t\"romaji\",\n}\n\ndata.lemmas = {\n\t\"abbreviations\",\n\t\"acronyms\",\n\t\"adjectives\",\n\t\"adnominals\",\n\t\"adpositions\"\
      ,\n\t\"adverbs\",\n\t\"affixes\",\n\t\"ambipositions\",\n\t\"articles\",\n\t\"circumfixes\",\n\t\"circumpositions\",\n\t\"classifiers\",\n\t\"cmavo\",\n\t\"cmavo clusters\",\n\t\"cmene\",\n\t\"combining forms\",\n\t\"conjunctions\",\n\t\"counters\",\n\t\
      \"determiners\",\n\t\"diacritical marks\",\n\t\"equative adjectives\",\n\t\"fu'ivla\",\n\t\"gismu\",\n\t\"Han characters\",\n\t\"Han tu\",\n\t\"hanzi\",\n\t\"hanja\",\n\t\"idioms\",\n\t\"infixes\",\n\t\"interfixes\",\n\t\"initialisms\",\n\t\"interjections\"\
      ,\n\t\"kanji\",\n\t\"letters\",\n\t\"ligatures\",\n\t\"lujvo\",\n\t\"morphemes\",\n\t\"non-constituents\",\n\t\"nouns\",\n\t\"numbers\",\n\t\"numeral symbols\",\n\t\"numerals\",\n\t\"particles\",\n\t\"phrases\",\n\t\"postpositions\",\n\t\"predicatives\"\
      ,\n\t\"prefixes\",\n\t\"prepositions\",\n\t\"prepositional phrases\",\n\t\"preverbs\",\n\t\"pronominal adverbs\",\n\t\"pronouns\",\n\t\"proverbs\",\n\t\"proper nouns\",\n\t\"punctuation marks\",\n\t\"relatives\",\n\t\"roots\",\n\t\"stems\",\n\t\"suffixes\"\
      ,\n\t\"syllables\",\n\t\"symbols\",\n\t\"verbs\",\n}\n\ndata.nonlemmas = {\n\t\"active participles\",\n\t\"adjectival participles\",\n\t\"adjective forms\",\n\t\"adjective comparative forms\", -- TODO: replace with \"comparative adjectives\" or \"comparative\
      \ adjective forms\", depending on which one the word is\n\t\"adjective feminine forms\",\n\t\"adjective equative forms\",\n\t\"adjective plural forms\",\n\t\"adjective superlative forms\", -- TODO: replace with \"superlative adjectives\" or \"superlative\
      \ adjective forms\", depending on which one the word is\n\t\"adverb forms\",\n\t\"adverb comparative forms\", -- TODO: replace with \"comparative adverbs\" or \"comparative adverb forms\", depending on which one the word is\n\t\"adverb superlative forms\"\
      , -- TODO: replace with \"superlative adverbs\" or \"superlative adverb forms\", depending on which one the word is\n\t\"adverbial participles\",\n\t\"agent participles\",\n\t\"article forms\",\n\t\"circumfix forms\",\n\t\"combined forms\",\n\t\"comparative\
      \ adjective forms\",\n\t\"comparative adjectives\",\n\t\"comparative adverb forms\",\n\t\"comparative adverbs\",\n\t\"contractions\",\n\t\"converbs\",\n\t\"determiner comparative forms\",\n\t\"determiner forms\",\n\t\"determiner superlative forms\",\n\t\
      \"diminutive nouns\",\n\t\"future participles\",\n\t\"gerunds\",\n\t\"infinitive forms\",\n\t\"infinitives\",\n\t\"interjection forms\",\n\t\"jyutping\",\n\t\"kanji readings\",\n\t\"misspellings\",\n\t\"negative participles\",\n\t\"nominal participles\"\
      ,\n\t\"noun case forms\",\n\t\"noun dual forms\",\n\t\"noun forms\",\n\t\"noun plural forms\",\n\t\"noun possessive forms\",\n\t\"noun singulative forms\",\n\t\"numeral forms\",\n\t\"participles\",\n\t\"participle forms\",\n\t\"particle forms\",\n\t\"\
      passive participles\",\n\t\"past active participles\",\n\t\"past participles\",\n\t\"past participle forms\",\n\t\"past passive participles\",\n\t\"perfect active participles\",\n\t\"perfect participles\",\n\t\"perfect passive participles\",\n\t\"pinyin\"\
      ,\n\t\"plurals\",\n\t\"postposition forms\",\n\t\"prefix forms\",\n\t\"preposition contractions\",\n\t\"preposition forms\",\n\t\"prepositional pronouns\",\n\t\"present active participles\",\n\t\"present participles\",\n\t\"present passive participles\"\
      ,\n\t\"pronoun forms\",\n\t\"pronoun possessive forms\",\n\t\"proper noun forms\",\n\t\"proper noun plural forms\",\n\t\"rafsi\",\n\t\"romanizations\",\n        \"root forms\",\n\t\"singulatives\",\n\t\"suffix forms\",\n\t\"superlative adjective forms\"\
      ,\n\t\"superlative adjectives\",\n\t\"superlative adverb forms\",\n\t\"superlative adverbs\",\n\t\"verb forms\",\n\t\"verbal nouns\",\n}\n\ndata.notranslit = {\n\t\"ams\",\n\t\"az\",\n\t\"bbc\",\n\t\"bug\",\n\t\"cia\",\n\t\"cjm\",\n\t\"cmn\",\n\t\"hak\"\
      ,\n\t\"ja\",\n\t\"kzg\",\n\t\"lad\",\n\t\"lzh\",\n\t\"ms\",\n\t\"mul\",\n\t\"mvi\",\n\t\"nan\",\n\t\"oj\",\n\t\"okn\",\n\t\"pi\",\n\t\"ro\",\n\t\"ryn\",\n\t\"rys\",\n\t\"ryu\",\n\t\"sh\",\n\t\"tgt\",\n\t\"th\",\n\t\"tkn\",\n\t\"tly\",\n\t\"und\",\n\t\"\
      vi\",\n\t\"xug\",\n\t\"yue\",\n\t\"yoi\",\n\t\"yox\",\n\t\"za\",\n\t\"zh\",\n}\n\n-- Script codes for which a script-tagged display title will be added.\t\ndata.toBeTagged = {\n\t\"Ahom\",\n\t\"Arab\",\n\t\"Avst\",\n\t\"Bali\",\n\t\"Cham\",\n\t\"Copt\"\
      ,\n\t\"Kali\",\n\t\"Hani\",\n\t\"Hebr\",\n\t\"Lana\",\n\t\"Linb\",\n\t\"Mand\",\n\t\"Mong\",\n\t\"polytonic\",\n\t\"Rjng\",\n\t\"Samr\",\n\t\"Sund\",\n\t\"Sylo\",\n\t\"Tang\",\n\t\"Tavt\",\n\t\"Xsux\",\n}\n\nfor key, list in pairs(data) do\n\tdata[key]\
      \ = require(\"Module:utils\").list_to_set(list)\nend\n\nreturn data</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T12:52:58.981Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Autils&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=44333 t=1556369578870416
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:58 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1231.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1077 pass, cp3042 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 431809039, 102094033, 458590578
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"4882600\" pageid=\"4882600\" ns=\"828\" title=\"Module:utils\"><revisions><rev user=\"Metaknowledge\" timestamp=\"2017-09-23T01:00:56Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"Protected &quot;[[Module:utils]]&quot;: Highly visible template/module ([Edit=Allow only autoconfirmed users] (indefinite) [Move=Allow only autoconfirmed users] (indefinite))\" xml:space=\"\
      preserve\">--[=[\n  Module:utils v0.3.1\n  Date: 2015-08-14\n\n  This module contains some common useful functions.\n  Fill free to add another universal functions here.\n]=]--\n\nlocal export = {}\n\n-- Function to clone table (sometimes it works better\
      \ then mw.clone)\nfunction export.clone(original)\n    local copy = {}\n    for key, value in pairs(original) do\n        copy[key] = value\n    end\n    return copy\nend\n\n-- Function to get current PAGENAME and related\nfunction export.get_base()\n\t\
      local PAGENAME = mw.title.getCurrentTitle().text\n\tlocal SUBPAGENAME = mw.title.getCurrentTitle().subpageText\n\tlocal NAMESPACE = mw.title.getCurrentTitle().nsText\n\t\n\tif NAMESPACE == 'User' or NAMESPACE == 'Участник' then\n\t\treturn SUBPAGENAME\n\
      \tend\n\treturn PAGENAME\nend\n\n-- Function to iterate table with sorted keys (sorting function can be different)\nfunction export.spairs(t, order)\n    -- collect the keys\n    local keys = {}\n    for k in pairs(t) do keys[#keys+1] = k end\n    -- sort\n\
      \    if order then\n        table.sort(keys, function(a,b) return order(t, a, b) end)\n    else\n        table.sort(keys)\n    end\n    -- return the iterator function\n    local i = 0\n    return function()\n        i = i + 1\n        if keys[i] then\n\
      \            return keys[i], t[keys[i]]\n        end\n    end\nend\n\n-- Functions to measure working time of scripts (start)\nfunction export.start()\n\texport.started = os.clock()\nend\n\n-- Functions to measure working time of scripts (stop)\nfunction\
      \ export.stop(desc)\n\texport.stoped = os.clock()\n\texport.delta = export.stoped - export.started\n\tif desc == nil then\n\t\tdesc = 'time delta'\n\tend\n\tmw.log('™ ' .. desc .. ' = ' .. export.delta)\nend\n\n-- Function to find common part (length)\
      \ of two strings\n-- (common part from the beginning of strings)\nfunction export.find_common(str_1, str_2)\n\tif not str_1 or not str_2 then\n\t\treturn 1\n\tend\n\tfor pos = 1, #str_1 do\n\t    local char_1 = str_1:sub(pos, pos)\n\t    local char_2 =\
      \ str_2:sub(pos, pos)\n\t    if char_1 ~= char_2 then\n\t    \treturn pos\n\t    end\n\tend\n\treturn 1\nend\n\n-- Function that allows easily add values into dict of dicts of lists\n-- Example of this structure:\n--   dict = {\n--     key1 = {\n--   \
      \    sub_key1 = {value1, value2, value3},\n--       sub_key2 = {value4, value5},\n--     },\n--     key2 = {\n--       sub_key3 = {value6},\n--       sub_key4 = {value7, value8},\n--     },\n--   }\nfunction export.put_value(dict, key, sub_key, value)\n\
      \tif not dict[key] then\n\t\tdict[key] = {}\n\tend\n\tif not dict[key][sub_key] then\n\t\tdict[key][sub_key] = {}\n\tend\n\ttable.insert(dict[key][sub_key], value)\nend\n\n-- Compare two items, recursively comparing lists.\n-- FIXME, doesn't work for tables\
      \ that aren't lists.\nfunction export.equals(x, y)\n    if type(x) == \"table\" and type(y) == \"table\" then\n        if #x ~= #y then\n            return false\n        end \n        for key, value in ipairs(x) do\n            if not export.equals(value,\
      \ y[key]) then\n                return false\n            end\n        end\n        return true\n    end\n    return x == y\nend\n\n-- true if list contains item\nfunction export.contains(tab, item)\n    for _, value in pairs(tab) do\n        if export.equals(value,\
      \ item) then\n            return true\n        end\n    end\n    return false\nend\n\n-- append to list if element not already present\nfunction export.insert_if_not(tab, item)\n    if not export.contains(tab, item) then\n        table.insert(tab, item)\n\
      \    end\nend\n\n-- convert list to set\nfunction export.list_to_set(list)\n\tlocal set = {}\n\tfor _, item in ipairs(list) do\n\t\tset[item] = true\n\tend\n\treturn set\nend\n\n-- Inhibit Regular Expression magic characters ^$()%.[]*+-?)\nfunction export.escape(value)\n\
      \    -- Prefix every non-alphanumeric character (%W) with a % escape character, \n    -- where %% is the % escape, and %1 is original character\n    return mw.ustring.gsub(value, \"(%W)\",\"%%%1\")\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T12:52:59.172Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Apalindromes&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=45283 t=1556369579062848
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:59 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1279.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1089 pass, cp3033 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 156756725, 105350380, 454926405
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"5783859\" pageid=\"5783859\" ns=\"828\" title=\"Module:palindromes\"><revisions><rev user=\"TheDaveRoss\" timestamp=\"2016-10-25T20:04:19Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"Changed protection level for &quot;[[Module:palindromes]]&quot;: Adjusting the protection level from &#039;sysop&#039; to &#039;template editor&#039;. ([Edit=Allow only template editors\
      \ and administrators] (indefinite) [Move=Allow only template editors and administrators] (indefini...\" xml:space=\"preserve\">local export = {}\n\nlocal data = mw.loadData(\"Module:palindromes/data\")\n\nlocal function ignoreCharacters(term, lang, sc,\
      \ langdata)\n\tterm = mw.ustring.lower(term)\n\tterm = mw.ustring.gsub(term, \"[ ,%.%?!%%%-'\\\"]\", \"\")\n\t\n\t-- Language-specific substitutions\n\n\t-- Ignore entire scripts (e.g. romaji in Japanese)\n\tif langdata.ignore then\n\t\tsc_name = sc and\
      \ sc:getCode() or require(\"Module:scripts\").findBestScript(term, lang):getCode()\n\t\tfor _, script in ipairs(langdata.ignore) do\n\t\t\tif script == sc_name then\n\t\t\t\treturn \"\"\n\t\t\tend\n\t\tend\n\tend\n\t\n\tfor i, from in ipairs(langdata.from\
      \ or {}) do\n\t\tterm = mw.ustring.gsub(term, from, langdata.to[i] or \"\")\n\tend\n\t\n\treturn term\nend\n\nfunction export.is_palindrome(term, lang, sc)\n\tlocal langdata = data[lang:getCode()] or {}\n\n\t-- Affixes aren't palindromes\n\tif mw.ustring.find(term,\
      \ \"^%-\") or mw.ustring.find(term, \"%-$\") then\n\t\treturn false\n\tend\n\t\n\t-- Remove punctuation and casing\n\tterm = ignoreCharacters(term, lang, sc, langdata)\n\tlocal len = mw.ustring.len(term)\n\t\n\tif langdata.allow_repeated_char then\n\t\t\
      -- Ignore single-character terms\n\t\tif len &lt; 2 then\n\t\t\treturn false\n\t\tend\n\telse\n\t\t-- Ignore terms that consist of just one character repeated\n\t\t-- This also excludes terms consisting of fewer than 3 characters\n\t\tif term == mw.ustring.rep(mw.ustring.sub(term,\
      \ 1, 1), len) then\n\t\t\treturn false\n\t\tend\n\tend\n\t\n\tlocal charlist = {}\n\t\n\tfor c in mw.ustring.gmatch(term, \".\") do\n\t\ttable.insert(charlist, c)\n\tend\n\t\n\tfor i = 1, math.floor(len / 2) do\n        if charlist[i] ~= charlist[len -\
      \ i + 1] then\n        \treturn false\n        end\n    end\n    \n    return true\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T12:52:59.358Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Apalindromes%2Fdata&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=39446 t=1556369579250618
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:59 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1339.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1075 pass, cp3033 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 310396921, 89745690, 440002607
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"5786862\" pageid=\"5786862\" ns=\"828\" title=\"Module:palindromes/data\"><revisions><rev user=\"PiefPafPier\" timestamp=\"2018-08-08T16:43:32Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"from [[:fy:Module:palindromes/data]]\" xml:space=\"preserve\">local u = mw.ustring.char\n\nlocal data = {\n\t[\"ar\"] = {\n\t\tallow_repeated_char = true,\n\t\tfrom = {\n\t\t\t\"[أإآ]\"\
      ,\n\t\t\t\"ؤ\",\n\t\t\t\"[ئى]\",\n\t\t\t\"ة\",\n\t\t\t\"ء\",\n\t\t},\n\t\tto = {\n\t\t\t\"ا\",\n\t\t\t\"و\",\n\t\t\t\"ي\",\n\t\t\t\"ه\",\n\t\t},\n\t},\n\t[\"arc\"] = {\n\t\tallow_repeated_char = true,\n\t\tfrom = {\n\t\t\t\"ם\",\n\t\t\t\"ן\",\n\t\t\t\"\
      ך\",\n\t\t\t\"ף\",\n\t\t\t\"ץ\",\n\t\t\t\"ﭏ\",\n\t\t\t\"װ\",\n\t\t\t\"ױ\",\n\t\t\t\"ײ\",\n\t\t\t\"[״׳־]\",\n\t\t},\n\t\tto = {\n\t\t\t\"מ\",\n\t\t\t\"נ\",\n\t\t\t\"כ\", \n\t\t\t\"פ\",\n\t\t\t\"צ\",\n\t\t\t\"אל\",\n\t\t\t\"וו\",\n\t\t\t\"וי\",\n\t\t\t\"\
      יי\",\n\t\t}\n\t},\n\t[\"axm\"] = {\n\t\tfrom = {\"ու\"},\n\t\tto   = {\"ŭ\"},\n\t},\n\t[\"ca\"] = {\n\t\tfrom = {\"à\", \"[èé]\", \"[íï]\", \"[òó]\", \"[úü]\", \"ç\", \"l·l\"},\n\t\tto   = {\"a\", \"e\",    \"i\",    \"o\",    \"u\",    \"c\", \"ll\"\
      },\n\t},\n\t[\"cmn\"] = {ignore = {\"Latn\"}},\n\t[\"cs\"] = {\n\t\tfrom = {\"á\", \"é\", \"í\", \"ó\", \"[úů]\", \"ý\", \"ch\"},\n\t\tto   = {\"a\", \"e\", \"i\", \"o\", \"u\",    \"y\", \"χ\"},\n\t},\n\t[\"de\"] = {\n\t\tfrom = {\"ä\", \"ö\", \"ü\",\
      \ \"[ßẞ]\"},\n\t\tto   = {\"a\", \"o\", \"u\", \"ss\"},\n\t},\n\t[\"el\"] = {\n\t\tfrom = {\n\t\t\t\"[ᾳάᾴὰᾲᾶᾷἀᾀἄᾄἂᾂἆᾆἁᾁἅᾅἃᾃἇᾇᾱᾰἈᾈἌᾌἊᾊἎᾎἉᾉἍᾍἋᾋἏᾏᾹᾸ]\", --uppercase characters are included due to this bug: https://bugs.php.net/bug.php?id=69267\n\t\t\t\"[έ\
      ὲἐἔἒἑἕἓἘἜἚἙἝἛ]\",\n\t\t\t\"[ῃήῄὴῂῆῇἠᾐἤᾔἢᾒἦᾖἡᾑἥᾕἣᾓἧᾗἨᾘἬᾜἪᾚἮᾞἩᾙἭᾝἫᾛἯᾟ]\",\n\t\t\t\"[ίὶῖἰἴἲἶἱἵἳἷϊΐῒῗῑῐἸἼἺἾἹἽἻἿῙῘ]\", \n\t\t\t\"[όὸὀὄὂὁὅὃὈὌὊὉὍὋ]\",\n\t\t\t\"[ύὺῦὐὔὒὖὑὕὓὗϋΰῢῧῡῠὙὝὛὟῩῨ]\",\n\t\t\t\"[ῳώῴὼῲῶῷὠᾠὤᾤὢᾢὦᾦὡᾡὥᾥὣᾣὧᾧὨᾨὬᾬὪᾪὮᾮὩᾩὭᾭὫᾫὯᾯ]\",\n\t\t\t\"[ῥῤῬ]\"\
      ,\n\t\t\t\"[ς]\",\n\t\t\t\"[́͂]\"\n\t\t},\n\t\tto = {\n\t\t\t\"α\",\n\t\t\t\"ε\",\n\t\t\t\"η\",\n\t\t\t\"ι\",\n\t\t\t\"ο\",\n\t\t\t\"υ\",\n\t\t\t\"ω\",\n\t\t\t\"ρ\",\n\t\t\t\"σ\"\n\t\t},\n\t},\n\t[\"en\"] = {\n\t\tfrom = {\"[äàáâåā]\", \"[ëèéêē]\", \"\
      [ïìíîī]\", \"[öòóôō]\", \"[üùúûū]\", \"æ\" , \"œ\" , \"[çč]\", \"ñ\", \"'\"},\n\t\tto   = {\"a\",        \"e\",       \"i\",       \"o\",       \"u\",       \"ae\", \"oe\", \"c\",    \"n\"},\n\t},\n\t[\"fr\"] = {\n\t\tfrom = {\"[áàâä]\", \"[éèêë]\", \"\
      [íìîï]\", \"[óòôö]\", \"[úùûü]\", \"[ýỳŷÿ]\", \"ç\", \"æ\",  \"œ\", \"'\"},\n\t\tto   = {\"a\",       \"e\",     \"i\",      \"o\",      \"u\",      \"y\",      \"c\", \"ae\", \"oe\"},\n\t},\n\t[\"fy\"] = {\n\t\tfrom = {\"[áàâä]\", \"[éèêë]\", \"[íìîï\
      ]\", \"[óòôö]\", \"[úùûü]\", \"[ýỳŷÿ]\", \"æ\",  \"'\"},\n\t\tto   = {\"a\",       \"e\",     \"i\",      \"o\",      \"u\",      \"y\",      \"ae\"},\n\t},\n\t[\"grc\"] = {\n\t\tfrom = {\n\t\t\t\"[ᾳάᾴὰᾲᾶᾷἀᾀἄᾄἂᾂἆᾆἁᾁἅᾅἃᾃἇᾇᾱᾰἈᾈἌᾌἊᾊἎᾎἉᾉἍᾍἋᾋἏᾏᾹᾸ]\", --uppercase\
      \ characters are included due to this bug: https://bugs.php.net/bug.php?id=69267\n\t\t\t\"[έὲἐἔἒἑἕἓἘἜἚἙἝἛ]\",\n\t\t\t\"[ῃήῄὴῂῆῇἠᾐἤᾔἢᾒἦᾖἡᾑἥᾕἣᾓἧᾗἨᾘἬᾜἪᾚἮᾞἩᾙἭᾝἫᾛἯᾟ]\",\n\t\t\t\"[ίὶῖἰἴἲἶἱἵἳἷϊΐῒῗῑῐἸἼἺἾἹἽἻἿῙῘ]\", \n\t\t\t\"[όὸὀὄὂὁὅὃὈὌὊὉὍὋ]\",\n\t\t\t\"[ύὺῦὐὔὒ\
      ὖὑὕὓὗϋΰῢῧῡῠὙὝὛὟῩῨ]\",\n\t\t\t\"[ῳώῴὼῲῶῷὠᾠὤᾤὢᾢὦᾦὡᾡὥᾥὣᾣὧᾧὨᾨὬᾬὪᾪὮᾮὩᾩὭᾭὫᾫὯᾯ]\",\n\t\t\t\"[ῥῤῬ]\",\n\t\t\t\"[ς]\",\n\t\t\t\"[́͂]\"\n\t\t},\n\t\tto = {\n\t\t\t\"α\",\n\t\t\t\"ε\",\n\t\t\t\"η\",\n\t\t\t\"ι\",\n\t\t\t\"ο\",\n\t\t\t\"υ\",\n\t\t\t\"ω\",\n\t\t\t\"\
      ρ\",\n\t\t\t\"σ\"\n\t\t}\n\t},\n\t[\"he\"] = {\n\t\tallow_repeated_char = true,\n\t\tfrom = {\n\t\t\t\"ם\",\n\t\t\t\"ן\",\n\t\t\t\"ך\",\n\t\t\t\"ף\",\n\t\t\t\"ץ\",\n\t\t\t\"ﭏ\",\n\t\t\t\"װ\",\n\t\t\t\"ױ\",\n\t\t\t\"ײ\",\n\t\t\t\"[״׳־]\",\n\t\t},\n\t\t\
      to = {\n\t\t\t\"מ\",\n\t\t\t\"נ\",\n\t\t\t\"כ\", \n\t\t\t\"פ\",\n\t\t\t\"צ\",\n\t\t\t\"אל\",\n\t\t\t\"וו\",\n\t\t\t\"וי\",\n\t\t\t\"יי\",\n\t\t}\n\t},\n\t[\"hu\"] = {\n\t\tfrom = {\"á\", \"é\", \"í\", \"ó\", \"ú\", \"ő\", \"ű\", \"cs\", \"dz\", \"gy\"\
      , \"ly\", \"ny\", \"sz\", \"ty\", \"zs\", \"dzs\"},\n\t\tto   = {\"a\", \"e\", \"i\", \"o\", \"u\", \"ö\", \"ü\", \"č\",  \"ď\",  \"ǰ\",  \"ľ\",  \"ň\",  \"š\",  \"ť\",  \"ž\",  \"ǯ\"},\n\t},\n\t[\"hy\"] = {\n\t\tfrom = {\"ու\", \"եւ\"},\n\t\tto   = {\"\
      ŭ\",  \"և\"},\n\t},\n\t[\"ja\"] = {\n\t\tallow_repeated_char = true,\n\t\tfrom = {'が', 'ぎ', 'ぐ', 'げ', 'ご', 'ざ', 'じ', 'ず', 'ぜ', 'ぞ', 'だ', 'ぢ', 'づ', 'で', 'ど', 'ば', 'び', 'ぶ', 'べ', 'ぼ', 'ぱ', 'ぴ', 'ぷ', 'ぺ', 'ぽ', 'ゔ'},\n\t\tto   = {'か', 'き', 'く', 'け', 'こ', 'さ\
      ', 'し', 'す', 'せ', 'そ', 'た', 'ち', 'つ', 'て', 'と', 'は', 'ひ', 'ふ', 'へ', 'ほ', 'は', 'ひ', 'ふ', 'へ', 'ほ', 'う'},\n\t\tignore = {\"Latn\"},\n\t},\n\t[\"la\"] = {\n\t\tfrom = {\"v\", \"j\"},\n\t\tto   = {\"u\", \"i\"}\n\t},\n\t[\"nl\"] = {\n\t\tfrom = {\"[áàä]\"\
      , \"[éèë]\", \"[íìï]\", \"[óòö]\", \"[úùü]\"},\n\t\tto   = {\"a\",     \"e\",     \"i\",     \"o\",     \"u\"},\n\t},\n\t[\"pl\"] = {\n\t\tfrom = {\"ć\", \"ę\", \"ł\", \"ń\", \"ó\", \"ś\", \"[źż]\"},\n\t\tto   = {\"c\", \"e\", \"l\", \"n\", \"o\", \"s\"\
      , \"z\"},\n\t},\n\t[\"ru\"] = {\n\t\tfrom = {\"ё\"},\n\t\tto   = {\"е\"},\n\t},\n\t[\"xcl\"] = {\n\t\tfrom = {\"ու\"},\n\t\tto   = {\"ŭ\"},\n\t},\n\t[\"yi\"] = {\n\t\tallow_repeated_char = true,\n\t\tfrom = {\n\t\t\t\"ם\",\n\t\t\t\"ן\",\n\t\t\t\"ך\",\n\
      \t\t\t\"ף\",\n\t\t\t\"ץ\",\n\t\t\t\"ﭏ\",\n\t\t\t\"װ\",\n\t\t\t\"ױ\",\n\t\t\t\"ײ\",\n\t\t\t\"[״׳־]\",\n\t\t\t\"[ִַָּֿׁׂ]\",\n\t\t},\n\t\tto = {\n\t\t\t\"מ\",\n\t\t\t\"נ\",\n\t\t\t\"כ\", \n\t\t\t\"פ\",\n\t\t\t\"צ\",\n\t\t\t\"אל\",\n\t\t\t\"וו\",\n\t\t\t\"\
      וי\",\n\t\t\t\"יי\",\n\t\t}\n\t},\n\t[\"zh\"] = {\n\t\tignore = {\"Latn\"},\n\t},\n}\n\nreturn data</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T12:52:59.549Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Template%3Atracking%2Flinks%2Fsc&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=39693 t=1556369579443661
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Length: '151'
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:59 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1286.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1077 pass, cp3040 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 433936839, 344041251, 453258974
    body: <?xml version="1.0"?><api batchcomplete=""><query><pages><page _idx="-1" ns="10" title="Template:tracking/links/sc" missing="" /></pages></query></api>
- recorded: 2019-04-27T12:52:59.710Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Template%3Atracking%2Flinks%2Fsc%2Fredundant&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=27971 t=1556369579619850
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Length: '161'
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:59 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1231.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1079 pass, cp3032 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 444401860, 485805807, 450866085
    body: <?xml version="1.0"?><api batchcomplete=""><query><pages><page _idx="-1" ns="10" title="Template:tracking/links/sc/redundant" missing="" /></pages></query></api>
- recorded: 2019-04-27T12:52:59.888Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Template%3Atracking%2Flinks%2Fsc%2Fredundant%2FLatn&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=45533 t=1556369579778641
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:52:59 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1342.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1081 pass, cp3041 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 349939606, 314508680, 447115796
    body: <?xml version="1.0"?><api batchcomplete=""><query><pages><page _idx="-1" ns="10" title="Template:tracking/links/sc/redundant/Latn" missing="" /></pages></query></api>
- recorded: 2019-04-27T12:53:00.097Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Template%3Aux&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=50485 t=1556369579982299
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:53:00 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1343.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1083 pass, cp3030 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 661824182, 153323233, 450079946
    body: '<?xml version="1.0"?><api batchcomplete=""><warnings><main xml:space="preserve">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations and
      breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space="preserve">Because "rvslots" was not specified, a legacy format has been used for the output. This format is deprecated,
      and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx="4298923" pageid="4298923" ns="10" title="Template:ux"><revisions><rev user="TheDaveRoss" timestamp="2016-10-25T20:02:57Z" contentformat="text/x-wiki"
      contentmodel="wikitext" comment="Changed protection level for &quot;[[Template:ux]]&quot;: Adjusting the protection level from &#039;sysop&#039; to &#039;template editor&#039;. ([Edit=Allow only template editors and administrators] (indefinite) [Move=Allow
      only template editors and administrators] (indefinite))" xml:space="preserve">{{#invoke:usex/templates|usex_t}}&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</rev></revisions></page></pages></query></api>'
- recorded: 2019-04-27T12:53:00.296Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Ausex%2Ftemplates&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=40395 t=1556369580189852
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:53:00 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1280.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1081 pass, cp3042 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 353896255, 112887611, 450512007
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"5195799\" pageid=\"5195799\" ns=\"828\" title=\"Module:usex/templates\"><revisions><rev user=\"Rua\" timestamp=\"2019-03-10T19:48:41Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"Indentation\" xml:space=\"preserve\">local export = {}\n\nlocal m_languages = require(\"Module:languages\")\nlocal rsplit = mw.text.split\nlocal rfind = mw.ustring.find\n\nfunction export.usex_t(frame)\n\
      \tlocal params = {\n\t\t[1] = {required = true},\n\t\t[2] = {},\n\t\t[3] = {},\n\t\t\n\t\t[\"inline\"] = {type = \"boolean\"},\n\t\t[\"noenum\"] = {type = \"boolean\"},\n\t\t[\"ref\"] = {},\n\t\t[\"lit\"] = {},\n\t\t[\"q\"] = {list = true},\n\t\t[\"sc\"\
      ] = {},\n\t\t[\"source\"] = {},\n\t\t[\"footer\"] = {},\n\t\t[\"subst\"] = {},\n\t\t[\"t\"] = {alias_of = 3},\n\t\t[\"translation\"] = {alias_of = 3},\n\t\t[\"tr\"] = {},\n\t\t[\"transliteration\"] = {alias_of = \"tr\"},\n\t\t[\"nocat\"] = {type = \"boolean\"\
      },\n\t\t[\"brackets\"] = {type = \"boolean\"},\n\t}\n\t\n\tlocal quote = (frame.args[\"quote\"] or \"\") ~= \"\"\n\tlocal compat = (frame.args[\"compat\"] or \"\") ~= \"\"\n\tlocal template_inline = (frame.args[\"inline\"] or \"\") ~= \"\"\n\t\n\tif compat\
      \ then\n\t\tparams[\"lang\"] = {required = true}\n\t\tparams[\"t\"].alias_of = 2\n\t\tparams[\"translation\"].alias_of = 2\n\t\ttable.remove(params, 1)\n\tend\n\t\n\tlocal args = require(\"Module:parameters\").process(frame:getParent().args, params)\n\t\
      \n\tlocal lang = args[compat and \"lang\" or 1] or \"und\"\n\tlocal sc = args[\"sc\"]\n\t\n\tlang = m_languages.getByCode(lang) or m_languages.err(lang, ( compat and \"lang\" ) or 1)\n\tsc = (sc and (require(\"Module:scripts\").getByCode(sc) or error(\"\
      The script code \\\"\" .. sc .. \"\\\" is not valid.\")) or nil)\n\t\n\tlocal usex = args[compat and 1 or 2]\n\tlocal translation = args[compat and 2 or 3]\n\tlocal transliteration = args[\"tr\"]\n\tlocal noenum = args[\"noenum\"]\n\tlocal inline = args[\"\
      inline\"] or template_inline\n\tlocal ref = args[\"ref\"]\n\tlocal lit = args[\"lit\"]\n\tlocal substs = args[\"subst\"]\n\tlocal qualifiers = args[\"q\"]\n\tlocal source = args[\"source\"]\n\tlocal footer = args[\"footer\"]\n\tlocal nocat = args[\"nocat\"\
      ]\n\tlocal brackets = args[\"brackets\"]\n\t\n\treturn require(\"Module:usex\").format_usex(lang, sc, usex, translation,\n\t\ttransliteration, noenum, inline, ref, quote, lit, substs, qualifiers,\n\t\tsource, nocat, brackets, footer)\nend\n\n-- Given a\
      \ comma-separated list of language codes, return the English equivalent.\nfunction export.format_langs(frame)\n\tlocal langcodes = rsplit(frame.args[1], \",\")\n\tlocal langnames = {}\n\tfor _, langcode in ipairs(langcodes) do\n\t\tlocal lang = m_languages.getByCode(langcode)\
      \ or m_languages.err(langcode, 1)\n\t\ttable.insert(langnames, lang:getCanonicalName())\n\tend\n\tif #langnames == 1 then\n\t\treturn langnames[1]\n\telseif #langnames == 2 then\n\t\treturn langnames[1] .. \" and \" .. langnames[2]\n\telse\n\t\tlocal retval\
      \ = {}\n\t\tfor i, langname in ipairs(langnames) do\n\t\t\ttable.insert(retval, langname)\n\t\t\tif i &lt;= #langnames - 2 then\n\t\t\t\ttable.insert(retval, \", \")\n\t\t\telseif i == #langnames - 1 then\n\t\t\t\ttable.insert(retval, \"&lt;span class=\\\
      \"serial-comma\\\"&gt;,&lt;/span&gt;&lt;span class=\\\"serial-and\\\"&gt; and&lt;/span&gt; \")\n\t\t\tend\n\t\tend\n\t\treturn table.concat(retval, \"\")\n\tend\nend\n\n-- Given a comma-separated list of language codes, return the first one.\nfunction\
      \ export.first_lang(frame)\n\tlocal langcodes = rsplit(frame.args[1], \",\")\n\treturn langcodes[1]\nend\n\nlocal ignore_prefixes = {\"User:\", \"Talk:\",\n\t\"Wiktionary:Beer parlour\", \"Wiktionary:Translation requests\",\n\t\"Wiktionary:Grease pit\"\
      , \"Wiktionary:Etymology scriptorium\",\n\t\"Wiktionary:Information desk\", \"Wiktionary:Tea room\",\n\t\"Wiktionary:Requests for\", \"Wiktionary:Votes\"\n}\n\nfunction export.page_should_be_ignored(page)\n\t-- Ignore user pages, talk pages and certain\
      \ Wiktionary pages\n\tfor _, ip in ipairs(ignore_prefixes) do\n\t\tif rfind(page, \"^\" .. ip) then\n\t\t\treturn true\n\t\tend\n\tend\n\tif rfind(page, \" talk:\") then\n\t\treturn true\n\tend\n\treturn false\nend\n\nfunction export.page_should_be_ignored_t(frame)\n\
      \treturn export.page_should_be_ignored(frame.args[1]) and \"true\" or \"\"\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T12:53:00.498Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Ausex&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=38906 t=1556369580390979
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:53:00 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1348.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1081 pass, cp3042 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 332233620, 93865255, 447435005
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"4080971\" pageid=\"4080971\" ns=\"828\" title=\"Module:usex\"><revisions><rev user=\"Benwing2\" timestamp=\"2019-02-20T03:47:47Z\" contentformat=\"\
      text/plain\" contentmodel=\"Scribunto\" comment=\"fix bug with extra space before closing bracket\" xml:space=\"preserve\">local export = {}\n\nlocal translit_data = mw.loadData(\"Module:translations/data\")\nlocal needs_translit = translit_data[2]\n\n\
      -- microformat2 classes, see https://phabricator.wikimedia.org/T138709\nlocal class = {\n\tcontainer_ux = 'h-usage-example',\n\tcontainer_quotation = 'h-quotation',\n\texample = 'e-example',\n\tquotation = 'e-quotation',\n\tquotation_with_citation = 'e-quotation\
      \ cited-passage',\n\ttranslation = 'e-translation',\n\t-- The following is added by [[Module:script utilities]], using [[Module:script utilities/data]]\n--\ttransliteration = 'e-transliteration',\t\n\tliterally = 'e-literally',\n\tsource = 'e-source',\n\
      \tfooter = 'e-footer'\n}\n\n-- helper functions\n\nlocal function wrap(tag, class, text, lang)\n\tif lang then\n\t\tlang = ' lang=\"' .. lang .. '\"'\n\telse\n\t\tlang = \"\"\n\tend\n\t\n\tif text and class then\n\t\treturn table.concat{'&lt;', tag, '\
      \ class=\"', class, '\"', lang, '&gt;', text, '&lt;/', tag, '&gt;'}\n\telse\n\t\treturn nil\n\tend\nend\n\nlocal function span(class, text) return wrap('span', class, text) end\nlocal function div(class, text) return wrap('div', class, text) end\n\nfunction\
      \ export.format_usex(lang, sc, usex, translation, transliteration,\n\tnoenum, inline, ref, quote, lit, substs, qualifier, source, nocat, brackets,\n\tfooter)\n\tlocal namespace = mw.title.getCurrentTitle().nsText\n\t\n\t--[[\n\tif lang:getType() == \"\
      reconstructed\" or namespace == \"Reconstruction\" then\n\t\terror(\"Reconstructed languages and reconstructed terms cannot have usage examples, as we have no record of their use.\")\n\tend\n\t]]\n\t\n\tif lit then\n\t\tlit = \"(literally, “\" .. span(class.literally,\
      \ lit) .. \"”)\"\n\tend\n\n\tif source then\n\t\tsource = \"(\" .. span(class.source, source) .. \")\"\n\tend\n\n\tif footer then\n\t\tfooter = span(class.footer, footer)\n\tend\n\t\n\tlocal example_type = quote and \"quote\" or \"usage example\" -- used\
      \ in error messages\n\tlocal categories = {}\n\n\tif not sc then\n\t\tsc = require(\"Module:scripts\").findBestScript(usex, lang)\n\tend\n\n\t-- temporary category for japanese\n\tif transliteration and (string.find(transliteration, \"&lt;br/&gt;\") or\
      \ string.find(transliteration, \"&lt;br&gt;\")) then\n\t\ttable.insert(categories, \"usex with multiple transliterations\")\n\tend\n\n\t-- tr=- means omit transliteration altogether\n\tif transliteration == \"-\" then\n\t\ttransliteration = nil\n\telse\n\
      \t\t-- Try to auto-transliterate\n\t\tif not transliteration and usex then\n\t\t\tlocal subbed_usex = require(\"Module:links\").remove_links(usex)\n\n\t\t\tif substs then\n\t\t\t\t--[=[\n\t\t\t\t[[Special:WhatLinksHere/Template:tracking/quote/substs]]\n\
      \t\t\t\t[[Special:WhatLinksHere/Template:tracking/usex/substs]]\n\t\t\t\t]=]\n\t\t\t\t\n\t\t\t\tif quote then\n\t\t\t\t\trequire(\"Module:debug\").track(\"quote/substs\")\n\t\t\t\telse\n\t\t\t\t\trequire(\"Module:debug\").track(\"usex/substs\")\n\t\t\t\
      \tend\n\t\t\t\t\n\t\t\t\tlocal substs = mw.text.split(substs, \",\")\n\t\t\t\tfor _, subpair in ipairs(substs) do\n\t\t\t\t\tlocal subsplit = mw.text.split(subpair, mw.ustring.find(subpair, \"//\") and \"//\" or \"/\")\n\t\t\t\t\tsubbed_usex = mw.ustring.gsub(subbed_usex,\
      \ subsplit[1], subsplit[2])\n\t\t\t\tend\n\t\t\tend\n\n\t\t\ttransliteration = lang:transliterate(subbed_usex, sc)\n\t\tend\n\n\t\t-- If there is still no transliteration, then add a cleanup category\n\t\tif not transliteration and needs_translit[lang]\
      \ then\n\t\t\ttable.insert(categories, lang:getCanonicalName() .. \" terms needing transliteration\")\n\t\tend\n\tend\n\tif transliteration then\n\t\ttransliteration = require(\"Module:script utilities\").tag_translit(transliteration, lang:getCode(), \"\
      usex\")\n\tend\n\n\tif translation == \"-\" then\n\t\ttranslation = nil\n\t\ttable.insert(categories, \"Omitted translation in the main namespace\")\n\telseif translation then\n\t\ttranslation = span(class.translation, translation)\n\telseif lang:getCode()\
      \ ~= \"en\" and lang:getCode() ~= \"und\" then\n\t\t-- add trreq category if translation is unspecified and language is not english or undetermined\n\t\ttable.insert(categories, lang:getCanonicalName() .. \" usage examples with the translation missing\"\
      )\n\t\ttranslation = \"&lt;small&gt;(please add an English translation of this \" .. example_type .. \")&lt;/small&gt;\"\n\tend\n\n\tif usex then\n\t\tif usex:find(\"[[\", 1, true) then\n\t\t\tusex = require(\"Module:links\").language_link({term = usex,\
      \ lang = lang}, false)\n\t\tend\n\t\t\n\t\tlocal face\n\t\tif quote then\n\t\t\tface = nil\n\t\telse\n\t\t\tface = \"term\"\n\t\tend\n\t\t\n\t\tif not nocat and namespace == \"\" or namespace == \"Reconstruction\" then\n\t\t\tif quote then\n\t\t\t\ttable.insert(categories,\
      \ lang:getCanonicalName() .. \" terms with quotations\")\n\t\t\telse\n\t\t\t\ttable.insert(categories, lang:getCanonicalName() .. \" terms with usage examples\")\n\t\t\tend\n\t\tend\n\t\t\n\t\tusex = require(\"Module:script utilities\").tag_text(usex,\
      \ lang, sc, face,\n\t\t\tquote == \"quote-meta\" and class.quotation_with_citation or\n\t\t\tquote and class.quotation or class.example)\n\telse\n\t\tif transliteration then\n\t\t\ttable.insert(categories, lang:getCanonicalName() .. \" usage examples lacking\
      \ native script\")\n\t\tend\n\t\t\n\t\t-- TODO: Trigger some kind of error here\n\t\tusex = \"&lt;small&gt;(please add the primary text of this \" .. example_type .. \")&lt;/small&gt;\"\n\tend\n\n\tlocal result = {}\n\t\n\tif sc:getDirection() == \"rtl\"\
      \ then\n\t\tusex = \"&amp;rlm;\" .. usex .. \"&amp;lrm;\"\n\tend\n\t\n\ttable.insert(result, usex)\n\t\n\tif #qualifier &gt; 0 then\n\t\ttable.insert(result, \" \" .. require(\"Module:qualifier\").format_qualifier(qualifier))\n\tend\n\t\n\ttable.insert(result,\
      \ ref)\n\t\n\tif inline then\n\t\tif transliteration then\n\t\t\ttable.insert(result, \" ― \" .. transliteration)\n\t\tend\n\n\t\tif translation then\n\t\t\ttable.insert(result, \" ― \" .. translation)\n\t\tend\n\n\t\tif lit then\n\t\t\ttable.insert(result,\
      \ \" \" .. lit)\n\t\tend\n\t\t\n\t\tif source then\n\t\t\ttable.insert(result, \" \" .. source)\n\t\tend\n\n\t\tif footer then\n\t\t\ttable.insert(result, \" \" .. footer)\n\t\tend\n\n\t\tif brackets then\n\t\t\ttable.insert(result, \"]\")\n\t\tend\n\t\
      elseif transliteration or translation or lit or source or footer then\n\t\ttable.insert(result, \"&lt;dl&gt;\")\n\t\tlocal closing_tag = \"\"\n\n\t\tif transliteration then\n\t\t\ttable.insert(result, closing_tag)\n\t\t\ttable.insert(result, \"&lt;dd&gt;\"\
      \ .. transliteration)\n\t\t\tclosing_tag = \"&lt;/dd&gt;\"\n\t\tend\n\t\t\n\t\tif translation then\n\t\t\ttable.insert(result, closing_tag)\n\t\t\ttable.insert(result, \"&lt;dd&gt;\" .. translation)\n\t\t\tclosing_tag = \"&lt;/dd&gt;\"\n\t\tend\n\n\t\t\
      if lit then\n\t\t\ttable.insert(result, closing_tag)\n\t\t\ttable.insert(result, \"&lt;dd&gt;\" .. lit)\n\t\t\tclosing_tag = \"&lt;/dd&gt;\"\n\t\tend\n\n\t\tif source then\n\t\t\ttable.insert(result, closing_tag)\n\t\t\ttable.insert(result, \"&lt;dl&gt;&lt;dd&gt;\"\
      \ .. source)\n\t\t\tclosing_tag = \"&lt;/dd&gt;&lt;/dl&gt;\"\n\t\tend\n\n\t\tif footer then\n\t\t\ttable.insert(result, closing_tag)\n\t\t\ttable.insert(result, \"&lt;dl&gt;&lt;dd&gt;\" .. footer)\n\t\t\tclosing_tag = \"&lt;/dd&gt;&lt;/dl&gt;\"\n\t\tend\n\
      \n\t\tif brackets then\n\t\t\ttable.insert(result, \"]\")\n\t\tend\n\t\t\n\t\ttable.insert(result, closing_tag)\n\n\t\ttable.insert(result, \"&lt;/dl&gt;\")\n\telse\n\t\tif brackets then\n\t\t\ttable.insert(result, \"]\")\n\t\tend\n\tend\n\t\n\tresult\
      \ = table.concat(result)\n\tresult = div(quote and class.container_quotation or class.container_ux, result)\n\tresult = result .. require(\"Module:utilities\").format_categories(categories, lang)\n\tif noenum then\n\t\tresult = \"\\n: \" .. result\n\t\
      end\n\treturn result\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T12:53:00.686Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Atranslations%2Fdata&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=39133 t=1556369580577466
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:53:00 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1223.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1075 pass, cp3032 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 328796155, 489997951, 403298777
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"4081804\" pageid=\"4081804\" ns=\"828\" title=\"Module:translations/data\"><revisions><rev user=\"Atitarev\" timestamp=\"2014-03-23T22:06:49Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"\" xml:space=\"preserve\">local has_auto_translit = {\n        [\"ab\"] = true,\n        [\"axm\"] = true,\n        [\"ady\"] = true,\n        [\"am\"] = true,\n        [\"ba\"] = true,\n\
      \        [\"bg\"] = true,\n        [\"be\"] = true,\n        [\"byn\"] = true,\n        [\"ce\"] = true,\n        [\"chr\"] = true,\n        [\"cv\"] = true,\n        [\"dv\"] = true,\n        [\"hy\"] = true,\n        [\"kbd\"] = true,        \n     \
      \   [\"el\"] = true,\n        [\"gez\"] = true,\n        [\"har\"] = true,\n        [\"iu\"] = true,\n        [\"ka\"] = true,\n        [\"kk\"] = true,\n        [\"kn\"] = true,\n        [\"ky\"] = true,\n        [\"lzz\"] = true,\n        [\"mk\"] =\
      \ true,\n        [\"ml\"] = true,\n        [\"mn\"] = true,\n        [\"mym\"] = true,\n        [\"os\"] = true,\n        [\"oge\"] = true,\n        [\"ru\"] = true,\n        [\"sa\"] = true,\n        [\"si\"] = true,\n        [\"sva\"] = true,\n     \
      \   [\"ta\"] = true, \n        [\"te\"] = true,        \n        [\"ti\"] = true,\n        [\"tig\"] = true,\n        [\"tg\"] = true,\n        [\"tt\"] = true,\n        [\"ug\"] = true,\n        [\"uk\"] = true,\n        [\"xcl\"] = true,\n        [\"\
      xmf\"] = true,\n        [\"yi\"] = true}\n    \nlocal needs_translit = {\n        [\"alr\"] = true, \n        [\"ab\"] = true,\n        [\"abq\"] = true,\n        [\"ady\"] = true,\n        [\"agh\"] = true,\n        [\"akv\"] = true,\n        [\"am\"\
      ] = true,\n        [\"ani\"] = true, \n        [\"aqc\"] = true, \n        [\"ar\"] = true,\n        [\"as\"] = true,\n        [\"av\"] = true, \n        [\"ba\"] = true,\n        [\"bbl\"] = true, \n        [\"bdk\"] = true, \n        [\"be\"] = true,\n\
      \        [\"bg\"] = true,\n        [\"bn\"] = true,\n        [\"bo\"] = true,\n        [\"bph\"] = true, \n        [\"bxr\"] = true, \n        [\"ce\"] = true, \n        [\"cji\"] = true, \n        [\"ckt\"] = true, \n        [\"cv\"] = true, \n      \
      \  [\"dar\"] = true, \n        [\"dlg\"] = true, \n        [\"dng\"] = true, \n        [\"dv\"] = true,\n        [\"el\"] = true,\n        [\"enf\"] = true, \n        [\"ess\"] = true, \n        [\"eve\"] = true, \n        [\"evn\"] = true, \n        [\"\
      fa\"] = true,\n        [\"gdo\"] = true, \n        [\"got\"] = true,\n        [\"gu\"] = true,\n        [\"he\"] = true,\n        [\"hi\"] = true,\n        [\"hy\"] = true,\n        [\"inh\"] = true, \n        [\"itl\"] = true, \n        [\"ja\"] = true,\n\
      \        [\"ka\"] = true,\n        [\"kap\"] = true, \n        [\"kbd\"] = true, \n        [\"kca\"] = true, \n        [\"kjh\"] = true, \n        [\"kk\"] = true,\n        [\"km\"] = true,\n        [\"kn\"] = true,\n        [\"ko\"] = true,\n        [\"\
      krc\"] = true, \n        [\"kv\"] = true, \n        [\"kva\"] = true, \n        [\"ky\"] = true,\n        [\"lez\"] = true, \n        [\"lo\"] = true,\n        [\"mdf\"] = true, \n        [\"mk\"] = true,\n        [\"ml\"] = true,\n        [\"mn\"] = true,\n\
      \        [\"mr\"] = true,\n        [\"my\"] = true,\n        [\"myv\"] = true, \n        [\"ne\"] = true,\n        [\"or\"] = true,\n        [\"os\"] = true,\n        [\"ps\"] = true,\n        [\"ru\"] = true,\n        [\"rue\"] = true,\n        [\"sah\"\
      ] = true,\n        [\"sa\"] = true,\n        [\"si\"] = true,\n        [\"ta\"] = true,\n        [\"te\"] = true,\n        [\"tg\"] = true,\n        [\"th\"] = true,\n        [\"ti\"] = true,\n        [\"tt\"] = true,\n        [\"tt\"] = true,\n      \
      \  [\"tyv\"] = true, \n        [\"udm\"] = true, \n        [\"ug\"] = true,\n        [\"uk\"] = true,\n        [\"ur\"] = true,\n        [\"xal\"] = true, \n        [\"yi\"] = true,\n        [\"yrk\"] = true}\n\nreturn {has_auto_translit, needs_translit}</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T12:53:00.891Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Template%3Aquote-newsgroup&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=51358 t=1556369580773148
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:53:00 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1347.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1077 pass, cp3042 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 431255850, 100189411, 447334610
    body: |-
      <?xml version="1.0"?><api batchcomplete=""><warnings><main xml:space="preserve">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space="preserve">Because "rvslots" was not specified, a legacy format has been used for the output. This format is deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx="993174" pageid="993174" ns="10" title="Template:quote-newsgroup"><revisions><rev user="Benwing2" timestamp="2019-03-31T21:32:23Z" contentformat="text/x-wiki" contentmodel="wikitext" comment="support 1= for language as well as lang=, display sample output on template page" xml:space="preserve">{{quote-meta
      |indent1 = {{{i1|{{{indent|}}}}}}
      |source  = {{#invoke:quote|source_t
          | date          = {{#if:{{#if:{{{lang|}}}|{{{1|}}}|{{{2|&lt;noinclude&gt;February 29, 1896&lt;/noinclude&gt;}}}}}{{{date|}}}
              | {{#if:{{{year|}}}
                 | {{#time:Y-m-d|{{{date|{{#if:{{{lang|}}}|{{{1|}}}|{{{2|&lt;noinclude&gt;February 29, 1896&lt;/noinclude&gt;}}}}}}}} {{{year}}}}}[[Category:Quotation templates using both date and year]]
                 | {{{date|{{#if:{{{lang|}}}|{{{1|}}}|{{{2|&lt;noinclude&gt;February 29, 1896&lt;/noinclude&gt;}}}}}}}}
                }}
            }}
          | year          = {{#if:{{{year|}}}
              | {{#if:{{#if:{{{lang|}}}|{{{1|}}}|{{{2|&lt;noinclude&gt;February 29, 1896&lt;/noinclude&gt;}}}}}{{{date|}}}
                  |&lt;!--Do nothing; handled by {{{date}}} above.--&gt;
                  | {{{year}}}
                }}
            }}
          | author        = {{{author|{{#if:{{{lang|}}}|{{{2|}}}|{{{3|&lt;noinclude&gt;John Doe&lt;/noinclude&gt;}}}}}}}}{{#if:{{{email|}}}|&amp;#32;&amp;lt;''{{{email}}}''&amp;gt;}}
          | chapter       = {{{title|{{#if:{{{lang|}}}|{{{3|}}}|{{{4|&lt;noinclude&gt;I love Falkland Islands postal cancellations!&lt;/noinclude&gt;}}}}}}}}
          | trans-chapter = {{{trans-title|}}}
          | title         = &lt;kbd&gt;{{{group|{{{newsgroup|{{#if:{{{lang|}}}|{{{4|}}}|{{{5|&lt;noinclude&gt;alt.love.philately&lt;/noinclude&gt;}}}}}}}}}}}&lt;/kbd&gt;, [[w:Usenet|Usenet]]
          | section       = {{#if:{{{id|}}}|message-ID &amp;lt;{{{id}}}&amp;gt;}}
          | id            =
          | url           = {{{url|{{#if:{{#if:{{{lang|}}}|{{{5|}}}|{{{6|}}}}}|{{#if:{{{lang|}}}|{{{5|}}}|{{{6|}}}}}|{{#if:{{{googleid|}}}|http://groups.google.com/group/{{{group|{{{newsgroup|{{#if:{{{lang|}}}|{{{4|}}}|{{{5|&lt;noinclude&gt;alt.love.philately&lt;/noinclude&gt;}}}}}}}}}}}/browse_thread/thread/{{{googleid}}}}}}}}}}
      }}
      |passage         = {{{text|{{{passage|{{#if:{{{lang|}}}|{{{6|}}}|{{{7|&lt;noinclude&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/noinclude&gt;}}}}}}}}}}}
      |brackets        = {{{brackets|}}}
      |translation     = {{{t|{{{translation|{{#if:{{{lang|}}}|{{{7|}}}|{{{8|}}}}}}}}}}}
      |transliteration = {{{tr|{{{transliteration|}}}}}}
      |lang            = {{#if:{{{lang|}}}|{{{lang|}}}|{{{1|und}}}}}
      |subst           = {{{subst|}}}
      |lit             = {{{lit|}}}
      |nocat           = {{{nocat|}}}
      |footer          = {{{footer|}}}
      }}&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</rev></revisions></page></pages></query></api>
- recorded: 2019-04-27T12:53:01.124Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Aquote&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=51676 t=1556369580989811
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:53:01 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1290.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1075 pass, cp3032 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 326241456, 486725821, 434469063
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"7131671\" pageid=\"7131671\" ns=\"828\" title=\"Module:quote\"><revisions><rev user=\"Benwing2\" timestamp=\"2019-03-31T20:47:39Z\" contentformat=\"\
      text/plain\" contentmodel=\"Scribunto\" comment=\"don&#039;t require lang in template space\" xml:space=\"preserve\">--[=[\n\tThis module contains functions to implement quote-* templates.\n\n\tAuthor: Benwing2; conversion into Lua of {{quote-meta/source}}\
      \ template,\n\twritten by Sgconlaw with some help from Erutuon and Benwing2.\n\n\tYou should replace a call to {{quote-meta/source|...}} with\n\t{{#invoke:quote|source_t|...}}, except that you only\n\tneed to pass in arguments that aren't direct pass-throughs.\
      \ For example,\n\t{{quote-book}} invoked {{quote-meta/source}} like this:\n\t\n\t{{quote-meta/source\n    | last           = {{{last|}}}\n    | first          = {{{first|}}}\n    | author         = {{{author|{{{2|}}}}}}\n    | authorlink     = {{{authorlink|}}}\n\
      \    | last2          = {{{last2|}}}\n    | first2         = {{{first2|}}}\n    | author2        = {{{author2|}}}\n    | authorlink2    = {{{authorlink2|}}}\n\t...\n    | author5        = {{{author5|}}}\n    | authorlink5    = {{{authorlink5|}}}\n    |\
      \ coauthors      = {{{coauthors|}}}\n    | quotee         = {{{quotee|}}}\n    | quoted_in      = {{{quoted_in|}}}\n    | chapter        = {{{chapter|{{{entry|}}}}}}\n    | chapterurl     = {{{chapterurl|{{{entryurl|}}}}}}\n    | trans-chapter  = {{{trans-chapter|{{{trans-entry|}}}}}}\n\
      \    | translator     = {{{trans|{{{translator|{{{translators|}}}}}}}}}\n    | editor         = {{{editor|}}}\n    | editors        = {{{editors|}}}\n    ...\n    }}\n    \n    This can be reduced to a call to the module like this:\n    \n\t{{#invoke:quote|source_t\n\
      \    | author         = {{{author|{{{2|}}}}}}\n    | chapter        = {{{chapter|{{{entry|}}}}}}\n    | chapterurl     = {{{chapterurl|{{{entryurl|}}}}}}\n    | trans-chapter  = {{{trans-chapter|{{{trans-entry|}}}}}}\n    | translator     = {{{trans|{{{translator|{{{translators|}}}}}}}}}\n\
      \    ...\n    }}\n\n\tNone of the arguments that are simple passthroughs need to be passed in,\n\tbecause the source_t() function reads both the arguments passed to it *and*\n\tthe arguments passed to the parent template, with the former overriding the\n\
      \tlatter.\n\n\tThe module code should work like the template code, except that in a few\n\tsituations I fixed apparent bugs in the template code in the process of\n\tporting.\n]=]\n\nlocal export = {}\n\nlocal rsubn = mw.ustring.gsub\nlocal rmatch = mw.ustring.match\n\
      local rfind = mw.ustring.find\nlocal rsplit = mw.text.split\n\nlocal test_new_code = false\nlocal test_new_code_with_errors = false\n\n-- version of rsubn() that discards all but the first return value\nlocal function rsub(term, foo, bar)\n\tlocal retval\
      \ = rsubn(term, foo, bar)\n\treturn retval\nend\n\nlocal function maintenance_line(text)\n\treturn \"&lt;span class=\\\"maintenance-line\\\" style=\\\"color: #777777;\\\"&gt;(\" .. text .. \")&lt;/span&gt;\"\nend\n\nlocal function isbn(text)\n\treturn\
      \ \"[[Special:BookSources/\" .. text .. \"|→ISBN]]\" ..\n\t\trequire(\"Module:check isxn\").check_isbn(text, \"&amp;nbsp;&lt;span class=\\\"error\\\" style=\\\"font-size:88%\\\"&gt;Invalid&amp;nbsp;ISBN&lt;/span&gt;[[Category:Pages with ISBN errors]]\"\
      )\nend\n\nlocal function issn(text)\n\treturn \"[[w:International Standard Serial Number|ISSN]] [http://www.worldcat.org/issn/\" .. text .. \" \" .. text .. \"]\" ..\n\t\trequire(\"Module:check isxn\").check_issn(text, \"&amp;nbsp;&lt;span class=\\\"error\\\
      \" style=\\\"font-size:88%\\\"&gt;Invalid&amp;nbsp;ISSN&lt;/span&gt;[[Category:Pages with ISSN errors]]\")\nend\n\nlocal function format_date(text)\n\treturn mw.getCurrentFrame():callParserFunction{name=\"#formatdate\", args=text}\nend\n\nlocal function\
      \ tag_nowiki(text)\n\treturn mw.getCurrentFrame():callParserFunction{name=\"#tag\", args={\"nowiki\", text}}\nend\n\nlocal function format_langs(langs)\n\tlocal langcodes = rsplit(langs, \",\")\n\tlocal langnames = {}\n\tfor _, langcode in ipairs(langcodes)\
      \ do\n\t\tlocal lang = require(\"Module:languages\").getByCode(langcode) or require(\"Module:languages\").err(langcode, 1)\n\t\ttable.insert(langnames, lang:getCanonicalName())\n\tend\n\tif #langnames == 1 then\n\t\treturn langnames[1]\n\telseif #langnames\
      \ == 2 then\n\t\treturn langnames[1] .. \" and \" .. langnames[2]\n\telse\n\t\tlocal retval = {}\n\t\tfor i, langname in ipairs(langnames) do\n\t\t\ttable.insert(retval, langname)\n\t\t\tif i &lt;= #langnames - 2 then\n\t\t\t\ttable.insert(retval, \",\
      \ \")\n\t\t\telseif i == #langnames - 1 then\n\t\t\t\ttable.insert(retval, \"&lt;span class=\\\"serial-comma\\\"&gt;,&lt;/span&gt;&lt;span class=\\\"serial-and\\\"&gt; and&lt;/span&gt; \")\n\t\t\tend\n\t\tend\n\t\treturn table.concat(retval, \"\")\n\t\
      end\nend\n\n-- Fancy version of ine() (if-not-empty). Converts empty string to nil,\n-- but also strips leading/trailing space and then single or double quotes,\n-- to allow for embedded spaces.\n-- FIXME! Copied directly from ru-noun. Move to utility\
      \ package.\nlocal function ine(arg)\n\tif not arg then return nil end\n\targ = rsub(arg, \"^%s*(.-)%s*$\", \"%1\")\n\tif arg == \"\" then return nil end\n\tlocal inside_quotes = rmatch(arg, '^\"(.*)\"$')\n\tif inside_quotes then\n\t\treturn inside_quotes\n\
      \tend\n\tinside_quotes = rmatch(arg, \"^'(.*)'$\")\n\tif inside_quotes then\n\t\treturn inside_quotes\n\tend\n\treturn arg\nend\n\n-- Clone frame's and parent's args while also assigning nil to empty strings.\nlocal function clone_args(frame)\n\tlocal\
      \ args = {}\n\tfor pname, param in pairs(frame:getParent().args) do\n\t\targs[pname] = ine(param)\n\tend\n\tfor pname, param in pairs(frame.args) do\n\t\targs[pname] = ine(param)\n\tend\n\treturn args\nend\n\n-- Implementation of {{quote-meta/source}}.\n\
      function export.source(args)\n\tlocal argslang = args.lang or args[1]\n\tif not argslang then\n\t\t-- For the moment, only trigger an error on mainspace pages and\n\t\t-- other pages that are not user pages or pages containing discussions.\n\t\t-- These\
      \ are the same pages that appear in the appropriate tracking\n\t\t-- categories. User and discussion pages have not generally been\n\t\t-- fixed up to include a language code and so it's more helpful\n\t\t-- to use a maintenance line than signal an error.\n\
      \t\tlocal FULLPAGENAME = mw.title.getCurrentTitle().fullText\n\t\tlocal NAMESPACE = mw.title.getCurrentTitle().nsText\n\n\t\tif NAMESPACE ~= \"Template\" and not require(\"Module:usex/templates\").page_should_be_ignored(FULLPAGENAME) then\n\t\t\trequire(\"\
      Module:languages\").err(nil, 1)\n\t\tend\n\tend\n\n\tif args.date and args.year then\n\t\terror(\"Only one of date= or year= should be specified\")\n\tend\n\n\tlocal output = {}\n\t-- Add text to the output. The text goes into a list, and we concatenate\n\
      \t-- all the list components together at the end.\n\tlocal function add(text)\n\t\ttable.insert(output, text)\n\tend\n\tif args.brackets == \"on\" then\n\t\tadd(\"[\")\n\tend\n\tadd(require(\"Module:time\").quote_impl(args))\n\tif args.origdate then\n\t\
      \tadd(\" [\" .. args.origdate .. \"]\")\n\telseif args.origyear and args.origmonth then\n\t\tadd(\" [\" .. args.origmonth .. \" \" .. args.origyear .. \"]\")\n\telseif args.origyear then\n\t\tadd(\" [\" .. args.origyear .. \"]\")\n\tend\n\t\n\tif args.author\
      \ or args.last then\n\t\tfor i=1,5 do\n\t\t\tlocal suf = i == 1 and \"\" or i\n\t\t\t-- Return the argument named PARAM, possibly with a suffix added\n\t\t\t-- (e.g. 2 for author2, 3 for last3). The suffix is either \"\"\n\t\t\t-- (an empty string) for\
      \ the first set of params (author, last,\n\t\t\t-- first, etc.) or a number for further sets of params (author2,\n\t\t\t-- last2, first2, etc.).\n\t\t\tlocal function a(param)\n\t\t\t\treturn args[param .. suf]\n\t\t\tend\n\t\t\tif a(\"author\") or a(\"\
      last\") then\n\t\t\t\t-- If first author, output a comma unless {{{nodate}}} used.\n\t\t\t\tif i == 1 and not args.nodate then\n\t\t\t\t\tadd(\", \")\n\t\t\t\tend\n\t\t\t\t-- If not first author, output a semicolon to separate from preceding authors.\n\
      \t\t\t\tadd(i == 1 and \" \" or \"&amp;#59; \") -- &amp;#59; = semicolon\n\t\t\t\tif a(\"authorlink\") then\n\t\t\t\t\tadd(\"[[w:\" .. a(\"authorlink\") .. \"|\")\n\t\t\t\tend\n\t\t\t\tif a(\"author\") then\n\t\t\t\t\tadd(a(\"author\"))\n\t\t\t\telseif\
      \ a(\"last\") then\n\t\t\t\t\tadd(a(\"last\"))\n\t\t\t\t\tif a(\"first\") then\n\t\t\t\t\t\tadd(\", \" .. a(\"first\"))\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\tif a(\"authorlink\") then\n\t\t\t\t\tadd(\"]]\")\n\t\t\t\tend\n\t\t\t\tif a(\"trans-author\") or\
      \ a(\"trans-last\") then\n\t\t\t\t\tadd(\" &amp;#91;\")\n\t\t\t\t\tif a(\"trans-authorlink\") then\n\t\t\t\t\t\tadd(\"[[w:\" .. a(\"trans-authorlink\") .. \"|\")\n\t\t\t\t\tend\n\t\t\t\t\tif a(\"trans-author\") then\n\t\t\t\t\t\tadd(a(\"trans-author\"\
      ))\n\t\t\t\t\telseif a(\"trans-last\") then\n\t\t\t\t\t\tadd(a(\"trans-last\"))\n\t\t\t\t\t\tif a(\"trans-first\") then\n\t\t\t\t\t\t\tadd(\", \")\n\t\t\t\t\t\t\tadd(a(\"trans-first\"))\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\tif a(\"trans-authorlink\"\
      ) then\n\t\t\t\t\t\tadd(\"]]\")\n\t\t\t\t\tend\n\t\t\t\t\tadd(\"&amp;#93;\")\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif args.coauthors then\n\t\t\tadd(\"&amp;#59; \" .. args.coauthors)\n\t\tend\n\t\tif args.quotee then\n\t\t\tadd(\", quoting \" .. args.quotee)\n\
      \t\tend\n\telseif args.year or args.date or args.start_year or args.start_date then\n\t\t--If no author stated but date provided, add a comma.\n\t\tadd(\",\")\n\tend\n\tif args.author or args.last or args.quotee then\n\t\tadd(\",\")\n\tend\n\tadd(\" \"\
      )\n\n\tlocal function has_new_title_or_ancillary_author()\n\t\treturn args.chapter2 or args.title2 or\n\t\t\targs.trans2 or args.translator2 or args.translators2 or\n\t\t\targs.mainauthor2 or args.editor2 or args.editors2\n\tend\n\n\tlocal function has_new_title_or_author()\n\
      \t\treturn args[\"2ndauthor\"] or args[\"2ndlast\"] or has_new_title_or_ancillary_author()\n\tend\n\n\tlocal function has_newversion()\n\t\treturn args.newversion or args.location2 or has_new_title_or_author()\n\tend\n\n\t-- This handles everything after\
      \ displaying the author, starting with the\n\t-- chapter and ending with page, column and then other=. It is currently\n\t-- called twice: Once to handle the main portion of the citation, and once\n\t-- to handle a \"newversion\" citation. `suf` is either\
      \ \"\" for the main portion\n\t-- or a number (currently only 2) for a \"newversion\" citation. In a few\n\t-- places we conditionalize on `suf` to take actions depending on its value.\n\t-- `sep` is the separator to display before the first item we add;\
      \ see\n\t-- add_with_sep() below.\n\tlocal function postauthor(suf, sep)\n\t\t-- Return the argument named PARAM, possibly with a suffix added\n\t\t-- (e.g. 2 for chapter2). The suffix is either \"\" (an empty string)\n\t\t-- for the first set of params\
      \ (chapter, title, translator, etc.)\n\t\t-- or a number for further sets of params (chapter2, title2,\n\t\t-- translator2, etc.).\n\t\tlocal function a(param)\n\t\t\treturn args[param .. suf]\n\t\tend\n\t\tif a(\"chapter\") then\n\t\t\tif require(\"Module:number-utilities\"\
      ).get_number(a(\"chapter\")) then\n\t\t\t\t-- Arabic chapter number\n\t\t\t\tadd(\" chapter \")\n\t\t\t\tif a(\"chapterurl\") then\n\t\t\t\t\tadd(\"[\" .. a(\"chapterurl\") .. \" \" .. a(\"chapter\") .. \"]\")\n\t\t\t\telse\n\t\t\t\t\tadd(a(\"chapter\"\
      ))\n\t\t\t\tend\n\t\t\telseif rfind(a(\"chapter\"), \"^[mdclxviMDCLXVI]+$\") and require(\"Module:roman numerals\").roman_to_arabic(a(\"chapter\"), true) then\n\t\t\t\t-- Roman chapter number\n\t\t\t\tadd(\" chapter \")\n\t\t\t\tlocal uchapter = mw.ustring.upper(a(\"\
      chapter\"))\n\t\t\t\tif a(\"chapterurl\") then\n\t\t\t\t\tadd(\"[\" .. a(\"chapterurl\") .. \" \" .. uchapter .. \"]\")\n\t\t\t\telse\n\t\t\t\t\tadd(uchapter)\n\t\t\t\tend\n\t\t\telse\n\t\t\t\t-- Must be a chapter name\n\t\t\t\tadd(\" “\")\n\t\t\t\tlocal\
      \ toinsert\n\t\t\t\tif a(\"chapterurl\") then\n\t\t\t\t\ttoinsert = \"[\" .. a(\"chapterurl\") .. \" \" .. a(\"chapter\") .. \"]\"\n\t\t\t\telse\n\t\t\t\t\ttoinsert = a(\"chapter\")\n\t\t\t\tend\n\t\t\t\tadd(require(\"Module:italics\").unitalicize_brackets(toinsert))\n\
      \t\t\t\tif a(\"trans-chapter\") then\n\t\t\t\t\tadd(\" &amp;#91;\" .. require(\"Module:italics\").unitalicize_brackets(a(\"trans-chapter\")) .. \"&amp;#93;\")\n\t\t\t\tend\n\t\t\t\tadd(\"”\")\n\t\t\tend\n\t\t\tif not a(\"notitle\") then\n\t\t\t\tadd(\"\
      , in \")\n\t\t\tend\n\t\tend\n\n\t\tlocal translator = a(\"trans\") or a(\"translator\") or a(\"translators\")\n\t\tif a(\"mainauthor\") then\n\t\t\tadd(a(\"mainauthor\") .. ((translator or a(\"editor\") or a(\"editors\")) and \"&amp;#59; \" or \",\"))\n\
      \t\tend\n\t\t\n\t\tif translator then\n\t\t\tadd(translator .. \", transl.\" .. ((a(\"editor\") or a(\"editors\")) and \"&amp;#59; \" or \",\"))\n\t\tend\n\t\t\n\t\tif a(\"editor\") then\n\t\t\tadd(a(\"editor\") .. \", editor,\")\n\t\telseif a(\"editors\"\
      ) then\n\t\t\tadd(a(\"editors\") .. \", editors,\")\n\t\tend\n\n\t\t-- If we're in the \"newversion\" code (suf ~= \"\"), and there's no title\n\t\t-- and no URL, then the first time we add anything after the title,\n\t\t-- we don't want to add a separating\
      \ comma because the preceding text\n\t\t-- will say \"republished \" or \"republished as \" or \"translated as \" or\n\t\t-- similar. In all other cases, we do want to add a separating comma.\n\t\t-- We handle this using a `sep` variable whose value will\
      \ generally\n\t\t-- either be \"\" or \", \". The add_with_sep(text) function adds the `sep`\n\t\t-- variable and then `text`, and then resets `sep` to \", \" so the next\n\t\t-- time around we do add a comma to separate `text` from the preceding\n\t\t\
      -- piece of text.\n\t\tlocal function add_with_sep(text)\n\t\t\tadd(sep .. text)\n\t\t\tsep = \", \"\n\t\tend\n\t\tif a(\"title\") then\n\t\t\tadd(\" &lt;cite&gt;\" .. require(\"Module:italics\").unitalicize_brackets(a(\"title\")) .. \"&lt;/cite&gt;\"\
      )\n\t\t\tif a(\"trans-title\") then\n\t\t\t\tadd(\" &amp;#91;&lt;cite&gt;\" .. require(\"Module:italics\").unitalicize_brackets(a(\"trans-title\")) .. \"&lt;/cite&gt;&amp;#93;\")\n\t\t\tend\n\t\t\tif a(\"series\") then\n\t\t\t\tadd(\" (\" .. a(\"series\"\
      ))\n\t\t\t\tif a(\"seriesvolume\") then\n\t\t\t\t\tadd(\"&amp;#59; \" .. a(\"seriesvolume\"))\n\t\t\t\tend\n\t\t\t\tadd(\")\")\n\t\t\tend\n\t\t\tsep = \", \"\n\t\telseif suf == \"\" then\n\t\t\tsep = \", \"\n\t\t\tif not a(\"notitle\") then\n\t\t\t\tadd(maintenance_line(\"\
      Please provide the book title or journal name\"))\n\t\t\tend\n\t\tend\n\t\t\n\t\tif a(\"archiveurl\") or a(\"url\") then\n\t\t\tadd(\"&amp;lrm;&lt;sup&gt;[\" .. (a(\"archiveurl\") or a(\"url\")) .. \"]&lt;/sup&gt;\")\n\t\t\tsep = \", \"\n\t\tend\n\n\t\t\
      if a(\"volume\") then\n\t\t\tadd_with_sep(\"volume \" .. a(\"volume\"))\n\t\telseif a(\"volume_plain\") then\n\t\t\tadd_with_sep(a(\"volume_plain\"))\n\t\tend\n\t\t\n\t\tif a(\"issue\") then\n\t\t\tadd_with_sep(\"number \" .. a(\"issue\"))\n\t\tend\n\n\
      \t\t-- This function handles the display of annotations like \"(in French)\"\n\t\t-- or \"(in German; quote in Nauruan)\". It takes two params PRETEXT and\n\t\t-- POSTTEXT to display before and after the annotation, respectively.\n\t\t-- These are used\
      \ to insert the surrounding parens, commas, etc.\n\t\t-- They are necessary because we don't always display the annotation\n\t\t-- (in fact it's usually not displayed), and when there's no annotation,\n\t\t-- no pre-text or post-text is displayed.\n\t\t\
      local function langhandler(pretext, posttext)\n\t\t\tlocal argslang\n\t\t\tif suf == \"\" then\n\t\t\t\targslang = args.lang or args[1]\n\t\t\telse\n\t\t\t\targslang = a(\"lang\")\n\t\t\tend\n\t\t\tif a(\"worklang\") then\n\t\t\t\treturn pretext .. \"\
      in \" .. format_langs(a(\"worklang\")) .. posttext\n\t\t\telseif argslang and a(\"termlang\") and argslang ~= a(\"termlang\") then\n\t\t\t\treturn pretext .. \"in \" .. format_langs(argslang) .. posttext\n\t\t\telseif not argslang and suf == \"\" then\n\
      \t\t\t\treturn pretext .. maintenance_line(\"Please specify the language of the quote\") .. posttext\n\t\t\tend\n\t\t\treturn \"\"\n\t\tend\n\n\t\tif a(\"genre\") then\n\t\t\tadd(\" (\" .. a(\"genre\") .. (a(\"format\") and \", \" .. a(\"format\") or \"\
      \") .. langhandler(\", \", \"\") .. \")\")\n\t\t\tsep = \", \"\n\t\telseif a(\"format\") then\n\t\t\tadd(\" (\" .. a(\"format\") .. langhandler(\", \", \"\") .. \")\")\n\t\t\tsep = \", \"\n\t\telse\n\t\t\tlocal to_insert = langhandler(\" (\", \")\")\n\t\
      \t\tif to_insert ~= \"\" then\n\t\t\t\tsep = \", \"\n\t\t\t\tadd(to_insert)\n\t\t\tend\n\t\tend\n\n\t\tif a(\"others\") then\n\t\t\tadd_with_sep(a(\"others\"))\n\t\tend\n\t\tif a(\"edition\") then\n\t\t\tadd_with_sep(a(\"edition\") .. \" edition\")\n\t\
      \tend\n\t\tif a(\"quoted_in\") then\n\t\t\tadd_with_sep(\"quoted in \" .. a(\"quoted_in\"))\n\t\tend\n\n\t\tif a(\"publisher\") then\n\t\t\tif a(\"city\") or a(\"location\") then\n\t\t\t\tadd_with_sep((a(\"city\") or a(\"location\")) .. \"&amp;#58;\")\
      \ -- colon\n\t\t\t\tsep = \" \"\n\t\t\tend\n\t\t\tadd_with_sep(a(\"publisher\"))\n\t\telseif a(\"city\") or a(\"location\") then\n\t\t\tadd_with_sep(a(\"city\") or a(\"location\"))\n\t\tend\n\n\t\tif a(\"original\") then\n\t\t\tadd_with_sep((a(\"type\"\
      ) or \"translation\") .. \" of &lt;cite&gt;\" .. a(\"original\")\n\t\t\t\t.. \"&lt;/cite&gt;\" .. (a(\"by\") and \" by \" .. a(\"by\") or \"\"))\n\t\telseif a(\"by\") then\n\t\t\tadd_with_sep((a(\"type\") or \"translation\") .. \" of original by \" ..\
      \ a(\"by\"))\n\t\tend\n\n\t\tif a(\"year_published\") then\n\t\t\tadd_with_sep(\"published \" .. a(\"year_published\"))\n\t\tend\n\n\t\tif suf ~= \"\" and has_newversion() then\n\t\t\tadd_with_sep(a(\"date\") or a(\"year\") or maintenance_line(\"Please\
      \ provide a date or year\"))\n\t\tend\n\t\t\n\t\t-- From here on out, there should always be a preceding item, so we\n\t\t-- can dispense with add_with_sep() and always insert the comma.\n\t\t\n\t\tif a(\"bibcode\") then\n\t\t\tadd(\", &lt;small&gt;[[w:Bibcode|Bibcode]]:&amp;nbsp;[http://adsabs.harvard.edu/abs/\"\
      \n\t\t\t\t.. mw.uri.encode(a(\"bibcode\")) .. \" \" .. a(\"bibcode\") .. \"]&lt;/small&gt;\")\n\t\tend\n\t\tif a(\"doi\") then\n\t\t\tadd(\", &lt;small&gt;[[w:Digital object identifier|DOI]]:&lt;span class=\\\"neverexpand\\\"&gt;[https://doi.org/\"\n\t\
      \t\t\t.. mw.uri.encode(a(\"doi\") or a(\"doilabel\") or \"\")\n\t\t\t\t.. \" \" .. tag_nowiki(a(\"doi\")) .. \"]&lt;/span&gt;&lt;/small&gt;\")\n\t\tend\n\t\tif a(\"isbn\") then\n\t\t\tadd(\", &lt;small&gt;\" .. isbn(a(\"isbn\")) .. \"&lt;/small&gt;\")\n\
      \t\tend\n\t\tif a(\"issn\") then\n\t\t\tadd(\", &lt;small&gt;\" .. issn(a(\"issn\")) .. \"&lt;/small&gt;\")\n\t\tend\n\t\tif a(\"jstor\") then\n\t\t\tadd(\", &lt;small&gt;[[w:JSTOR|JSTOR]] [http://www.jstor.org/stable/\" ..\n\t\t\t\tmw.uri.encode(a(\"\
      jstor\")) .. \" \" .. a(\"jstor\") .. \"]&lt;/small&gt;\")\n\t\tend\n\t\tif a(\"lccn\") then\n\t\t\tadd(\", &lt;small&gt;[[w:Library of Congress Control Number|LCCN]] [http://lccn.loc.gov/\" ..\n\t\t\t\tmw.uri.encode(a(\"lccn\")) .. \" \" .. a(\"lccn\"\
      ) .. \"]&lt;/small&gt;\")\n\t\tend\n\t\tif a(\"oclc\") then\n\t\t\tadd(\", &lt;small&gt;[[w:OCLC|OCLC]] [http://worldcat.org/oclc/\" ..\n\t\t\t\tmw.uri.encode(a(\"oclc\")) .. \" \" .. a(\"oclc\") .. \"]&lt;/small&gt;\")\n\t\tend\n\t\tif a(\"ol\") then\n\
      \t\t\tadd(\", &lt;small&gt;[[w:Open Library|OL]] [https://openlibrary.org/works/OL\" ..\n\t\t\t\tmw.uri.encode(a(\"ol\")) .. \"/ \" .. a(\"ol\") .. \"]&lt;/small&gt;\")\n\t\tend\n\t\tif a(\"pmid\") then\n\t\t\tadd(\", &lt;small&gt;[[w:PubMed Identifier|PMID]]\
      \ [http://www.ncbi.nlm.nih.gov/pubmed/\" ..\n\t\t\t\tmw.uri.encode(a(\"pmid\")) .. \" \" .. a(\"pmid\") .. \"]&lt;/small&gt;\")\n\t\tend\n\t\tif a(\"ssrn\") then\n\t\t\tadd(\", &lt;small&gt;[[w:Social Science Research Network|SSRN]] [http://ssrn.com/abstract=\"\
      \ ..\n\t\t\t\tmw.uri.encode(a(\"ssrn\")) .. \" \" .. a(\"ssrn\") .. \"]&lt;/small&gt;\")\n\t\tend\n\t\tif a(\"id\") then\n\t\t\tadd(\", &lt;small&gt;\" .. a(\"id\") .. \"&lt;/small&gt;\")\n\t\tend\n\t\tif a(\"archiveurl\") then\n\t\t\tadd(\", archived\
      \ from \")\n\t\t\tlocal url = a(\"url\")\n\t\t\tif not url then\n\t\t\t\t-- attempt to infer original URL from archive URL; this works at\n\t\t\t\t-- least for Wayback Machine (web.archive.org) URL's\n\t\t\t\turl = rmatch(a(\"archiveurl\"), \"/(https?:.*)$\"\
      )\n\t\t\t\tif not url then\n\t\t\t\t\terror(\"When archiveurl\" .. suf .. \"= is specified, url\" .. suf .. \"= must also be included\")\n\t\t\t\tend\n\t\t\tend\n\t\t\tadd(\"[\" .. url .. \" the original] on \")\n\t\t\tif a(\"archivedate\") then\n\t\t\t\
      \tadd(format_date(a(\"archivedate\")))\n\t\t\telse\n\t\t\t\terror(\"When archiveurl\" .. suf .. \"= is specified, archivedate\" .. suf .. \"= must also be included\")\n\t\t\tend\n\t\tend\n\t\tif a(\"accessdate\") then\n\t\t\t--Otherwise do not display\
      \ here, as already used as a fallback for missing date= or year= earlier.\n\t\t\tif a(\"date\") or a(\"nodate\") or a(\"year\") then\n\t\t\t\tadd(\", retrieved \" .. format_date(a(\"accessdate\")))\n\t\t\tend\n\t\tend\n\t\tif a(\"laysummary\") then\n\t\
      \t\tadd(\", [\" .. a(\"laysummary\") .. \" lay summary]\")\n\t\t\tif a(\"laysource\") then\n\t\t\t\tadd(\"&amp;nbsp;–&amp;nbsp;''\" .. a(\"laysource\") .. \"''\")\n\t\t\tend\n\t\tend\n\t\tif a(\"laydate\") then\n\t\t\tadd(\" (\" .. format_date(a(\"laydate\"\
      )) .. \")\")\n\t\tend\n\t\tif a(\"section\") then\n\t\t\tadd(\", \" .. (a(\"sectionurl\") and \"[\" .. a(\"sectionurl\") .. \" \" .. a(\"section\") .. \"]\" or a(\"section\")))\n\t\tend\n\t\tif a(\"line\") then\n\t\t\tadd(\", line \" .. a(\"line\"))\n\t\
      \telseif a(\"lines\") then\n\t\t\tadd(\", lines \" .. a(\"lines\"))\n\t\tend\n\t\tif a(\"page\") or a(\"pages\") then\n\t\t\tlocal function page_or_pages()\n\t\t\t\tif a(\"pages\") then\n\t\t\t\t\treturn \"pages \" .. a(\"pages\")\n\t\t\t\telse\n\t\t\t\
      \t\treturn \"page \" .. a(\"page\")\n\t\t\t\tend\n\t\t\tend\n\t\t\tadd(\", \" .. (a(\"pageurl\") and \"[\" .. a(\"pageurl\") .. \" \" .. page_or_pages() .. \"]\" or page_or_pages()))\n\t\tend\n\t\tif a(\"column\") or a(\"columns\") then\n\t\t\tlocal function\
      \ column_or_columns()\n\t\t\t\tif a(\"columns\") then\n\t\t\t\t\treturn \"columns \" .. a(\"columns\")\n\t\t\t\telse\n\t\t\t\t\treturn \"column \" .. a(\"column\")\n\t\t\t\tend\n\t\t\tend\n\t\t\tadd(\", \" .. (a(\"columnurl\") and \"[\" .. a(\"columnurl\"\
      ) .. \" \" .. column_or_columns() .. \"]\" or column_or_columns()))\n\t\tend\n\t\tif a(\"other\") then\n\t\t\tadd(\", \" .. a(\"other\"))\n\t\tend\n\tend\n\n\t-- display all the text that comes after the author, for the main portion.\n\tpostauthor(\"\"\
      , \"\")\n\n\tlocal sep\n\t\n\t-- If there's a \"newversion\" section, add the new-version text.\n\tif has_newversion() then\n\t\t--Test for new version of work.\n\t\tadd(\"&amp;#59; \") -- semicolon\n\t\tif args.newversion then\n\t\t\tadd(args.newversion)\n\
      \t\telseif not args.edition2 then\n\t\t\tif has_new_title_or_author() then\n\t\t\t\tadd(\"republished as\")\n\t\t\telse\n\t\t\t\tadd(\"republished\")\n\t\t\tend\n\t\tend\n\t\tadd(\" \")\n\t\tsep = \"\"\n\telse\n\t\tsep = \", \"\n\tend\n\n\t-- Add the author(s).\n\
      \tif args[\"2ndauthor\"] or args[\"2ndlast\"] then\n\t\tadd(\" \")\n\t\tif args[\"2ndauthorlink\"] then\n\t\t\tadd(\"[[w:\" .. args[\"2ndauthorlink\"] .. \"|\")\n\t\tend\n\t\tif args[\"2ndauthor\"] then\n\t\t\tadd(args[\"2ndauthor\"])\n\t\telseif args[\"\
      2ndlast\"] then\n\t\t\tadd(args[\"2ndlast\"])\n\t\t\tif args[\"2ndfirst\"] then\n\t\t\t\tadd(\", \" .. args[\"2ndfirst\"])\n\t\t\tend\n\t\tend\n\t\tif args[\"2ndauthorlink\"] then\n\t\t\tadd(\"]]\")\n\t\tend\n\t\t-- FIXME, we should use sep = \", \" here\
      \ too and fix up the handling\n\t\t-- of chapter/mainauthor/etc. in postauthor() to use add_with_sep().\n\t\tif has_new_title_or_ancillary_author() then\n\t\t\tadd(\", \")\n\t\t\tsep = \"\"\n\t\telse\n\t\t\tsep = \", \"\n\t\tend\n\tend\n\n\t-- display\
      \ all the text that comes after the author, for the \"newversion\"\n\t-- section.\n\tpostauthor(2, sep)\n\n\tadd(\":\")\n\n\t-- Concatenate output portions to form output text.\n\tlocal output_text = table.concat(output)\n\n\t-- Remainder of code handles\
      \ adding categories. We add one or more of the\n\t-- following categories:\n\t--\n\t-- 1. [[Category:LANG terms with quotations]], based on the first language\n\t--    code in termlang= or lang=. Not added to non-main-namespace pages\n\t--    except for\
      \ Reconstruction: and Appendix:. Not added if lang= is\n\t--    missing or nocat= is given.\n\t-- 2. [[Category:Quotations with missing lang parameter]], if lang= isn't\n\t--    specified. Added to some non-main-namespace pages, but not talk pages,\n\t\
      --    user pages, or Wiktionary discussion pages (e.g. Grease Pit, Tea Room,\n\t--    Beer Parlour).\n\t-- 3. [[Category:Quotations using nocat parameter]], if nocat= is given.\n\t--    Added to the same pages as for [[Category:Quotations with missing\
      \ lang parameter]].\n\t-- 4. [[Category:Quotations using archiveurl without archivedate]],\n\t--    if archiveurl= is specified but not archivedate=. Added to the same\n\t--    pages as for [[Category:Quotations with missing lang parameter]].\n\t-- 5.\
      \ [[Category:Quotation templates using both date and year]], if both\n\t--    date= and year= are specified. Added to the same pages as for\n\t--    [[Category:Quotations with missing lang parameter]].\n\t\n\tlocal tracking_categories = {}\n\tlocal categories\
      \ = {}\n\tlocal NAMESPACE = mw.title.getCurrentTitle().nsText\n\n\tlocal langcode = args.termlang or argslang or \"und\"\n\tlangcode = rsplit(langcode, \",\")[1]\n\tlocal lang = require(\"Module:languages\").getByCode(langcode)\n\tif not lang and NAMESPACE\
      \ ~= \"Template\" then\n\t\terror(\"The language code \\\"\" .. langcode .. \"\\\" is not valid.\")\n\tend\n\n\tif args.nocat then\n\t\ttable.insert(tracking_categories, \"Quotations using nocat parameter\")\n\tend\n\tif argslang then\n\t\tif lang and\
      \ not args.nocat then\n\t\t\ttable.insert(categories, lang:getCanonicalName() .. \" terms with quotations\")\n\t\tend\n\telse\n\t\ttable.insert(tracking_categories, \"Quotations with missing lang parameter\")\n\tend\n\tif args.archiveurl and not args.archivedate\
      \ then\n\t\ttable.insert(tracking_categories, \"Quotations using archiveurl without archivedate\")\n\tend\n\tif args.date and args.year then\n\t\ttable.insert(tracking_categories, \"Quotation templates using both date and year\")\n\tend\n\n\tlocal FULLPAGENAME\
      \ = mw.title.getCurrentTitle().fullText\n\treturn output_text .. (not lang and \"\" or\n\t\trequire(\"Module:utilities\").format_categories(categories, lang) ..\n\t\trequire(\"Module:utilities\").format_categories(tracking_categories, lang, nil, nil,\n\
      \t\t\tnot require(\"Module:usex/templates\").page_should_be_ignored(FULLPAGENAME)))\nend\n\n-- External interface, meant to be called from a template.\nfunction export.source_t(frame)\n\tlocal args = clone_args(frame)\n\tlocal newret = export.source(args)\n\
      \tif test_new_code then\n\t\tlocal oldret = frame:expandTemplate{title=\"quote-meta/source\", args=args}\n\t\tlocal function canon(text)\n\t\t\ttext = rsub(rsub(text, \"&amp;#32;\", \" \"), \" \", \"{SPACE}\")\n\t\t\ttext = rsub(rsub(text, \"%[\", \"{LBRAC}\"\
      ), \"%]\", \"{RBRAC}\")\n\t\t\ttext = rsub(text, \"`UNIQ%-%-nowiki%-[0-9A-F]+%-QINU`\", \"`UNIQ--nowiki-{REPLACED}-QINU`\")\n\t\t\treturn text\n\t\tend\n\t\tlocal canon_newret = canon(newret)\n\t\tlocal canon_oldret = canon(oldret)\n\t\tif canon_newret\
      \ ~= canon_oldret then\n\t\t\trequire(\"Module:debug\").track(\"quote-source/diff\")\n\t\t\tif test_new_code_with_errors then\n\t\t\t\terror(\"different: &lt;&lt;\" .. canon_oldret .. \"&gt;&gt; vs &lt;&lt;\" .. canon_newret .. \"&gt;&gt;\")\n\t\t\tend\n\
      \t\telse\n\t\t\trequire(\"Module:debug\").track(\"quote-source/same\")\n\t\t\tif test_new_code_with_errors then\n\t\t\t\terror(\"same\")\n\t\t\tend\n\t\tend\n\t\treturn oldret\n\tend\n\treturn newret\nend\n\nreturn export\n\n-- For Vim, so we get 4-space\
      \ tabs\n-- vim: set ts=4 sw=4 noet:</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T12:53:01.348Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Atime&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=45965 t=1556369581233057
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:53:01 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1339.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1085 pass, cp3042 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 637272278, 113934688, 439476957
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"6061719\" pageid=\"6061719\" ns=\"828\" title=\"Module:time\"><revisions><rev user=\"Benwing2\" timestamp=\"2019-02-24T22:08:58Z\" contentformat=\"\
      text/plain\" contentmodel=\"Scribunto\" comment=\"don&#039;t use undefined var &#039;frame&#039;\" xml:space=\"preserve\">local export = {}\n\n\nlocal language = mw.getContentLanguage()\nlocal function format(code, timestamp)\n\treturn language:formatDate(code,\
      \ timestamp)\nend\n\nlocal sub = mw.ustring.sub\nlocal gsub = mw.ustring.gsub\n\n\nlocal abbrs = {\n\t[\"a.\"] = { anchor = \"a.\", full = \"ante\", },\n\t[\"c.\"] = { anchor = \"c.\", full = \"circa\", },\n\t[\"p.\"] = { anchor = \"p.\", full = \"post\"\
      , },\n}\n\n\n--[[\n\t\"1 January, 2015\", with day of the month before month name\n\tand a comma, is not a valid date format; formatDate will\n\tignore the year \"2015\" and replace it with the current year.\n\tThe comma therefore has to be removed.\n\
      ]]\nlocal function fix_date(date)\n\tif tonumber(date) ~= nil then\n\t\terror(\"|date= parameter should contain a full date: year, month, day of month. \"\n\t\t\t.. \"Use |year= parameter for year.\")\n\tend\n\tif date then\n\t\treturn gsub(date, \"(%d+\
      \ %a+),\", \"%1\")\n\tend\nend\n\n\nlocal function maintenance_line(text)\n\treturn \"&lt;span class=\\\"maintenance-line\\\" style=\\\"color: #777777;\\\"&gt;(\" .. text .. \")&lt;/span&gt;\"\nend\n\n\nfunction export.quote(frame)\n\tlocal params = {\n\
      \t\t[\"year\"] = {},\n\t\t[\"month\"] = {},\n\t\t[\"date\"] = {},\n\t\t[\"start_date\"] = {},\n\t\t[\"start_year\"] = {},\n\t\t[\"nodate\"] = { type = boolean, default = false },\n\t\t[\"accessdate\"] = {},\n\t\t[\"origdate\"] = {},\n\t\t[\"origyear\"\
      ] = {},\n\t\t[\"origmonth\"] = {},\n\t}\n\t\n\tlocal args = require(\"Module:parameters\").process(frame:getParent().args, params, true)\n\treturn export.quote_impl(args)\nend\n\nfunction export.quote_impl(args)\t\n\tlocal output = {}\n\tlocal namespace\
      \ = mw.title.getCurrentTitle().nsText\n\t\n\tlocal start_date, date = fix_date(args.start_date), fix_date(args.date)\n\t\n\tlocal function insert(text)\n\t\ttable.insert(output, text)\n\tend\n\t\n\tlocal year = args.year\n\t\n\tif year then\n\t\tlocal\
      \ prefix = sub(year, 1, 2)\n\t\tlocal abbr = abbrs[prefix]\n\t\t\n\t\tif abbr then\n\t\t\tinsert('\\'\\'[[Appendix:Glossary#' .. abbr.anchor .. '|&lt;abbr title=\"' .. abbr.full .. '\"&gt;' .. abbr.anchor .. '&lt;/abbr&gt;]]\\'\\' ')\n\t\t\t-- [[Special:WhatLinksHere/Template:tracking/quote/abbr]]\n\
      \t\t\trequire(\"Module:debug\").track(\"quote/abbr\")\n\t\t\t\n\t\t\t-- Remove lowercase letter, period, and space from beginning of year parameter.\n\t\t\tyear = gsub(year, \"%l.%s*\", \"\")\n\t\tend\n\t\t\n\t\tif start_date then\n\t\t\tif format(\"Y\"\
      , start_date) == year then\n\t\t\t\tif format(\"F\", start_date) == args.month then\n\t\t\t\t\tinsert(\n\t\t\t\t\t\tformat(\"'''Y''' F j\", start_date)\n\t\t\t\t\t\t\t.. \"–\" .. date\n\t\t\t\t\t)\n\t\t\t\telse\n\t\t\t\t\tinsert(\n\t\t\t\t\t\tformat(\"\
      '''Y''' F j\",\n\t\t\t\t\t\t\tstart_date)\n\t\t\t\t\t\t\t.. \" – \" .. args.month .. \" \" .. date\n\t\t\t\t\t)\n\t\t\t\tend\n\t\t\tend\n\t\telse\n\t\t\tif args.month then\n\t\t\t\tif args.start_year then\n\t\t\t\t\tinsert(\n\t\t\t\t\t\t\"'''\" .. args.start_year\n\
      \t\t\t\t\t\t.. \"'''&amp;nbsp;– \"\n\t\t\t\t\t)\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\tinsert(\n\t\t\t\t\t\"'''\" .. year .. \"''' \"\n\t\t\t\t\t.. args.month\n\t\t\t\t)\n\t\t\t\t\n\t\t\t\tif date then\n\t\t\t\t\tinsert(\" \" .. date)\n\t\t\t\tend\n\t\t\telse\n\
      \t\t\t\tif args.start_year then\n\t\t\t\t\tinsert(\"'''\" .. args.start_year .. \"'''–\")\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\tinsert(\"'''\" .. year .. \"'''\")\n\t\t\tend\n\t\tend\n\telse\n\t\tif date then\n\t\t\tif start_date then\n\t\t\t\tif format(\"Y\"\
      , start_date) == format(\"Y\", date) then\n\t\t\t\t\tif format(\"n\", start_date) == format(\"n\", date) then\n\t\t\t\t\t\tinsert(\n\t\t\t\t\t\t\tformat(\"'''Y''' F j\", start_date)\n\t\t\t\t\t\t\t\t.. \"–\" .. format(\"j\", date)\n\t\t\t\t\t\t)\n\t\t\t\
      \t\telse\n\t\t\t\t\t\tinsert(\n\t\t\t\t\t\t\tformat(\"'''Y''' F j\", start_date)\n\t\t\t\t\t\t\t\t.. \"–\" .. format(\"F j\", date)\n\t\t\t\t\t\t)\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\tinsert(\n\t\t\t\t\t\tformat(\"'''Y''' F j\", start_date)\n\t\t\t\t\
      \t\t\t.. \"–\" .. format(\"'''Y''' F j\", date)\n\t\t\t\t\t)\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tinsert(\n\t\t\t\t\tformat(\"'''Y''' F j\", date)\n\t\t\t\t)\n\t\t\tend\n\t\telse\n\t\t\tif not args.nodate then\n\t\t\t\tif args.accessdate then\n\t\t\t\t\t\
      insert(\n\t\t\t\t\t\tformat(\"'''Y''' F j\", args.accessdate)\n\t\t\t\t\t\t.. \" (last accessed)\"\n\t\t\t\t\t)\n\t\t\t\telse\n\t\t\t\t\tif namespace ~= \"Template\" then\n\t\t\t\t\t\tinsert(\n\t\t\t\t\t\t\tmaintenance_line(\"Can we [[:Category:Requests\
      \ for date|date]] this quote?\") ..\n\t\t\t\t\t\t\t\"[[Category:Requests for date]]\"\n\t\t\t\t\t\t)\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\n\treturn table.concat(output)\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T12:53:01.571Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Anumber-utilities&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=54733 t=1556369581450941
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:53:01 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1346.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1085 pass, cp3033 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 636551937, 102244358, 448903092
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"6087680\" pageid=\"6087680\" ns=\"828\" title=\"Module:number-utilities\"><revisions><rev user=\"JohnC5\" timestamp=\"2017-04-12T15:32:22Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"Created page with &quot;local export = {}  function export.get_number(text) &#9;if text == &#039;&#039; or text == nil then return nil end &#9; &#9;if type(text) == &#039;string&#039;\
      \ then &#9;&#9;text = mw.ustring.gsub(text, &quot;,&quot;, &quot;&quot;)...&quot;\" xml:space=\"preserve\">local export = {}\n\nfunction export.get_number(text)\n\tif text == '' or text == nil then return nil end\n\t\n\tif type(text) == 'string' then\n\
      \t\ttext = mw.ustring.gsub(text, \",\", \"\")\n\tend\n\t\n\tlocal j = tonumber(text)\n\tif j ~= nil then\n\t\treturn j\n\telse\n\t\treturn nil\n\tend\nend\n\nfunction export.is_number(frame)\n\treturn export.get_number(frame:getParent().args[1])\nend\n\
      \nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T12:53:01.758Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Aitalics&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=49726 t=1556369581641727
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:53:01 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1314.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1089 pass, cp3033 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 171317257, 93441291, 453694583
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"5880637\" pageid=\"5880637\" ns=\"828\" title=\"Module:italics\"><revisions><rev user=\"Erutuon\" timestamp=\"2018-12-26T23:15:23Z\" contentformat=\"\
      text/plain\" contentmodel=\"Scribunto\" comment=\"fix case starting with bolding\" xml:space=\"preserve\">local export = {}\nlocal find = mw.ustring.find\nlocal match = mw.ustring.match\nlocal gsub = mw.ustring.gsub\n\nfunction export.i(text)\n\tif text\
      \ == \"\" or text == nil then\n\t\treturn nil\n\tend\n\t\n\tif type(text) == \"table\" and text.args then\n\t\ttext = text.args[1]\n\tend\n\t\n\t-- Remove whitespace from beginning and end of text.\n\ttext = mw.text.trim(text)\n\t\n\t-- Find parenthesized\
      \ text.\n\tlocal parenthesis = \"\"\n\tif find(text, \"%b()$\") then\n\t\ttext, parenthesis = match(text, \"^(.*)(%b())$\")\n\t\tif text == \"\" or text == nil then\n\t\t\terror(\"Malformed page name: \" .. text)\n\t\tend\n\tend\n\t\n\ttext = \"''\" ..\
      \ text .. \"''\"\n\t\n\t--[[ Adds italics toggle ('') around the whitespace\n\t\tthat surrounds various things that aren't supposed to be italicized:\n\t\tfor instance, Fragaria × ananassa becomes ''Fragaria'' × ''ananassa''.\n\t\t(The hybridization symbol\
      \ × isn't supposed to be italicized.) ]]\n\tlocal notItalicized = {\n\t\t[\"subsp.\"] = true, [\"ssp.\"] = true, [\"var.\"] = true, [\"f.\"] = true,\n\t\t[\"sect.\"] = true, [\"subsect.\"] = true, [\"subg.\"] = true,\n\t}\n\tlocal hybrid = \"×\"\n\t\n\t\
      text = text:gsub(\"(%s*([a-z]+%.)%s*)\",\n\t\tfunction(wholeMatch, abbreviation)\n\t\t\tif notItalicized[abbreviation] then\n\t\t\t\treturn \"''\" .. wholeMatch .. \"''\"\n\t\t\tend\n\t\tend)\n\t\n\ttext = text:gsub(\"%s*\" .. hybrid .. \"%s*\", \"''%0''\"\
      ):gsub(\"%f[']''''%f[^']\", \"\")\n\t\n\treturn text .. parenthesis\nend\n\nfunction export.unitalicize_brackets(text)\n\tif type(text) == \"table\" and text.args then\n\t\ttext = text.args[1]\n\tend\n\t\n\tif not text or text == \"\" then\n\t\treturn\
      \ nil\n\tend\n\t\n\tlocal function unitalicize(text)\n\t\treturn '&lt;span style=\"font-style: normal;\"&gt;' .. text .. '&lt;/span&gt;'\n\tend\n\t\n\tlocal function process(text)\n\t\tif text:find(\"[[\", 1, true) then\n\t\t\tif text:find(\"|\") then\n\
      \t\t\t\treturn text:gsub(\n\t\t\t\t\t\"|.-%]%]\",\n\t\t\t\t\tfunction (piping)\n\t\t\t\t\t\treturn piping:gsub(\"%b[]\", process)\n\t\t\t\t\tend)\n\t\t\tend\n\t\t\t-- do nothing with un-piped wikilinks\n\t\t--[=[\n\t\telseif text:find(\"[http\", 1, true)\
      \ then\n\t\t\treturn text:gsub(\n\t\t\t\t\"%[([^ ]+ )([^%]]+)%]\",\n\t\t\t\tfunction (URL, link_text)\n\t\t\t\t\treturn \"[\" .. URL .. process(link_text) .. \"]\"\n\t\t\t\tend)\n\t\t--]=]\n\t\telseif text:find(\"^%[https?://\") then\n\t\t\t\treturn text:gsub(\n\
      \t\t\t\t\t\" .+\",\n\t\t\t\t\tfunction (link_text)\n\t\t\t\t\t\treturn link_text:gsub(\"%b[]\", process)\n\t\t\t\t\tend)\n\t\telse\n\t\t\tlocal inside_brackets = text:sub(2, -2)\n\t\t\tif inside_brackets == \"...\" or inside_brackets == \"…\" then\n\t\t\
      \t\treturn unitalicize(text)\n\t\t\telse\n\t\t\t\treturn unitalicize(\"[\") .. inside_brackets .. unitalicize(\"]\")\n\t\t\tend\n\t\tend\n\tend\n\t\n\ttext = text:gsub(\"%b[]\", process)\n\t\n\treturn text\nend\n\nfunction export.test(frame)\n\tlocal text\
      \ = frame.args[1]\n\tlocal quote = require(\"Module:yesno\")(frame.args.quote)\n\tif quote then\n\t\treturn export.unitalicize_brackets(text)\n\telse\n\t\treturn export.i(text)\n\tend\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T12:53:01.951Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Template%3Aquote-meta&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=37478 t=1556369581848918
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:53:01 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1339.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1079 pass, cp3041 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 441556019, 298672577, 446124201
    body: |-
      <?xml version="1.0"?><api batchcomplete=""><warnings><main xml:space="preserve">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space="preserve">Because "rvslots" was not specified, a legacy format has been used for the output. This format is deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx="761997" pageid="761997" ns="10" title="Template:quote-meta"><revisions><rev user="Benwing2" timestamp="2019-02-24T06:53:17Z" contentformat="text/x-wiki" contentmodel="wikitext" comment="always pass nocat=1 to quote-meta since {{quote-meta/source}} already adds the &quot;FOO terms with quotations&quot; category" xml:space="preserve">&lt;noinclude&gt;# {{n-g|A word that means something}}.
      &lt;/noinclude&gt;{{{indent1|#*}}} &lt;div class="citation-whole"&gt;&lt;span class="cited-source"&gt;{{{1|{{{source&lt;includeonly&gt;|&lt;/includeonly&gt;}}}}}}&lt;!--
      --&gt;&lt;/span&gt;&lt;dl&gt;&lt;dd&gt;&lt;!--
      --&gt;{{#if:{{{2|{{{passage&lt;includeonly&gt;|&lt;/includeonly&gt;}}}}}}{{{3|{{{translation|}}}}}}{{{4|{{{transliteration|}}}}}}&lt;!--
        if passage or translation or transliteration is present, call quote-meta/quote to display actual quote
        --&gt;|{{quote-meta/quote|{{#invoke:usex/templates|first_lang|{{{lang|en}}}}}|{{{2|{{{passage&lt;includeonly&gt;|&lt;/includeonly&gt;}}}}}}|{{{3|{{{translation&lt;includeonly&gt;|&lt;/includeonly&gt;}}}}}}|tr={{{4|{{{transliteration&lt;includeonly&gt;|&lt;/includeonly&gt;}}}}}}|brackets={{#ifeq:{{{brackets|}}}|on|on|}}|subst={{{subst|}}}|lit={{{lit|}}}|nocat=1|footer={{{footer|}}}}}&lt;!--
        else display nothing
        --&gt;|&lt;!--
      --&gt;}}&lt;!--
      --&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</rev></revisions></page></pages></query></api>
- recorded: 2019-04-27T12:53:02.149Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Template%3Aquote-meta%2Fquote&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=42231 t=1556369582042817
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:53:02 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1282.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1079 pass, cp3040 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 438352247, 355009922, 450640448
    body: |-
      <?xml version="1.0"?><api batchcomplete=""><warnings><main xml:space="preserve">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space="preserve">Because "rvslots" was not specified, a legacy format has been used for the output. This format is deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx="7095994" pageid="7095994" ns="10" title="Template:quote-meta/quote"><revisions><rev user="Dpleibovitz" timestamp="2019-03-02T04:41:54Z" contentformat="text/x-wiki" contentmodel="wikitext" comment="show documentation" xml:space="preserve">{{#invoke:usex/templates|usex_t|quote=quote-meta}}&lt;noinclude&gt;
      {{documentation}}
      &lt;/noinclude&gt;</rev></revisions></page></pages></query></api>
- recorded: 2019-04-27T12:53:02.524Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Template%3Al&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=54457 t=1556369582406523
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:53:02 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1282.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1079 pass, cp3030 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 439005245, 147793440, 458722222
    body: <?xml version="1.0"?><api batchcomplete=""><warnings><main xml:space="preserve">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space="preserve">Because "rvslots" was not specified, a legacy format has been used for the output. This format is deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx="4580518" pageid="4580518" ns="10" title="Template:l"><revisions><rev user="Rua" timestamp="2014-10-30T23:36:59Z" contentformat="text/x-wiki" contentmodel="wikitext" comment="CodeCat moved page [[Template:l]] to [[Template:link]] over redirect" xml:space="preserve">#REDIRECT [[Template:link]]</rev></revisions></page></pages></query></api>
- recorded: 2019-04-27T12:53:02.702Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Template%3Alink&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=37121 t=1556369582600156
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:53:02 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1285.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1085 pass, cp3041 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 629578028, 315000336, 460424224
    body: |-
      <?xml version="1.0"?><api batchcomplete=""><warnings><main xml:space="preserve">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space="preserve">Because "rvslots" was not specified, a legacy format has been used for the output. This format is deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx="784216" pageid="784216" ns="10" title="Template:link"><revisions><rev user="Dixtosa" timestamp="2016-11-05T20:05:15Z" contentformat="text/x-wiki" contentmodel="wikitext" comment="undo myslef. moving template data to documentation page to see if that works too" xml:space="preserve">{{#invoke:links/templates|l_term_t&lt;noinclude&gt;|demo=term&lt;/noinclude&gt;}}&lt;!--

      --&gt;{{#ifeq:{{PAGENAME}}|RecentChanges||&lt;!--
          --&gt;{{#ifeq:{{{1|}}}|und|[[Category:Undetermined language links]]}}&lt;!--
      --&gt;}}&lt;!--

      --&gt;{{redlink category|{{{1|}}}|{{{2|}}}|template=l}}&lt;!--

      --&gt;&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</rev></revisions></page></pages></query></api>
- recorded: 2019-04-27T12:53:02.911Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Alinks%2Ftemplates&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=50579 t=1556369582791639
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:53:02 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1314.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1085 pass, cp3042 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 618871833, 97013178, 451369478
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"4282542\" pageid=\"4282542\" ns=\"828\" title=\"Module:links/templates\"><revisions><rev user=\"Rua\" timestamp=\"2019-04-03T18:56:49Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"\" xml:space=\"preserve\">local export = {}\n\n--[=[\n\tModules used:\n\t[[Module:links]]\n\t[[Module:languages]]\n\t[[Module:scripts]]\n\t[[Module:parameters]]\n\t[[Module:debug]]\n]=]\n\
      \n-- Used in [[Template:l]] and [[Template:m]].\nfunction export.l_term_t(frame)\n\tlocal face = frame.args[\"face\"]\n\tlocal allowSelfLink = frame.args[\"notself\"]; allowSelfLink = not allowSelfLink or allowSelfLink == \"\"\n\t\n\tlocal params = {\n\
      \t\t[1] = {required = true},\n\t\t[2] = {},\n\t\t[3] = {},\n\t\t[4] = {alias_of = \"gloss\"},\n\t\t[\"accel-form\"] = {},\n\t\t[\"accel-nostore\"] = {type = \"boolean\"},\n\t\t[\"accel-translit\"] = {},\n\t\t[\"g\"] = {list = true},\n\t\t[\"gloss\"] =\
      \ {},\n\t\t[\"id\"] = {},\n\t\t[\"lit\"] = {},\n\t\t[\"pos\"] = {},\n\t\t[\"t\"] = {alias_of = \"gloss\"},\n\t\t[\"tr\"] = {},\n\t\t[\"ts\"] = {},\n\t\t[\"sc\"] = {},\n\t}\n\t\n\t-- Compatibility mode for {{term}}.\n\t-- If given a nonempty value, the\
      \ function uses lang= to specify the\n\t-- language, and all the positional parameters shift one number lower.\n\tlocal compat = (frame.args[\"compat\"] or \"\") ~= \"\"\n\t\n\tif compat then\n\t\tparams[\"lang\"] = {},\n\t\ttable.remove(params, 1)\n\t\
      end\n\t\n\tlocal args = require(\"Module:parameters\").process(frame:getParent().args, params)\n\t\n\tlocal lang = args[compat and \"lang\" or 1]\n\t\n\t-- Tracking for missing language or und\n\tif not lang then\n\t\trequire(\"Module:debug\").track(\"\
      link/no lang\")\n\telseif lang == \"und\" then\n\t\trequire(\"Module:debug\").track(\"link/und\")\n\tend\n\t\n\tlang = lang or \"und\"\n\tlocal sc = args[\"sc\"]\n\t\n\tlocal term = args[(compat and 1 or 2)]\n\tlocal alt = args[(compat and 2 or 3)]\n\t\
      \n\t-- Check parameters\n\tlang = require(\"Module:languages\").getByCode(lang) or\n\t\trequire(\"Module:languages\").err(lang, 1)\n\t\n\tif sc then\n\t\tsc = require(\"Module:scripts\").getByCode(sc) or error(\"The script code \\\"\" .. sc .. \"\\\" is\
      \ not valid.\")\n\tend\n\t\n\tif not term and not alt and frame.args[\"demo\"] then\n\t\tterm = frame.args[\"demo\"]\n\tend\n\t\n\t-- Forward the information to full_link\n\treturn require(\"Module:links\").full_link( \n\t\t{\n\t\t\tlang = lang, \n\t\t\
      \tsc = sc, \n\t\t\tterm = term,\n\t\t\talt = alt, \n\t\t\tid = args[\"id\"], \n\t\t\ttr = args[\"tr\"],\n\t\t\tts = args[\"ts\"],\n\t\t\tgenders = args[\"g\"], \n\t\t\tgloss = args[\"gloss\"], \n\t\t\tpos = args[\"pos\"], \n\t\t\tlit = args[\"lit\"],\n\
      \t\t\taccel = args[\"accel-form\"] and {\n\t\t\t\tform = args[\"accel-form\"],\n\t\t\t\tnostore = args[\"accel-nostore\"],\n\t\t\t\ttranslit = args[\"accel-translit\"],\n\t\t\t} or nil,\n\t\t},\n\t\tface,\n\t\tallowSelfLink\n\t)\nend\n\n-- Used in [[Template:ll]].\n\
      function export.ll(frame)\n\tlocal params = {\n\t\t[1] = { required = true },\n\t\t[2] = { allow_empty = true },\n\t\t[3] = {},\n\t\t[\"notself\"] = { type = \"boolean\", default = false },\n\t\t[\"id\"] = {},\n\t}\n\tlocal args = require(\"Module:parameters\"\
      ).process(frame:getParent().args, params)\n\tlocal allowSelfLink = not args[\"notself\"]\n\t\n\tlocal lang = args[1]\n\tlang = require(\"Module:languages\").getByCode(lang) or require(\"Module:languages\").err(lang, 1)\n\t\n\tlocal text = args[2]\n\tlocal\
      \ alt = args[3]\n\tif text == \"\" then\n\t\treturn alt or \"\"\n\tend\n\t\n\tlocal id = args[\"id\"]\n\t\n\treturn require(\"Module:links\").language_link(\n\t\t{\n\t\t\tterm = text,\n\t\t\talt = alt,\n\t\t\tlang = lang,\n\t\t\tid = id\n\t\t},\n\t\tallowSelfLink\n\
      \t)\nend\n\nfunction export.def_t(frame)\n\tlocal params = {\n\t\t[1] = {required = true, default = \"\"},\n\t}\n\t\n\tlocal args = require(\"Module:parameters\").process(frame:getParent().args, params)\n\t\n\treturn require(\"Module:links\").english_links(args[1])\n\
      end\n\n\nfunction export.linkify_t(frame)\n\tlocal params = {\n\t\t[1] = {required = true, default = \"\"},\n\t}\n\t\n\tlocal args = require(\"Module:parameters\").process(frame:getParent().args, params)\n\t\n\targs[1] = mw.text.trim(args[1])\n\t\n\tif\
      \ args[1] == \"\" or args[1]:find(\"[[\", nil, true) then\n\t\treturn args[1]\n\telse\n\t\treturn \"[[\" .. args[1] .. \"]]\"\n\tend\nend\n\nfunction export.section_link_t(frame)\n\tlocal params = {\n\t\t[1] = {},\n\t}\n\t\n\tlocal args = require(\"Module:parameters\"\
      ).process(frame:getParent().args, params)\n\t\n\treturn require(\"Module:links\").section_link(args[1])\nend\n\nfunction export.language_name_link_t(frame)\n\tlocal face = frame.args[\"face\"]\n\tlocal allowSelfLink = frame.args[\"notself\"]; allowSelfLink\
      \ = not allowSelfLink or allowSelfLink == \"\"\n\t\n\tlocal params = {\n\t\t[1] = {required = true},\n\t\t[2] = {},\n\t\t[3] = {},\n\t\t[4] = {alias_of = \"gloss\"},\n\t\t[\"g\"] = {list = true},\n\t\t[\"gloss\"] = {},\n\t\t[\"id\"] = {},\n\t\t[\"lit\"\
      ] = {},\n\t\t[\"pos\"] = {},\n\t\t[\"t\"] = {alias_of = \"gloss\"},\n\t\t[\"tr\"] = {},\n\t\t[\"ts\"] = {},\n\t\t[\"sc\"] = {},\n\t\t[\"w\"] = { type = \"boolean\", default = false },\n\t}\n\t\n\t-- Compatibility mode for {{term}}.\n\t-- If given a nonempty\
      \ value, the function uses lang= to specify the\n\t-- language, and all the positional parameters shift one number lower.\n\tlocal compat = (frame.args[\"compat\"] or \"\") ~= \"\"\n\t\n\tif compat then\n\t\tparams[\"lang\"] = {},\n\t\ttable.remove(params,\
      \ 1)\n\tend\n\t\n\tlocal args = require(\"Module:parameters\").process(frame:getParent().args, params)\n\t\n\tlocal lang = args[compat and \"lang\" or 1]\n\t\n\t-- Tracking for missing language or und\n\tif not lang then\n\t\trequire(\"Module:debug\").track(\"\
      link/no lang\")\n\telseif lang == \"und\" then\n\t\trequire(\"Module:debug\").track(\"link/und\")\n\tend\n\t\n\tlang = lang or \"und\"\n\tlocal sc = args[\"sc\"]\n\t\n\tlocal term = args[(compat and 1 or 2)]\n\tlocal alt = args[(compat and 2 or 3)]\n\t\
      \n\t-- Check parameters\n\tlang = require(\"Module:languages\").getByCode(lang) or\n\t\trequire(\"Module:languages\").err(lang, 1)\n\tif sc then\n\t\tsc = require(\"Module:scripts\").getByCode(sc) or error(\"The script code \\\"\" .. sc .. \"\\\" is not\
      \ valid.\")\n\tend\n\t\n\tif not term and not alt and frame.args[\"demo\"] then\n\t\tterm = frame.args[\"demo\"]\n\tend\n\t\n\t--[[\n\t\tAdd a language name, linked to Wikipedia if the Wikipedia parameter is set to true.\n\t\tForward the information to\
      \ full_link.\n\t]]\n\tlocal language_name = args.w and lang:makeWikipediaLink() or lang:getCanonicalName()\n\t\n\tif term == \"-\" then\n\t\treturn language_name\n\telse\n\t\treturn language_name .. \" \" ..\n\t\t\trequire(\"Module:links\").full_link(\
      \ \n\t\t\t\t{\n\t\t\t\t\tlang = lang, \n\t\t\t\t\tsc = sc, \n\t\t\t\t\tterm = term, \n\t\t\t\t\talt = alt, \n\t\t\t\t\tid = args[\"id\"], \n\t\t\t\t\ttr = args[\"tr\"], \n\t\t\t\t\tts = args[\"ts\"], \n\t\t\t\t\tgenders = args[\"g\"], \n\t\t\t\t\tgloss\
      \ = args[\"gloss\"], \n\t\t\t\t\tpos = args[\"pos\"], \n\t\t\t\t\tlit = args[\"lit\"]\n\t\t\t\t},\n\t\t\t\tface,\n\t\t\t\tallowSelfLink\n\t\t\t)\n\tend\nend\n\nfunction export.light_link_t(frame)\n\tlocal params = {\n\t\t[1] = { required = true },\n\t\t\
      [2] = { required = true },\n\t\t[3] = {},\n\t\t[\"sc\"] = {},\n\t\t[\"langname\"] = { required = true },\n\t}\n\t\n\tlocal args = frame:getParent().args\n\t\n\tfor key, value in pairs (params) do\n\t\tif value.required then\n\t\t\tif not args[key] then\n\
      \t\t\t\terror('Parameter \"' .. key .. '\" is required.')\n\t\t\tend\n\t\tend\n\tend\n\t\n\treturn require(\"Module:links\").light_link{  \n\t\tlangCode = args[1], \n\t\tterm = args[2], \n\t\talt = args[3], \n\t\tscCode = args.sc or \"Latn\",  \n\t\tlangName\
      \ = args.langname\n\t}\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T12:53:03.163Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Template%3Aredlink+category&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=53758 t=1556369583044763
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:53:03 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1314.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1075 pass, cp3030 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 318223856, 130019314, 439602126
    body: |-
      <?xml version="1.0"?><api batchcomplete=""><warnings><main xml:space="preserve">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space="preserve">Because "rvslots" was not specified, a legacy format has been used for the output. This format is deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx="5379564" pageid="5379564" ns="10" title="Template:redlink category"><revisions><rev user="Chuck Entz" timestamp="2019-04-22T13:44:52Z" contentformat="text/x-wiki" contentmodel="wikitext" comment="" xml:space="preserve">&lt;!--
      This is a list of entries that won't be checked for redlinks. Usually, they are large entries, where redlink checking can cause module errors.
      --&gt;{{#switch:{{PAGENAME}}|-ere|a|and|animal|book|box|do|dog|fish|heart|e|gold|green|I|iron|language|light|man|me|mies|mouth|one|salt|smoke|sun|te|tea|water|wind|一|人|母|女|水|目|Spanish diminutives of given names|Common Russian verbs|Ancient Greek Swadesh list|Frequency dictionary of the modern Russian language (the Russian National Corpus)/1|Frequency dictionary of the modern Russian language (the Russian National Corpus)/8|List of German cognates with English|=|&lt;!--

      The last five refer to Appendix:Spanish diminutives of given names, Appendix:Common Russian verbs, Appendix:Frequency dictionary of the modern Russian language (the Russian National Corpus)/1, Appendix:Frequency dictionary of the modern Russian language (the Russian National Corpus)/8; the namespace has been stripped.

          --&gt;{{#switch:{{NAMESPACE}}||Reconstruction|Appendix=&lt;!--

              This is the list of languages with redlink checking enabled.
              --&gt;{{#switch:{{{1}}}|afa-pro|ang|cel-pro|egy|es|fi|gem-pro|gml|got|grc|iir-pro|ine-pro|it|itc-pro|map-pro|non|poz-pro|poz-pol-pro|pt|ru|sem-pro|sit-pro|sla-pro|te|zh|cmn|yue|nan|hak=&lt;!-- testing
                  --&gt;{{#ifeq:{{isValidPageName|{{{2|}}}}}|valid|&lt;!--
                      --&gt;{{#invoke:redlink category|cat|{{{1}}}|{{{2}}}|template={{{template|-}}}}}&lt;!--
                  --&gt;}}&lt;!--
              --&gt;}}&lt;!--
          --&gt;}}&lt;!--
      --&gt;}}&lt;!--

      --&gt;&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</rev></revisions></page></pages></query></api>
- recorded: 2019-04-27T12:53:03.378Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=File%3ALL-Q143+%28epo%29-Lepticed7-koramiko.wav&prop=imageinfo&iiprop=url&iiurlwidth=175
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=45856 t=1556369583267434
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 12:53:03 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1226.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1077 pass, cp3032 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 438748499, 486397813, 451369516
    body: <?xml version="1.0"?><api><continue iistart="2019-03-15T18:42:13Z" continue="||" /><query><pages><page _idx="-1" ns="6" title="File:LL-Q143 (epo)-Lepticed7-koramiko.wav" missing="" known="" imagerepository="shared"><imageinfo><ii thumburl="https://en.wiktionary.org/w/resources/assets/file-type-icons/fileicon-ogg.png" thumbwidth="175" thumbheight="175" url="https://upload.wikimedia.org/wikipedia/commons/f/f7/LL-Q143_%28epo%29-Lepticed7-koramiko.wav" descriptionurl="https://commons.wikimedia.org/wiki/File:LL-Q143_(epo)-Lepticed7-koramiko.wav" descriptionshorturl="https://commons.wikimedia.org/w/index.php?curid=77360547" /></imageinfo></page></pages></query></api>
