!tape
name: gagauseueo
interactions:
- recorded: 2019-04-15T21:09:12.917Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=%EA%B0%80%EA%B0%80%EC%9A%B0%EC%8A%A4%EC%96%B4&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=48935 t=1555362552823793
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Length: '1201'
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:12 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1314.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Set-Cookie: WMF-Last-Access=15-Apr-2019;Path=/;HttpOnly;secure;Expires=Fri, 17 May 2019 12:00:00 GMT, WMF-Last-Access-Global=15-Apr-2019;Path=/;Domain=.wiktionary.org;HttpOnly;secure;Expires=Fri, 17 May 2019 12:00:00 GMT, GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; Path=/; secure; Domain=.wiktionary.org
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;https=1;nocookies=1
      X-Cache: cp1089 pass, cp3042 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 206233114, 821190742, 690673807
    body: |-
      <?xml version="1.0"?><api batchcomplete=""><warnings><main xml:space="preserve">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space="preserve">Because "rvslots" was not specified, a legacy format has been used for the output. This format is deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx="993880" pageid="993880" ns="0" title="가가우스어"><revisions><rev user="TheDaveBot" timestamp="2017-05-26T18:27:08Z" contentformat="text/x-wiki" contentmodel="wikitext" comment="Removing interwiki links ([[Wiktionary:Grease_pit/2017/April#Getting_rid_of_interwikis|discussion]])." xml:space="preserve">==Korean==

      ===Etymology===
      From {{ko-l|가가우스|Gagauz}} + {{ko-l|어|語|language}}.

      ===Pronunciation===
      {{ko-IPA}}

      ===Noun===
      {{ko-noun}}

      # The [[Gagauz]] language.

      ====See also====
      * {{pedialite|lang=ko}}

      [[Category:ko:Languages]]</rev></revisions></page></pages></query></api>
- recorded: 2019-04-15T21:09:13.078Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Template%3Ako-l&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; WMF-Last-Access=15-Apr-2019; WMF-Last-Access-Global=15-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=46828 t=1555362552987837
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Length: '976'
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:13 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1277.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=15-Apr-2019;WMF-Last-Access-Global=15-Apr-2019;https=1
      X-Cache: cp1077 pass, cp3032 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 419644206, 250987311, 692964453
    body: |-
      <?xml version="1.0"?><api batchcomplete=""><warnings><main xml:space="preserve">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space="preserve">Because "rvslots" was not specified, a legacy format has been used for the output. This format is deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx="495784" pageid="495784" ns="10" title="Template:ko-l"><revisions><rev user="Wyang" timestamp="2018-04-07T08:37:25Z" contentformat="text/x-wiki" contentmodel="wikitext" comment="" xml:space="preserve">&lt;includeonly&gt;{{#invoke:ko|link}}&lt;/includeonly&gt;&lt;!--

      --&gt;&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</rev></revisions></page></pages></query></api>
- recorded: 2015-09-23T14:03:28.360Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Ako-utilities&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=PT:17:Vila_Nova_De_Gaia:41.13:-8.62:v4; WMF-Last-Access=23-Sep-2015
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Age: '0'
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Type: text/xml; charset=utf-8
      Date: Wed, 23 Sep 2015 14:03:26 GMT
      Server: nginx/1.9.4
      Strict-Transport-Security: max-age=31536000; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,X-Forwarded-Proto,Cookie
      X-Analytics: https=1;WMF-Last-Access=23-Sep-2015
      X-Cache: cp1068 miss (0), cp3005 miss (0), cp3012 frontend miss (0)
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.6.5
      X-Varnish: 1359754116, 572027993, 1890198150
    body: !!binary |-
      PD94bWwgdmVyc2lvbj0iMS4wIj8+PGFwaSBiYXRjaGNvbXBsZXRlPSIiPjxxdWVyeT48cGFnZXM+PHBhZ2UgX2lkeD0iMzk3OTU0NiIgcGFnZWlkPSIzOTc5NTQ2IiBucz0iODI4IiB0aXRsZT0iTW9kdWxlOmtvLXV0aWxpdGllcyI+PHJldmlzaW9ucz48cmV2IHVzZXI9Ild5YW5nIiB0aW1lc3RhbXA9IjIwMTUtMDUtMTBUMDQ6MDc6MDlaIiBjb21tZW50PSIiIGNvbnRlbnRmb3JtYXQ9InRleHQvcGxhaW4iIGNvbnRlbnRtb2RlbD0iU2NyaWJ1bnRvIiB4bWw6c3BhY2U9InByZXNlcnZlIj5sb2NhbCBNID0ge30KbG9jYWwgZ3N1YiA9IG13LnVzdHJpbmcuZ3N1Ygpsb2NhbCBtYXRjaCA9IG13LnVzdHJpbmcubWF0Y2gKCi0tIG1ha2VzIGhhbmphdGFiIGF1dG9tYXRpY2FsbHkKZnVuY3Rpb24gTS5oYW5qYXRhYigpCglsb2NhbCBoYW5qYSA9IG13LnVzdHJpbmcuZ3N1Yihtdy50aXRsZS5nZXRDdXJyZW50VGl0bGUoKS50ZXh0LCAnW17kuIAt6b+MXScsICcnKQoJCWxvY2FsIHRhYmxlX2hlYWQgPSAnJmx0O3RhYmxlIGFsaWduPSZxdW90O3JpZ2h0JnF1b3Q7IGJvcmRlcj0mcXVvdDswJnF1b3Q7IGNlbGxwYWRkaW5nPSZxdW90OzMmcXVvdDsgY2VsbHNwYWNpbmc9JnF1b3Q7MCZxdW90OyBzdHlsZT0mcXVvdDtib3JkZXI6MXB4IHNvbGlkICNhYWFhYWE7IG1hcmdpbi1sZWZ0OjVweDsgbWFyZ2luLXJpZ2h0OjEwcHg7IGZvbnQtc2l6ZTo4cHQ7IHRleHQtYWxpZ246Y2VudGVyOyBtYXJnaW46IDAgMCAxZW0gMWVtOyZxdW90OyBydWxlcz0mcXVvdDthbGwmcXVvdDsgZnJhbWU9JnF1b3Q7Ym94JnF1b3Q7Jmd0OyZsdDt0ciZndDsmbHQ7dGQgY29sc3Bhbj0mcXVvdDsnIC4uIAoJCW13LnVzdHJpbmcubGVuKGhhbmphKSAuLiAKCQknJnF1b3Q7IGJnY29sb3I9JnF1b3Q7I2Y5ZjlmOSZxdW90OyZndDtbW2hhbmphfEhhbmphXV0gaW4gdGhpcyB3b3JkJmx0Oy90ZCZndDsmbHQ7L3RyJmd0OyZsdDt0ciBzdHlsZT0mcXVvdDtmb250LXNpemU6IDJlbSZxdW90OyZndDsnCglyZXR1cm4gdGFibGVfaGVhZCAuLiAKCQltdy51c3RyaW5nLmdzdWIoaGFuamEsICcoLiknLCAnJmx0O3RkJmd0OyZsdDtmb250IGxhbmc9JnF1b3Q7a28mcXVvdDsmZ3Q7W1slMSNLb3JlYW58JTFdXSZsdDsvZm9udCZndDsmbHQ7L3RkJmd0OycpIC4uIAoJCScmbHQ7L3RhYmxlJmd0OycKZW5kCgotLSByZXR1cm4gb25seSBub24taGFuZ2V1bCBjb250YWluZWQgaW4gdGV4dApmdW5jdGlvbiBNLnJlbW92ZV9oYW5nZXVsKGYpCglsb2NhbCBub25oYW5nZXVsID0gbXcudXN0cmluZy5nc3ViKGYuYXJnc1sxXSwgJ1vqsIAt7Z6jXScsICcnKQoJcmV0dXJuIG5vbmhhbmdldWwKZW5kCgpmdW5jdGlvbiBNLnVzZXhfaGFuZ3VsKGYpCgloYW5ndWwgPSBtdy51c3RyaW5nLmdzdWIoZi5hcmdzWzFdLCdbJV4lLV0nLCcnKQoJcmV0dXJuIGhhbmd1bAplbmQKCmZ1bmN0aW9uIE0ubGluayhmcmFtZSkKCWxvY2FsIGFyZyA9IGZyYW1lOmdldFBhcmVudCgpLmFyZ3MKCWxvY2FsIGFyZ3MsIGRpc3RhbmNlcyA9IHt9LCB7fQoJbG9jYWwgbV9wcm9uID0gcmVxdWlyZSgmcXVvdDtNb2R1bGU6a28tdHJhbnNsaXQmcXVvdDspCglsb2NhbCBjdXJyX2Rpc3RhbmNlLCBjbG9zZXN0X21hdGNoID0gMTAwMCwgMAoJbG9jYWwgd29yZCwgdHJhbnNsaXQsIGRlZmluaXRpb24sIGhhbmphLCBub3RlID0gZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlCgkKCWZvciBpID0gMSwgNCwgMSBkbwoJCWlmIGFyZ1tpXSBhbmQgYXJnW2ldIH49ICZxdW90OyZxdW90OyB0aGVuCgkJCXRhYmxlLmluc2VydChhcmdzLCBhcmdbaV0pCgkJZW5kCgllbmQKCglsb2NhbCBjdXJyX2hhbmd1bF9sZXZlbCwgY2xvc2VzdF9oYW5ndWwgPSAwLCAwCglmb3IgaSwgcGFyYW1ldGVyIGluIGlwYWlycyhhcmdzKSBkbwoJCWxvY2FsIF8sIHRlbnRhdGl2ZV9oYW5ndWxfbGV2ZWwgPSBnc3ViKHBhcmFtZXRlciwgJnF1b3Q7W+qwgC3tnqNcMjI1XDEzMlwxMjgtXDIyNVwxMzVcMTkxXSZxdW90OywgJnF1b3Q7JnF1b3Q7KQoJCWlmIHRlbnRhdGl2ZV9oYW5ndWxfbGV2ZWwgJmd0OyBjdXJyX2hhbmd1bF9sZXZlbCB0aGVuCgkJCWN1cnJfaGFuZ3VsX2xldmVsID0gdGVudGF0aXZlX2hhbmd1bF9sZXZlbAoJCQljbG9zZXN0X2hhbmd1bCA9IGkKCQllbmQKCWVuZAoKCWlmIGN1cnJfaGFuZ3VsX2xldmVsICZndDsgMCB0aGVuCgkJd29yZCA9IGFyZ3NbY2xvc2VzdF9oYW5ndWxdCgkJdGFibGUucmVtb3ZlKGFyZ3MsIGNsb3Nlc3RfaGFuZ3VsKQoJZW5kCgkKCWxvY2FsIGZ1bmN0aW9uIGNvbXB1dGVfZGlzdGFuY2Uoc3RyMSwgc3RyMikKCQlsb2NhbCBsZW4xLCBsZW4yID0gI3N0cjEsICNzdHIyCgkJbG9jYWwgY2hhcjEsIGNoYXIyLCBkaXN0YW5jZSA9IHt9LCB7fSwge30KCQkKCQlzdHIxOmdzdWIoJy4nLCBmdW5jdGlvbiAoYykKCQkJdGFibGUuaW5zZXJ0KGNoYXIxLCBjKSBlbmQpCgkJCgkJc3RyMjpnc3ViKCcuJywgZnVuY3Rpb24gKGMpCgkJCXRhYmxlLmluc2VydChjaGFyMiwgYykgZW5kKQoJCQoJCWZvciBpID0gMCwgbGVuMSBkbwoJCQlkaXN0YW5jZVtpXSA9IHt9CgkJZW5kCgkJCgkJZm9yIGkgPSAwLCBsZW4xIGRvCgkJCWRpc3RhbmNlW2ldWzBdID0gaQoJCWVuZAoJCQoJCWZvciBpID0gMCwgbGVuMiBkbwoJCQlkaXN0YW5jZVswXVtpXSA9IGkKCQllbmQKCQkKCQlmb3IgaSA9IDEsIGxlbjEgZG8KCQkJZm9yIGogPSAxLCBsZW4yIGRvCgkJCQlkaXN0YW5jZVtpXVtqXSA9IG1hdGgubWluKAoJCQkJCWRpc3RhbmNlW2ktMV1bal0gKyAxLAoJCQkJCWRpc3RhbmNlW2ldW2otMV0gKyAxLAoJCQkJCWRpc3RhbmNlW2ktMV1bai0xXSArIChjaGFyMVtpXSA9PSBjaGFyMltqXSBhbmQgMCBvciAxKQoJCQkJKQoJCQllbmQKCQllbmQKCQoJCXJldHVybiBkaXN0YW5jZVtsZW4xXVtsZW4yXQoJZW5kCgkKCXRlc3RfdHJhbnNsaXQgPSBtX3Byb24udHJfcmV2aXNlZCh3b3JkIG9yIGFyZ1sxXSkgb3IgJnF1b3Q7JnF1b3Q7CgkKCWlmIGFyZ1s1XSBhbmQgYXJnWzVdIH49ICZxdW90OyZxdW90OyB0aGVuCgkJbm90ZSA9IGFyZ1s1XQoJZW5kCgkKCWZvciBpLCBwYXJhbWV0ZXIgaW4gaXBhaXJzKGFyZ3MpIGRvCgkJaWYgbm90IG1hdGNoKHBhcmFtZXRlciwgJ1vqsIAt7Z6j45CALeS2teS4gC3pv4xcMjM5XDE2NFwxMjgtXDIzOVwxNzFcMTUz8KCAgC3wr6ifXScpIHRoZW4KCQkJbG9jYWwgdGVudGF0aXZlX2Rpc3RhbmNlID0gY29tcHV0ZV9kaXN0YW5jZSh0ZXN0X3RyYW5zbGl0LCBwYXJhbWV0ZXIpCgkJCWlmIHRlbnRhdGl2ZV9kaXN0YW5jZSAmbHQ7IGN1cnJfZGlzdGFuY2UgdGhlbgoJCQkJY3Vycl9kaXN0YW5jZSA9IHRlbnRhdGl2ZV9kaXN0YW5jZQoJCQkJY2xvc2VzdF9tYXRjaCA9IGkKCQkJZW5kCgkJZW5kCgllbmQKCglpZiBjdXJyX2Rpc3RhbmNlICZsdDsgMyBhbmQgI2FyZ3MgJmd0OyAxIHRoZW4KCQl0cmFuc2xpdCA9IGFyZ3NbY2xvc2VzdF9tYXRjaF0KCQl0YWJsZS5yZW1vdmUoYXJncywgY2xvc2VzdF9tYXRjaCkKCWVuZAoKCWZvciBpLCBwYXJhbWV0ZXIgaW4gaXBhaXJzKGFyZ3MpIGRvCgkJaWYgbWF0Y2gocGFyYW1ldGVyLCAmcXVvdDtb45CALeS2teS4gC3pv4xcMjM5XDE2NFwxMjgtXDIzOVwxNzFcMTUz8KCAgC3wr6ifXSZxdW90OykgdGhlbgoJCQloYW5qYSA9IHBhcmFtZXRlcgoJCQl0YWJsZS5yZW1vdmUoYXJncywgaSkKCQllbmQKCWVuZAoJCglpZiBub3QgaGFuamEgYW5kIG5vdCB3b3JkIHRoZW4KCQl3b3JkID0gYXJnc1sxXQoJCXRhYmxlLnJlbW92ZShhcmdzLCAxKQoJZW5kCgkKCWlmICNhcmdzICZndDsgMSB0aGVuCgkJdHJhbnNsaXQgPSBhcmdzWzFdCgkJZGVmaW5pdGlvbiA9IGFyZ3NbMl0KCQoJZWxzZWlmICNhcmdzICZndDsgMCB0aGVuCgkJZGVmaW5pdGlvbiA9IGFyZ3NbMV0KCWVuZAoJCglpZiBoYW5qYSBhbmQgbm90IG1hdGNoKGhhbmphLCAmcXVvdDtbJVslXV0mcXVvdDspIHRoZW4KCQlmb3IgaGFuamFfd29yZCBpbiBtdy51c3RyaW5nLmdtYXRjaChoYW5qYSwgJnF1b3Q7W+OQgC3ktrXkuIAt6b+MXDIzOVwxNjRcMTI4LVwyMzlcMTcxXDE1M/CggIAt8K+on10rJnF1b3Q7KSBkbwoJCQloYW5qYSA9IGdzdWIoaGFuamEsIGhhbmphX3dvcmQsICZxdW90O1tbJnF1b3Q7IC4uIGhhbmphX3dvcmQgLi4gJnF1b3Q7XV0mcXVvdDspCgkJZW5kCgkJZm9yIGhhbmd1bF93b3JkIGluIG13LnVzdHJpbmcuZ21hdGNoKGhhbmphLCAmcXVvdDtb6rCALe2eo10rJnF1b3Q7KSBkbwoJCQloYW5qYSA9IGdzdWIoaGFuamEsIGhhbmd1bF93b3JkLCAmcXVvdDsmbHQ7c3BhbiBsYW5nPVwmcXVvdDtrb1wmcXVvdDsgY2xhc3M9XCZxdW90O0hhbmdcJnF1b3Q7Jmd0O1tbJnF1b3Q7IC4uIGhhbmd1bF93b3JkIC4uICZxdW90O11dJmx0Oy9zcGFuJmd0OyZxdW90OykKCQllbmQKCQloYW5qYSA9IGdzdWIoaGFuamEsICZxdW90OyVbJVslWyVbJnF1b3Q7LCAmcXVvdDtbWyZxdW90OykKCQloYW5qYSA9IGdzdWIoaGFuamEsICZxdW90OyVdJV0lXSVdJnF1b3Q7LCAmcXVvdDtdXSZxdW90OykKCWVuZAoJCglpZiB0cmFuc2xpdCBvciB0ZXN0X3RyYW5zbGl0IHRoZW4KCQl0cmFuc2xpdCA9ICZxdW90OyZsdDtpJmd0OyZxdW90OyAuLiAodHJhbnNsaXQgb3IgdGVzdF90cmFuc2xpdCkgLi4gJnF1b3Q7Jmx0Oy9pJmd0OyZxdW90OwoJZW5kCgkKCWlmIGRlZmluaXRpb24gdGhlbgoJCWRlZmluaXRpb24gPSAmcXVvdDvigJwmcXVvdDsgLi4gZGVmaW5pdGlvbiAuLiAmcXVvdDvigJ0mcXVvdDsKCWVuZAoJCglpZiBoYW5qYSB0aGVuCgkJaGFuamEgPSAmcXVvdDsmbHQ7c3BhbiBsYW5nPVwmcXVvdDtrb1wmcXVvdDsgY2xhc3M9XCZxdW90O0hhbmlcJnF1b3Q7Jmd0OyZxdW90OyAuLiBoYW5qYSAuLiAmcXVvdDsmbHQ7L3NwYW4mZ3Q7JnF1b3Q7CgllbmQKCQoJaWYgbm90IG1hdGNoKHdvcmQsICZxdW90O1slWyVdXSZxdW90OykgdGhlbgoJCWlmIG1hdGNoKHdvcmQsICZxdW90O17igJQuK+KAlCQmcXVvdDspIHRoZW4KCQkJd29yZCA9IGdzdWIod29yZCwgJnF1b3Q74oCUKC4rKeKAlCZxdW90OywgJnF1b3Q74oCUW1slMV1d4oCUJnF1b3Q7KQoJCQkKCQllbHNlaWYgbWF0Y2god29yZCwgJnF1b3Q7XuKAlC4rJCZxdW90OykgdGhlbgoJCQl3b3JkID0gZ3N1Yih3b3JkLCAmcXVvdDvigJQoLispJnF1b3Q7LCAmcXVvdDvigJRbWyUxXV0mcXVvdDspCgkJCQoJCWVsc2VpZiBtYXRjaCh3b3JkLCAmcXVvdDteLivigJQkJnF1b3Q7KSB0aGVuCgkJCXdvcmQgPSBnc3ViKHdvcmQsICZxdW90OyguKynigJQmcXVvdDssICZxdW90O1tbJTHri6R8JTHigJRdXSZxdW90OykKCQkKCQllbHNlaWYgbWF0Y2god29yZCwgJnF1b3Q7Xi4r4oCTJCZxdW90OykgdGhlbgoJCQl3b3JkID0gZ3N1Yih3b3JkLCAmcXVvdDsoLisp4oCTJnF1b3Q7LCAmcXVvdDtbWyUxXV3igJQmcXVvdDspCgkJCgkJZWxzZQoJCQl3b3JkID0gJnF1b3Q7W1smcXVvdDsgLi4gd29yZCAuLiAmcXVvdDtdXSZxdW90OwoJCWVuZAoJZW5kCgkKCWxvY2FsIGluZm8gPSB7fQoJdGFibGUuaW5zZXJ0KGluZm8sIHdvcmQgYW5kIChoYW5qYSBvciBuaWwpIG9yIG5pbCkKCXRhYmxlLmluc2VydChpbmZvLCB0cmFuc2xpdCBvciBuaWwpCgl0YWJsZS5pbnNlcnQoaW5mbywgZGVmaW5pdGlvbiBvciBuaWwpCgoJcmVzdWx0ID0gd29yZAoJCWFuZAoJCQkoJnF1b3Q7Jmx0O3NwYW4gbGFuZz1cJnF1b3Q7a29cJnF1b3Q7IGNsYXNzPVwmcXVvdDtIYW5nXCZxdW90OyZndDsmcXVvdDsgLi4gd29yZCAuLiAmcXVvdDsmbHQ7L3NwYW4mZ3Q7JnF1b3Q7KQoJCW9yCgkJCSgmcXVvdDsmbHQ7c3BhbiBsYW5nPVwmcXVvdDtrb1wmcXVvdDsgY2xhc3M9XCZxdW90O0hhbmlcJnF1b3Q7Jmd0OyZxdW90OyAuLiBoYW5qYSAuLiAmcXVvdDsmbHQ7L3NwYW4mZ3Q7JnF1b3Q7KQoJCglpZiAjaW5mbyAmZ3Q7IDAgdGhlbgoJCXJlc3VsdCA9IHJlc3VsdCAuLiAmcXVvdDsgKCZxdW90OyAuLiB0YWJsZS5jb25jYXQoaW5mbywgJnF1b3Q7LCAmcXVvdDspIC4uICZxdW90OykmcXVvdDsKCWVuZAoJCglpZiBub3RlIHRoZW4KCQlyZXN1bHQgPSByZXN1bHQgLi4gJnF1b3Q7ICgmbHQ7aSZndDsmcXVvdDsgLi4gbm90ZSAuLiAmcXVvdDsmbHQ7L2kmZ3Q7KSZxdW90OwoJZW5kCgkKCXJldHVybiByZXN1bHQKZW5kCgpmdW5jdGlvbiBNLm5ldyhmcmFtZSkKCWxvY2FsIGFyZ3MgPSBmcmFtZTpnZXRQYXJlbnQoKS5hcmdzCgoJbG9jYWwgZnVuY3Rpb24gb3RoZXIoY2xhc3MsIHRpdGxlLCBhcmdzKQoJCWxvY2FsIGNvZGUgPSAmcXVvdDsmcXVvdDsKCQlpZiBhcmdzW2NsYXNzXSB0aGVuCgkJCWNvZGUgPSBjb2RlIC4uICZxdW90O1xuXG49PT0mcXVvdDsgLi4gdGl0bGUgLi4gJnF1b3Q7PT09XG4qIHt7a28tbHwmcXVvdDsgLi4gYXJnc1tjbGFzc10gLi4gJnF1b3Q7fX0mcXVvdDsKIAoJCQlpZiBhcmdzW2NsYXNzIC4uICZxdW90OzImcXVvdDtdIHRoZW4KCQkJCWNvZGUgPSBjb2RlIC4uICZxdW90O1xuKiB7e2tvLWx8JnF1b3Q7IC4uIGFyZ3NbY2xhc3MgLi4gJnF1b3Q7MiZxdW90O10gLi4gJnF1b3Q7fX0mcXVvdDsKIAoJCQkJaWYgYXJnc1tjbGFzcyAuLiAmcXVvdDszJnF1b3Q7XSB0aGVuCgkJCQkJY29kZSA9IGNvZGUgLi4gJnF1b3Q7XG4qIHt7a28tbHwmcXVvdDsgLi4gYXJnc1tjbGFzcyAuLiAmcXVvdDszJnF1b3Q7XSAuLiAmcXVvdDt9fSZxdW90OwogCgkJCQkJaWYgYXJnc1tjbGFzcyAuLiAmcXVvdDs0JnF1b3Q7XSB0aGVuCgkJCQkJCWNvZGUgPSBjb2RlIC4uICZxdW90O1xuKiB7e2tvLWx8JnF1b3Q7IC4uIGFyZ3NbY2xhc3MgLi4gJnF1b3Q7NCZxdW90O10gLi4gJnF1b3Q7fX0mcXVvdDsKCQkJCQllbmQKCQkJCWVuZAoJCQllbmQKCQllbmQKCQlyZXR1cm4gY29kZQoJZW5kCgkKCWxvY2FsIHJlc3VsdCA9ICZxdW90Oz09S29yZWFuPT0mcXVvdDsKCWlmIGFyZ3NbJnF1b3Q7d3AmcXVvdDtdIHRoZW4KCQlyZXN1bHQgPSByZXN1bHQgLi4gJnF1b3Q7XG57e3dpa2lwZWRpYXxsYW5nPWtvfX0mcXVvdDsKCWVuZAoJCglyZXN1bHQgPSByZXN1bHQgLi4gb3RoZXIoJnF1b3Q7YWx0JnF1b3Q7LCAmcXVvdDtBbHRlcm5hdGl2ZSBmb3JtcyZxdW90OywgYXJncykKCQoJaWYgYXJnc1smcXVvdDtlJnF1b3Q7XSBvciBhcmdzWyZxdW90O2VlJnF1b3Q7XSBvciBhcmdzWyZxdW90O2gmcXVvdDtdIG9yIGFyZ3NbJnF1b3Q7aDEmcXVvdDtdIHRoZW4KCQlyZXN1bHQgPSByZXN1bHQgLi4gJnF1b3Q7XG5cbj09PUV0eW1vbG9neT09PVxuJnF1b3Q7CgkJCgkJCXJlc3VsdCA9IHJlc3VsdCAuLiAoYXJnc1smcXVvdDtlZSZxdW90O10gb3IKCQkJCSgmcXVvdDtGcm9tIHt7ZXR5bHwmcXVvdDsgLi4gKGFyZ3NbJnF1b3Q7ZWwmcXVvdDtdIG9yICZxdW90O2VuJnF1b3Q7KSAuLiAmcXVvdDt8a299fSB7e218JnF1b3Q7IC4uIAoJCQkJCShhcmdzWyZxdW90O2VsJnF1b3Q7XSBvciAmcXVvdDtlbiZxdW90OykgLi4gJnF1b3Q7fCZxdW90OyAuLiBhcmdzWyZxdW90O2UmcXVvdDtdIC4uICZxdW90O319LiZxdW90OykpCgllbmQKZW5kCgpyZXR1cm4gTTwvcmV2PjwvcmV2aXNpb25zPjwvcGFnZT48L3BhZ2VzPjwvcXVlcnk+PC9hcGk+
- recorded: 2019-04-15T21:09:13.879Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Ako-translit&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; WMF-Last-Access=15-Apr-2019; WMF-Last-Access-Global=15-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=47606 t=1555362553784622
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:13 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1314.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=15-Apr-2019;WMF-Last-Access-Global=15-Apr-2019;https=1
      X-Cache: cp1075 pass, cp3033 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 608769714, 491312339, 686618175
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"3918700\" pageid=\"3918700\" ns=\"828\" title=\"Module:ko-translit\"><revisions><rev user=\"Erutuon\" timestamp=\"2017-09-20T10:39:31Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"return nil if [[Module:ko-pron]] fails\" xml:space=\"preserve\">local export = {}\nlocal gsub = mw.ustring.gsub\nlocal match = mw.ustring.match\n\nfunction export.tr(word, sc, lang)\n\t\
      word = gsub(word, \"%([一丁-龯㐀-䶵]+%)\", \"\")\n\tword = gsub(word, \"—\", \"-\")\n\t\n\tif match(word, \"^[ㅂㅈㄷㄱㅅㅁㄴㅇㄹㅎㅋㅌㅊㅍㄸㅃㅉㄲㅆㅛㅕㅑㅐㅔㅗㅓㅏㅣㅠㅜㅡㅖㅒ%-]+$\") then\n\t\treturn (gsub(word,\n\t\t\t\"[ㅂㅈㄷㄱㅅㅁㄴㅇㄹㅎㅋㅌㅊㅍㄸㅃㅉㄲㅆㅛㅕㅑㅐㅔㅗㅓㅏㅣㅠㅜㅡㅖㅒ]\", {\n\t\t\t\t[\"ㅂ\"] = \"b\",\
      \ [\"ㅈ\"] = \"j\", [\"ㄷ\"] = \"d\", [\"ㄱ\"] = \"g\", [\"ㅅ\"] = \"s\", \n\t\t\t\t[\"ㅁ\"] = \"m\", [\"ㄴ\"] = \"n\", [\"ㅇ\"] = \"/\", [\"ㄹ\"] = \"l\", [\"ㅎ\"] = \"h\", \n\t\t\t\t[\"ㅋ\"] = \"k\", [\"ㅌ\"] = \"t\", [\"ㅊ\"] = \"ch\", [\"ㅍ\"] = \"p\", \n\t\t\t\
      \t[\"ㄸ\"] = \"tt\", [\"ㅃ\"] = \"pp\", [\"ㅉ\"] = \"jj\", [\"ㄲ\"] = \"kk\", [\"ㅆ\"] = \"ss\", \n\t\t\t\t[\"ㅛ\"] = \"yo\", [\"ㅕ\"] = \"yeo\", [\"ㅑ\"] = \"ya\", [\"ㅐ\"] = \"ae\", [\"ㅔ\"] = \"e\", \n\t\t\t\t[\"ㅗ\"] = \"o\", [\"ㅓ\"] = \"eo\", [\"ㅏ\"] = \"a\"\
      , [\"ㅣ\"] = \"i\", [\"ㅠ\"] = \"yu\", \n\t\t\t\t[\"ㅜ\"] = \"u\", [\"ㅡ\"] = \"eu\", [\"ㅖ\"] = \"ye\", [\"ㅒ\"] = \"yae\" }\n\t\t\t))\n\tend\n\t\n\tif not match(word, \"[가-힣]\") then\n\t\treturn nil\n\tend\n\tlocal m_pron = require(\"Module:ko-pron\")\n\t\
      local revised = m_pron.romanise(word, 2, {}, true)\n\t\n\tif not revised then\n\t\treturn nil\n\tend\n\t\n\tif match(revised, \"[%.%?%!]\") then\n\t\trevised = mw.ustring.upper(mw.ustring.sub(revised, 1, 1)) .. mw.ustring.sub(revised, 2, -1)\n\t\trevised\
      \ = gsub(revised, \"([%.%?%!]) ([a-z%'])\", \"%1 ^%2\")\n\t\trevised = gsub(revised, \"^%'%'%'\", \"'''^\")\n\tend\n\trevised = gsub(revised, \"%^%'%'%'\", \"'''^\")\n\trevised = gsub(revised, \"%^%l\", mw.ustring.upper)\n\trevised = gsub(revised, '%^',\
      \ '')\n\trevised = gsub(revised, \"%-'''%-\", \"'''-\")\n\trevised = gsub(revised, \"%-%-\", \"-\")\n\t\n\treturn revised\nend\n\nexport.tr_revised = export.tr\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-15T21:09:15.300Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Template%3Ako-IPA&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; WMF-Last-Access=15-Apr-2019; WMF-Last-Access-Global=15-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=40511 t=1555362555214795
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Length: '1265'
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:15 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1278.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=15-Apr-2019;WMF-Last-Access-Global=15-Apr-2019;https=1
      X-Cache: cp1083 pass, cp3032 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 923519685, 255731784, 697415814
    body: <?xml version="1.0"?><api batchcomplete=""><warnings><main xml:space="preserve">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space="preserve">Because "rvslots" was not specified, a legacy format has been used for the output. This format is deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx="4405255" pageid="4405255" ns="10" title="Template:ko-IPA"><revisions><rev user="Wyang" timestamp="2017-05-01T13:10:05Z" contentformat="text/x-wiki" contentmodel="wikitext" comment="Replaced content with &quot;&lt;includeonly&gt;{{#invoke:ko-pron|make}}{{#ifeq:{{NAMESPACE}}||[[Category:Korean terms with IPA pronunciation]]}}&lt;/includeonly&gt;&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;&quot;" xml:space="preserve">&lt;includeonly&gt;{{#invoke:ko-pron|make}}{{#ifeq:{{NAMESPACE}}||[[Category:Korean terms with IPA pronunciation]]}}&lt;/includeonly&gt;&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</rev></revisions></page></pages></query></api>
- recorded: 2019-04-15T21:09:14.300Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Ako-pron&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; WMF-Last-Access=15-Apr-2019; WMF-Last-Access-Global=15-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=42954 t=1555362554195907
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:14 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1348.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=15-Apr-2019;WMF-Last-Access-Global=15-Apr-2019;https=1
      X-Cache: cp1079 pass, cp3040 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 663813318, 550138252, 702324149
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"4403125\" pageid=\"4403125\" ns=\"828\" title=\"Module:ko-pron\"><revisions><rev user=\"Wyang\" timestamp=\"2018-11-06T04:23:01Z\" contentformat=\"\
      text/plain\" contentmodel=\"Scribunto\" comment=\"\" xml:space=\"preserve\">local export = {}\nlocal m_ko_utilities = require(\"Module:ko\")\nlocal m_data = mw.loadData(\"Module:ko-pron/data\")\n\nlocal gsub = mw.ustring.gsub\nlocal match = mw.ustring.match\n\
      local sub = mw.ustring.sub\nlocal char = mw.ustring.char\nlocal codepoint = mw.ustring.codepoint\n\nlocal PAGENAME = mw.title.getCurrentTitle().text\n\nlocal system_lookup = {\n\t[\"ph\"] = 1, [\"rr\"] = 2, [\"rrr\"] = 3,\n\t[\"mr\"] = 4, [\"yr\"] = 5,\
      \ [\"ipa\"] = 6,\n}\n\nlocal question_mark = \"&lt;sup&gt;&lt;small&gt;[[Wiktionary:About Korean/Romanization|?]]&lt;/small&gt;&lt;/sup&gt;\"\n\nlocal system_list = {\n\t{ \n\t\tseq = 1,\n\t\tabbreviation = \"ph\", \n\t\tdisplay = \"Phonetic Hangul\",\
      \ \n\t\tseparator = \"/\",\n\t},\n\t{ \n\t\tseq = 2,\n\t\tabbreviation = \"rr\", \n\t\tdisplay = \"Revised Romanization\" .. question_mark, \n\t\tseparator = \"/\",\n\t},\n\t{ \n\t\tseq = 3,\n\t\tabbreviation = \"rrr\", \n\t\tdisplay = \"Revised Romanization\
      \ (translit.)\" .. question_mark, \n\t\tseparator = \"/\"\n\t},\n\t{ \n\t\tseq = 4,\n\t\tabbreviation = \"mc\", \n\t\tdisplay = \"McCune–Reischauer\" .. question_mark,\n\t\tseparator = \"/\"\n\t},\n\t{ \n\t\tseq = 5,\n\t\tabbreviation = \"yr\", \n\t\t\
      display = \"Yale Romanization\" .. question_mark,\n\t\tseparator = \"/\"\n\t},\n\t{ \n\t\tseq = 6,\n\t\tabbreviation = \"ipa\", \n\t\tdisplay = \"[[Wiktionary:International Phonetic Alphabet|IPA]]&lt;sup&gt;([[Appendix:Korean pronunciation|key]])&lt;/sup&gt;\"\
      , \n\t\tseparator = \"] ~ [\"\n\t}\n}\n\nlocal final_syllable_conversion = { [\"\"] = \"Ø\", [\"X\"] = \"\" }\nlocal com_mc = { [\"g\"] = \"k\", [\"d\"] = \"t\", [\"b\"] = \"p\", [\"j\"] = \"ch\", [\"sy\"] = \"s\", [\"s\"] = \"ss\" }\nlocal com_ph = {\
      \ [\"ᄀ\"] = \"ᄁ\", [\"ᄃ\"] = \"ᄄ\", [\"ᄇ\"] = \"ᄈ\", [\"ᄉ\"] = \"ᄊ\", [\"ᄌ\"] = \"ᄍ\" }\nlocal vowel_variation = { [7] = -56, [11] = 112, [16] = 0 }\nlocal allowed_vowel_scheme = { [\"7-1\"] = 1, [\"7-6\"] = 1, [\"11-1\"] = 1, [\"11-6\"] = 1, [\"16-6\"\
      ] = 1 }\nlocal ambiguous_intersyllabic_rr = { [\"oe\"] = 1, [\"eo\"] = 1, [\"eu\"] = 1, [\"ae\"] = 1, [\"ui\"] = 1 }\n\nlocal function decompose_syllable(word)\n\tlocal decomposed_syllables = {}\n\tfor syllable in mw.text.gsplit(word, \"\") do\n\t\ttable.insert(decomposed_syllables,\
      \ m_ko_utilities.decompose_jamo(syllable))\n\tend\n\treturn decomposed_syllables\nend\n\nlocal function tidy_phonetic(original, romanised)\n\tlocal j, k, w = 1, 1, {}\n\tfor i = 1, mw.ustring.len(romanised) do\n\t\tlocal romanised_syllable = mw.ustring.sub(romanised,\
      \ k, k)\n\t\tlocal original_syllable = mw.ustring.sub(original, j, j)\n\t\tif romanised_syllable ~= original_syllable then\n\t\t\ttable.insert(w, '&lt;span style=\"font-size:110%; color:#BF0218\"&gt;&lt;b&gt;'..romanised_syllable..'&lt;/b&gt;&lt;/span&gt;')\n\
      \t\t\tif match(original_syllable, \"[^: ]\") then k = k + 1 end\n\t\t\tif match(romanised_syllable, \"[^: ]\") then j = j + 1 end\n\t\telse\n\t\t\ttable.insert(w, '&lt;span style=\"font-size:110%\"&gt;'..romanised_syllable..'&lt;/span&gt;')\n\t\t\tj, k\
      \ = j + 1, k + 1\n\t\tend\n\tend\n\treturn table.concat(w)\nend\n\nlocal function tidy_ipa(set)\n\tlocal ipa = table.concat(set, system_list[6].separator)\n\tipa = gsub(ipa, \"ʌ̹ː\", \"ɘː\")\n\tipa = gsub(ipa, \"ɭɭ([ji])\", \"ɭʎ%1\")\n\tipa = gsub(ipa,\
      \ \"s([͈]?)ʰɥi\" ,\"ʃ%1ʰɥi\")\n\tipa = gsub(ipa, \"s([ʰ͈])([ji])\" ,\"ɕ%1%2\")\n\tipa = gsub(ipa, \"nj\", \"ɲj\")\n\t\n\tipa = gsub(ipa, \"kʰ[ijɯ]\", { \n\t\t[\"kʰi\"] = \"kçi\", \n\t\t[\"kʰj\"] = \"kçj\", \n\t\t[\"kʰɯ\"] = \"kxɯ\" }\n\t)\n\tipa = gsub(ipa,\
      \ \"[hɦ][ijɯouw]\", {\n\t\t[\"hi\"] = \"çi\",\n\t\t[\"hj\"] = \"çj\",\n\t\t[\"hɯ\"] = \"xɯ\",\n\t\t[\"ho\"] = \"ɸʷo\",\n\t\t[\"hu\"] = \"ɸʷu\",\n\t\t[\"hw\"] = \"ɸw\",\n\t\t[\"ɦi\"] = \"ʝi\",\n\t\t[\"ɦj\"] = \"ʝj\",\n\t\t[\"ɦɯ\"] = \"ɣɯ\",\n\t\t[\"ɦo\"\
      ] = \"βo\",\n\t\t[\"ɦu\"] = \"βu\",\n\t\t[\"ɦw\"] = \"βw\" }\n\t)\n\t\n\tif match(ipa, \"ɥi\") then\n\t\tlocal midpoint = math.floor(mw.ustring.len(ipa) / 2)\n\t\tipa = sub(ipa, 1, midpoint) .. gsub(sub(ipa, midpoint+1, -1), \"ɥi\", \"y\")\n\tend\n\t\n\
      \treturn ipa\nend\n\nfunction export.romanise(text_param, system_index, args)\n\tlocal p, optional_params = {}, { \"nn\", \"l\", \"com\", \"cap\", \"ni\" }\n\tfor _, pm in ipairs(optional_params) do\n\t\tp[pm] = { }\n\t\tif args[pm] then\n\t\t\tfor pp\
      \ in mw.text.gsplit(args[pm], \",\") do p[pm][tonumber(pp) or pp] = 1 end\n\t\tend\n\tend\n\t\t\n\tlocal vowel_ui_i, vowel_ui_e, no_batchim, batchim_reduce, s_variation, iotation, yeo_reduce = \n\t\targs.ui, args.uie, args.nobc, args.bcred, args.svar,\
      \ args.iot, args.yeored\n\t\n\tsystem_index = system_lookup[system_index] or system_index\n\ttext_param = gsub(text_param, '[%-\"](.)', \"%1\")\n\t\n\tfor primitive_word in mw.ustring.gmatch(text_param, \"[ᄀ-ᄒ\"..\"ᅡ-ᅵ\"..\"ᆨ-ᇂ\" .. \"ㄱ-ㆎ가-힣' ]+\") do\n\
      \t\tlocal the_original = primitive_word\n\t\tprimitive_word = gsub(primitive_word, \"'''\", \"ß\")\n\t\tlocal bold_position, bold_count = {}, 0\n\t\twhile match(primitive_word, \"ß\") do\n\t\t\tbold_position[(mw.ustring.find(primitive_word, \"ß\")) + bold_count]\
      \ = true\n\t\t\tprimitive_word = gsub(primitive_word, \"ß\", \"\", 1)\n\t\t\tbold_count = bold_count + 1\n\t\tend\n\t\t\n\t\tlocal has_vowel = {}\n\t\tfor ch in mw.ustring.gmatch(primitive_word, \".\") do\n\t\t\tlocal jungseong = math.floor(((codepoint(ch)\
      \ - 0xAC00) % 588) / 28)\n\t\t\tif not match(ch, \"[예옛례롄]\") and match(ch, \"[가-힣]\") then has_vowel[jungseong] = true end\n\t\tend\n\t\tlocal word_set = { primitive_word }\n\t\t\n\t\tlocal function add_respelling(variable, modification, modification2)\n\
      \t\t\tmodification2 = modification2 or function(x) return x end\n\t\t\tif variable and match(system_index, \"[16]\") then\n\t\t\t\tvariable = tonumber(variable)\n\t\t\t\tlocal pre_length = #word_set\n\t\t\t\tfor i = 1, pre_length do\n\t\t\t\t\tlocal item\
      \ = mw.text.split(word_set[i], \"\")\n\t\t\t\t\titem[variable] = modification(item[variable])\n\t\t\t\t\titem[variable + 1] = modification2(item[variable + 1])\n\t\t\t\t\tword_set[pre_length + i] = table.concat(item)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\
      \tadd_respelling(vowel_ui_i, function(x) return \"이\" end)\n\t\tadd_respelling(vowel_ui_e, function(x) return \"에\" end)\n\t\t\n\t\tadd_respelling(no_batchim, \n\t\t\tfunction(x) return char(codepoint(x) - (codepoint(x) - 0xAC00) % 28) end, \n\t\t\tfunction(y)\
      \ return char(codepoint(y) + 588) end)\n\t\t\n\t\tadd_respelling(s_variation, function(x) return char(codepoint(x) - 12) end)\n\t\tadd_respelling(iotation, function(x) return char(codepoint(x) + 56) end)\n\t\tadd_respelling(yeo_reduce, function(x) return\
      \ char(codepoint(x) - 56) end)\n\t\t\n\t\tfor _, vowel_id in ipairs({ 7, 11, 16 }) do\n\t\t\tif has_vowel[vowel_id] and allowed_vowel_scheme[vowel_id .. \"-\" .. system_index] then\n\t\t\t\tlocal pre_length = #word_set\n\t\t\t\tfor i = 1, pre_length do\n\
      \t\t\t\t\tlocal item = mw.text.split(word_set[i], \"\")\n\t\t\t\t\tfor num, it in ipairs(item) do\n\t\t\t\t\t\tif math.floor(((codepoint(it) - 0xAC00) % 588) / 28) == vowel_id then\n\t\t\t\t\t\t\titem[num] = char(codepoint(it) + vowel_variation[vowel_id])\n\
      \t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\tif vowel_id == 11 then\n\t\t\t\t\t\ttable.insert(word_set, i, table.concat(item))\n\t\t\t\t\telse\n\t\t\t\t\t\ttable.insert(word_set, table.concat(item))\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\t\n\t\
      \tlocal word_set_romanisations = {}\n\t\tfor _, respelling in ipairs(word_set) do\n\t\t\tlocal decomposed_syllables = decompose_syllable(respelling)\n\t\t\tlocal romanisation = {}\n\t\t\tlocal bold_insert_count = 0\n\t\t\tfor index = 0, #decomposed_syllables,\
      \ 1 do\n\t\t\t\tlocal this_syllable = index ~= 0 and sub(respelling, index, index) or \"\"\n\t\t\t\t\tlocal syllable = decomposed_syllables[index] or { initial = \"Ø\", vowel = \"Ø\", final = \"X\" }\n\t\t\t\t\tlocal next_syllable = decomposed_syllables[index\
      \ + 1] or { initial = \"Ø\", vowel = \"Ø\", final = \"Ø\" }\n\t\t\t\t\tsyllable.final = final_syllable_conversion[syllable.final] or syllable.final\n\t\t\t\t\t\n\t\t\t\t\tif system_index == 5 and syllable.vowel == \"ᅮ\" and match(syllable.initial, \"[ᄆ\
      ᄇᄈᄑ]\") then\n\t\t\t\t\t\tsyllable.vowel = \"ᅳ\"\n\t\t\t\t\tend\n\t\t\t\t\t\n\t\t\t\t\tif match(system_index, \"[16]\") then\n\t\t\t\t\t\tif syllable.vowel == \"ᅴ\" and this_syllable ~= \"의\" then\n\t\t\t\t\t\t\tsyllable.vowel = \"ᅵ\"\n\t\t\t\t\t\tend\n\
      \t\t\t\t\t\tif this_syllable == \"넓\" then\n\t\t\t\t\t\t\tif match(next_syllable.initial, \"[ᄌᄉ]\") then\n\t\t\t\t\t\t\t\tsyllable.final = \"ᆸ\"\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\telseif next_syllable.initial == \"ᄃ\" then\n\t\t\t\t\t\t\t\tif match(next_syllable.vowel,\
      \ \"[^ᅡᅵ]\") then\n\t\t\t\t\t\t\t\t\tsyllable.final = \"ᆸ\"\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\n\t\t\t\t\tlocal vowel = m_data.vowels[syllable.vowel][system_index]\n\t\t\t\t\t\n\t\t\t\t\tif p.nn[index + 1] then\n\
      \t\t\t\t\t\tnext_syllable.initial = \"ᄂ\"\n\t\t\t\t\tend\n\t\t\t\t\tif p.com[index] and match(system_index, \"[16]\") then\n\t\t\t\t\t\tnext_syllable.initial = com_ph[next_syllable.initial] or next_syllable.initial\n\t\t\t\t\tend\n\t\t\t\t\t\n\t\t\t\t\t\
      if p.ni[index + 1] and system_index ~= 3 then\n\t\t\t\t\t\tnext_syllable.initial = (system_index == 5 and syllable.final == \"ᆯ\") and \"ᄅ\" or \"ᄂ\"\n\t\t\t\t\tend\n\t\t\t\t\t\n\t\t\t\t\tif match(system_index, \"[^35]\") then\n\t\t\t\t\t\tif tonumber(batchim_reduce\
      \ or -1) == index then\n\t\t\t\t\t\t\tsyllable.final = m_data.boundary[syllable.final .. \"-Ø\"][1]\n\t\t\t\t\t\tend\n\t\t\t\t\t\n\t\t\t\t\t\tif index ~= 0 and this_syllable == \"밟\" then\n\t\t\t\t\t\t\tsyllable.final = \"ᆸ\"\n\t\t\t\t\t\tend\n\t\t\t\t\
      \t\t\n\t\t\t\t\t\tif match(syllable.final .. next_syllable.initial .. next_syllable.vowel, \"[ᇀᆴ][ᄋᄒ]ᅵ\") then\n\t\t\t\t\t\t\tsyllable.final = \"ᆾ\"\n\t\t\t\t\t\t\n\t\t\t\t\t\telseif match(syllable.final .. next_syllable.initial .. next_syllable.vowel,\
      \ \"ᆮ이\") then\n\t\t\t\t\t\t\tsyllable.final = \"ᆽ\"\n\t\t\t\t\t\t\n\t\t\t\t\t\telseif match(syllable.final .. next_syllable.initial .. next_syllable.vowel, \"ᆮ히\") then\n\t\t\t\t\t\t\tsyllable.final = \"ᆾ\"\n\t\t\t\t\t\t\n\t\t\t\t\t\telseif syllable.final\
      \ .. next_syllable.initial == \"ᆺᄋ\" and not\n\t\t\t\t\t\t\tmatch(sub(respelling, index+1, index+1), \"[이아어은으음읍을었았있없에입의]\") then\n\t\t\t\t\t\t\t\tsyllable.final = \"ᆮ\"\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\t\n\t\t\t\t\tlocal bound = syllable.final\
      \ .. \"-\" .. next_syllable.initial\n\t\t\t\t\tif not m_data.boundary[bound] then\n\t\t\t\t\t\trequire(\"Module:debug\").track(\"ko-pron/no boundary data\")\n\t\t\t\t\t\tmw.log(\"No boundary data for \" .. bound .. \".\")\n\t\t\t\t\t\treturn nil\n\t\t\t\
      \t\tend\n\t\t\t\t\tlocal junction = m_data.boundary[bound][system_index]\n\t\t\t\t\t\n\t\t\t\t\tif bold_position[index + bold_insert_count + 1] and system_index == 2 then\n\t\t\t\t\t\tjunction = gsub(junction, \"^.*$\", function(matched)\n\t\t\t\t\t\t\t\
      local a, b = match(matched, \"^(ng%-?)(.?)$\")\n\t\t\t\t\t\t\tif not a or not b then a, b = match(matched, \"^(.?%-?)(.*)$\") end\n\t\t\t\t\t\t\treturn match(syllable.final .. next_syllable.initial, \"^Ø?[ᄀ-ᄒ]$\")\n\t\t\t\t\t\t\t\tand \"'''\" .. (a or\
      \ \"\") .. (b or \"\")\n\t\t\t\t\t\t\t\tor (a or \"\") .. \"'''\" .. (b or \"\") end)\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tbold_insert_count = bold_insert_count + 1\n\t\t\t\t\tend\n\t\t\t\t\t\n\t\t\t\t\tif p.l[index] or (p.l[\"y\"] and index == 1) then\n\t\t\t\
      \t\t\tif system_index == 1 then\n\t\t\t\t\t\t\tjunction = gsub(junction, \"^(.)(.?)$\", function(a, b)\n\t\t\t\t\t\t\t\treturn match(a, \"[ᆨ-ᇂ]\") and a .. \":\" .. b or \":\" .. a .. b end)\n\t\t\t\t\t\t\t\n\t\t\t\t\t\telseif system_index == 5 then\n\t\
      \t\t\t\t\t\tvowel = gsub(vowel, \"([aeiou])\", \"%1̄\")\n\t\t\t\t\t\t\t\n\t\t\t\t\t\telseif system_index == 6 then\n\t\t\t\t\t\t\tvowel = vowel .. \"ː\"\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\t\n\t\t\t\t\tif (p.l[\"y\"] or p.l[1]) and index == 0 and\
      \ system_index == 6 and #decomposed_syllables &gt; 1 then\n\t\t\t\t\t\tvowel = vowel .. \"ˈ\"\n\t\t\t\t\tend\n\t\t\t\t\n\t\t\t\t\tif p.com[index] then\n\t\t\t\t\t\tjunction = gsub(junction, \"(.)$\", function(next_letter)\n\t\t\t\t\t\t\treturn \n\t\t\t\
      \t\t\t\t\t(system_index == 5 and \"q\" or \"\") .. \n\t\t\t\t\t\t\t\t(system_index == 4\n\t\t\t\t\t\t\t\t\tand (com_mc[next_letter..(p.cap[\"y\"] or \"\")] or com_mc[next_letter] or next_letter)\n\t\t\t\t\t\t\t\t\tor next_letter) end)\n\t\t\t\t\tend\n\t\
      \t\t\t\t\n\t\t\t\t\tif p.ni[index + 1] and system_index == 5 then\n\t\t\t\t\t\tjunction = gsub(junction, \"([nl])$\", \"&lt;sup&gt;%1&lt;/sup&gt;\")\n\t\t\t\t\tend\n\t\t\t\t\t\n\t\t\t\t\ttable.insert(romanisation, vowel .. junction)\n\t\t\t\tend\n\t\t\t\
      \n\t\t\tlocal temp_romanisation = table.concat(romanisation)\n\t\t\tif p.cap[\"y\"] and match(system_index, \"[^16]\") then\n\t\t\t\ttemp_romanisation = mw.ustring.upper(sub(temp_romanisation, 1, 1)) .. sub(temp_romanisation, 2, -1)\n\t\t\tend\n\t\t\t\n\
      \t\t\tif system_index == 1 then\n\t\t\t\ttemp_romanisation = tidy_phonetic(primitive_word, mw.ustring.toNFC(temp_romanisation))\n\t\t\t\n\t\t\telseif match(system_index, \"[23]\") then\n\t\t\t\tfor i = 1, 2 do\n\t\t\t\t\ttemp_romanisation = gsub(temp_romanisation,\
      \ \"(.)…(.)\", function(a, b)\n\t\t\t\t\t\treturn a .. (ambiguous_intersyllabic_rr[a .. b] and \"-\" or \"\") .. b end)\n\t\t\t\tend\n\t\t\t\n\t\t\telseif system_index == 4 then\n\t\t\t\ttemp_romanisation = gsub(temp_romanisation, \"swi\", \"shwi\")\n\t\
      \t\tend\n\t\t\t\n\t\t\ttable.insert(word_set_romanisations, temp_romanisation)\n\t\tend\n\t\t\n\t\ttext_param = gsub(\n\t\t\ttext_param, \n\t\t\tthe_original, \n\t\t\ttable.concat(word_set_romanisations, system_list[system_index].separator), \n\t\t\t1\n\
      \t\t)\n\tend\n\t\n\treturn text_param\nend\n\nfunction export.make(frame, scheme)\n\tlocal params = {\n\t\t[1] = { default = PAGENAME, list = true },\n\t\t\n\t\t[\"a\"] = {},\n\t\t[\"audio\"] = { alias_of = \"a\" },\n\t\t\n\t\t[\"nn\"] = {},\n\t\t[\"l\"\
      ] = {},\n\t\t[\"com\"] = {},\n\t\t[\"cap\"] = {},\n\t\t[\"ui\"] = {},\n\t\t[\"uie\"] = {},\n\t\t[\"nobc\"] = {},\n\t\t[\"ni\"] = {},\n\t\t[\"bcred\"] = {},\n\t\t[\"svar\"] = {},\n\t\t[\"iot\"] = {},\n\t\t[\"yeored\"] = {},\n\t}\n\t\n\tlocal args = require(\"\
      Module:parameters\").process(frame:getParent().args, params)\n\ttable.sort(system_list, function(first, second) return first.seq &lt; second.seq end)\n\t\n\tlocal results = {}\n\tfor _, text_param in ipairs(args[1]) do\n\t\tlocal current_word_dataset =\
      \ {}\n\t\tfor _, system in pairs(system_list) do\n\t\t\tlocal romanised = export.romanise(text_param, system.seq, args)\n\t\t\ttable.insert(current_word_dataset, romanised)\n\t\tend\n\t\ttable.insert(results, current_word_dataset)\n\tend\n\t\n\tlocal output_result\
      \ = { [1] = {}, [2] = {}, [3] = {}, [4] = {}, [5] = {}, [6] = {} }\n\tfor _, result in ipairs(results) do\n\t\tfor result_index, value in ipairs(result) do\n\t\t\ttable.insert(output_result[result_index], value)\n\t\tend\n\tend\n\t\n\tlocal output_text\
      \ = {}\n\t\n\tlocal ipa_output = table.concat(output_result[6], system_list[6].separator)\n\tlocal width = 15 * mw.ustring.len(ipa_output)\n\twidth = width &lt; 400 and 400 or (width &gt; 800 and 800 or width)\n\t\n\ttable.insert(output_text, \n\t\t'*\
      \ ' .. tostring( mw.html.create( \"span\" )\n\t\t\t:css( \"padding-right\", \".5em\" )\n\t\t\t:css( \"color\", \"#8F390A\" )\n\t\t\t:css( \"font-family\", \"DejaVu Sans, sans-serif\" )\n\t\t\t:css( \"font-weight\", \"bold\" )\n\t\t\t:wikitext( system_list[6].display\
      \ )) ..\n\t\t\n\t\ttostring( mw.html.create( \"span\" )\n\t\t\t:attr( \"class\", \"IPA\" )\n\t\t\t:wikitext( \"[\" .. tidy_ipa(output_result[6]) .. \"]\" )) ..\n\t\t\n\t\t\"\\n* \" .. tostring( mw.html.create( \"span\" )\n\t\t\t:css( \"padding-right\"\
      , \".5em\" )\n\t\t\t:css( \"color\", \"#8F390A\" )\n\t\t\t:css( \"font-family\", \"DejaVu Sans, sans-serif\" )\n\t\t\t:css( \"font-weight\", \"bold\" )\n\t\t\t:wikitext( system_list[1].display )) .. \"[\" ..\n\t\t\n\t\ttostring( mw.html.create( \"span\"\
      \ )\n\t\t\t:attr( \"class\", \"Kore\" )\n\t\t\t:attr( \"lang\", \"ko\" )\n\t\t\t:wikitext( table.concat(output_result[1], system_list[1].separator) )) .. \"]\\n\" .. \n\t\t\n[=[{| style=\"margin: 0 1em .5em 1.6em\"\n|\n&lt;table cellpadding=1 style=\"\
      border: 1px solid #DFDFDF; line-height: 25pt; padding: .1em .3em .1em .3em\"&gt;]=])\n\t\t\n\tfor roman_index = 2, 5 do\n\t\ttable.insert(output_text, \n\t\t\t\"\\n&lt;tr&gt;\" .. \n\t\t\t\n\t\t\ttostring( mw.html.create( \"td\" )\n\t\t\t\t:css( \"padding-right\"\
      , \".5em\" )\n\t\t\t\t:css( \"font-size\", \"10pt\" )\n\t\t\t\t:css( \"font-family\", \"DejaVu Sans, sans-serif\" )\n\t\t\t\t:css( \"color\", \"#555\" )\n\t\t\t\t:css( \"font-weight\", \"bold\" )\n\t\t\t\t:css( \"background-color\", \"#F8F9F8\" )\n\t\t\
      \t\t:wikitext( system_list[roman_index].display )) .. \"\\n\" ..\n\t\t\t\n\t\t\ttostring( mw.html.create( \"td\" )\n\t\t\t\t:attr( \"class\", \"IPA\" )\n\t\t\t\t:css( \"padding-left\", \".7em\" )\n\t\t\t\t:css( \"padding-right\", \".7em\" )\n\t\t\t\t:css(\
      \ \"font-size\", \"100%\" )\n\t\t\t\t:wikitext( table.concat(output_result[roman_index], system_list[roman_index].separator) )) ..\n\t\t\t\n\t\t\t\"&lt;/tr&gt;\")\n\tend\n\t\n\ttable.insert(output_text, \n\t\t(args.a \n\t\t\tand \"\\n&lt;tr&gt;\" .. \n\
      \t\t\t\n\t\t\ttostring( mw.html.create( \"td\" )\n\t\t\t\t:css( \"padding-right\", \".5em\" )\n\t\t\t\t:css( \"font-size\", \"10pt\" )\n\t\t\t\t:css( \"font-family\", \"DejaVu Sans\" )\n\t\t\t\t:css( \"color\", \"#555\" )\n\t\t\t\t:css( \"font-weight\"\
      , \"bold\" )\n\t\t\t\t:css( \"background-color\", \"#F8F9F8\" )\n\t\t\t\t:wikitext( \"Audio\" )) .. \n\t\t\t\n\t\t\ttostring( mw.html.create( \"td\" )\n\t\t\t\t:css( \"padding-left\", \".7em\" )\n\t\t\t\t:css( \"padding-right\", \".7em\" )\n\t\t\t\t:wikitext(\
      \ mw.getCurrentFrame():expandTemplate{ \n\t\t\t\t\ttitle = \"Template:audio\", \n\t\t\t\t\targs = { args.a == \"y\" and \"Ko-\" .. PAGENAME .. \".ogg\" or args.a, lang = \"ko\" }} )) ..\n\t\t\t\n\t\t\t\"&lt;/tr&gt;\"\n\t\t\t\n\t\t\tor \"\"\n\n\t\t) ..\
      \ \"&lt;/table&gt;\\n|}\")\n\t\t\n\treturn table.concat(output_text)\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2015-09-23T14:03:29.800Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Template%3Alang&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=PT:17:Vila_Nova_De_Gaia:41.13:-8.62:v4; WMF-Last-Access=23-Sep-2015
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Age: '0'
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Type: text/xml; charset=utf-8
      Date: Wed, 23 Sep 2015 14:03:28 GMT
      Server: nginx/1.9.4
      Strict-Transport-Security: max-age=31536000; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,X-Forwarded-Proto,Cookie
      X-Analytics: https=1;WMF-Last-Access=23-Sep-2015
      X-Cache: cp1065 miss (0), cp3003 miss (0), cp3012 frontend miss (0)
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.6.5
      X-Varnish: 269855836, 339011036, 1890200407
    body: |-
      <?xml version="1.0"?><api batchcomplete=""><query><pages><page _idx="2249840" pageid="2249840" ns="10" title="Template:lang"><revisions><rev user="CodeCat" timestamp="2014-04-09T16:25:33Z" comment="" contentformat="text/x-wiki" contentmodel="wikitext" xml:space="preserve">{{#invoke:script utilities|lang_t}}&lt;!--

      --&gt;&lt;noinclude&gt;{{documentation}}</rev></revisions></page></pages></query></api>
- recorded: 2019-04-15T21:09:18.352Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Ascript+utilities&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; WMF-Last-Access=15-Apr-2019; WMF-Last-Access-Global=15-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=68354 t=1555362558223558
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:18 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1285.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=15-Apr-2019;WMF-Last-Access-Global=15-Apr-2019;https=1
      X-Cache: cp1079 pass, cp3032 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 674643576, 255731808, 693259745
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"4099100\" pageid=\"4099100\" ns=\"828\" title=\"Module:script utilities\"><revisions><rev user=\"Rua\" timestamp=\"2019-04-03T16:56:29Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"Undo revision 52248476 by [[Special:Contributions/Rua|Rua]] ([[User talk:Rua|talk]])\" xml:space=\"preserve\">local export = {}\n\n--[=[\n\tModules used:\n\t[[Module:script utilities/data]]\n\
      \t[[Module:scripts]]\n\t[[Module:languages]]\n\t[[Module:parameters]]\n\t[[Module:utilities]]\n\t[[Module:debug]]\n]=]\n\nfunction export.is_Latin_script(sc)\n\t-- Latn, Latf, Latinx, nv-Latn, pjt-Latn\n\treturn sc:getCode():find(\"Lat\") and true or false\n\
      end\n\n-- Used by [[Template:lang]]\nfunction export.lang_t(frame)\n\tparams = {\n\t\t[1] = {},\n\t\t[2] = { allow_empty = true, default = \"\" },\n\t\t[\"sc\"] = {},\n\t\t[\"face\"] = {},\n\t\t[\"class\"] = {},\n\t}\n\t\n\tlocal args = require(\"Module:parameters\"\
      ).process(frame:getParent().args, params)\n\tlocal NAMESPACE = mw.title.getCurrentTitle().nsText\n\t\n\tlocal lang = args[1] or (NAMESPACE == \"Template\" and \"und\") or error(\"Language code has not been specified. Please pass parameter 1 to the template.\"\
      )\n\tlang = require(\"Module:languages\").getByCode(lang) or require(\"Module:languages\").err(lang, 1)\n\t\n\tlocal text = args[2]\n\t\n\tlocal sc = args[\"sc\"]\n\tsc = (sc and (require(\"Module:scripts\").getByCode(sc) or error(\"The script code \\\"\
      \" .. sc .. \"\\\" is not valid.\")) or nil)\n\t\n\tlocal face = args[\"face\"]\n\t\n\treturn export.tag_text(text, lang, sc, face, class)\nend\n\n-- Ustring turns on the codepoint-aware string matching. The basic string function\n-- should be used for\
      \ simple sequences of characters, Ustring function for\n-- sets – [].\nlocal function trackPattern(text, pattern, tracking, ustring)\n\tlocal find = ustring and mw.ustring.find or string.find\n\tif pattern and find(text, pattern) then\n\t\trequire(\"Module:debug\"\
      ).track(\"script/\" .. tracking)\n\tend\nend\n\nlocal function track(text, lang, sc)\n\tlocal U = mw.ustring.char\n\t\n\tif lang and text then\n\t\tlocal langCode = lang:getCode()\n\t\t\n\t\t-- [[Special:WhatLinksHere/Template:tracking/script/ang/acute]]\n\
      \t\tif langCode == \"ang\" then\n\t\t\tlocal decomposed = mw.ustring.toNFD(text)\n\t\t\tlocal acute = U(0x301)\n\t\t\t\n\t\t\ttrackPattern(decomposed, acute, \"ang/acute\")\n\t\t\n\t\t--[=[\n\t\t[[Special:WhatLinksHere/Template:tracking/script/Greek/wrong-phi]]\n\
      \t\t[[Special:WhatLinksHere/Template:tracking/script/Greek/wrong-theta]]\n\t\t[[Special:WhatLinksHere/Template:tracking/script/Greek/wrong-kappa]]\n\t\t[[Special:WhatLinksHere/Template:tracking/script/Greek/wrong-rho]]\n\t\t\tϑ, ϰ, ϱ, ϕ should generally\
      \ be replaced with θ, κ, ρ, φ.\n\t\t]=]\n\t\telseif langCode == \"el\" or langCode == \"grc\" then\n\t\t\ttrackPattern(text, \"ϑ\", \"Greek/wrong-theta\")\n\t\t\ttrackPattern(text, \"ϰ\", \"Greek/wrong-kappa\")\n\t\t\ttrackPattern(text, \"ϱ\", \"Greek/wrong-rho\"\
      )\n\t\t\ttrackPattern(text, \"ϕ\", \"Greek/wrong-phi\")\n\t\t\n\t\t\t--[=[\n\t\t\t[[Special:WhatLinksHere/Template:tracking/script/Ancient Greek/spacing-coronis]]\n\t\t\t[[Special:WhatLinksHere/Template:tracking/script/Ancient Greek/spacing-smooth-breathing]]\n\
      \t\t\t[[Special:WhatLinksHere/Template:tracking/script/Ancient Greek/wrong-apostrophe]]\n\t\t\t\tWhen spacing coronis and spacing smooth breathing are used as apostrophes, \n\t\t\t\tthey should be replaced with right single quotation marks (’).\n\t\t\t\
      ]=]\n\t\t\tif langCode == \"grc\" then\n\t\t\t\ttrackPattern(text, U(0x1FBD), \"Ancient Greek/spacing-coronis\")\n\t\t\t\ttrackPattern(text, U(0x1FBF), \"Ancient Greek/spacing-smooth-breathing\")\n\t\t\t\ttrackPattern(text, \"[\" .. U(0x1FBD) .. U(0x1FBF)\
      \ .. \"]\", \"Ancient Greek/wrong-apostrophe\", true)\n\t\t\tend\n\t\t\n\t\t-- [[Special:WhatLinksHere/Template:tracking/script/Russian/grave-accent]]\n\t\telseif langCode == \"ru\" then\n\t\t\tlocal decomposed = mw.ustring.toNFD(text)\n\t\t\t\n\t\t\t\
      trackPattern(decomposed, U(0x300), \"Russian/grave-accent\")\n\t\t\n\t\t-- [[Special:WhatLinksHere/Template:tracking/script/Tibetan/trailing-punctuation]]\n\t\telseif langCode == \"bo\" then\n\t\t\ttrackPattern(text, \"[་།]$\", \"Tibetan/trailing-punctuation\"\
      , true)\n\t\t\ttrackPattern(text, \"[་།]%]%]$\", \"Tibetan/trailing-punctuation\", true)\n\n\t\t--[=[\n\t\t[[Special:WhatLinksHere/Template:tracking/script/Thai/broken-ae]]\n\t\t[[Special:WhatLinksHere/Template:tracking/script/Thai/broken-am]]\n\t\t[[Special:WhatLinksHere/Template:tracking/script/Thai/wrong-rue-lue]]\n\
      \t\t]=]\n\t\telseif langCode == \"th\" then\n\t\t\ttrackPattern(text, \"เ\"..\"เ\", \"Thai/broken-ae\")\n\t\t\ttrackPattern(text, \"ํ[่้๊๋]?า\", \"Thai/broken-am\", true)\n\t\t\ttrackPattern(text, \"[ฤฦ]า\", \"Thai/wrong-rue-lue\", true)\n\n\t\t--[=[\n\
      \t\t[[Special:WhatLinksHere/Template:tracking/script/Lao/broken-ae]]\n\t\t[[Special:WhatLinksHere/Template:tracking/script/Lao/broken-am]]\n\t\t]=]\n\t\telseif langCode == \"lo\" then\n\t\t\ttrackPattern(text, \"ເ\"..\"ເ\", \"Lao/broken-ae\")\n\t\t\ttrackPattern(text,\
      \ \"ໍ[່້໊໋]?າ\", \"Lao/broken-am\", true)\n\t\tend\n\tend\nend\n\n-- Wrap text in the appropriate HTML tags with language and script class.\nfunction export.tag_text(text, lang, sc, face, class, id)\n\tif not sc then\n\t\tsc = require(\"Module:scripts\"\
      ).findBestScript(text, lang)\n\tend\n\t\n\ttrack(text, lang, sc)\n\t\t\n\t-- Replace space characters with newlines in Mongolian-script text, which is written top-to-bottom.\n\tif sc and sc:getDirection() == \"down\" then\n\t\t--[[\tFirst, escape targets\
      \ of wikilinks and HTML tags,\n\t\t\t\twhich should not have their spaces\n\t\t\t\treplaced with line breaks. ]]\n\t\tlocal escaped = {}\n\t\tlocal i = 0\n\t\tlocal escape_format = \"$%d\"\n\t\t\n\t\tlocal function escape(text, pattern, prefix)\n\t\t\t\
      return text:gsub(\n\t\t\t\tpattern,\n\t\t\t\tfunction(item)\n\t\t\t\t\ti = i + 1\n\t\t\t\t\tescaped[i] = item\n\t\t\t\t\treturn (prefix or \"\") .. escape_format:format(i)\n\t\t\t\tend)\n\t\tend\n\t\t\n\t\ttext = escape(text, \"%[%[([^|]+|)\", \"[[\")\n\
      \t\ttext = escape(text, \"&lt;[^&gt;]+&gt;\")\n\t\t\n\t\ttext = text:gsub(\" +\", \"&lt;br&gt;\")\n\t\t\n\t\t-- Unescape whatever was escaped.\n\t\ttext = text:gsub(\n\t\t\t\"$(%d)\",\n\t\t\tfunction(a)\n\t\t\t\ta = tonumber(a)\n\t\t\t\treturn escaped[a]\n\
      \t\t\tend\n\t\t)\n\tend\n\n\tif sc:getCode() == \"Imag\" then\n\t\tface = nil\n\tend\n\n\tlocal function class_attr(classes)\n\t\ttable.insert(classes, 1, sc:getCode())\n\t\tif class and class ~= '' then\n\t\t\ttable.insert(classes, class)\n\t\tend\n\t\
      \treturn 'class=\"' .. table.concat(classes, ' ') .. '\"'\n\tend\n\t\n\tlocal function tag_attr(...)\n\t\tlocal output = {}\n\t\tif id then\n\t\t\ttable.insert(output, 'id=\"' .. require(\"Module:utilities\").make_id(lang, id) .. '\"')\n\t\tend\n\t\t\n\
      \t\ttable.insert(output, class_attr({...}) )\n\t\t\n\t\tif lang then\n\t\t\ttable.insert(output, 'lang=\"' .. lang:getCode() .. '\"')\n\t\tend\n\t\t\n\t\treturn table.concat(output, \" \")\n\tend\n\t\n\tif face == \"hypothetical\" then\n\t-- [[Special:WhatLinksHere/Template:tracking/script-utilities/face/hypothetical]]\n\
      \t\trequire(\"Module:debug\").track(\"script-utilities/face/hypothetical\")\n\tend\n\t\n\tlocal data = mw.loadData(\"Module:script utilities/data\").faces[face or \"nil\"]\n\t\n\tlocal post = \"\"\n\tif sc:getDirection() == \"rtl\" and (face == \"translation\"\
      \ or mw.ustring.find(text, \"%p$\")) then\n\t\tpost = \"&amp;lrm;\"\n\tend\n\t\n\t-- Add a script wrapper\n\tif data then\n\t\treturn ( data.prefix or \"\" ) .. '&lt;' .. data.tag .. ' ' .. tag_attr(data.class) .. '&gt;' .. text .. '&lt;/' .. data.tag\
      \ .. '&gt;' .. post\n\telse\n\t\terror('Invalid script face \"' .. face .. '\".')\n\tend\nend\n\nfunction export.tag_translit(translit, lang, kind, attributes, is_manual)\n\tif type(lang) == \"table\" then\n\t\tlang = lang.getCode and lang:getCode()\n\t\
      \t\tor error(\"Third argument to tag_translit should be a language code or language object.\")\n\tend\n\t\n\tlocal data = mw.loadData(\"Module:script utilities/data\").translit[kind or \"default\"]\n\t\n\tlocal opening_tag = {}\n\t\n\ttable.insert(opening_tag,\
      \ data.tag)\n\tif lang == \"ja\" then\n\t\ttable.insert(opening_tag, 'class=\"' .. (data.classes and data.classes .. \" \" or \"\") .. (is_manual and \"manual-tr \" or \"\") .. 'tr\"')\n\telse\n\t\ttable.insert(opening_tag, 'lang=\"' .. lang .. '-Latn\"\
      ')\n\t\ttable.insert(opening_tag, 'class=\"' .. (data.classes and data.classes .. \" \" or \"\") .. (is_manual and \"manual-tr \" or \"\") .. 'tr Latn\"')\n\tend\n\t\n\tif data.dir then\n\t\ttable.insert(opening_tag, 'dir=\"' .. data.dir .. '\"')\n\tend\n\
      \t\n\ttable.insert(opening_tag, attributes)\n\t\n\treturn \"&lt;\" .. table.concat(opening_tag, \" \") .. \"&gt;\" .. translit .. \"&lt;/\" .. data.tag .. \"&gt;\"\nend\n\nfunction export.tag_transcription(transcription, lang, kind, attributes)\n\tif type(lang)\
      \ == \"table\" then\n\t\tlang = lang.getCode and lang:getCode()\n\t\t\tor error(\"Third argument to tag_translit should be a language code or language object.\")\n\tend\n\t\n\tlocal data = mw.loadData(\"Module:script utilities/data\").transcription[kind\
      \ or \"default\"]\n\t\n\tlocal opening_tag = {}\n\t\n\ttable.insert(opening_tag, data.tag)\n\tif lang == \"ja\" then\n\t\ttable.insert(opening_tag, 'class=\"' .. (data.classes and data.classes .. \" \" or \"\") .. 'ts\"')\n\telse\n\t\ttable.insert(opening_tag,\
      \ 'lang=\"' .. lang .. '-Latn\"')\n\t\ttable.insert(opening_tag, 'class=\"' .. (data.classes and data.classes .. \" \" or \"\") .. 'ts Latn\"')\n\tend\n\t\n\tif data.dir then\n\t\ttable.insert(opening_tag, 'dir=\"' .. data.dir .. '\"')\n\tend\n\t\n\ttable.insert(opening_tag,\
      \ attributes)\n\t\n\treturn \"&lt;\" .. table.concat(opening_tag, \" \") .. \"&gt;\" .. transcription .. \"&lt;/\" .. data.tag .. \"&gt;\"\t\nend\n\n-- Add a notice to request the native script of a word\nfunction export.request_script(lang, sc)\n\tlocal\
      \ scripts = lang.getScripts and lang:getScripts() or error('The language \"' .. lang:getCode() .. '\" does not have the method getScripts. It may be unwritten.')\n\t\n\t-- By default, request for \"native\" script\n\tlocal cat_script = \"native\"\n\tlocal\
      \ disp_script = \"script\"\n\t\n\t-- If the script was not specified, and the language has only one script, use that.\n\tif not sc and #scripts == 1 then\n\t\tsc = scripts[1]\n\tend\n\t\n\t-- Is the script known?\n\tif sc then\n\t\t-- If the script is\
      \ Latin, return nothing.\n\t\tif export.is_Latin_script(sc) then\n\t\t\treturn \"\"\n\t\tend\n\t\t\n\t\tif sc:getCode() ~= scripts[1]:getCode() then\n\t\t\tdisp_script = sc:getCanonicalName()\n\t\tend\n\t\t\n\t\t-- The category needs to be specific to\
      \ script only if there is chance\n\t\t-- of ambiguity. This occurs when lang=und, or when the language has\n\t\t-- multiple scripts.\n\t\tif lang:getCode() == \"und\" or scripts[2] then\n\t\t\tcat_script = sc:getCanonicalName()\n\t\tend\n\telse\n\t\t--\
      \ The script is not known.\n\t\t-- Does the language have at least one non-Latin script in its list?\n\t\tlocal has_nonlatin = false\n\t\t\n\t\tfor i, val in ipairs(scripts) do\n\t\t\tif not export.is_Latin_script(val) then\n\t\t\t\thas_nonlatin = true\n\
      \t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\t\n\t\t-- If there are non-Latin scripts, return nothing.\n\t\tif not has_nonlatin then\n\t\t\treturn \"\"\n\t\tend\n\tend\n\t\n\tlocal category = \"\"\n\t\n\tif mw.title.getCurrentTitle().nsText ~= \"Template\" then\n\
      \t\tcategory = \"[[Category:\" .. lang:getCanonicalName() .. \" terms needing \" .. cat_script .. \" script]]\"\n\tend\n\t\n\treturn \"&lt;small&gt;[\" .. disp_script .. \" needed]&lt;/small&gt;\" .. category\nend\n\nfunction export.template_rfscript(frame)\n\
      \tlocal args = frame.args\n\tlocal lang = args[1] or error(\"The first parameter (language code) has not been given\")\n\tlocal sc = args[\"sc\"]; if sc == \"\" then sc = nil end\n\tlang = require(\"Module:languages\").getByCode(lang) or error(\"The language\
      \ code \\\"\" .. lang .. \"\\\" is not valid.\")\n\tsc = (sc and (require(\"Module:scripts\").getByCode(sc) or error(\"The script code \\\"\" .. sc .. \"\\\" is not valid.\")) or nil)\n\t\n\tlocal ret = export.request_script(lang, sc)\n\t\n\tif ret ==\
      \ \"\" then\n\t\terror(\"This language is written in the Latin alphabet. It does not need a native script.\")\n\telse\n\t\treturn ret\n\tend\nend\n\nfunction export.checkScript(text, scriptCode, result)\n\tlocal scriptObject = require(\"Module:scripts\"\
      ).getByCode(scriptCode)\n\t\n\tif not scriptObject then\n\t\terror('The script code \"' .. scriptCode .. '\" is not recognized.')\n\tend\n\t\n\tlocal originalText = text\n\t\n\t-- Remove non-letter characters.\n\ttext = mw.ustring.gsub(text, \"[%A]\",\
      \ \"\")\n\t\n\t-- Remove all characters of the script in question.\n\ttext = mw.ustring.gsub(text, \"[\" .. scriptObject:getCharacters() .. \"]\", \"\")\n\t\n\tif text ~= \"\" then\n\t\tif type(result) == \"string\" then\n\t\t\terror(result)\n\t\telse\n\
      \t\t\terror('The text \"' .. originalText .. '\" contains the letters \"' .. text .. '\" that do not belong to the ' .. scriptObject:getCategoryName() .. '.', 2)\n\t\tend\n\tend\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-15T21:09:13.460Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Alanguages&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; WMF-Last-Access=15-Apr-2019; WMF-Last-Access-Global=15-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=45168 t=1555362553357391
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:13 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1344.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=15-Apr-2019;WMF-Last-Access-Global=15-Apr-2019;https=1
      X-Cache: cp1085 pass, cp3033 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 591241747, 507645877, 684916604
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"4453474\" pageid=\"4453474\" ns=\"828\" title=\"Module:languages\"><revisions><rev user=\"Benwing2\" timestamp=\"2019-04-13T02:06:03Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"add getNonEtymological\" xml:space=\"preserve\">local export = {}\n\n--[=[\tThis function checks for things that could plausibly be a language code:\n\t\ttwo or three lowercase letters,\
      \ two or three groups of three lowercase\n\t\tletters with hyphens between them. If such a pattern is not found,\n\t\tit is likely the editor simply forgot to enter a language code. ]=]\n\nfunction export.err(langCode, param, text, template_tag)\n\tlocal\
      \ ordinals = {\n\t\t\"first\", \"second\", \"third\", \"fourth\", \"fifth\", \"sixth\",\n\t\t\"seventh\", \"eighth\", \"ninth\", \"tenth\", \"eleventh\", \"twelfth\",\n\t\t\"thirteenth\", \"fourteenth\", \"fifteenth\", \"sixteenth\", \"seventeenth\",\n\
      \t\t\"eighteenth\", \"nineteenth\", \"twentieth\"\n\t}\n\t\n\tif not template_tag then\n\t\ttemplate_tag = \"\"\n\telse\n\t\tif type(template_tag) ~= \"string\" then\n\t\t\ttemplate_tag = template_tag()\n\t\tend\n\t\ttemplate_tag = \" (Original template:\
      \ \" .. template_tag .. \")\"\n\tend\n\tlocal paramType = type(param)\n\tif paramType == \"number\" then\n\t\tordinal = ordinals[param]\n\t\tparam = ordinal .. ' parameter'\n\telseif paramType == \"string\" then\n\t\tparam = 'parameter \"' .. param ..\
      \ '\"'\n\telse\n\t\terror(\"The parameter name is \"\n\t\t\t\t.. (paramType == \"table\" and \"a table\" or tostring(param))\n\t\t\t\t.. \", but it should be a number or a string.\" .. template_tag, 2)\n\tend\n\t\n\t-- Can use string.find because language\
      \ codes only contain ASCII.\n\tif not langCode or langCode == \"\" then\n\t\terror(\"The \" .. param .. \" (\" .. (text or \"language code\") .. \") is missing.\" .. template_tag, 2)\n\telseif langCode:find(\"^%l%l%l?$\")\n\t\t\tor langCode:find(\"^%l%l%l%-%l%l%l$\"\
      )\n\t\t\tor langCode:find(\"^%l%l%l%-%l%l%l%-%l%l%l$\") then\n\t\terror(\"The language code \\\"\" .. langCode .. \"\\\" is not valid.\" .. template_tag, 2)\n\telse\n\t\terror(\"Please enter a \" .. (text or \"language code\") .. \" in the \" .. param\
      \ .. \".\" .. template_tag, 2)\n\tend\nend\n\nlocal function do_entry_name_or_sort_key_replacements(text, replacements)\n\tif replacements.from then\n\t\tfor i, from in ipairs(replacements.from) do\n\t\t\tlocal to = replacements.to[i] or \"\"\n\t\t\ttext\
      \ = mw.ustring.gsub(text, from, to)\n\t\tend\n\tend\n\t\n\tif replacements.remove_diacritics then\n\t\ttext = mw.ustring.toNFD(text)\n\t\ttext = mw.ustring.gsub(text,\n\t\t\t'[' .. replacements.remove_diacritics .. ']',\n\t\t\t'')\n\t\ttext = mw.ustring.toNFC(text)\n\
      \tend\n\t\n\treturn text\nend\n\nlocal Language = {}\n\nfunction Language:getCode()\n\treturn self._code\nend\n\n\nfunction Language:getCanonicalName()\n\treturn self._rawData[1] or self._rawData.canonicalName\nend\n\n\nfunction Language:getOtherNames()\n\
      \treturn self._rawData.otherNames or {}\nend\n\n\nfunction Language:getType()\n\treturn self._rawData.type or \"regular\"\nend\n\n\nfunction Language:getWikimediaLanguages()\n\tif not self._wikimediaLanguageObjects then\n\t\tlocal m_wikimedia_languages\
      \ = require(\"Module:wikimedia languages\")\n\t\tself._wikimediaLanguageObjects = {}\n\t\tlocal wikimedia_codes = self._rawData.wikimedia_codes or { self._code }\n\t\t\n\t\tfor _, wlangcode in ipairs(wikimedia_codes) do\n\t\t\ttable.insert(self._wikimediaLanguageObjects,\
      \ m_wikimedia_languages.getByCode(wlangcode))\n\t\tend\n\tend\n\t\n\treturn self._wikimediaLanguageObjects\nend\n\nfunction Language:getWikipediaArticle()\n\tif self._rawData.wikipedia_article then\n\t\treturn self._rawData.wikipedia_article \n\telseif\
      \ self._wikipedia_article then\n\t\treturn self._wikipedia_article\n\telseif self:getWikidataItem() and mw.wikibase then\n\t\tself._wikipedia_article = mw.wikibase.sitelink(self:getWikidataItem(), 'enwiki')\n\tend\n\tif not self._wikipedia_article then\n\
      \t\tself._wikipedia_article = mw.ustring.gsub(self:getCategoryName(), \"Creole language\", \"Creole\")\n\tend\n\treturn self._wikipedia_article\nend\n\nfunction Language:makeWikipediaLink()\n\treturn \"[[w:\" .. self:getWikipediaArticle() .. \"|\" .. self:getCanonicalName()\
      \ .. \"]]\"\nend\n\nfunction Language:getWikidataItem()\n\treturn self._rawData[2] or self._rawData.wikidata_item\nend\n\nfunction Language:getScripts()\n\tif not self._scriptObjects then\n\t\tlocal m_scripts = require(\"Module:scripts\")\n\t\tself._scriptObjects\
      \ = {}\n\t\t\n\t\tfor _, sc in ipairs(self._rawData.scripts or { \"None\" }) do\n\t\t\ttable.insert(self._scriptObjects, m_scripts.getByCode(sc))\n\t\tend\n\tend\n\t\n\treturn self._scriptObjects\nend\n\nfunction Language:getScriptCodes()\n\treturn self._rawData.scripts\
      \ or { \"None\" }\nend\n\nfunction Language:getFamily()\n\tif self._familyObject then\n\t\treturn self._familyObject\n\tend\n\t\t\n\tlocal family = self._rawData[3] or self._rawData.family \n\tif family then\n\t\tself._familyObject = require(\"Module:families\"\
      ).getByCode(family)\n\tend\n\t\n\treturn self._familyObject\nend\n\n\nfunction Language:getAncestors()\n\tif not self._ancestorObjects then\n\t\tself._ancestorObjects = {}\n\t\t\n\t\tif self._rawData.ancestors then\n\t\t\tfor _, ancestor in ipairs(self._rawData.ancestors)\
      \ do\n\t\t\t\ttable.insert(self._ancestorObjects, export.getByCode(ancestor) or require(\"Module:etymology languages\").getByCode(ancestor))\n\t\t\tend\n\t\telse\n\t\t\tlocal fam = self:getFamily()\n\t\t\tlocal protoLang = fam and fam:getProtoLanguage()\
      \ or nil\n\t\t\t\n\t\t\t-- For the case where the current language is the proto-language\n\t\t\t-- of its family, we need to step up a level higher right from the start.\n\t\t\tif protoLang and protoLang:getCode() == self:getCode() then\n\t\t\t\tfam =\
      \ fam:getFamily()\n\t\t\t\tprotoLang = fam and fam:getProtoLanguage() or nil\n\t\t\tend\n\t\t\t\n\t\t\twhile not protoLang and not (not fam or fam:getCode() == \"qfa-not\") do\n\t\t\t\tfam = fam:getFamily()\n\t\t\t\tprotoLang = fam and fam:getProtoLanguage()\
      \ or nil\n\t\t\tend\n\t\t\t\n\t\t\ttable.insert(self._ancestorObjects, protoLang)\n\t\tend\n\tend\n\t\n\treturn self._ancestorObjects\nend\n\nlocal function iterateOverAncestorTree(node, func)\n\tfor _, ancestor in ipairs(node:getAncestors()) do\n\t\t\
      if ancestor then\n\t\t\tlocal ret = func(ancestor) or iterateOverAncestorTree(ancestor, func)\n\t\t\tif ret then\n\t\t\t\treturn ret\n\t\t\tend\n\t\tend\n\tend\nend\n\nfunction Language:getAncestorChain()\n\tif not self._ancestorChain then\n\t\tself._ancestorChain\
      \ = {}\n\t\tlocal step = #self:getAncestors() == 1 and self:getAncestors()[1] or nil\n\t\t\n\t\twhile step do\n\t\t\ttable.insert(self._ancestorChain, 1, step)\n\t\t\tstep = #step:getAncestors() == 1 and step:getAncestors()[1] or nil\n\t\tend\n\tend\n\t\
      \n\treturn self._ancestorChain\nend\n\n\nfunction Language:hasAncestor(otherlang)\n\tlocal function compare(ancestor)\n\t\treturn ancestor:getCode() == otherlang:getCode()\n\tend\n\t\n\treturn iterateOverAncestorTree(self, compare) or false\nend\n\n\n\
      function Language:getCategoryName()\n\tlocal name = self:getCanonicalName()\n\t\n\t-- If the name already has \"language\" in it, don't add it.\n\tif name:find(\"[Ll]anguage$\") then\n\t\treturn name\n\telse\n\t\treturn name .. \" language\"\n\tend\nend\n\
      \n\nfunction Language:getStandardCharacters()\n\treturn self._rawData.standardChars\nend\n\n\nfunction Language:makeEntryName(text)\n\ttext = mw.ustring.gsub(text, \"^[¿¡]\", \"\")\n\ttext = mw.ustring.gsub(text, \"(.)[؟?!;՛՜ ՞ ՟？！︖︕।॥။၊་།]$\", \"%1\"\
      )\n\t\n\tif self:getCode() == \"ar\" then\n\t\tlocal U = mw.ustring.char\n\t\tlocal taTwiil = U(0x640)\n\t\tlocal waSla = U(0x671)\n\t\t-- diacritics ordinarily removed by entry_name replacements\n\t\tlocal Arabic_diacritics = U(0x64B, 0x64C, 0x64D, 0x64E,\
      \ 0x64F, 0x650, 0x651, 0x652, 0x670)\n\t\t\n\t\tif text == waSla or mw.ustring.find(text, \"^\" .. taTwiil .. \"?[\" .. Arabic_diacritics .. \"]\" .. \"$\") then\n\t\t\treturn text\n\t\tend\n\tend\n\t\n\tif type(self._rawData.entry_name) == \"table\" then\n\
      \t\ttext = do_entry_name_or_sort_key_replacements(text, self._rawData.entry_name)\n\tend\n\t\n\treturn text\nend\n\n\n-- Add to data tables?\nlocal has_dotted_undotted_i = {\n\t[\"az\"] = true,\n\t[\"crh\"] = true,\n\t[\"gag\"] = true,\n\t[\"kaa\"] = true,\n\
      \t[\"tt\"] = true,\n\t[\"tr\"] = true,\n\t[\"zza\"] = true,\n}\n\nfunction Language:makeSortKey(name, sc)\n\tif has_dotted_undotted_i[self:getCode()] then\n\t\tname = name:gsub(\"I\", \"ı\")\n\tend\n\t\n\tname = mw.ustring.lower(name)\n\t\n\t-- Remove\
      \ initial hyphens and *\n\tlocal hyphens_regex = \"^[-־ـ*]+(.)\"\n\tname = mw.ustring.gsub(name, hyphens_regex, \"%1\")\n\t\n\t-- If there are language-specific rules to generate the key, use those\n\tif type(self._rawData.sort_key) == \"table\" then\n\
      \t\tname = do_entry_name_or_sort_key_replacements(name, self._rawData.sort_key)\n\telseif type(self._rawData.sort_key) == \"string\" then\n\t\tname = require(\"Module:\" .. self._rawData.sort_key).makeSortKey(name, self:getCode(), sc and sc:getCode())\n\
      \tend\n\t\n\t-- Remove parentheses, as long as they are either preceded or followed by something\n\tname = mw.ustring.gsub(name, \"(.)[()]+\", \"%1\")\n\tname = mw.ustring.gsub(name, \"[()]+(.)\", \"%1\")\n\t\n\tif has_dotted_undotted_i[self:getCode()]\
      \ then\n\t\tname = name:gsub(\"i\", \"İ\")\n\tend\n\t\n\treturn mw.ustring.upper(name)\nend\n\nfunction Language:overrideManualTranslit()\n\tif self._rawData.override_translit then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\n\n\nfunction Language:transliterate(text,\
      \ sc, module_override)\n\tif not ((module_override or self._rawData.translit_module) and text) then\n\t\treturn nil\n\tend\n\t\n\tif module_override then\n\t\trequire(\"Module:debug\").track(\"module_override\")\n\tend\n\t\n\treturn require(\"Module:\"\
      \ .. (module_override or self._rawData.translit_module)).tr(text, self:getCode(), sc and sc:getCode() or nil)\nend\n\nfunction Language:hasTranslit()\n\treturn self._rawData.translit_module and true or false\nend\n\n\nfunction Language:link_tr()\n\treturn\
      \ self._rawData.link_tr and true or false\nend\n\n\nfunction Language:toJSON()\n\tlocal entryNamePatterns = nil\n\tlocal entryNameRemoveDiacritics = nil\n\t\n\tif self._rawData.entry_name then\n\t\tentryNameRemoveDiacritics = self._rawData.entry_name.remove_diacritics\n\
      \t\tif self._rawData.entry_name.from then\n\t\t\tentryNamePatterns = {}\n\t\t\tfor i, from in ipairs(self._rawData.entry_name.from) do\n\t\t\t\tlocal to = self._rawData.entry_name.to[i] or \"\"\n\t\t\t\ttable.insert(entryNamePatterns, { from = from, to\
      \ = to })\n\t\t\tend\n\t\tend\n\tend\n\t\n\tlocal ret = {\n\t\tancestors = self._rawData.ancestors,\n\t\tcanonicalName = self:getCanonicalName(),\n\t\tcategoryName = self:getCategoryName(),\n\t\tcode = self._code,\n\t\tentryNamePatterns = entryNamePatterns,\n\
      \t\tfamily = self._rawData[3] or self._rawData.family,\n\t\totherNames = self:getOtherNames(),\n\t\tscripts = self._rawData.scripts,\n\t\ttype = self:getType(),\n\t\twikimediaLanguages = self._rawData.wikimedia_codes,\n\t\twikidataItem = self:getWikidataItem(),\n\
      \t}\n\t\n\treturn require(\"Module:JSON\").toJSON(ret)\nend\n\n\n-- Do NOT use this method!\n-- All uses should be pre-approved on the talk page!\nfunction Language:getRawData()\n\treturn self._rawData\nend\n\nLanguage.__index = Language\n\n\nfunction\
      \ export.getDataModuleName(code)\n\tif code:find(\"^%l%l$\") then\n\t\treturn \"languages/data2\"\n\telseif code:find(\"^%l%l%l$\") then\n\t\tlocal prefix = code:sub(1, 1)\n\t\treturn \"languages/data3/\" .. prefix\n\telseif code:find(\"^[%l-]+$\") then\n\
      \t\treturn \"languages/datax\"\n\telse\n\t\treturn nil\n\tend\nend\n\n\nlocal function getRawLanguageData(code)\n\tlocal modulename = export.getDataModuleName(code)\n\treturn modulename and mw.loadData(\"Module:\" .. modulename)[code] or nil\nend\n\n\n\
      function export.makeObject(code, data)\n\tif data and data.deprecated then\n\t\trequire(\"Module:debug\").track {\n\t\t\t\"languages/deprecated\",\n\t\t\t\"languages/deprecated/\" .. code\n\t\t}\n\tend\n\t\n\treturn data and setmetatable({ _rawData = data,\
      \ _code = code }, Language) or nil\nend\n\n\nfunction export.getByCode(code)\n\tif type(code) ~= \"string\" then\n\t\terror(\"The function getByCode expects a string as its first argument, but received \" .. (code == nil and \"nil\" or \"a \" .. type(code))\
      \ .. \".\")\n\tend\n\t\n\treturn export.makeObject(code, getRawLanguageData(code))\nend\n\n\nfunction export.getByName(name)\n\tlocal byName = mw.loadData(\"Module:languages/by name\")\n\tlocal code = byName.all and byName.all[name] or byName[name]\n\t\
      \n\tif not code then\n\t\treturn nil\n\tend\n\t\n\treturn export.makeObject(code, getRawLanguageData(code))\nend\n\n\nfunction export.getByCanonicalName(name)\n\tlocal byName = mw.loadData(\"Module:languages/canonical names\")\n\tlocal code = byName and\
      \ byName[name]\n\t\n\tif not code then\n\t\treturn nil\n\tend\n\t\n\treturn export.makeObject(code, getRawLanguageData(code))\nend\n\n\nfunction export.iterateAll()\n\tmw.incrementExpensiveFunctionCount()\n\tlocal m_data = mw.loadData(\"Module:languages/alldata\"\
      )\n\tlocal func, t, var = pairs(m_data)\n\t\n\treturn function()\n\t\tlocal code, data = func(t, var)\n\t\treturn export.makeObject(code, data)\n\tend\nend\n\n--[[\tIf language is an etymology language, iterates through parent languages\n\t\tuntil it finds\
      \ a non-etymology language. ]]\nfunction export.getNonEtymological(lang)\n\twhile lang:getType() == \"etymology language\" do\n\t\tlocal parentCode = lang:getParentCode()\n\t\tlocal parent = export.getByCode(parentCode)\n\t\t\tor require(\"Module:etymology\
      \ languages\").getByCode(parentCode)\n\t\t\tor require(\"Module:families\").getByCode(parentCode)\n\t\t\n\t\tlang = parent\n--\t\tmw.log(terminfo.lang:getCode() .. \" \" .. terminfo.lang:getType())\n\tend\n\t\n\treturn lang\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-15T21:09:13.700Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Alanguages%2Fdata2&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; WMF-Last-Access=15-Apr-2019; WMF-Last-Access-Global=15-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=45214 t=1555362553540783
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:13 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1288.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=15-Apr-2019;WMF-Last-Access-Global=15-Apr-2019;https=1
      X-Cache: cp1089 pass, cp3032 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 205341275, 261887533, 696107793
    body: !!binary |-
      
- recorded: 2019-04-15T21:09:16.461Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Ascripts&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; WMF-Last-Access=15-Apr-2019; WMF-Last-Access-Global=15-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=64276 t=1555362556348067
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:16 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1279.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=15-Apr-2019;WMF-Last-Access-Global=15-Apr-2019;https=1
      X-Cache: cp1079 pass, cp3040 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 669766065, 563523417, 690289634
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"4216643\" pageid=\"4216643\" ns=\"828\" title=\"Module:scripts\"><revisions><rev user=\"Erutuon\" timestamp=\"2018-02-03T10:53:06Z\" contentformat=\"\
      text/plain\" contentmodel=\"Scribunto\" comment=\"that was incorrect, but it turns out there aren&#039;t even any scripts whose canonical names contain &quot;script&quot;, so it didn&#039;t cause problems\" xml:space=\"preserve\">local export = {}\nlocal\
      \ Script = {}\n\nfunction Script:getCode()\n\treturn self._code\nend\n\nfunction Script:getCanonicalName()\n\treturn self._rawData.canonicalName\nend\n\nfunction Script:getOtherNames()\n\treturn self._rawData.otherNames or {}\nend\n\nfunction Script:getParent()\n\
      \treturn self._rawData.parent\nend\n\nfunction Script:getSystems()\n\tif not self._systemObjects then\n\t\tlocal m_systems = require(\"Module:writing systems\")\n\t\tself._systemObjects = {}\n\t\t\n\t\tfor _, sys in ipairs(self._rawData.systems or {})\
      \ do\n\t\t\ttable.insert(self._systemObjects, m_systems.getByCode(sys))\n\t\tend\n\tend\n\t\n\treturn self._systemObjects\nend\n\n--function Script:getAllNames()\n--\treturn self._rawData.names\n--end\n\n\nfunction Script:getType()\n\treturn \"script\"\
      \nend\n\n\nfunction Script:getCategoryName()\n\tlocal name = self._rawData.canonicalName\n\t\n\t-- If the name already has \"code\" or \"semaphore\" in it, don't add it.\n\t-- No names contain \"script\".\n\tif name:find(\"[Cc]ode$\") or name:find(\"[Ss]emaphore$\"\
      ) then\n\t\treturn name\n\telse\n\t\treturn name .. \" script\"\n\tend\nend\n\n\nfunction Script:getWikipediaArticle()\n\treturn self._rawData.wikipedia_article or self:getCategoryName()\nend\n\n\nfunction Script:getCharacters()\n\tif self._rawData.characters\
      \ then\n\t\treturn self._rawData.characters\n\telse\n\t\treturn nil\n\tend\nend\n\n\nfunction Script:countCharacters(text)\n\tif not self._rawData.characters then\n\t\treturn 0\n\telse\n\t\tlocal _, num = mw.ustring.gsub(text, \"[\" .. self._rawData.characters\
      \ .. \"]\", \"\")\n\t\treturn num\n\tend\nend\n\nfunction Script:getDirection()\n\tlocal direction = self._rawData.direction\n\tif not direction then\n\t\treturn nil\n\telse\n\t\treturn direction\n\tend\nend\n\n\nfunction Script:getRawData()\n\treturn\
      \ self._rawData\nend\n\n\nfunction Script:toJSON()\n\tlocal ret = {\n\t\tcanonicalName = self:getCanonicalName(),\n\t\tcategoryName = self:getCategoryName(),\n\t\tcode = self._code,\n\t\totherNames = self:getOtherNames(),\n\t\ttype = self:getType(),\n\t\
      \t}\n\t\n\treturn require(\"Module:JSON\").toJSON(ret)\nend\n\n\nScript.__index = Script\n\n\nfunction export.makeObject(code, data)\n\treturn data and setmetatable({ _rawData = data, _code = code }, Script) or nil\nend\n\n\nfunction export.getByCode(code)\n\
      \tif code == \"IPAchar\" then\n\t\trequire(\"Module:debug\").track(\"IPAchar\")\n\tend\n\treturn export.makeObject(code, mw.loadData(\"Module:scripts/data\")[code])\nend\n\nfunction export.getByCanonicalName(name)\n\tlocal code = mw.loadData(\"Module:scripts/by\
      \ name\")[name]\n\t\n\tif not code then\n\t\treturn nil\n\tend\n\t\n\treturn export.makeObject(code, mw.loadData(\"Module:scripts/data\")[code])\nend\n\n-- Find the best script to use, based on the characters of a string.\nfunction export.findBestScript(text,\
      \ lang)\n\tif not text or not lang or not lang.getScripts then\n\t\treturn export.getByCode(\"None\")\n\tend\n\t\n\tlocal scripts = lang:getScripts()\n\t\n\tif not scripts[2] then\n\t\treturn scripts[1]\n\tend\n\t\n\t--[=[\n\t\tRemove any HTML entities;\
      \ catfix function in [[Module:utilities]]\n\t\tadds tagging to a no-break space (&amp;nbsp;), which contains Latin characters;\n\t\thence Latin was returned as the script if \"Latn\" is one of the language's scripts.\n\t]=]\n\ttext = string.gsub(text,\
      \ \"&amp;[a-zA-Z0-9]+;\", \"\")\n\t\n\t-- Try to match every script against the text,\n\t-- and return the one with the most matching characters.\n\tlocal bestcount = 0\n\tlocal bestscript = nil\n\t\n\t-- Get length of text minus any spacing or punctuation\
      \ characters.\n\t-- Counting instances of UTF-8 character pattern is faster than mw.ustring.len.\n\tlocal _, length = string.gsub(mw.ustring.gsub(text, \"[%s%p]+\", \"\"), \"[\\1-\\127\\194-\\244][\\128-\\191]*\", \"\")\n\t\n\tif length == 0 then\n\t\t\
      return export.getByCode(\"None\")\n\tend\n\t\n\tfor i, script in ipairs(scripts) do\n\t\tlocal count = script:countCharacters(text)\n\t\t\n\t\tif count &gt;= length then\n\t\t\treturn script\n\t\tend\n\t\t\n\t\tif count &gt; bestcount then\n\t\t\tbestcount\
      \ = count\n\t\t\tbestscript = script\n\t\tend\n\tend\n\t\n\tif bestscript then\n\t\treturn bestscript\n\tend\n\t\n\t-- No matching script was found. Return \"None\".\n\treturn export.getByCode(\"None\")\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-15T21:09:16.655Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Ascripts%2Fdata&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; WMF-Last-Access=15-Apr-2019; WMF-Last-Access-Global=15-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=42359 t=1555362556539335
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:16 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1344.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=15-Apr-2019;WMF-Last-Access-Global=15-Apr-2019;https=1
      X-Cache: cp1077 pass, cp3033 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 406911564, 500379163, 684350324
    body: !!binary |-
      
- recorded: 2019-04-15T21:09:16.074Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Template%3Ako-noun&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; WMF-Last-Access=15-Apr-2019; WMF-Last-Access-Global=15-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=38203 t=1555362555991702
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Length: '1141'
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:16 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1314.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=15-Apr-2019;WMF-Last-Access-Global=15-Apr-2019;https=1
      X-Cache: cp1075 pass, cp3030 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 607456458, 654607852, 705888884
    body: <?xml version="1.0"?><api batchcomplete=""><warnings><main xml:space="preserve">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space="preserve">Because "rvslots" was not specified, a legacy format has been used for the output. This format is deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx="500875" pageid="500875" ns="10" title="Template:ko-noun"><revisions><rev user="Atitarev" timestamp="2014-01-10T11:32:24Z" contentformat="text/x-wiki" contentmodel="wikitext" comment="Replaced content with &quot;&lt;includeonly&gt;{{#invoke:ko-headword|show|nouns}}&lt;/includeonly&gt;&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;&quot;" xml:space="preserve">&lt;includeonly&gt;{{#invoke:ko-headword|show|nouns}}&lt;/includeonly&gt;&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</rev></revisions></page></pages></query></api>
- recorded: 2019-04-15T21:09:16.261Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Ako-headword&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; WMF-Last-Access=15-Apr-2019; WMF-Last-Access-Global=15-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=48662 t=1555362556160074
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:16 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1280.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=15-Apr-2019;WMF-Last-Access-Global=15-Apr-2019;https=1
      X-Cache: cp1079 pass, cp3041 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 668918328, 730320295, 701079338
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"4242777\" pageid=\"4242777\" ns=\"828\" title=\"Module:ko-headword\"><revisions><rev user=\"Suzukaze-c\" timestamp=\"2019-03-14T05:19:41Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"fix pages like [[勿忘草]] that have both |hangeul= and |rv= (although perhaps |rv= should be removed, as it is redundant)\" xml:space=\"preserve\">local m_translit = require(\"Module:ko-translit\"\
      )\nlocal PAGENAME = mw.title.getCurrentTitle().text\n\nlocal export = {}\nlocal pos_functions = {}\n\nlocal lang = require(\"Module:languages\").getByCode(\"ko\")\n\npos_functions[\"verbs\"] = function(args, data)\n\t-- infinitive(s)\n\tlocal m_conj =\
      \ require(\"Module:ko-conj\").verb\n\tlocal hae = args[\"hae\"] or m_conj(nil, { PAGENAME, irreg = args[\"irreg\"], form = \"hae\" })\n\tif hae == \"\" then hae = nil end\n\tlocal hae2 = args[\"hae2\"] or m_conj(nil, { PAGENAME, irreg = args[\"irreg\"\
      ], form = \"hae2\" })\n\tif hae2 == \"\" then hae2 = nil end\n\t\n\tlocal infinitives = {label = \"infinitive\"}\n\tif hae then table.insert(infinitives, hae) end\n\tif hae2 then table.insert(infinitives, hae2) end\n\tif #infinitives &gt; 0 then table.insert(data.inflections,\
      \ infinitives) end\n\t\n\t-- sequential\n\tlocal hani = args[\"hani\"] or m_conj(nil, { PAGENAME, irreg = args[\"irreg\"], form = \"hani\" })\n\tif hani == \"\" then hani = nil end\n\t\n\tif hani then table.insert(data.inflections, {label = \"sequential\"\
      , hani}) end\nend\n\npos_functions[\"adjectives\"] = function(args, data)\n\tlocal m_conj = require(\"Module:ko-conj\").adjective\n\tlocal hae = args[\"hae\"] or m_conj(nil, { PAGENAME, irreg = args[\"irreg\"], form = \"hae\" })\n\tif hae == \"\" then\
      \ hae = nil end\n\tlocal hae2 = args[\"hae2\"] or m_conj(nil, { PAGENAME, irreg = args[\"irreg\"], form = \"hae2\" })\n\tif hae2 == \"\" then hae2 = nil end\n\t\n\tlocal infinitives = {label = \"infinitive\"}\n\tif hae then table.insert(infinitives, hae)\
      \ end\n\tif hae2 then table.insert(infinitives, hae2) end\n\tif #infinitives &gt; 0 then table.insert(data.inflections, infinitives) end\n\t\n\t-- sequential\n\tlocal hani = args[\"hani\"] or m_conj(nil, { PAGENAME, irreg = args[\"irreg\"], form = \"hani\"\
      \ })\n\t\n\tif hani then table.insert(data.inflections, {label = \"sequential\", hani}) end\nend\n\npos_functions[\"suffixes\"] = function(args, data)\n\tlocal hae = args[\"hae\"]; if hae == \"\" then hae = nil end\n\tlocal hae2 = args[\"hae2\"]; if hae2\
      \ == \"\" then hae2 = nil end\n\t\n\tlocal infinitives = {label = \"infinitive\"}\n\tif hae then table.insert(infinitives, hae) end\n\tif hae2 then table.insert(infinitives, hae2) end\n\tif #infinitives &gt; 0 then table.insert(data.inflections, infinitives)\
      \ end\n\t\n\t-- sequential\n\tlocal hani = args[\"hani\"]; if hani == \"\" then hani = nil end\n\t\n\tif hani then table.insert(data.inflections, {label = \"sequential\", hani}) end\nend\n\npos_functions[\"adjective forms\"] = function(args, data)\n\t\
      local root = args[\"root\"]; if root == \"\" then root = nil end\n\tlocal form = args[\"form\"]; if form == \"\" then form = nil end\n\t\n\tif form and root then\n\t\ttable.insert(data.inflections, {label = form .. \" of\", root})\n\tend\nend\n\npos_functions[\"\
      verb forms\"] = pos_functions[\"adjective forms\"]\n\npos_functions[\"determiners\"] = function(args, data)\n\tlocal root = args[\"root\"]; if root == \"\" then root = nil end\n\n\tif root then table.insert(data.inflections, {label = \"determinative form\
      \ of\", root}) end\nend\n\npos_functions[\"nouns\"] = function(args, data)\n\tlocal count = args[\"count\"]; if count == \"\" then count = nil end\n\t\n\tif count == '-' then \n\t\ttable.insert(data.inflections, \"uncountable\")\n\telseif count then\n\t\
      \ttable.insert(data.inflections, {label = \"counter\", count})\n\tend\nend\n\n-- other parts of speech: nothing special is done for adverbs, interjections, suffixes\n\n-- The main entry point.\n-- This is the only function that can be invoked from a template.\n\
      function export.show(frame)\n\tlocal args = frame:getParent().args\n\tlocal poscat = frame.args[1] or error(\"Part of speech has not been specified. Please pass parameter 1 to the module invocation.\")\n\tlocal hangeul_pattern = '[ᄀ-ᄒ\"..\"ᅡ-ᅵ\"..\"ᆨ-ᇂ\
      \" .. \"ㄱ-ㆎ가-힣 ]' -- includes a space character too\n\tlocal hanja_pattern = '[一-鿌]'\n\t\n\tlocal head = args[\"head\"]; if head == \"\" then head = nil end\n\tlocal hangeul = args[\"hangeul\"]; if hangeul == \"\" then hangeul = nil end\n\tlocal hanja\
      \ = args[\"hanja\"]; if hanja == \"\" then hanja = nil end\n\tlocal rv = args[\"rv\"] or args[\"rr\"]; if rv == \"\" then rv = nil end\n\tlocal mr = args[\"mr\"]; if mr == \"\" then mr = nil end\n\tlocal y = args[\"y\"]; if y == \"\" then y = nil end\n\
      \t\n\tlocal data = {lang = lang, pos_category = poscat, categories = {}, heads = {head}, translits = {}, inflections = {}, sort_key = hangeul, sc = require(\"Module:scripts\").getByCode(hangeul and \"Hani\" or \"Kore\")}\n\t\n\t-- categorize by part of\
      \ speech\n\tif poscat == \"hada verbs\" then\n\t\tdata.pos_category = \"verbs\"\n\t\ttable.insert(data.categories, \"Korean hada verbs\")\n\telseif poscat == \"auxiliary verbs\" then\n\t\tdata.pos_category = \"verbs\"\n\t\ttable.insert(data.categories,\
      \ \"Korean auxiliary verbs\")\n\tend\n\t\n\tif args[\"irreg\"] then table.insert(data.inflections, { label = \"irregular\" }) end\n\t\n\t-- grammatical forms etc. for each respective part of speech\n\tif pos_functions[poscat] then\n\t\tpos_functions[poscat](args,\
      \ data)\n\tend\t\n\t\n\t-- &gt;&gt;&gt; transliterations &lt;&lt;&lt;\n\t-- if this entry is hangeul and no transliteration is provided, add auto transliteration\n\t-- if this entry is NOT hangeul and no translit is provided, add auto translit if there\
      \ is hangeul\n\tif rv then\n\t\t-- no need to do anything\n\telseif mw.ustring.gsub(PAGENAME, hangeul_pattern, '') == \"\" then\n\t\trv = m_translit.tr(PAGENAME)\n\telseif hangeul then\n\t\trv = m_translit.tr(hangeul)\n\telse\n\t\terror('Could not produce\
      \ transliteration. There may be non-hangeul characters in the entry title.')\n\tend\n\tif poscat == 'proper nouns' then\n\t\trv = mw.ustring.upper(mw.ustring.sub(rv,1,1)) .. mw.ustring.sub(rv,2,-1)\n\tend\n\t\n\t-- add -hada to the revised romanization\
      \ for 하다 (hada)  verbs\n\tif poscat == \"hada verbs\" then \n\t\trv = rv .. \"-hada\" \n\t\tdata.heads[1] = PAGENAME .. \" + 하다\"\t\n\tend\n\t\n\tif poscat == \"suffixes\" then\n\t\trv = \"-\" .. rv\n\t\tdata.heads[1] = \"—\" .. PAGENAME\n\telseif poscat\
      \ == \"prefixes\" then\n\t\trv = rv .. \"-\"\n\t\tdata.heads[1] = PAGENAME .. \"—\"\n\tend\n\t\n\tif rv then table.insert(data.translits, rv) end\n\tif mr then table.insert(data.translits, \"McCune-Reischauer: \" .. mr) end\n\tif y then table.insert(data.translits,\
      \ \"Yale: \" .. y) end\n\tdata.translits = {table.concat(data.translits, \", \")}\n\t\n\tif hangeul then\n\t\ttable.insert(data.inflections, {label = \"hangeul\", { term = hangeul, sc = require(\"Module:scripts\").getByCode(\"Kore\") }})\n\tend\n\t\n\t\
      if hanja then\n\t\ttable.insert(data.inflections, {label = \"hanja\", { term = hanja, sc = require(\"Module:scripts\").getByCode(\"Hani\") }})\n\tend\n\t\n\t-- and categorize hanja terms\n\tif mw.ustring.match(PAGENAME, hanja_pattern) then\n\t\ttable.insert(data.categories,\
      \ \"Korean Han characters\")\n\t\tif poscat == \"nouns\" then \n\t\t\ttable.insert(data.categories, \"Korean nouns in Han script\") \n\t\telseif poscat == \"proper nouns\" then \n\t\t\ttable.insert(data.categories, \"Korean proper nouns in Han script\"\
      ) \n\t\tend\n\telseif mw.ustring.match(PAGENAME, hangeul_pattern) then\n\t\tlocal content = mw.title.new(PAGENAME):getContent()\n\t\tlocal code = mw.ustring.match(content, '{{ko%-IPA[^}]*}}')\n\t\tif not code then code = mw.ustring.match(content, '{{ko%-ipa[^}]*}}')\
      \ end\n\t\tif not code then code = mw.ustring.match(content, '{{ko%-pron[|}]') end\n\t\tif not code then table.insert(data.categories, \"Korean terms without ko-IPA template\") end\n\tend\n\t\n\t-- maintenance category for hanja terms without hangeul\n\
      \tif mw.ustring.match(PAGENAME, hanja_pattern) and hangeul == nil then \n\t\ttable.insert(data.categories, \"Korean hanja terms lacking hangeul\")\n\tend\n\t\n\treturn require(\"Module:headword\").full_headword(data)\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-15T21:09:16.889Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Aheadword&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; WMF-Last-Access=15-Apr-2019; WMF-Last-Access-Global=15-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=61046 t=1555362556759381
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:16 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1288.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=15-Apr-2019;WMF-Last-Access-Global=15-Apr-2019;https=1
      X-Cache: cp1081 pass, cp3033 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 506181915, 478838190, 698887793
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"3989053\" pageid=\"3989053\" ns=\"828\" title=\"Module:headword\"><revisions><rev user=\"Rua\" timestamp=\"2019-04-04T11:34:46Z\" contentformat=\"\
      text/plain\" contentmodel=\"Scribunto\" comment=\"\" xml:space=\"preserve\">local export = {}\n\nlocal m_data = mw.loadData(\"Module:headword/data\")\n\nlocal title = mw.title.getCurrentTitle()\n\nlocal isLemma = m_data.lemmas\nlocal isNonLemma = m_data.nonlemmas\n\
      local notranslit = m_data.notranslit\nlocal toBeTagged = m_data.toBeTagged\n\nlocal parameters = {\n\tlang = { type = \"object\" },\n\tscript = { type = \"object\" },\n\theads = { type = \"table\" },\n\ttranslits = { type = \"table\" },\n\ttranscriptions\
      \ = { type = \"table\" },\n\tinflections = { type = \"table\" },\n\tgenders = { type = \"table\" },\n\tcategories = { type = \"table\" },\n\tpos_category = { type = \"string\" },\n\tsort_key = { type = \"string\" },\n\tid = { type = \"string\" },\n}\n\n\
      local function test_script(text, script_code)\n\tif type(text) == \"string\" and type(script_code) == \"string\" then\n\t\tlocal sc = require(\"Module:scripts\").getByCode(script_code)\n\t\tlocal characters\n\t\tif sc then\n\t\t\tcharacters = sc:getCharacters()\n\
      \t\tend\n\t\t\n\t\tlocal out\n\t\tif characters then\n\t\t\ttext = mw.ustring.gsub(text, \"%W\", \"\")\n\t\t\tout = mw.ustring.find(text, \"[\" .. characters .. \"]\")\n\t\tend\n\t\t\n\t\tif out then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\
      \tend\n\telse\n\t\tmw.log(\"Parameters to test_script were incorrect.\")\n\t\treturn nil\n\tend\nend\n\n\nlocal function preprocess(data)\n\t--[=[\n\t[[Special:WhatLinksHere/Template:tracking/headword/heads-not-table]]\n\t[[Special:WhatLinksHere/Template:tracking/headword/translits-not-table]]\n\
      \t]=]\n\tif type(data.heads) ~= \"table\" then\n\t\tif data.heads then\n\t\t\trequire(\"Module:debug\").track(\"headword/heads-not-table\")\n\t\tend\n\t\t\n\t\tdata.heads = { data.heads }\n\tend\n\t\n\tif type(data.translits) ~= \"table\" then\n\t\tif\
      \ data.translits then\n\t\t\trequire(\"Module:debug\").track(\"headword/translits-not-table\")\n\t\tend\n\t\t\n\t\tdata.translits = { data.translits }\n\tend\n\t\n\tif type(data.transcriptions) ~= \"table\" then\n\t\tif data.transcriptions then\n\t\t\t\
      require(\"Module:debug\").track(\"headword/transcriptions-not-table\")\n\t\tend\n\t\t\n\t\tdata.transcriptions = { data.transcriptions }\n\tend\n\t\n\tif not data.heads or #data.heads == 0 then\n\t\tdata.heads = {\"\"}\n\tend\n\t\n\t-- Determine if term\
      \ is reconstructed\n\tlocal is_reconstructed = data.lang:getType() == \"reconstructed\"\n\t\tor title.nsText == \"Reconstruction\"\n\t\n\t-- Create a default headword.\n\tlocal subpagename = title.subpageText\n\tlocal pagename = title.text\n\tlocal default_head\n\
      \tif is_reconstructed then\n\t\tdefault_head = require(\"Module:utilities\").plain_gsub(pagename, data.lang:getCanonicalName() .. \"/\", \"\")\n\telse\n\t\tdefault_head = subpagename\n\tend\n\t\n\t-- Add links to multi-word page names when appropriate\n\
      \tif data.lang:getCode() ~= \"zh\" then\n\t\tlocal spacingPunctuation = \"([%s%p]+)\"\n\t\t--[[ \tVariable containing anything that is\n\t\t\t\tnot a punctuation character found inside of words.\n\t\t\t\tUsed to exclude characters from the above regex.\t\
      ]]\n\t\tlocal notWordPunc = \"([^-־׳״'.·*’]+)\"\n\t\tlocal contains_words = false\n\t\t\n\t\tfor possibleWordBreak in mw.ustring.gmatch(default_head, spacingPunctuation) do\n\t\t\tif mw.ustring.find(possibleWordBreak, notWordPunc) then\n\t\t\t\tcontains_words\
      \ = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\t\n\t\tif (not is_reconstructed) and contains_words then\n\t\t\tlocal function workaround_to_exclude_chars(s)\n\t\t\t\treturn mw.ustring.gsub(s, notWordPunc, \"]]%1[[\")\n\t\t\tend\n\t\t\t\n\t\t\tdefault_head\
      \ = \"[[\"\n\t\t\t\t.. mw.ustring.gsub(\n\t\t\t\t\tdefault_head,\n\t\t\t\t\tspacingPunctuation,\n\t\t\t\t\tworkaround_to_exclude_chars\n\t\t\t\t\t)\n\t\t\t\t.. \"]]\"\n\t\t\t--[=[\n\t\t\tuse this when workaround is no longer needed:\n\t\t\tdefault_head\
      \ = \"[[\"\n\t\t\t\t.. mw.ustring.gsub(default_head, WORDBREAKCHARS, \"]]%1[[\")\n\t\t\t\t.. \"]]\"\n\t\t\t\n\t\t\tRemove any empty links, which could have been created above\n\t\t\tat the beginning or end of the string.\n\t\t\t]=]\n\t\t\tdefault_head\
      \ = mw.ustring.gsub(default_head, \"%[%[%]%]\", \"\")\n\t\tend\n\tend\n\t\n\tif is_reconstructed then\n\t\tdefault_head = \"*\" .. default_head\n\tend\n\t\n\t-- If a head is the empty string \"\", then replace it with the default\n\tfor i, head in ipairs(data.heads)\
      \ do\n\t\tif head == \"\" then\n\t\t\thead = default_head\n\t\telse\n\t\t\tif head == default_head and data.lang:getCanonicalName() == \"English\" then\n\t\t\t\ttable.insert(data.categories, data.lang:getCanonicalName() .. \" terms with redundant head\
      \ parameter\")\n\t\t\tend\t\t\t\n\t\tend\n\t\tdata.heads[i] = head\n\tend\n\t\n\t--[[\tTry to detect the script if it was not provided\n\t\t\tWe use the first headword for this, and assume\n\t\t\tthat all of them have the same script\n\t\t\tThis *should*\
      \ always be true, right?\t\t]]\n\tif not data.sc then\n\t\tdata.sc = require(\"Module:scripts\").findBestScript(data.heads[1], data.lang)\n\tend\n\t\n\tfor i, val in pairs(data.translits) do\n\t\tdata.translits[i] = {display = val, is_manual = true}\n\t\
      end\n\t\n\t-- Make transliterations\n\tfor i, head in ipairs(data.heads) do\n\t\tlocal translit = data.translits[i]\n\t\t\n\t\t-- Try to generate a transliteration if necessary\n\t\t-- Generate it if the script is not Latn or similar, and if no transliteration\
      \ was provided\n\t\tif translit and translit.display == \"-\" then\n\t\t\ttranslit = nil\n\t\telseif not translit and not (data.sc:getCode():find(\"Latn\", nil, true) or data.sc:getCode() == \"Latinx\" or data.sc:getCode() == \"None\") and (not data.sc\
      \ or data.sc:getCode() ~= \"Imag\") then\n\t\t\ttranslit = data.lang:transliterate(require(\"Module:links\").remove_links(head), data.sc)\n\t\t\t\n\t\t\t-- There is still no transliteration?\n\t\t\t-- Add the entry to a cleanup category.\n\t\t\tif not\
      \ translit and not notranslit[data.lang:getCode()] then\n\t\t\t\ttranslit = \"&lt;small&gt;transliteration needed&lt;/small&gt;\"\n\t\t\t\ttable.insert(data.categories, data.lang:getCanonicalName() .. \" terms needing transliteration\")\n\t\t\tend\n\t\t\
      \t\n\t\t\tif translit then\n\t\t\t\ttranslit = {display = translit, is_manual = false}\n\t\t\tend\n\t\tend\n\t\t\n\t\t-- Link to the transliteration entry for languages that require this\n\t\tif translit and data.lang:link_tr() then\n\t\t\ttranslit.display\
      \ = require(\"Module:links\").full_link{\n\t\t\t\tterm = translit.display,\n\t\t\t\tlang = data.lang,\n\t\t\t\tsc = require(\"Module:scripts\").getByCode(\"Latn\"),\n\t\t\t\ttr = \"-\"\n\t\t\t\t}\n\t\tend\n\t\t\n\t\tdata.translits[i] = translit\n\tend\n\
      \t\n\tif data.id and type(data.id) ~= \"string\" then\n\t\terror(\"The id in the data table should be a string.\")\n\tend\nend\n\n\n-- Format a headword with transliterations\nlocal function format_headword(data)\n\tlocal m_links = require(\"Module:links\"\
      )\n\tlocal m_scriptutils = require(\"Module:script utilities\")\n\t\n\t-- Are there non-empty transliterations?\n\t-- Need to do it this way because translit[1] might be nil while translit[2] is not\n\tlocal has_translits = false\n\t\n\t-- Format the headwords\n\
      \tfor i, head in ipairs(data.heads) do\n\t\tif data.translits[i] or data.transcriptions[i] then\n\t\t\thas_translits = true\n\t\tend\n\t\t\n\t\t-- Apply processing to the headword, for formatting links and such\n\t\tif head:find(\"[[\", nil, true) and\
      \ (not data.sc or data.sc:getCode() ~= \"Imag\") then\n\t\t\thead = m_links.language_link({term = head, lang = data.lang}, false)\n\t\tend\n\t\t\n\t\t-- Add language and script wrapper\n\t\tif i == 1 then\n\t\t\thead = m_scriptutils.tag_text(head, data.lang,\
      \ data.sc, \"head\", nil, data.id)\n\t\telse\n\t\t\thead = m_scriptutils.tag_text(head, data.lang, data.sc, \"head\", nil)\n\t\tend\n\t\t\n\t\tdata.heads[i] = head\n\tend\n\t\n\tlocal translits_formatted = \"\"\n\t\n\tif has_translits then\n\t\t-- Format\
      \ the transliterations\n\t\tlocal translits = data.translits\n\t\tlocal transcriptions = data.transcriptions\n\t\t\n\t\tif translits then\n\t\t\t-- using pairs() instead of ipairs() in case there is a gap\n\t\t\tfor i, _ in pairs(translits) do\n\t\t\t\t\
      if type(i) == \"number\" then\n\t\t\t\t\ttranslits[i] = m_scriptutils.tag_translit(translits[i].display, data.lang:getCode(), \"head\", nil, translits[i].is_manual)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\n\t\tif transcriptions then\n\t\t\tfor i, _ in pairs(transcriptions)\
      \ do\n\t\t\t\tif type(i) == \"number\" then\n\t\t\t\t\ttranscriptions[i] = m_scriptutils.tag_transcription(transcriptions[i], data.lang:getCode(), \"head\")\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\n\t\tfor i = 1, math.max(#translits, #transcriptions) do\n\t\
      \t\tlocal translits_formatted = {}\n\t\t\ttable.insert(translits_formatted, translits[i] and translits[i] or \"\")\n\t\t\ttable.insert(translits_formatted, (translits[i] and transcriptions[i]) and \" \" or \"\")\n\t\t\ttable.insert(translits_formatted,\
      \ transcriptions[i] and \"/\" .. transcriptions[i] .. \"/\" or \"\")\n\t\t\tdata.translits[i] = table.concat(translits_formatted)\n\t\tend\n\t\t\n\t\ttranslits_formatted = \" (\" .. table.concat(data.translits, \" &lt;i&gt;or&lt;/i&gt; \") .. \")\"\n\t\
      \t\n\t\tlocal transliteration_page = mw.title.new(data.lang:getCanonicalName() .. \" transliteration\", \"Wiktionary\")\n\t\t\n\t\tif transliteration_page then\n\t\t\tlocal success, exists = pcall(function () return transliteration_page.exists end)\n\t\
      \t\tif success and exists then\n\t\t\t\ttranslits_formatted = \" [[Wiktionary:\" .. data.lang:getCanonicalName() .. \" transliteration|•]]\" .. translits_formatted\n\t\t\tend\n\t\tend\n\tend\n\t\n\treturn table.concat(data.heads, \" &lt;i&gt;or&lt;/i&gt;\
      \ \") .. translits_formatted\nend\n\n\nlocal function format_genders(data)\n\tif data.genders and #data.genders &gt; 0 then\n\t\tlocal gen = require(\"Module:gender and number\")\n\t\treturn \"&amp;nbsp;\" .. gen.format_list(data.genders, data.lang)\n\t\
      else\n\t\treturn \"\"\n\tend\nend\n\n\nlocal function format_inflection_parts(data, parts)\n\tlocal m_links = require(\"Module:links\")\n\t\n\tfor key, part in ipairs(parts) do\n\t\tif type(part) ~= \"table\" then\n\t\t\tpart = {term = part}\n\t\tend\n\
      \t\t\n\t\tlocal qualifiers = \"\"\n\t\t\n\t\tif part.qualifiers and #part.qualifiers &gt; 0 then\n\t\t\tqualifiers = require(\"Module:qualifier\").format_qualifier(part.qualifiers) .. \" \"\n\t\t\t\n\t\t\t-- [[Special:WhatLinksHere/Template:tracking/headword/qualifier]]\n\
      \t\t\trequire(\"Module:debug\").track(\"headword/qualifier\")\n\t\tend\n\t\t\n\t\tlocal partaccel = part.accel\n\t\tlocal face = part.hypothetical and \"hypothetical\" or \"bold\"\n\t\tlocal nolink = part.hypothetical or part.nolink\n\t\t\n\t\t-- Convert\
      \ the term into a full link\n\t\t-- Don't show a transliteration here, the consensus seems to be not to\n\t\t-- show them in headword lines to avoid clutter.\n\t\tpart = m_links.full_link(\n\t\t\t{\n\t\t\t\tterm = not nolink and part.term or nil,\n\t\t\
      \t\talt = part.alt or (nolink and part.term or nil),\n\t\t\t\tlang = part.lang or data.lang,\n\t\t\t\tsc = part.sc or parts.sc or (not part.lang and data.sc),\n\t\t\t\tid = part.id,\n\t\t\t\tgenders = part.genders,\n\t\t\t\ttr = part.translit or (not (parts.enable_auto_translit\
      \ or data.inflections.enable_auto_translit) and \"-\" or nil),\n\t\t\t\tts = part.transcription,\n\t\t\t\taccel = parts.accel or partaccel,\n\t\t\t},\n\t\t\tface,\n\t\t\tfalse\n\t\t\t)\n\t\t\n\t\tpart = qualifiers .. part\n\t\t\n\t\tparts[key] = part\n\
      \tend\n\t\n\tlocal parts_output = \"\"\n\t\n\tif #parts &gt; 0 then\n\t\tparts_output = \" \" .. table.concat(parts, \" &lt;i&gt;or&lt;/i&gt; \")\n\telseif parts.request then\n\t\tparts_output = \" &lt;small&gt;[please provide]&lt;/small&gt;\"\n\t\t\t\
      .. require(\"Module:utilities\").format_categories(\n\t\t\t\t{data.lang:getCanonicalName() .. \" entries needing inflection\"},\n\t\t\t\tlang,\n\t\t\t\tnil,\n\t\t\t\tnil,\n\t\t\t\tdata.force_cat_output,\n\t\t\t\tdata.sc\n\t\t\t\t)\n\tend\n\t\n\treturn\
      \ \"&lt;i&gt;\" .. parts.label .. \"&lt;/i&gt;\" .. parts_output\nend\n\n-- Format the inflections following the headword\nlocal function format_inflections(data)\n\tif data.inflections and #data.inflections &gt; 0 then\n\t\t-- Format each inflection individually\n\
      \t\tfor key, infl in ipairs(data.inflections) do\n\t\t\tdata.inflections[key] = format_inflection_parts(data, infl)\n\t\tend\n\t\t\n\t\treturn \" (\" .. table.concat(data.inflections, \", \") .. \")\"\n\telse\n\t\treturn \"\"\n\tend\nend\n\nlocal function\
      \ show_headword_line(data)\n\tlocal namespace = title.nsText\n\n\t-- Check the namespace against the language type\n\tif namespace == \"\" then\n\t\tif data.lang:getType() == \"reconstructed\" then\n\t\t\terror(\"Entries for this language must be placed\
      \ in the Reconstruction: namespace.\")\n\t\telseif data.lang:getType() == \"appendix-constructed\" then\n\t\t\terror(\"Entries for this language must be placed in the Appendix: namespace.\")\n\t\tend\n\tend\n\t\n\tlocal tracking_categories = {}\n\n\tif\
      \ not data.noposcat then\t\n\t\tlocal pos_category = data.lang:getCanonicalName() .. \" \" .. data.pos_category\n\t\tif pos_category ~= \"Translingual Han characters\" then\n\t\t\ttable.insert(data.categories, 1, pos_category)\n\t\tend\n\tend\n\t\n\t--\
      \ Is it a lemma category?\n\tif isLemma[data.pos_category] or isLemma[data.pos_category:gsub(\"^reconstructed \", \"\")] then\n\t\tif not data.noposcat then\n\t\t\ttable.insert(data.categories, 1, data.lang:getCanonicalName() .. \" lemmas\")\n\t\tend\n\
      \t-- Is it a nonlemma category?\n\telseif isNonLemma[data.pos_category]\n\t\tor isNonLemma[data.pos_category:gsub(\"^reconstructed \", \"\")]\n\t\tor isLemma[data.pos_category:gsub(\"^mutated \", \"\")]\n\t\tor isNonLemma[data.pos_category:gsub(\"^mutated\
      \ \", \"\")] then\n\t\t\n\t\tif not data.noposcat then\n\t\t\ttable.insert(data.categories, 1, data.lang:getCanonicalName() .. \" non-lemma forms\")\n\t\tend\n\t-- It's neither; we don't know what this category is, so tag it with a tracking category.\n\
      \telse\n\t\t--[=[\n\t\t[[Special:WhatLinksHere/Template:tracking/headword/unrecognized pos]]\n\t\t]=]\n\t\ttable.insert(tracking_categories, \"head tracking/unrecognized pos\")\n\t\trequire(\"Module:debug\").track{\n\t\t\t\"headword/unrecognized pos\"\
      ,\n\t\t\t\"headword/unrecognized pos/lang/\" .. data.lang:getCode(),\n\t\t\t\"headword/unrecognized pos/pos/\" .. data.pos_category\n\t\t}\n\tend\n\t\n\t-- Preprocess\n\tpreprocess(data)\n\t\n\tlocal m_links = require(\"Module:links\")\n\t\n\tif namespace\
      \ == \"\" and data.lang:getType() ~= \"reconstructed\" then\n\t\tfor _, head in ipairs(data.heads) do\n\t\t\tif title.prefixedText ~= m_links.getLinkPage(m_links.remove_links(head), data.lang) then\n\t\t\t\t--[=[\n\t\t\t\t[[Special:WhatLinksHere/Template:tracking/headword/pagename\
      \ spelling mismatch]]\n\t\t\t\t]=]\n\t\t\t\trequire(\"Module:debug\").track{\n\t\t\t\t\t\"headword/pagename spelling mismatch\",\n\t\t\t\t\t\"headword/pagename spelling mismatch/\" .. data.lang:getCode()\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\
      end\n\t\n\t-- Format and return all the gathered information\n\treturn\n\t\tformat_headword(data) ..\n\t\tformat_genders(data) ..\n\t\tformat_inflections(data) ..\n\t\trequire(\"Module:utilities\").format_categories(\n\t\t\ttracking_categories, data.lang,\
      \ data.sort_key, nil, data.force_cat_output, data.sc\n\t\t\t)\nend\n\nfunction export.full_headword(data)\n\tlocal tracking_categories = {}\n\t\n\t-- Script-tags the topmost header.\n\tlocal pagename = title.text\n\tlocal fullPagename = title.fullText\n\
      \tlocal namespace = title.nsText\n\t\n\tif not data.lang or type(data.lang) ~= \"table\" or not data.lang.getCode then\n\t\terror(\"In data, the first argument to full_headword, data.lang should be a language object.\")\n\tend\n\t\n\tif not data.sc then\n\
      \t\tdata.sc = require(\"Module:scripts\").findBestScript(data.heads and data.heads[1] ~= \"\" and data.heads[1] or pagename, data.lang)\n\telse\n\t\t-- Track uses of sc parameter\n\t\tlocal best = require(\"Module:scripts\").findBestScript(pagename, data.lang)\n\
      \t\trequire(\"Module:debug\").track(\"headword/sc\")\n\t\t\n\t\tif data.sc:getCode() == best:getCode() then\n\t\t\trequire(\"Module:debug\").track(\"headword/sc/redundant\")\n\t\t\trequire(\"Module:debug\").track(\"headword/sc/redundant/\" .. data.sc:getCode())\n\
      \t\telse\n\t\t\trequire(\"Module:debug\").track(\"headword/sc/needed\")\n\t\t\trequire(\"Module:debug\").track(\"headword/sc/needed/\" .. data.sc:getCode())\n\t\tend\n\tend\n\t\n\tlocal displayTitle\n\t-- Assumes that the scripts in \"toBeTagged\" will\
      \ never occur in the Reconstruction namespace.\n\tif namespace == \"\" and data.sc and toBeTagged[data.sc:getCode()] or\n\t\t\tdata.sc:getCode() == \"Jpan\" and (test_script(pagename, \"Hira\") or test_script(pagename, \"Kana\")) then\n\t\tdisplayTitle\
      \ = '&lt;span class=\"' .. data.sc:getCode() .. '\"&gt;' .. pagename .. '&lt;/span&gt;'\n\telseif namespace == \"Reconstruction\" then\n\t\tdisplayTitle, matched = mw.ustring.gsub(\n\t\t\tfullPagename,\n\t\t\t\"^(Reconstruction:[^/]+/)(.+)$\",\n\t\t\t\
      function(before, term)\n\t\t\t\treturn before ..\n\t\t\t\t\trequire(\"Module:script utilities\").tag_text(\n\t\t\t\t\t\tterm,\n\t\t\t\t\t\tdata.lang,\n\t\t\t\t\t\tdata.sc\n\t\t\t\t\t)\n\t\t\tend\n\t\t)\n\t\t\n\t\tif matched == 0 then\n\t\t\tdisplayTitle\
      \ = nil\n\t\tend\n\tend\n\t\n\tif displayTitle then\n\t\tlocal frame = mw.getCurrentFrame()\n\t\tframe:callParserFunction(\n\t\t\t\"DISPLAYTITLE\",\n\t\t\tdisplayTitle\n\t\t)\n\tend\n\t\n\tif data.force_cat_output then\n\t\t--[=[\n\t\t[[Special:WhatLinksHere/Template:tracking/headword/force\
      \ cat output]]\n\t\t]=]\n\t\trequire(\"Module:debug\").track(\"headword/force cat output\")\n\tend\n\t\n\tif data.getCanonicalName then\n\t\terror('The \"data\" variable supplied to \"full_headword\" should not be a language object.')\n\tend\n\t\t\n\t\
      -- Were any categories specified?\n\tif data.categories and #data.categories &gt; 0 then\n\t\tlocal lang_name = require(\"Module:string\").pattern_escape(data.lang:getCanonicalName())\n\t\tfor _, cat in ipairs(data.categories) do\n\t\t\t-- Does the category\
      \ begin with the language name? If not, tag it with a tracking category.\n\t\t\tif not mw.ustring.find(cat, \"^\" .. lang_name) then\n\t\t\t\tmw.log(cat, data.lang:getCanonicalName())\n\t\t\t\ttable.insert(tracking_categories, \"head tracking/no lang category\"\
      )\n\t\t\t\t\n\t\t\t\t--[=[\n\t\t\t\t[[Special:WhatLinksHere/Template:tracking/head tracking/no lang category]]\n\t\t\t\t]=]\n\t\t\t\trequire(\"Module:debug\").track{\n\t\t\t\t\t\"headword/no lang category\",\n\t\t\t\t\t\"headword/no lang category/lang/\"\
      \ .. data.lang:getCode()\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\t\t\n\t\tif not data.pos_category\n\t\t\tand mw.ustring.find(data.categories[1], \"^\" .. data.lang:getCanonicalName())\n\t\t\t\tthen\n\t\t\tdata.pos_category = mw.ustring.gsub(data.categories[1],\
      \ \"^\" .. data.lang:getCanonicalName() .. \" \", \"\")\n\t\t\ttable.remove(data.categories, 1)\n\t\tend\n\tend\n\t\n\tif not data.pos_category then\n\t\terror(\n\t\t\t'No valid part-of-speech categories were found in the list '\n\t\t\t.. 'of categories\
      \ passed to the function \"full_headword\". '\n\t\t\t.. 'The part-of-speech category should consist of a language\\'s '\n\t\t\t.. 'canonical name plus a part of speech.'\n\t\t\t)\n\tend\n\t\n\t-- Categorise for unusual characters\n\tlocal standard = data.lang:getStandardCharacters()\n\
      \t\n\tif standard then\n\t\tif mw.ustring.len(title.subpageText) ~= 1 and not mw.ustring.match(title.text, \"^Unsupported titles/\") then\n\t\t\tfor character in mw.ustring.gmatch(title.subpageText, \"([^\" .. standard .. \"])\") do\n\t\t\t\tlocal upper\
      \ = mw.ustring.upper(character)\n\t\t\t\tif not mw.ustring.find(upper, \"[\" .. standard .. \"]\") then\n\t\t\t\t\tcharacter = upper\n\t\t\t\tend\n\t\t\t\ttable.insert(\n\t\t\t\t\tdata.categories,\n\t\t\t\t\tdata.lang:getCanonicalName() .. \" terms spelled\
      \ with \" .. character\n\t\t\t\t)\n\t\t\tend\n\t\tend\n\tend\n\t\n\t-- Categorise for palindromes\n\tif title.nsText ~= \"Reconstruction\"\n\t\tand require('Module:palindromes').is_palindrome(\n\t\t\ttitle.subpageText, data.lang, data.sc\n\t\t\t) then\n\
      \t\ttable.insert(data.categories, data.lang:getCanonicalName() .. \" palindromes\")\n\tend\n\t\n\treturn\n\t\tshow_headword_line(data) ..\n\t\trequire(\"Module:utilities\").format_categories(\n\t\t\tdata.categories, data.lang, data.sort_key, nil, data.force_cat_output,\
      \ data.sc\n\t\t\t) ..\n\t\trequire(\"Module:utilities\").format_categories(\n\t\t\ttracking_categories, data.lang, data.sort_key, nil, data.force_cat_output, data.sc\n\t\t\t)\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-15T21:09:14.111Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Alinks&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; WMF-Last-Access=15-Apr-2019; WMF-Last-Access-Global=15-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=71386 t=1555362553958355
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:14 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1286.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=15-Apr-2019;WMF-Last-Access-Global=15-Apr-2019;https=1
      X-Cache: cp1081 pass, cp3040 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 512826626, 554397841, 693062696
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"3935515\" pageid=\"3935515\" ns=\"828\" title=\"Module:links\"><revisions><rev user=\"Rua\" timestamp=\"2019-04-03T18:59:00Z\" contentformat=\"\
      text/plain\" contentmodel=\"Scribunto\" comment=\"\" xml:space=\"preserve\">local export = {}\n\n--[=[\n\t[[Unsupported titles]] and pages with high\n\tmemory usage are listed at [[Module:links/data]].\n\t\n\tOther modules used:\n\t\t[[Module:script utilities]]\n\
      \t\t[[Module:scripts]]\n\t\t[[Module:languages]] and its submodules\n\t\t[[Module:gender and number]]\n\t\t[[Module:utilities]]\n\t\t[[Module:string]]\n\t\t[[Module:debug]]\n]=]\n\n-- These are prefixed with u to avoid confusion with the default string\
      \ methods\n-- of the same name.\nlocal usub = mw.ustring.sub\n\nlocal table_insert = table.insert\nlocal table_concat = table.concat\n\nlocal ignore_cap = {\n\t[\"ko\"] = true,\n}\n\nlocal phonetic_extraction = {\n\t[\"th\"] = \"Module:th\",\n\t[\"km\"\
      ] = \"Module:km\",\n}\n\nlocal pos_tags = {\n\t[\"a\"] = \"adjective\",\n\t[\"adv\"] = \"adverb\",\n\t[\"int\"] = \"interjection\",\n\t[\"n\"] = \"noun\",\n\t[\"pron\"] = \"pronoun\",\n\t[\"v\"] = \"verb\",\n\t[\"vi\"] = \"intransitive verb\",\n\t[\"vt\"\
      ] = \"transitive verb\",\n\t[\"vti\"] = \"transitive and intransitive verb\",\n}\n\nlocal unsupported_titles\nfunction export.getLinkPage(target, lang)\n\tunsupported_titles = unsupported_titles or mw.loadData(\"Module:links/data\").unsupported_titles\n\
      \tif unsupported_titles[target] then\n\t\treturn \"Unsupported titles/\" .. unsupported_titles[target]\n\tend\n\t\n\t-- If the link contains unexpanded template parameters, then don't create a link.\n\tif target:find(\"{{{\") then\n\t\treturn nil\n\tend\n\
      \t\n\tif target:sub(1, 1) == \":\" or target:sub(1, 2) == \"w:\" or target:sub(1, 10) == \"wikipedia:\" then\n\t\treturn target\n\tend\n\t\n\t-- Remove diacritics from the page name\n\ttarget = lang:makeEntryName(target)\n\t\n\tif target:sub(1, 1) == \"\
      /\" then\n\t\treturn \":\" .. target\n\t\n\t-- Link to appendix for reconstructed terms and terms in appendix-only languages\n\telseif target:sub(1, 1) == \"*\" and #target &gt; 1 then\n\t\tif lang:getCode() == \"und\" then\n\t\t\treturn nil\n\t\tend\n\
      \t\t\n\t\ttarget = \"Reconstruction:\" .. lang:getCanonicalName() .. \"/\" .. usub(target, 2)\n\telseif lang:getType() == \"reconstructed\" then\n\t\terror(\"The specified language \" .. lang:getCanonicalName()\n\t\t\t.. \" is unattested, while the given\
      \ word is not marked with '*' to indicate that it is reconstructed\")\n\telseif lang:getType() == \"appendix-constructed\" then\n\t\ttarget = \"Appendix:\" .. lang:getCanonicalName() .. \"/\" .. target\n\tend\n\t\n\treturn target\nend\n\n-- Make a language-specific\
      \ link from given link's parts\nlocal function makeLangLink(link, lang, id, allowSelfLink)\n\t-- Temporary tracking code\n\tlocal langCode = lang:getCode()\n\tif langCode == \"se\" or langCode == \"sia\" or langCode:find(\"^sm[ajns]$\")\n\t\t\tor langCode:find(\"\
      ^sj[dektu]$\") then\n\t\tif link.display and link.display:find(\"'\") then\n\t\t\trequire(\"Module:debug\").track(\"links/Sami apostrophe display\")\n\t\telseif link.target and link.target:find(\"'\") then\n\t\t\trequire(\"Module:debug\").track(\"links/Sami\
      \ apostrophe target\")\n\t\tend\n\tend\n\t\n\t-- Find fragments (when link didn't come from parseLink).\n\t-- Prevents {{l|en|word#Etymology 2|word}} from linking to [[word#Etymology 2#English]].\n\tif link.fragment == nil then\n\t\t-- Replace numeric\
      \ character references with the corresponding character (&amp;#29; → '),\n\t\t-- as they contain #, which causes the numeric character reference to be\n\t\t-- misparsed (wa'a → wa&amp;#29;a → pagename wa&amp;, fragment 29;a).\n\t\tlink.target = link.target:gsub(\"\
      &amp;#(%d+);\",\n\t\t\tfunction(number) return mw.ustring.char(tonumber(number)) end)\n\t\tlocal first, second = link.target:match(\"^([^#]+)#(.+)$\")\n\t\tif first then\n\t\t\tlink.target, link.fragment = first, second\n\t\tend\n\tend\n\t\n\t-- If there\
      \ is no display form, then create a default one\n\tif not link.display then\n\t\tlink.display = link.target\n\t\t\n\t\t-- Strip the prefix from the displayed form\n\t\t-- TODO: other interwiki links?\n\t\tif link.display:sub(1, 1) == \":\" and not mw.loadData(\"\
      Module:links/data\").unsupported_titles[link.display] then\n\t\t\tlink.display = link.display:sub(2) -- remove colon from beginning\n\t\telse\n\t\t\tlocal prefix = link.display:match(\"^([^:]+):\")\n\t\t\tlocal prefixes = {\n\t\t\t\tw = true,\n\t\t\t\t\
      wikipedia = true,\n\t\t\t}\n\t\t\t\n\t\t\tif prefixes[prefix] then\n\t\t\t\tlink.display = link.display:sub(#prefix + 2) -- remove prefix plus colon\n\t\t\tend\n\t\tend\n\tend\n\t\n\t-- Process the target\n\tlink.target = export.getLinkPage(link.target,\
      \ lang)\n\t\n\tif not link.target then\n\t\treturn link.display\n\tend\n\t\n\t-- If the target is the same as the current page and there is no sense id\n\t-- and linking to the same page hasn't been turned on, then return a \"self-link\"\n\t-- like the\
      \ software does.\n\tif not (allowSelfLink or id) and link.target:gsub(\"^:\", \"\") == mw.title.getCurrentTitle().prefixedText then\n\t\treturn \"&lt;strong class=\\\"selflink\\\"&gt;\" .. link.display .. \"&lt;/strong&gt;\"\n\tend\n\t\n\t--[[\n\t\tAdd\
      \ fragment\n\t\tDo not add a section link to \"Undetermined\", as such sections do not exist and are invalid.\n\t\tTabbedLanguages handles links without a section by linking to the \"last visited\" section,\n\t\tbut adding \"Undetermined\" would break\
      \ that feature.\n\t\tFor localized prefixes that make syntax error, please use the format: [\"xyz\"] = true,\n\t]]\n\tlocal prefix = link.target:match(\"^:?([^:]+):\")\n\tlocal prefixes = {\n\t\tw = true,\n\t\twikipedia = true,\n\t\tCategory = true,\n\t\
      }\n\t\n\tif not prefixes[prefix] then\n\t\tif link.fragment or link.target:find(\"#$\") then\n\t\t\trequire(\"Module:debug\").track {\n\t\t\t\t\"links/fragment\",\n\t\t\t\t\"links/fragment/\" .. lang:getCode()\n\t\t\t}\n\t\tend\n\t\t\n\t\tif not link.fragment\
      \ and lang:getCode() ~= \"und\" then\n\t\t\tif id then\n\t\t\t\tlink.fragment = require(\"Module:utilities\").make_id(lang, id)\n\t\t\telseif not mw.ustring.find(link.target, \"^Appendix:\")\n\t\t\t\t\tand not mw.ustring.find(link.target, \"^Reconstruction:\"\
      ) then\n\t\t\t\tlink.fragment = lang:getCanonicalName()\n\t\t\tend\n\t\tend\n\t\t\n\t\t-- This allows linking to pages like [[sms:a]] without it being treated weirdly.\n\t\tlink.target = link.target:gsub(\":\", \"&amp;#x3a;\")\n\tend\n\t\n\treturn \"[[\"\
      \ .. link.target .. (link.fragment and \"#\" .. link.fragment or \"\") .. \"|\" .. link.display .. \"]]\"\nend\n\n\n-- Split a link into its parts\nlocal function parseLink(linktext)\n\tlocal link = { target = linktext }\n\tlocal first, second = link.target:match(\"\
      ^([^|]+)|(.+)$\")\n\t\n\tif first then\n\t\tlink.target = first\n\t\tlink.display = second\n\telse\n\t\tlink.display = link.target\n\tend\n\t\n\tfirst, second = link.target:match(\"^(.+)#(.+)$\")\n\t\n\tif first then\n\t\tlink.target = first\n\t\tlink.fragment\
      \ = second\n\telse\n\t\t-- So that makeLangLink does not look for a fragment again\n\t\tlink.fragment = false\n\tend\n\t\n\treturn link\nend\n\n\n-- Creates a basic wikilink to the given term. If the text already contains\n-- links, these are replaced\
      \ with links to the correct section.\nfunction export.language_link(data, allowSelfLink, dontLinkRecons)\n\tif type(data) ~= \"table\" then\n\t\terror(\"The first argument to the function language_link must be a table. See Module:links/documentation for\
      \ more information.\")\n\tend\n\t\n\tlocal text = data.term\n\t\n\tif ignore_cap[data.lang:getCode()] and text then\n\t\ttext = text:gsub(\"%^\", \"\")\n\tend\n\t\n\t-- If the text begins with * and another character,\n\t-- then act as if each link begins\
      \ with *\n\tlocal allReconstructed = false\n\t\n\tif text:find(\"^*.\") then\n\t\tallReconstructed = true\n\tend\n\t\n\t-- Do we have embedded wikilinks?\n\tif text:find(\"[[\", nil, true) then\n\t\t--[=[\n\t\t[[Special:WhatLinksHere/Template:tracking/links/alt-ignored]]\n\
      \t\t[[Special:WhatLinksHere/Template:tracking/links/id-ignored]]\n\t\t]=]\n\t\t\n\t\tif data.alt then\n\t\t\trequire(\"Module:debug\").track(\"links/alt-ignored\")\n\t\t\tmw.log(\"(from Module:links)\", \"text with embedded wikilinks:\", text,\n\t\t\t\t\
      \"ignored alt:\", data.alt, \"lang:\", data.lang:getCode())\n\t\tend\n\t\t\n\t\tif data.id then\n\t\t\trequire(\"Module:debug\").track(\"links/id-ignored\")\n\t\t\tmw.log(\"(from Module:links)\", \"text with embedded wikilinks:\", text,\n\t\t\t\t\"ignored\
      \ id:\", data.id, \"lang:\", data.lang:getCode())\n\t\tend\n\t\t\n\t\t-- Begins and ends with a wikilink tag\n\t\tif text:find(\"^%[%[(.+)%]%]$\") then\n\t\t\t-- There are no [ ] in between.\n\t\t\t-- This makes the wikilink tag redundant.\n\t\t\tif text:find(\"\
      ^%[%[[^%[%]]+%]%]$\") then\n\t\t\t\trequire(\"Module:debug\").track(\"links/redundant wikilink\")\n\t\t\telse\n\t\t\t\tlocal temp = text:gsub(\"^%[%[(.+)%]%]$\", \"%1\")\n\t\t\t\ttemp = temp:gsub(\"%]%], %[%[\", \"|\")\n\t\t\t\t\n\t\t\t\tif not temp:find(\"\
      [%[%]]\") then\n\t\t\t\t\trequire(\"Module:debug\").track(\"links/list\")\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\t\n\t\ttext = text:gsub(\"%[%[([^%]]+)%]%]\",\n\t\t\tfunction(linktext)\n\t\t\t\tlocal link = parseLink(linktext)\n\t\t\t\t\n\t\t\t\tif allReconstructed\
      \ then\n\t\t\t\t\tlink.target = \"*\" .. link.target\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\treturn makeLangLink(link, data.lang, data.id, allowSelfLink, dontLinkRecons)\n\t\t\tend)\n\t\t\n\t\t-- Remove the extra * at the beginning if it's immediately followed\n\
      \t\t-- by a link whose display begins with * too\n\t\tif allReconstructed then\n\t\t\ttext = text:gsub(\"^%*%[%[([^|%]]+)|%*\", \"[[%1|*\")\n\t\tend\n\telse\n\t\t-- There is no embedded wikilink, make a link using the parameters.\n\t\ttext = makeLangLink({\
      \ target = text, display = data.alt }, data.lang, data.id, allowSelfLink, dontLinkRecons)\n\tend\n\t\n\treturn text\nend\n\nfunction export.mark(text, itemType, face, lang)\n\tlocal tag = { \"\", \"\" }\n\t\n\tif itemType == \"gloss\" then\n\t\ttag = {\
      \ '&lt;span class=\"mention-gloss-double-quote\"&gt;“&lt;/span&gt;&lt;span class=\"mention-gloss\"&gt;',\n\t\t\t'&lt;/span&gt;&lt;span class=\"mention-gloss-double-quote\"&gt;”&lt;/span&gt;' }\n\telseif itemType == \"tr\" then\n\t\tif face == \"term\"\
      \ then\n\t\t\ttag = { '&lt;span lang=\"' .. lang:getCode() .. '\" class=\"tr mention-tr Latn\"&gt;',\n\t\t\t\t'&lt;/span&gt;' }\n\t\telse\n\t\t\ttag = { '&lt;span lang=\"' .. lang:getCode() .. '\" class=\"tr Latn\"&gt;', '&lt;/span&gt;' }\n\t\tend\n\t\
      elseif itemType == \"ts\" then\n\t\ttag = { '&lt;span class=\"ts mention-ts Latn\"&gt;/', '/&lt;/span&gt;' }\n\telseif itemType == \"pos\" then\n\t\ttag = { '&lt;span class=\"ann-pos\"&gt;', '&lt;/span&gt;' }\n\telseif itemType == \"annotations\" then\n\
      \t\ttag = { '&lt;span class=\"mention-gloss-paren annotation-paren\"&gt;(&lt;/span&gt;',\n\t\t\t'&lt;span class=\"mention-gloss-paren annotation-paren\"&gt;)&lt;/span&gt;' }\n\tend\n\t\n\tif type(text) == \"string\" then\n\t\treturn tag[1] .. text .. tag[2]\n\
      \telse\n\t\treturn \"\"\n\tend\nend\n\n-- Format the annotations (things following the linked term)\nfunction export.format_link_annotations(data, face)\n\tlocal output = {}\n\t\n\t-- Interwiki link\n\tif data.interwiki then\n\t\ttable_insert(output, data.interwiki)\n\
      \tend\n\t\n\t-- Genders\n\tif type(data.genders) ~= \"table\" then\n\t\tdata.genders = { data.genders }\n\tend\n\t\n\tif data.genders and #data.genders &gt; 0 then\n\t\tlocal m_gen = require(\"Module:gender and number\")\n\t\ttable_insert(output, \"&amp;nbsp;\"\
      \ .. m_gen.format_list(data.genders, data.lang))\n\tend\n\t\n\tlocal annotations = {}\n\t\n\t-- Transliteration and transcription\n\tif data.tr or data.ts then\n\t\tlocal kind\n\t\tif face == \"term\" then\n\t\t\tkind = face\n\t\telse\n\t\t\tkind = \"\
      default\"\n\t\tend\n\t\t\n\t\tif data.tr and data.ts then\n\t\t\ttable_insert(annotations,\n\t\t\t\trequire(\"Module:script utilities\").tag_translit(data.tr, data.lang, kind)\n\t\t\t\t.. \" \" .. export.mark(data.ts, \"ts\"))\n\t\telseif data.ts then\n\
      \t\t\ttable_insert(annotations, export.mark(data.ts, \"ts\"))\n\t\telse\n\t\t\ttable_insert(annotations,\n\t\t\t\trequire(\"Module:script utilities\").tag_translit(data.tr, data.lang, kind))\n\t\tend\n\tend\n\t\n\t-- Gloss/translation\n\tif data.gloss\
      \ then\n\t\ttable_insert(annotations, export.mark(data.gloss, \"gloss\"))\n\tend\n\t\n\t-- Part of speech\n\tif data.pos then\n\t\t-- debug category for pos= containing transcriptions\n\t\tif data.pos:find(\"/[^&gt;&lt;]*/\") then\n\t\t\tdata.pos = data.pos\
      \ .. \"[[Category:links likely containing transcriptions in pos]]\"\n\t\tend\n\n\t\ttable_insert(annotations, export.mark(pos_tags[data.pos] or data.pos, \"pos\"))\n\tend\n\t\n\t-- Literal/sum-of-parts meaning\n\tif data.lit then\n\t\ttable_insert(annotations,\
      \ \"literally \" .. export.mark(data.lit, \"gloss\"))\n\tend\n\t\n\tif #annotations &gt; 0 then\n\t\ttable_insert(output, \" \" .. export.mark(table_concat(annotations, \", \"), \"annotations\"))\n\tend\n\t\n\treturn table_concat(output)\nend\n\n-- A version\
      \ of {{l}} or {{m}} that can be called from other modules too\nfunction export.full_link(data, face, allowSelfLink, dontLinkRecons)\n\tif type(data) ~= \"table\" then\n\t\terror(\"The first argument to the function full_link must be a table. \"\n\t\t\t\
      .. \"See Module:links/documentation for more information.\")\n\tend\n\t\n\t-- Create the link\n\tlocal output = {}\n\tlocal categories = {}\n\tlocal link = \"\"\n\tlocal annotations\n\t\n\t--local m_utilities = require(\"Module:utilities\")\n\t\n\t-- Is\
      \ there any text to show?\n\tif (data.term or data.alt) then\n\t\t-- Try to detect the script if it was not provided\n\t\tif not data.sc then\n\t\t\tdata.sc = require(\"Module:scripts\").findBestScript(data.alt or data.term, data.lang)\n\t\telse\n\t\t\t\
      -- Track uses of sc parameter\n\t\t\tlocal best = require(\"Module:scripts\").findBestScript(data.alt or data.term, data.lang)\n\t\t\trequire(\"Module:debug\").track(\"links/sc\")\n\t\t\t\n\t\t\tif data.sc:getCode() == best:getCode() then\n\t\t\t\trequire(\"\
      Module:debug\").track(\"links/sc/redundant\")\n\t\t\t\trequire(\"Module:debug\").track(\"links/sc/redundant/\" .. data.sc:getCode())\n\t\t\telse\n\t\t\t\trequire(\"Module:debug\").track(\"links/sc/needed\")\n\t\t\t\trequire(\"Module:debug\").track(\"links/sc/needed/\"\
      \ .. data.sc:getCode())\n\t\t\tend\n\t\tend\n\t\t\n\t\tlocal class = \"\"\n\t\t\n\t\tif data.accel then\n\t\t\tlocal form = data.accel.form and data.accel.form .. \"-form-of\" or \"\"\n\t\t\tlocal gender = data.accel.gender and \"gender-\" .. data.accel.gender\
      \ or \"\"\n\t\t\tlocal translit = data.accel.translit and \"transliteration-\" .. data.accel.translit or \"\"\n\t\t\t-- This is decoded again by [[WT:ACCEL]].\n\t\t\tlocal lemma = data.accel.lemma and \"origin-\" .. data.accel.lemma:gsub(\"%%\", \".\"\
      ):gsub(\" \", \"_\") or \"\" \n\t\t\tlocal lemma_translit = data.accel.lemma_translit and \"origin-transliteration-\" .. data.accel.lemma_translit or \"\"\n\t\t\tlocal no_store = data.accel.no_store and \"form-of-nostore\" or \"\"\n\t\t\t\n\t\t\taccel\
      \ =\n\t\t\t\tform .. \" \" ..\n\t\t\t\tgender .. \" \" ..\n\t\t\t\ttranslit .. \" \" ..\n\t\t\t\tlemma .. \" \" ..\n\t\t\t\tlemma_translit .. \" \" ..\n\t\t\t\tno_store .. \" \"\n\t\t\t\n\t\t\tclass = \"form-of lang-\" .. data.lang:getCode() .. \" \" ..\
      \ accel\n\t\tend\n\t\t\n\t\t-- Only make a link if the term has been given, otherwise just show the alt text without a link\n\t\tlink = require(\"Module:script utilities\").tag_text(\n\t\t\tdata.term and export.language_link(data, allowSelfLink, dontLinkRecons)\n\
      \t\t\tor data.alt, data.lang, data.sc, face, class)\n\telse\n\t\t--[[\tNo term to show.\n\t\t\t\tIs there at least a transliteration we can work from?\t]]\n\t\tlink = require(\"Module:script utilities\").request_script(data.lang, data.sc)\n\t\t\n\t\tif\
      \ link == \"\" or not data.tr or data.tr == \"-\" then\n\t\t\t-- No link to show, and no transliteration either. Show a term request.\n\t\t\tlocal category = \"\"\n\t\t\t\n\t\t\tif mw.title.getCurrentTitle().nsText ~= \"Template\" then\n\t\t\t\ttable_insert(categories,\
      \ \"[[Category:\" .. data.lang:getCanonicalName() .. \" term requests]]\")\n\t\t\tend\n\t\t\t\n\t\t\tlink = \"&lt;small&gt;[Term?]&lt;/small&gt;\"\n\t\tend\n\tend\n\t\n\ttable_insert(output, link)\n\t\n\tif data.tr == \"\" or data.tr == \"-\" then\n\t\t\
      data.tr = nil\n\t\n\telseif phonetic_extraction[data.lang:getCode()] then\n\t\tlocal m_phonetic = require(phonetic_extraction[data.lang:getCode()])\n\t\tdata.tr = data.tr or m_phonetic.getTranslit(export.remove_links(data.term))\n\t\n\telseif (data.term\
      \ or data.alt) and not data.sc:getCode():find(\"Lati?n\") then\n\t\t\n\t\t-- Try to generate a transliteration, unless transliteration has been\n\t\t-- supplied and we are in a high-memory entry.\n\t\tif not (data.tr and mw.loadData(\"Module:links/data\"\
      ).high_memory_entries[mw.title.getCurrentTitle().text]) then\n\t\t\tlocal automated_tr = data.lang:transliterate(export.remove_links(data.alt or data.term), data.sc)\n\t\t\t\n\t\t\tif automated_tr then\n\t\t\t\tlocal manual_tr = data.tr\n\t\t\t\t\n\t\t\
      \t\tif manual_tr then\n\t\t\t\t\tif manual_tr == automated_tr then\n\t\t\t\t\t\ttable_insert(categories,\n\t\t\t\t\t\t\t\"[[Category:Terms with redundant transliterations]]\"\n\t\t\t\t\t\t\t\t\t.. \"[[Category:Terms with redundant transliterations/\" ..\
      \ data.lang:getCode() .. \"]]\")\n\t\t\t\t\telse\n\t\t\t\t\t\t-- Prevents Arabic root categories from flooding the tracking categories.\n\t\t\t\t\t\tif mw.title.getCurrentTitle().nsText ~= \"Category\" then\n\t\t\t\t\t\t\ttable_insert(categories,\n\t\t\
      \t\t\t\t\t\t\"[[Category:Terms with manual transliterations different from the automated ones]]\"\n\t\t\t\t\t\t\t\t\t\t.. \"[[Category:Terms with manual transliterations different from the automated ones/\" .. data.lang:getCode() .. \"]]\")\n\t\t\t\t\t\
      \tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\tif (not manual_tr) or data.lang:overrideManualTranslit() then\n\t\t\t\t\tdata.tr = automated_tr\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\t\n\t-- Link to the transliteration entry for languages that\
      \ require this\n\tif data.tr and data.lang:link_tr() then\n\t\tdata.tr = export.language_link { lang = data.lang, term = data.tr }\n\tend\n\t\n\ttable_insert(output, export.format_link_annotations(data, face))\n\t\n\treturn table_concat(output) .. table_concat(categories)\n\
      end\n\n\n--[[\tStrips links: deletes category links,\n\t\tthe targets of piped links,\n\t\tand all double square brackets.\t\t\t]]\nfunction export.remove_links(text)\n\tif type(text) == \"table\" then\n\t\ttext = text.args[1]\n\tend\n\t\n\tif not text\
      \ or text == \"\" then\n\t\treturn \"\"\n\tend\n\t\n\ttext = mw.ustring.gsub(text, \"%[%[Category:[^|%]]-|?[^|%]]-%]%]\", \"\")\n\ttext = text:gsub(\"%[%[[^|%]]-|\", \"\")\n\ttext = text:gsub(\"%[%[\", \"\")\n\ttext = text:gsub(\"%]%]\", \"\")\n\t\n\t\
      return text\nend\n\nfunction export.english_links(text)\n\tlocal lang = require(\"Module:languages\").getByCode(\"en\")\n\t\n\t-- Parentheses around function call to remove second return value, the\n\t-- number of replacements.\n\treturn (text:gsub(\"\
      %[%[([^%]]+)%]%]\",\n\t\tfunction(linktext)\n\t\t\tlocal link = parseLink(linktext)\n\t\t\treturn makeLangLink(link, lang, nil, true, false)\n\t\tend))\nend\n\nfunction export.light_link(data)\n\tlocal language_names = mw.loadData(\"Module:languages/code\
      \ to canonical name\")\n\tlocal script_codes = mw.loadData(\"Module:scripts/codes\")\n\t\n\tif data.langCode then\n\t\tdata.langName = language_names[data.langCode] or error('The language code \"' .. data.langCode .. '\" is not recognized.')\n\telse\n\t\
      \terror('Language code is required.')\n\tend\n\t\n\tif not data.term then\n\t\terror('Term to link to is required.')\n\tend\n\t\n\tif data.scCode then\n\t\tif not script_codes[data.scCode] then\n\t\t\terror('The script code \"' .. data.sc .. '\" is not\
      \ recognized.')\n\t\tend\n\telse\n\t\terror(\"The function light_link requires a script code.\")\n\tend\n\t\n\tlocal fragment\n\tif data.id then\n\t\tfragment = data.langName .. \"-\" .. mw.uri.encode(data.id, \"WIKI\")\n\telse\n\t\tfragment = data.langName\n\
      \tend\n\t\n\treturn table_concat {\n\t\t'&lt;span class=\"', data.scCode, '\" lang=\"', data.langCode,\n\t\t'\"&gt;[[', data.term, \"#\", fragment, \"|\", (data.alt or data.term), \"]]&lt;/span&gt;\"\n\t}\nend\n\n--[=[\n\tFor example, Norwegian_Bokm.C3.A5l\
      \ → Norwegian_Bokmål. 0xC3 and 0xA5 are the\n\thexadecimal-base representation of the two bytes used to encode the character\n\tå in the UTF-8 encoding:\n\t\t11000011 10100101\n\t\n\tNote that the bytes used to represent a character are actually different\
      \ from\n\tthe Unicode codepoint. For å, the codepoint is 0xE5. The bits (digits) that\n\tactually spell the codepoint are found in the brackets: 110[00011] 10[100101].\n\tFor further explanation, see [[w:UTF-8#Description]].\n]=]\n\n-- The character class\
      \ %x should not be used, as it includes the characters a-f,\n-- which do not occur in these anchor encodings.\nlocal capitalHex = \"[0-9A-F]\"\n\nlocal function decodeAnchor(anchor)\n\treturn (anchor:gsub(\"%.(\" .. capitalHex .. capitalHex .. \")\",\n\
      \t\tfunction(hexByte)\n\t\t\treturn string.char(tonumber(hexByte, 16))\n\t\tend))\nend\n\nfunction export.section_link(link)\n\tif type(link) ~= \"string\" then\n\t\terror(\"The first argument to section_link was a \" .. type(link) .. \", but it should\
      \ be a string.\")\n\tend\n\t\n\tlink = link:gsub(\"_\", \" \")\n\t\n\tlocal numberSigns = require(\"Module:string\").count(link, \"#\")\n\t\n\tif numberSigns &gt; 1 then\n\t\terror(\"The section link should only contain one number sign (#).\")\n\tend\n\
      \t\n\tlocal page, section = link:match(\"^([^#]+)#(.+)$\")\n\t\n\tif page and section then\n\t\tsection = decodeAnchor(section)\n\t\t\n\t\t-- URI-encode (percent-encode) section to allow square brackets, [],\n\t\t-- in section name. If not percent-encoded,\
      \ they prevent the parser from\n\t\t-- recognizing the link.\n\t\treturn table_concat { \"[[\", page, \"#\", mw.uri.encode(section, \"WIKI\"), \"|\", page, \" § \", section, \"]]\" }\n\telse\n\t\terror('The function \"' .. section_link .. '\" could not\
      \ find a number sign marking a section name.')\n\tend\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-15T21:09:18.723Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Autilities&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; WMF-Last-Access=15-Apr-2019; WMF-Last-Access-Global=15-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=49868 t=1555362558612140
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:18 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1279.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=15-Apr-2019;WMF-Last-Access-Global=15-Apr-2019;https=1
      X-Cache: cp1075 pass, cp3041 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 604877131, 730514587, 677996041
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"4073440\" pageid=\"4073440\" ns=\"828\" title=\"Module:utilities\"><revisions><rev user=\"Erutuon\" timestamp=\"2017-10-30T22:40:37Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"pipe doesn&#039;t have to be escaped\" xml:space=\"preserve\">local export = {}\n\nlocal data = mw.loadData(\"Module:utilities/data\")\nlocal notneeded = data.notneeded\nlocal neededhassubpage\
      \ = data.neededhassubpage\n\n-- A helper function to escape magic characters in a string\n-- Magic characters: ^$()%.[]*+-?\nfunction export.pattern_escape(text)\n\tif type(text) == \"table\" then\n\t\ttext = text.args[1]\n\tend\n\ttext = mw.ustring.gsub(text,\
      \ \"([%^$()%%.%[%]*+%-?])\", \"%%%1\")\n\treturn text\nend\n\nfunction export.plain_gsub(text, pattern, replacement)\n\tlocal invoked = false\n\t\n\tif type(text) == \"table\" then\n\t\tinvoked = true\n\t\t\n\t\tif text.args then\n\t\t\tlocal frame = text\n\
      \t\t\t\n\t\t\tlocal params = {\n\t\t\t\t[1] = {},\n\t\t\t\t[2] = {},\n\t\t\t\t[3] = { allow_empty = true },\n\t\t\t}\n\t\t\t\n\t\t\tlocal args = require(\"Module:parameters\").process(frame.args, params)\n\t\t\t\n\t\t\ttext = args[1]\n\t\t\tpattern = args[2]\n\
      \t\t\treplacement = args[3]\n\t\telse\n\t\t\terror(\"If the first argument to plain_gsub is a table, it should be a frame object.\")\n\t\tend\n\telse\n\t\tif not ( type(pattern) == \"string\" or type(pattern) == \"number\" ) then\n\t\t\terror(\"The second\
      \ argument to plain_gsub should be a string or a number.\")\n\t\tend\n\t\t\n\t\tif not ( type(replacement) == \"string\" or type(replacement) == \"number\" ) then\n\t\t\terror(\"The third argument to plain_gsub should be a string or a number.\")\n\t\t\
      end\n\tend\n\t\n\tpattern = export.pattern_escape(pattern)\n\t\n\tif invoked then\n\t\ttext = mw.ustring.gsub(text, pattern, replacement)\n\t\treturn text\n\telse\n\t\treturn mw.ustring.gsub(text, pattern, replacement)\n\tend\nend\n\n--[[\nFormat the categories\
      \ with the appropriate sort key. CATEGORIES is a list of\ncategories.\n\t-- LANG is an object encapsulating a language; if nil, the object for\n\t   language code 'und' (undetermined) will be used.\n\t-- SORT_KEY is placed in the category invocation, and\
      \ indicates how the\n\t   page will sort in the respective category. Normally this should be nil,\n\t   and a default sort key based on the subpage name (the part after the\n\t   colon) will be used.\n\t-- SORT_BASE lets you override the default sort key\
      \ used when SORT_KEY is\n\t   nil. Normally, this should be nil, and a language-specific default sort\n\t   key is computed from the subpage name (e.g. for Russian this converts\n\t   Cyrillic ё to a string consisting of Cyrillic е followed by U+10FFFF,\n\
      \t   so that effectively ё sorts after е instead of the default Wikimedia\n\t   sort, which (I think) is based on Unicode sort order and puts ё after я,\n\t   the last letter of the Cyrillic alphabet.\n\t-- FORCE_OUTPUT forces normal output in all namespaces.\
      \ Normally, nothing\n\t   is output if the page isn't in the main, Appendix:, Reconstruction: or\n\t   Citations: namespaces.\n]]\nfunction export.format_categories(categories, lang, sort_key, sort_base, force_output, sc)\n\tlocal NAMESPACE = mw.title.getCurrentTitle().nsText\n\
      \t\n\tif type(lang) == \"table\" and not lang.getCode then\n\t\terror(\"The second argument to format_categories should be a language object.\")\n\tend\n\t\n\tif force_output or data.allowedNamespaces[NAMESPACE] then\n\t\tlocal PAGENAME = mw.title.getCurrentTitle().text\n\
      \t\tlocal SUBPAGENAME = mw.title.getCurrentTitle().subpageText\n\t\t\n\t\tif not lang then\n\t\t\tlang = require(\"Module:languages\").getByCode(\"und\")\n\t\tend\n\t\t\n\t\t-- Generate a default sort key\n\t\tsort_base = lang:makeSortKey(sort_base or\
      \ SUBPAGENAME, sc)\n\t\t\n\t\tif sort_key and sort_key ~= \"\" then\n\t\t\t-- Gather some statistics regarding sort keys\n\t\t\tif mw.ustring.upper(sort_key) == sort_base then\n\t\t\t\ttable.insert(categories, \"Sort key tracking/redundant\")\n\t\t\tend\n\
      \t\telse\n\t\t\tsort_key = sort_base\n\t\tend\n\t\t\n\t\t--[[\tIf the resulting key is the same as the wiki software's\n\t\t\t\tdefault, or if the sortkey is empty, remove it\t\t\t ]]\n\t\tif sort_key == PAGENAME or sort_key == \"\" then\n\t\t\tsort_key\
      \ = nil\n\t\tend\n\t\t\n\t\tlocal out_categories = {}\n\t\tfor key, cat in ipairs(categories) do\n\t\t\tout_categories[key] = \"[[Category:\" .. cat .. (sort_key and \"|\" .. sort_key or \"\") .. \"]]\"\n\t\tend\n\t\t\n\t\treturn table.concat(out_categories,\
      \ \"\")\n\telse\n\t\treturn \"\"\n\tend\nend\n\n-- Used by {{categorize}}\nfunction export.template_categorize(frame)\n\tlocal NAMESPACE = mw.title.getCurrentTitle().nsText\n\tlocal format = frame.args[\"format\"]\n\tlocal args = frame:getParent().args\n\
      \t\n\tlocal langcode = args[1]; if langcode == \"\" then langcode = nil end\n\tlocal sort_key = args[\"sort\"]; if sort_key == \"\" then sort_key = nil end\n\tlocal categories = {}\n\t\n\tif not langcode then\n\t\tif NAMESPACE == \"Template\" then return\
      \ \"\" end\n\t\terror(\"Language code has not been specified. Please pass parameter 1 to the template.\")\n\tend\n\t\n\tlocal lang = require(\"Module:languages\").getByCode(langcode)\n\t\n\tif not lang then\n\t\tif NAMESPACE == \"Template\" then return\
      \ \"\" end\n\t\terror(\"The language code \\\"\" .. langcode .. \"\\\" is not valid.\")\n\tend\n\t\n\tlocal prefix = \"\"\n\t\n\tif format == \"pos\" then\n\t\tprefix = lang:getCanonicalName() .. \" \"\n\telseif format == \"topic\" then\n\t\tprefix = lang:getCode()\
      \ .. \":\"\n\tend\n\t\n\tlocal i = 2\n\tlocal cat = args[i]\n\t\n\twhile cat do\n\t\tif cat ~= \"\" then\n\t\t\ttable.insert(categories, prefix .. cat)\n\t\tend\n\t\t\n\t\ti = i + 1\n\t\tcat = args[i]\n\tend\n\t\n\treturn export.format_categories(categories,\
      \ lang, sort_key)\nend\n\nfunction export.catfix(lang, sc)\n\tif not lang then\n\t\trequire(\"Module:debug\").track(\"catfix/no lang\")\n\t\treturn nil\n\telseif type(lang) ~= \"table\" then\n\t\trequire(\"Module:debug\").track(\"catfix/lang not table\"\
      )\n\t\treturn nil\n\tend\n\tlocal canonicalName = lang:getCanonicalName() or error('The first argument to the function \"catfix\" should be a language object from Module:languages.')\n\t\n\tif sc and not sc.getCode then\n\t\terror('The second argument\
      \ to the function \"catfix\" should be a script object from Module:scripts.')\n\tend\n\t\n\t-- To add script classes to links on pages created by category boilerplate templates.\n\tif not sc then\n\t\tsc = data.catfix_scripts[lang:getCode()]\n\t\tif sc\
      \ then\n\t\t\tsc = require(\"Module:scripts\").getByCode(sc)\n\t\tend\n\tend\n\t\n\treturn \"&lt;span id=\\\"catfix\\\" style=\\\"display:none;\\\" class=\\\"CATFIX-\" .. mw.uri.anchorEncode(canonicalName) .. \"\\\"&gt;\" ..\n\t\trequire(\"Module:script\
      \ utilities\").tag_text(\"&amp;nbsp;\", lang, sc, nil) ..\n\t\t\"&lt;/span&gt;\"\nend\n\nfunction export.catfix_template(frame)\n\tlocal params = {\n\t\t[1] = {},\n\t\t[2] = { alias_of = \"sc\" },\n\t\t[\"sc\"] = {},\n\t}\n\t\n\tlocal args = require(\"\
      Module:parameters\").process(frame:getParent().args, params)\n\t\n\tlocal lang = require(\"Module:languages\").getByCode(args[1]) or require(\"Module:languages\").err(args[1], 1)\n\t\n\tlocal sc = args.sc\n\tif sc then\n\t\tsc = require(\"Module:scripts\"\
      ).getByCode(sc) or error('The script code \"' .. sc .. '\", provided in the second parameter, is not valid.')\n\tend\n\t\n\treturn export.catfix(lang, sc)\nend\n\n-- Not exporting because it is not used yet.\nlocal function getDateTense(frame) \n\tlocal\
      \ name_num_mapping = {[\"January\"] = 1, [\"February\"] = 2, [\"March\"] = 3, [\"April\"] = 4, [\"May\"] = 5, [\"June\"] = 6, \n\t\t[\"July\"] = 7, [\"August\"] = 8, [\"September\"] = 9, [\"October\"] = 10, [\"November\"] = 11, [\"December\"] = 12, \n\t\
      \t[1] = 1, [2] = 2, [3] = 3, [4] = 4, [5] = 5, [6] = 6, [7] = 7, [8] = 8, [9] = 9, [10] = 10, [11] = 11, [12] = 12}\n\tlocal month = name_num_mapping[frame.args[2]]\n\tlocal date = os.time({year = frame.args[1], day = frame.args[3], month = month})\n\t\
      local today = os.time() -- 12 AM/PM\n\tlocal diff = os.difftime(date, today)\n\tlocal daylength = 24 * 3600\n\t\n\tif diff &lt; -daylength / 2 then return \"past\"\n\telse \n\t\tif diff &gt; daylength / 2  then return \"future\"\n\t\telse return \"present\"\
      \ end\n\tend\nend\n\nfunction export.make_id(lang, str)\n\t--[[\tIf called with invoke, first argument is a frame object.\n\t\t\tIf called by a module, first argument is a language object. ]]\n\tlocal invoked = false\n\t\n\tif type(lang) == \"table\" then\n\
      \t\tif lang.args then\n\t\t\tinvoked = true\n\t\t\t\n\t\t\tlocal frame = lang\n\t\t\t\n\t\t\tlocal params = {\n\t\t\t\t[1] = {},\n\t\t\t\t[2] = {},\n\t\t\t}\n\t\t\t\n\t\t\tlocal args = require(\"Module:parameters\").process(frame:getParent().args, params)\n\
      \t\t\t\n\t\t\tlocal langCode = args[1]\n\t\t\tstr = args[2]\n\t\t\t\n\t\t\tlocal m_languages = require(\"Module:languages\")\n\t\t\t\n\t\t\tlang = m_languages.getByCode(langCode) or m_languages.err(langCode, 1)\n\t\telseif not lang.getCanonicalName then\n\
      \t\t\terror(\"The first argument to make_id should be a language object.\")\n\t\tend\n\tend\n\n\tif not ( type(str) == \"string\" or type(str) == \"number\" ) then\n\t\terror(\"The second argument to make_id should be a string or a number.\")\n\tend\n\t\
      \n\tlocal canonicalName = lang:getCanonicalName()\n\t\n\tstr = mw.uri.encode(str, \"WIKI\")\n\t\n\tlocal id = canonicalName .. \"-\" .. str\n\t\n\tif invoked then\n\t\treturn '&lt;li class=\"senseid\" id=\"' .. id .. '\"&gt;'\n\telse\n\t\treturn id\n\t\
      end\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-15T21:09:19.069Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Template%3Apedialite&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; WMF-Last-Access=15-Apr-2019; WMF-Last-Access-Global=15-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=41574 t=1555362558983765
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Length: '951'
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:19 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1288.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=15-Apr-2019;WMF-Last-Access-Global=15-Apr-2019;https=1
      X-Cache: cp1089 pass, cp3042 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 203149939, 839254109, 703794957
    body: <?xml version="1.0"?><api batchcomplete=""><warnings><main xml:space="preserve">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space="preserve">Because "rvslots" was not specified, a legacy format has been used for the output. This format is deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx="819496" pageid="819496" ns="10" title="Template:pedialite"><revisions><rev user="Rua" timestamp="2014-08-11T23:41:23Z" contentformat="text/x-wiki" contentmodel="wikitext" comment="Redirected page to [[Template:projectlink/Wikipedia]]" xml:space="preserve">#REDIRECT [[Template:projectlink/Wikipedia]]</rev></revisions></page></pages></query></api>
- recorded: 2019-04-15T21:09:19.255Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Template%3Aprojectlink%2FWikipedia&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; WMF-Last-Access=15-Apr-2019; WMF-Last-Access-Global=15-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=58499 t=1555362559152384
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:19 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1348.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=15-Apr-2019;WMF-Last-Access-Global=15-Apr-2019;https=1
      X-Cache: cp1083 pass, cp3042 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 929507461, 820372726, 706511114
    body: <?xml version="1.0"?><api batchcomplete=""><warnings><main xml:space="preserve">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space="preserve">Because "rvslots" was not specified, a legacy format has been used for the output. This format is deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx="71571" pageid="71571" ns="10" title="Template:projectlink/Wikipedia"><revisions><rev user="Erutuon" timestamp="2018-02-06T05:17:30Z" contentformat="text/x-wiki" contentmodel="wikitext" comment="documentation template" xml:space="preserve">{{#invoke:wikipedia|projectlink|prefix=w|name=Wikipedia|image=Wikipedia-logo.svg}}&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</rev></revisions></page></pages></query></api>
- recorded: 2015-09-23T14:03:33.247Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Awikimedia+languages%2Ftemplates&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=PT:17:Vila_Nova_De_Gaia:41.13:-8.62:v4; WMF-Last-Access=23-Sep-2015
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Age: '0'
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Type: text/xml; charset=utf-8
      Date: Wed, 23 Sep 2015 14:03:31 GMT
      Server: nginx/1.9.4
      Strict-Transport-Security: max-age=31536000; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,X-Forwarded-Proto,Cookie
      X-Analytics: https=1;WMF-Last-Access=23-Sep-2015
      X-Cache: cp1065 miss (0), cp3003 miss (0), cp3012 frontend miss (0)
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.6.5
      X-Varnish: 269860104, 339013190, 1890204958
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><query><pages><page _idx=\"4506952\" pageid=\"4506952\" ns=\"828\" title=\"Module:wikimedia languages/templates\"><revisions><rev user=\"CodeCat\" timestamp=\"2014-08-11T01:32:53Z\" comment=\"\" contentformat=\"\
      text/plain\" contentmodel=\"Scribunto\" xml:space=\"preserve\">local export = {}\n\nfunction export.exists(frame, fallback)\n\tlocal args = frame.args\n\tlocal lang = args[1] or error(&quot;Wikimedia language code has not been specified. Please pass parameter\
      \ 1 to the module invocation.&quot;)\n\t\n\tlang = require(&quot;Module:wikimedia languages&quot;)[(fallback and &quot;getByCodeWithFallback&quot; or &quot;getByCode&quot;)](lang)\n\t\n\tif lang then\n\t\treturn &quot;1&quot;\n\telse\n\t\treturn &quot;&quot;\n\
      \tend\nend\n\nfunction export.existsWithFallback(frame)\n\treturn export.exists(frame, true)\nend\n\nfunction export.getByCode(frame, fallback)\n\tlocal args = frame.args\n\tlocal langcode = args[1] or error(&quot;Wikimedia language code has not been specified.\
      \ Please pass parameter 1 to the module invocation.&quot;)\n\tlocal itemname = args[2] or error(&quot;Type of information to look up has not been specified. Please pass parameter 2 to the module invocation.&quot;)\n\t\n\tlocal lang = require(&quot;Module:wikimedia\
      \ languages&quot;)[(fallback and &quot;getByCodeWithFallback&quot; or &quot;getByCode&quot;)](langcode)\n\t\n\tif not lang then\n\t\terror(&quot;The wikimedia language code '&quot; .. langcode .. &quot;' is not valid.&quot;)\n\tend\n\t\n\t-- The item that\
      \ the caller wanted to look up\n\tif itemname == &quot;getAllNames&quot; then\n\t\tlocal index = args[3]; if index == &quot;&quot; then index = nil end\n\t\tindex = tonumber(index or error(&quot;Please specify the numeric index of the desired name.&quot;))\n\
      \t\treturn lang:getAllNames()[index] or &quot;&quot;\n\telseif itemname == &quot;getWiktionaryLanguage&quot; then\n\t\treturn lang:getWiktionaryLanguage():getCode()\n\telseif lang[itemname] then\n\t\tlocal ret = lang[itemname](lang)\n\t\t\n\t\tif type(ret)\
      \ == &quot;string&quot; then\n\t\t\treturn ret\n\t\telse\n\t\t\terror(&quot;The function \\&quot;&quot; .. itemname .. &quot;\\&quot; did not return a string value.&quot;)\n\t\tend\n\telse\n\t\terror(&quot;Requested invalid item name \\&quot;&quot; ..\
      \ itemname .. &quot;\\&quot;.&quot;)\n\tend\nend\n\nfunction export.getByCodeWithFallback(frame)\n\treturn export.getByCode(frame, true)\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-15T21:09:19.634Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Awikimedia+languages&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; WMF-Last-Access=15-Apr-2019; WMF-Last-Access-Global=15-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=61484 t=1555362559527456
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:19 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1313.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=15-Apr-2019;WMF-Last-Access-Global=15-Apr-2019;https=1
      X-Cache: cp1075 pass, cp3041 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 597089158, 739383322, 693849250
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"4506944\" pageid=\"4506944\" ns=\"828\" title=\"Module:wikimedia languages\"><revisions><rev user=\"Rua\" timestamp=\"2015-01-26T16:00:55Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"\" xml:space=\"preserve\">local export = {}\n\nlocal WikimediaLanguage = {}\n\nfunction WikimediaLanguage:getCode()\n\treturn self._code\nend\n\nfunction WikimediaLanguage:getCanonicalName()\n\
      \treturn self._rawData.canonicalName\nend\n\n--function WikimediaLanguage:getAllNames()\n--\treturn self._rawData.names\n--end\n\nfunction WikimediaLanguage:getType()\n\treturn \"Wikimedia\"\nend\n\nfunction WikimediaLanguage:getWiktionaryLanguage()\n\t\
      if not self._wiktionaryLanguageObject then\n\t\tself._wiktionaryLanguageObject = require(\"Module:languages\").getByCode(self._rawData.wiktionary_code)\n\tend\n\t\n\treturn self._wiktionaryLanguageObject\nend\n\n-- Do NOT use this method!\n-- All uses\
      \ should be pre-approved on the talk page!\nfunction WikimediaLanguage:getRawData()\n\treturn self._rawData\nend\n\nWikimediaLanguage.__index = WikimediaLanguage\n\n\nfunction export.getByCode(code)\n\t-- Only accept codes the software recognises\n\tif\
      \ not mw.language.isKnownLanguageTag(code) then\n\t\treturn nil\n\tend\n\t\n\tlocal rawData = mw.loadData(\"Module:wikimedia languages/data\")[code]\n\t\n\t-- If there is no specific Wikimedia code, then \"borrow\" the information\n\t-- from the general\
      \ Wiktionary language code\n\tif not rawData then\n\t\tlocal lang = require(\"Module:languages\").getByCode(code)\n\t\t\n\t\tif not lang then\n\t\t\treturn nil\n\t\tend\n\t\t\n\t\trawData = {canonicalName = lang:getCanonicalName(), wiktionary_code = code}\n\
      \telseif not rawData.canonicalName then\n\t\trawData = {canonicalName = require(\"Module:languages\").getByCode(rawData.wiktionary_code):getCanonicalName(), wiktionary_code = rawData.wiktionary_code}\n\tend\n\t\n\treturn setmetatable({ _rawData = rawData,\
      \ _code = code }, WikimediaLanguage)\nend\n\nfunction export.getByCodeWithFallback(code)\n\tlocal object = export.getByCode(code)\n\t\n\tif object then\n\t\treturn object\n\tend\n\t\n\tlocal lang = require(\"Module:languages\").getByCode(code)\n\t\n\t\
      if not lang then\n\t\treturn nil\n\tend\n\t\n\treturn lang:getWikimediaLanguages()[1]\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-15T21:09:19.810Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Awikimedia+languages%2Fdata&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; WMF-Last-Access=15-Apr-2019; WMF-Last-Access-Global=15-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=49136 t=1555362559714005
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:19 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1313.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=15-Apr-2019;WMF-Last-Access-Global=15-Apr-2019;https=1
      X-Cache: cp1085 pass, cp3041 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 592484403, 737061566, 704843494
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"4506945\" pageid=\"4506945\" ns=\"828\" title=\"Module:wikimedia languages/data\"><revisions><rev user=\"Daniel Carrero\" timestamp=\"\
      2015-11-24T03:34:30Z\" contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"Reverted edits by [[Special:Contributions/Daniel Carrero|Daniel Carrero]]. If you think this rollback is in error, please leave a message on my talk page.\" xml:space=\"\
      preserve\">local m = {}\n\nm[\"als\"] = {\n\twiktionary_code = \"gsw\",\n}\n\nm[\"bat-smg\"] = {\n\twiktionary_code = \"sgs\",\n}\n\nm[\"bs\"] = {\n\tcanonicalName = \"Bosnian\",\n\twiktionary_code = \"sh\",\n}\n\nm[\"bxr\"] = {\n\twiktionary_code = \"\
      bua\",\n}\n\nm[\"diq\"] = {\n\twiktionary_code = \"zza\",\n}\n\nm[\"eml\"] = {\n\tcanonicalName = \"Emiliano-Romagnolo\",\n\twiktionary_code = \"egl\",\n}\n\nm[\"fiu-vro\"] = {\n\twiktionary_code = \"vro\",\n}\n\nm[\"hr\"] = {\n\tcanonicalName = \"Croatian\"\
      ,\n\twiktionary_code = \"sh\",\n}\n\nm[\"ksh\"] = {\n\twiktionary_code = \"gmw-cfr\",\n}\n\nm[\"mhr\"] = {\n\twiktionary_code = \"chm\",\n}\n\nm[\"nrm\"] = {\n\twiktionary_code = \"nrf\",\n}\n\nm[\"roa-rup\"] = {\n\twiktionary_code = \"rup\",\n}\n\nm[\"\
      roa-tara\"] = {\n\twiktionary_code = \"roa-tar\",\n}\n\nm[\"simple\"] = {\n\tcanonicalName = \"Simple English\",\n\twiktionary_code = \"en\",\n}\n\nm[\"sr\"] = {\n\tcanonicalName = \"Serbian\",\n\twiktionary_code = \"sh\",\n}\n\nm[\"zh-classical\"] = {\n\
      \twiktionary_code = \"ltc\",\n}\n\nm[\"zh-min-nan\"] = {\n\twiktionary_code = \"nan\",\n}\n\nm[\"zh-yue\"] = {\n\twiktionary_code = \"yue\",\n}\n\nreturn m</rev></revisions></page></pages></query></api>"
- recorded: 2015-09-23T14:03:34.227Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=File%3AWikipedia-logo.png&prop=imageinfo&iiprop=url&iiurlwidth=15
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=PT:17:Vila_Nova_De_Gaia:41.13:-8.62:v4; WMF-Last-Access=23-Sep-2015
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Age: '0'
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Type: text/xml; charset=utf-8
      Date: Wed, 23 Sep 2015 14:03:32 GMT
      Server: nginx/1.9.4
      Strict-Transport-Security: max-age=31536000; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,X-Forwarded-Proto,Cookie
      X-Analytics: https=1;WMF-Last-Access=23-Sep-2015
      X-Cache: cp1065 miss (0), cp3031 miss (0), cp3012 frontend miss (0)
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.6.5
      X-Varnish: 269861333, 1254540649, 1890206405
    body: <?xml version="1.0"?><api><continue iistart="2010-05-26T15:56:42Z" continue="||" /><query><pages><page _idx="-1" ns="6" title="File:Wikipedia-logo.png" missing="" imagerepository="shared"><imageinfo><ii thumburl="https://upload.wikimedia.org/wikipedia/commons/thumb/6/63/Wikipedia-logo.png/15px-Wikipedia-logo.png" thumbwidth="15" thumbheight="15" url="https://upload.wikimedia.org/wikipedia/commons/6/63/Wikipedia-logo.png" descriptionurl="https://commons.wikimedia.org/wiki/File:Wikipedia-logo.png" /></imageinfo></page></pages></query></api>
- recorded: 2019-04-15T21:09:13.276Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Ako&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; WMF-Last-Access=15-Apr-2019; WMF-Last-Access-Global=15-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=40567 t=1555362553171060
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:13 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1340.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=15-Apr-2019;WMF-Last-Access-Global=15-Apr-2019;https=1
      X-Cache: cp1083 pass, cp3030 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 794436120, 647342343, 701832722
    body: !!binary |-
      
- recorded: 2019-04-15T21:09:14.526Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Ako-pron%2Fdata&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; WMF-Last-Access=15-Apr-2019; WMF-Last-Access-Global=15-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=44361 t=1555362554380437
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:14 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1288.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=15-Apr-2019;WMF-Last-Access-Global=15-Apr-2019;https=1
      X-Cache: cp1089 pass, cp3041 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 214861343, 736963229, 697645853
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"6106865\" pageid=\"6106865\" ns=\"828\" title=\"Module:ko-pron/data\"><revisions><rev user=\"Wyang\" timestamp=\"2018-06-04T07:32:34Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"Is there a source for this? AFAIK, the RR transliteration is an official variant of RR transcription and differs from transcription in consonants only: [http://www.korean.go.kr/front_eng/roman/roman_01.do]\
      \ (#8). ᅯ is not treated as a compound vowel from ᅮ and ᅥ (which strictly would be &#039;ueo&#039; anyway).\" xml:space=\"preserve\">local export = {}\n\nexport.vowels = {\n\t[\"Ø\"]\t= { \"\",\t\"\",\t\"\",\t\"\",\t\"\",\t\"\" },\n\t[\" \"]\t= { \" \"\
      ,\t\" \",\t\" \",\t\" \",\t\" \",\t\" \" },\n\t[\"ᅡ\"]\t= { \"ᅡ\",\t\"a\",\t\"a\",\t\"a\",\t\"a\",\t\"a̠\" },\n\t[\"ᅢ\"]\t= { \"ᅢ\",\t\"ae\",\t\"ae\",\t\"ae\",\t\"ay\",\t\"e̞\" },\n\t[\"ᅣ\"]\t= { \"ᅣ\",\t\"ya\",\t\"ya\",\t\"ya\",\t\"ya\",\t\"ja̠\" },\n\
      \t[\"ᅤ\"]\t= { \"ᅤ\",\t\"yae\",\t\"yae\",\t\"yae\",\t\"yay\",\t\"je̞\" },\n\t[\"ᅥ\"]\t= { \"ᅥ\",\t\"eo\",\t\"eo\",\t\"ŏ\",\t\"e\",\t\"ʌ̹\" },\n\t[\"ᅦ\"]\t= { \"ᅦ\",\t\"e\",\t\"e\",\t\"e\",\t\"ey\",\t\"e̞\" },\n\t[\"ᅧ\"]\t= { \"ᅧ\",\t\"yeo\",\t\"yeo\",\t\
      \"yŏ\",\t\"ye\",\t\"jʌ̹\" },\n\t[\"ᅨ\"]\t= { \"ᅨ\",\t\"ye\",\t\"ye\",\t\"ye\",\t\"yey\",\t\"je̞\" },\n\t[\"ᅩ\"]\t= { \"ᅩ\",\t\"o\",\t\"o\",\t\"o\",\t\"o\",\t\"o̞\" },\n\t[\"ᅪ\"]\t= { \"ᅪ\",\t\"wa\",\t\"wa\",\t\"wa\",\t\"wa\",\t\"wa̠\" },\n\t[\"ᅫ\"]\t=\
      \ { \"ᅫ\",\t\"wae\",\t\"wae\",\t\"wae\",\t\"way\",\t\"we̞\" },\n\t[\"ᅬ\"]\t= { \"ᅬ\",\t\"oe\",\t\"oe\",\t\"oe\",\t\"oy\",\t\"ø̞\" },\n\t[\"ᅭ\"]\t= { \"ᅭ\",\t\"yo\",\t\"yo\",\t\"yo\",\t\"yo\",\t\"jo\" },\n\t[\"ᅮ\"]\t= { \"ᅮ\",\t\"u\",\t\"u\",\t\"u\",\t\"\
      wu\",\t\"u\" },\n\t[\"ᅯ\"]\t= { \"ᅯ\",\t\"wo\",\t\"wo\",\t\"wŏ\",\t\"we\",\t\"wʌ̹\" },\n\t[\"ᅰ\"]\t= { \"ᅰ\",\t\"we\",\t\"we\",\t\"we\",\t\"wey\",\t\"we̞\" },\n\t[\"ᅱ\"]\t= { \"ᅱ\",\t\"wi\",\t\"wi\",\t\"wi\",\t\"wi\",\t\"ɥi\" },\n\t[\"ᅲ\"]\t= { \"ᅲ\",\t\
      \"yu\",\t\"yu\",\t\"yu\",\t\"yu\",\t\"ju\" },\n\t[\"ᅳ\"]\t= { \"ᅳ\",\t\"eu\",\t\"eu\",\t\"ŭ\",\t\"u\",\t\"ɯ\" },\n\t[\"ᅴ\"]\t= { \"ᅴ\",\t\"ui\",\t\"ui\",\t\"ŭi\",\t\"uy\",\t\"ɰi\" },\n\t[\"ᅵ\"]\t= { \"ᅵ\",\t\"i\",\t\"i\",\t\"i\",\t\"i\",\t\"i\" },\n}\n\
      \nexport.boundary = {\n\t-- note: Ø represents different things when used for initials and finals.\n\t-- For initials, Ø = the next syllable is absent.\n\t-- For finals, Ø = the absence of a jongseong jamo, but the previous syllable exists.\n\t-- The equivalent\
      \ of initial Ø is final \"\" (nothing).\n\t[\"Ø-Ø\"] \t = { \"\",\t\"\",\t\"\",\t\"\",\t\"\",\t\"\" },\n\t[\"-Ø\"] \t = { \"\",\t\"\",\t\"\",\t\"\",\t\"\",\t\"\" },\n\t[\"-ᄀ\"] \t = { \"ᄀ\",\t\"g\",\t\"g\",\t\"k\",\t\"k\",\t\"k\" },\n\t[\"-ᄁ\"] \t = {\
      \ \"ᄁ\",\t\"kk\",\t\"kk\",\t\"kk\",\t\"kk\",\t\"k͈\" },\n\t[\"-ᄂ\"] \t = { \"ᄂ\",\t\"n\",\t\"n\",\t\"n\",\t\"n\",\t\"n\" },\n\t[\"-ᄃ\"] \t = { \"ᄃ\",\t\"d\",\t\"d\",\t\"t\",\t\"t\",\t\"t\" },\n\t[\"-ᄄ\"] \t = { \"ᄄ\",\t\"tt\",\t\"tt\",\t\"tt\",\t\"tt\"\
      ,\t\"t͈\" },\n\t[\"-ᄅ\"] \t = { \"ᄅ\",\t\"r\",\t\"l\",\t\"r\",\t\"l\",\t\"ɾ\" },\n\t[\"-ᄆ\"] \t = { \"ᄆ\",\t\"m\",\t\"m\",\t\"m\",\t\"m\",\t\"m\" },\n\t[\"-ᄇ\"] \t = { \"ᄇ\",\t\"b\",\t\"b\",\t\"p\",\t\"p\",\t\"p\" },\n\t[\"-ᄈ\"] \t = { \"ᄈ\",\t\"pp\",\t\
      \"pp\",\t\"pp\",\t\"pp\",\t\"p͈\" },\n\t[\"-ᄉ\"] \t = { \"ᄉ\",\t\"s\",\t\"s\",\t\"s\",\t\"s\",\t\"sʰ\" },\n\t[\"-ᄊ\"] \t = { \"ᄊ\",\t\"ss\",\t\"ss\",\t\"ss\",\t\"ss\",\t\"s͈\" },\n\t[\"-ᄋ\"] \t = { \"ᄋ\",\t\"\",\t\"\",\t\"\",\t\"\",\t\"\" },\n\t[\"-ᄌ\"\
      ] \t = { \"ᄌ\",\t\"j\",\t\"j\",\t\"ch\",\t\"c\",\t\"t͡ɕ\" },\n\t[\"-ᄍ\"] \t = { \"ᄍ\",\t\"jj\",\t\"jj\",\t\"tch\",\t\"cc\",\t\"t͡ɕ͈\" },\n\t[\"-ᄎ\"] \t = { \"ᄎ\",\t\"ch\",\t\"ch\",\t\"ch'\",\t\"ch\",\t\"t͡ɕʰ\" },\n\t[\"-ᄏ\"] \t = { \"ᄏ\",\t\"k\",\t\"k\"\
      ,\t\"k'\",\t\"kh\",\t\"kʰ\" },\n\t[\"-ᄐ\"] \t = { \"ᄐ\",\t\"t\",\t\"t\",\t\"t'\",\t\"th\",\t\"tʰ\" },\n\t[\"-ᄑ\"] \t = { \"ᄑ\",\t\"p\",\t\"p\",\t\"p'\",\t\"ph\",\t\"pʰ\" },\n\t[\"-ᄒ\"] \t = { \"ᄒ\",\t\"h\",\t\"h\",\t\"h\",\t\"h\",\t\"h\" },\n\t[\"Ø-ᄀ\"\
      ] \t = { \"ᄀ\",\t\"g\",\t\"g\",\t\"g\",\t\"k\",\t\"ɡ\" },\n\t[\"Ø-ᄁ\"] \t = { \"ᄁ\",\t\"kk\",\t\"kk\",\t\"kk\",\t\"kk\",\t\"k͈\" },\n\t[\"Ø-ᄂ\"] \t = { \"ᄂ\",\t\"n\",\t\"n\",\t\"n\",\t\"n\",\t\"n\" },\n\t[\"Ø-ᄃ\"] \t = { \"ᄃ\",\t\"d\",\t\"d\",\t\"d\",\t\
      \"t\",\t\"d\" },\n\t[\"Ø-ᄄ\"] \t = { \"ᄄ\",\t\"tt\",\t\"tt\",\t\"tt\",\t\"tt\",\t\"t͈\" },\n\t[\"Ø-ᄅ\"] \t = { \"ᄅ\",\t\"r\",\t\"l\",\t\"r\",\t\"l\",\t\"ɾ\" },\n\t[\"Ø-ᄆ\"] \t = { \"ᄆ\",\t\"m\",\t\"m\",\t\"m\",\t\"m\",\t\"m\" },\n\t[\"Ø-ᄇ\"] \t = { \"ᄇ\
      \",\t\"b\",\t\"b\",\t\"b\",\t\"p\",\t\"b\" },\n\t[\"Ø-ᄈ\"] \t = { \"ᄈ\",\t\"pp\",\t\"pp\",\t\"pp\",\t\"pp\",\t\"p͈\" },\n\t[\"Ø-ᄉ\"] \t = { \"ᄉ\",\t\"s\",\t\"s\",\t\"s\",\t\"s\",\t\"sʰ\" },\n\t[\"Ø-ᄊ\"] \t = { \"ᄊ\",\t\"ss\",\t\"ss\",\t\"ss\",\t\"ss\"\
      ,\t\"s͈\" },\n\t[\"Ø-ᄋ\"] \t = { \"ᄋ\",\t\"…\",\t\"…\",\t\"\",\t\"\",\t\"\" },\n\t[\"Ø-ᄌ\"] \t = { \"ᄌ\",\t\"j\",\t\"j\",\t\"j\",\t\"c\",\t\"d͡ʑ\" },\n\t[\"Ø-ᄍ\"] \t = { \"ᄍ\",\t\"jj\",\t\"jj\",\t\"tch\",\t\"cc\",\t\"t͡ɕ͈\" },\n\t[\"Ø-ᄎ\"] \t = { \"ᄎ\"\
      ,\t\"ch\",\t\"ch\",\t\"ch'\",\t\"ch\",\t\"t͡ɕʰ\" },\n\t[\"Ø-ᄏ\"] \t = { \"ᄏ\",\t\"k\",\t\"k\",\t\"k'\",\t\"kh\",\t\"kʰ\" },\n\t[\"Ø-ᄐ\"] \t = { \"ᄐ\",\t\"t\",\t\"t\",\t\"t'\",\t\"th\",\t\"tʰ\" },\n\t[\"Ø-ᄑ\"] \t = { \"ᄑ\",\t\"p\",\t\"p\",\t\"p'\",\t\"\
      ph\",\t\"pʰ\" },\n\t[\"Ø-ᄒ\"] \t = { \"ᄒ\",\t\"h\",\t\"h\",\t\"h\",\t\"h\",\t\"ɦ\" },\n\t[\"ᆨ-Ø\"] \t = { \"ᆨ\",\t\"k\",\t\"g\",\t\"k\",\t\"k\",\t\"k̚\" },\n\t[\"ᆨ-ᄀ\"] \t = { \"ᆨᄁ\",\t\"kg\",\t\"gg\",\t\"kk\",\t\"kqk\",\t\"k̚k͈\" },\n\t[\"ᆨ-ᄁ\"] \t =\
      \ { \"ᆨᄁ\",\t\"kkk\",\t\"gkk\",\t\"kk\",\t\"kkk\",\t\"k̚k͈\" },\n\t[\"ᆨ-ᄂ\"] \t = { \"ᆼᄂ\",\t\"ngn\",\t\"gn\",\t\"ngn\",\t\"kn\",\t\"ŋn\" },\n\t[\"ᆨ-ᄃ\"] \t = { \"ᆨᄄ\",\t\"kd\",\t\"gd\",\t\"kt\",\t\"kqt\",\t\"k̚t͈\" },\n\t[\"ᆨ-ᄄ\"] \t = { \"ᆨᄄ\",\t\"ktt\"\
      ,\t\"gtt\",\t\"ktt\",\t\"ktt\",\t\"k̚t͈\" },\n\t[\"ᆨ-ᄅ\"] \t = { \"ᆼᄂ\",\t\"ngn\",\t\"gl\",\t\"ngn\",\t\"kl\",\t\"ŋn\" },\n\t[\"ᆨ-ᄆ\"] \t = { \"ᆼᄆ\",\t\"ngm\",\t\"gm\",\t\"ngm\",\t\"km\",\t\"ŋm\" },\n\t[\"ᆨ-ᄇ\"] \t = { \"ᆨᄈ\",\t\"kb\",\t\"gb\",\t\"kp\"\
      ,\t\"kqp\",\t\"k̚p͈\" },\n\t[\"ᆨ-ᄈ\"] \t = { \"ᆨᄈ\",\t\"kpp\",\t\"gpp\",\t\"kpp\",\t\"kpp\",\t\"k̚p͈\" },\n\t[\"ᆨ-ᄉ\"] \t = { \"ᆨᄊ\",\t\"ks\",\t\"gs\",\t\"ks\",\t\"kqs\",\t\"ks͈\" },\n\t[\"ᆨ-ᄊ\"] \t = { \"ᆨᄊ\",\t\"kss\",\t\"gss\",\t\"kss\",\t\"kss\",\t\
      \"ks͈\" },\n\t[\"ᆨ-ᄋ\"] \t = { \"ᄀ\",\t\"g\",\t\"g-\",\t\"g\",\t\"k.\",\t\"ɡ\" },\n\t[\"ᆨ-ᄌ\"] \t = { \"ᆨᄍ\",\t\"kj\",\t\"gj\",\t\"kch\",\t\"kqc\",\t\"k̚t͡ɕ͈\" },\n\t[\"ᆨ-ᄍ\"] \t = { \"ᆨᄍ\",\t\"kjj\",\t\"gjj\",\t\"ktch\",\t\"kcc\",\t\"k̚t͡ɕ͈\" },\n\t[\"\
      ᆨ-ᄎ\"] \t = { \"ᆨᄎ\",\t\"kch\",\t\"gch\",\t\"kch'\",\t\"kch\",\t\"k̚t͡ɕʰ\" },\n\t[\"ᆨ-ᄏ\"] \t = { \"ᆨᄏ\",\t\"kk\",\t\"gk\",\t\"kk'\",\t\"kkh\",\t\"k̚kʰ\" },\n\t[\"ᆨ-ᄐ\"] \t = { \"ᆨᄐ\",\t\"kt\",\t\"gt\",\t\"kt'\",\t\"kth\",\t\"k̚tʰ\" },\n\t[\"ᆨ-ᄑ\"] \t\
      \ = { \"ᆨᄑ\",\t\"kp\",\t\"gp\",\t\"kp'\",\t\"kph\",\t\"k̚pʰ\" },\n\t[\"ᆨ-ᄒ\"] \t = { \"ᄏ\",\t\"kh\",\t\"g-h\",\t\"kh\",\t\"k.h\",\t\"kʰ\" },\n\t[\"ᆩ-Ø\"] \t = { \"ᆨ\",\t\"k\",\t\"kk\",\t\"k\",\t\"kk\",\t\"k̚\" },\n\t[\"ᆩ-ᄀ\"] \t = { \"ᆨᄁ\",\t\"kg\",\t\"\
      kkg\",\t\"kk\",\t\"kkqk\",\t\"k̚k͈\" },\n\t[\"ᆩ-ᄁ\"] \t = { \"ᆨᄁ\",\t\"kkk\",\t\"kkkk\",\t\"kk\",\t\"kkkk\",\t\"k̚k͈\" },\n\t[\"ᆩ-ᄂ\"] \t = { \"ᆼᄂ\",\t\"ngn\",\t\"kkn\",\t\"ngn\",\t\"kkn\",\t\"ŋn\" },\n\t[\"ᆩ-ᄃ\"] \t = { \"ᆨᄄ\",\t\"kd\",\t\"kkd\",\t\"\
      kt\",\t\"kkqt\",\t\"k̚t͈\" },\n\t[\"ᆩ-ᄄ\"] \t = { \"ᆨᄄ\",\t\"ktt\",\t\"kktt\",\t\"ktt\",\t\"kktt\",\t\"k̚t͈\" },\n\t[\"ᆩ-ᄅ\"] \t = { \"ᆼᄂ\",\t\"ngn\",\t\"kkl\",\t\"ngn\",\t\"kkl\",\t\"ŋn\" },\n\t[\"ᆩ-ᄆ\"] \t = { \"ᆼᄆ\",\t\"ngm\",\t\"kkm\",\t\"ngm\",\t\"\
      kkm\",\t\"ŋm\" },\n\t[\"ᆩ-ᄇ\"] \t = { \"ᆨᄈ\",\t\"kb\",\t\"kkb\",\t\"kp\",\t\"kkqp\",\t\"k̚p͈\" },\n\t[\"ᆩ-ᄈ\"] \t = { \"ᆨᄈ\",\t\"kpp\",\t\"kkpp\",\t\"kpp\",\t\"kkpp\",\t\"k̚p͈\" },\n\t[\"ᆩ-ᄉ\"] \t = { \"ᆨᄊ\",\t\"ks\",\t\"kks\",\t\"ks\",\t\"kkqs\",\t\"\
      ks͈\" },\n\t[\"ᆩ-ᄊ\"] \t = { \"ᆨᄊ\",\t\"kss\",\t\"kkss\",\t\"kss\",\t\"kkss\",\t\"ks͈\" },\n\t[\"ᆩ-ᄋ\"] \t = { \"ᄁ\",\t\"kk\",\t\"kk-\",\t\"kk\",\t\"kk.\",\t\"k͈\" },\n\t[\"ᆩ-ᄌ\"] \t = { \"ᆨᄍ\",\t\"kj\",\t\"kkj\",\t\"kch\",\t\"kkqc\",\t\"k̚t͡ɕ͈\" },\n\t\
      [\"ᆩ-ᄍ\"] \t = { \"ᆨᄍ\",\t\"kjj\",\t\"kkjj\",\t\"ktch\",\t\"kkcc\",\t\"k̚t͡ɕ͈\" },\n\t[\"ᆩ-ᄎ\"] \t = { \"ᆨᄎ\",\t\"kch\",\t\"kkch\",\t\"kch'\",\t\"kkch\",\t\"k̚t͡ɕʰ\" },\n\t[\"ᆩ-ᄏ\"] \t = { \"ᆨᄏ\",\t\"kk\",\t\"kkk\",\t\"kk'\",\t\"kkkh\",\t\"k̚kʰ\" },\n\t\
      [\"ᆩ-ᄐ\"] \t = { \"ᆨᄐ\",\t\"kt\",\t\"kkt\",\t\"kt'\",\t\"kkth\",\t\"k̚tʰ\" },\n\t[\"ᆩ-ᄑ\"] \t = { \"ᆨᄑ\",\t\"kp\",\t\"kkp\",\t\"kp'\",\t\"kkph\",\t\"k̚pʰ\" },\n\t[\"ᆩ-ᄒ\"] \t = { \"ᄏ\",\t\"kh\",\t\"kk-h\",\t\"kh\",\t\"kk.h\",\t\"kʰ\" },\n\t[\"ᆪ-Ø\"] \t\
      \ = { \"ᆨ\",\t\"k\",\t\"gs\",\t\"k\",\t\"ks\",\t\"k̚\" },\n\t[\"ᆪ-ᄀ\"] \t = { \"ᆨᄁ\",\t\"kg\",\t\"gsg\",\t\"kk\",\t\"ksqk\",\t\"k̚k͈\" },\n\t[\"ᆪ-ᄁ\"] \t = { \"ᆨᄁ\",\t\"kkk\",\t\"gskk\",\t\"kk\",\t\"kskk\",\t\"k̚k͈\" },\n\t[\"ᆪ-ᄂ\"] \t = { \"ᆼᄂ\",\t\"\
      ngn\",\t\"gsn\",\t\"ngn\",\t\"ksn\",\t\"ŋn\" },\n\t[\"ᆪ-ᄃ\"] \t = { \"ᆨᄄ\",\t\"kd\",\t\"gsd\",\t\"kt\",\t\"ksqt\",\t\"k̚t͈\" },\n\t[\"ᆪ-ᄄ\"] \t = { \"ᆨᄄ\",\t\"ktt\",\t\"gstt\",\t\"ktt\",\t\"kstt\",\t\"k̚t͈\" },\n\t[\"ᆪ-ᄅ\"] \t = { \"ᆼᄂ\",\t\"ngn\",\t\"\
      gsl\",\t\"ngn\",\t\"ksl\",\t\"ŋn\" },\n\t[\"ᆪ-ᄆ\"] \t = { \"ᆼᄆ\",\t\"ngm\",\t\"gsm\",\t\"ngm\",\t\"ksm\",\t\"ŋm\" },\n\t[\"ᆪ-ᄇ\"] \t = { \"ᆨᄈ\",\t\"kb\",\t\"gsb\",\t\"kp\",\t\"ksqp\",\t\"k̚p͈\" },\n\t[\"ᆪ-ᄈ\"] \t = { \"ᆨᄈ\",\t\"kpp\",\t\"gspp\",\t\"kpp\"\
      ,\t\"kspp\",\t\"k̚p͈\" },\n\t[\"ᆪ-ᄉ\"] \t = { \"ᆨᄊ\",\t\"ks\",\t\"gss\",\t\"ks\",\t\"ksqs\",\t\"ks͈\" },\n\t[\"ᆪ-ᄊ\"] \t = { \"ᆨᄊ\",\t\"kss\",\t\"gsss\",\t\"kss\",\t\"ksss\",\t\"ks͈\" },\n\t[\"ᆪ-ᄋ\"] \t = { \"ᆨᄊ\",\t\"ks\",\t\"gs-\",\t\"ks\",\t\"ks.\"\
      ,\t\"ks͈\" },\n\t[\"ᆪ-ᄌ\"] \t = { \"ᆨᄍ\",\t\"kj\",\t\"gsj\",\t\"kch\",\t\"ksqc\",\t\"k̚t͡ɕ͈\" },\n\t[\"ᆪ-ᄍ\"] \t = { \"ᆨᄍ\",\t\"kjj\",\t\"gsjj\",\t\"ktch\",\t\"kscc\",\t\"k̚t͡ɕ͈\" },\n\t[\"ᆪ-ᄎ\"] \t = { \"ᆨᄎ\",\t\"kch\",\t\"gsch\",\t\"kch'\",\t\"ksch\"\
      ,\t\"k̚t͡ɕʰ\" },\n\t[\"ᆪ-ᄏ\"] \t = { \"ᆨᄏ\",\t\"kk\",\t\"gsk\",\t\"kk'\",\t\"kskh\",\t\"k̚kʰ\" },\n\t[\"ᆪ-ᄐ\"] \t = { \"ᆨᄐ\",\t\"kt\",\t\"gst\",\t\"kt'\",\t\"ksth\",\t\"k̚tʰ\" },\n\t[\"ᆪ-ᄑ\"] \t = { \"ᆨᄑ\",\t\"kp\",\t\"gsp\",\t\"kp'\",\t\"ksph\",\t\"k̚\
      pʰ\" },\n\t[\"ᆪ-ᄒ\"] \t = { \"ᄏ\",\t\"kh\",\t\"gs-h\",\t\"kh\",\t\"ks.h\",\t\"kʰ\" },\n\t[\"ᆫ-Ø\"] \t = { \"ᆫ\",\t\"n\",\t\"n\",\t\"n\",\t\"n\",\t\"n\" },\n\t[\"ᆫ-ᄀ\"] \t = { \"ᆫᄀ\",\t\"n-g\",\t\"ng\",\t\"n'g\",\t\"nk\",\t\"nɡ\" },\n\t[\"ᆫ-ᄁ\"] \t = {\
      \ \"ᆫᄁ\",\t\"nkk\",\t\"nkk\",\t\"nkk\",\t\"nkk\",\t\"nk͈\" },\n\t[\"ᆫ-ᄂ\"] \t = { \"ᆫᄂ\",\t\"nn\",\t\"nn\",\t\"nn\",\t\"nn\",\t\"nn\" },\n\t[\"ᆫ-ᄃ\"] \t = { \"ᆫᄃ\",\t\"nd\",\t\"nd\",\t\"nd\",\t\"nt\",\t\"nd\" },\n\t[\"ᆫ-ᄄ\"] \t = { \"ᆫᄄ\",\t\"ntt\",\t\"\
      ntt\",\t\"ntt\",\t\"ntt\",\t\"nt͈\" },\n\t[\"ᆫ-ᄅ\"] \t = { \"ᆯᄅ\",\t\"ll\",\t\"nl\",\t\"ll\",\t\"nl\",\t\"ɭɭ\" },\n\t[\"ᆫ-ᄆ\"] \t = { \"ᆫᄆ\",\t\"nm\",\t\"nm\",\t\"nm\",\t\"nm\",\t\"nm\" },\n\t[\"ᆫ-ᄇ\"] \t = { \"ᆫᄇ\",\t\"nb\",\t\"nb\",\t\"nb\",\t\"np\"\
      ,\t\"nb\" },\n\t[\"ᆫ-ᄈ\"] \t = { \"ᆫᄈ\",\t\"npp\",\t\"npp\",\t\"npp\",\t\"npp\",\t\"np͈\" },\n\t[\"ᆫ-ᄉ\"] \t = { \"ᆫᄉ\",\t\"ns\",\t\"ns\",\t\"ns\",\t\"ns\",\t\"nsʰ\" },\n\t[\"ᆫ-ᄊ\"] \t = { \"ᆫᄊ\",\t\"nss\",\t\"nss\",\t\"nss\",\t\"nss\",\t\"ns͈\" },\n\t\
      [\"ᆫ-ᄋ\"] \t = { \"ᄂ\",\t\"n\",\t\"n-\",\t\"n\",\t\"n.\",\t\"n\" },\n\t[\"ᆫ-ᄌ\"] \t = { \"ᆫᄌ\",\t\"nj\",\t\"nj\",\t\"nj\",\t\"nc\",\t\"nd͡ʑ\" },\n\t[\"ᆫ-ᄍ\"] \t = { \"ᆫᄍ\",\t\"njj\",\t\"njj\",\t\"ntch\",\t\"ncc\",\t\"nt͡ɕ͈\" },\n\t[\"ᆫ-ᄎ\"] \t = { \"ᆫᄎ\
      \",\t\"nch\",\t\"nch\",\t\"nch'\",\t\"nch\",\t\"nt͡ɕʰ\" },\n\t[\"ᆫ-ᄏ\"] \t = { \"ᆫᄏ\",\t\"nk\",\t\"nk\",\t\"nk'\",\t\"nkh\",\t\"nkʰ\" },\n\t[\"ᆫ-ᄐ\"] \t = { \"ᆫᄐ\",\t\"nt\",\t\"nt\",\t\"nt'\",\t\"nth\",\t\"ntʰ\" },\n\t[\"ᆫ-ᄑ\"] \t = { \"ᆫᄑ\",\t\"np\",\t\
      \"np\",\t\"np'\",\t\"nph\",\t\"npʰ\" },\n\t[\"ᆫ-ᄒ\"] \t = { \"ᆫᄒ\",\t\"nh\",\t\"n-h\",\t\"nh\",\t\"n.h\",\t\"nɦ\" },\n\t[\"ᆬ-Ø\"] \t = { \"ᆫ\",\t\"n\",\t\"nj\",\t\"n\",\t\"nc\",\t\"n\" },\n\t[\"ᆬ-ᄀ\"] \t = { \"ᆫᄁ\",\t\"ng\",\t\"njg\",\t\"nk\",\t\"ncqk\"\
      ,\t\"nk͈\" },\n\t[\"ᆬ-ᄁ\"] \t = { \"ᆫᄁ\",\t\"nkk\",\t\"njkk\",\t\"nkk\",\t\"nckk\",\t\"nk͈\" },\n\t[\"ᆬ-ᄂ\"] \t = { \"ᆫᄂ\",\t\"nn\",\t\"njn\",\t\"nn\",\t\"ncn\",\t\"nn\" },\n\t[\"ᆬ-ᄃ\"] \t = { \"ᆫᄄ\",\t\"nd\",\t\"njd\",\t\"nt\",\t\"ncqt\",\t\"nt͈\" },\n\
      \t[\"ᆬ-ᄄ\"] \t = { \"ᆫᄄ\",\t\"ntt\",\t\"njtt\",\t\"ntt\",\t\"nctt\",\t\"nt͈\" },\n\t[\"ᆬ-ᄅ\"] \t = { \"ᆫᄂ\",\t\"nn\",\t\"njl\",\t\"nn\",\t\"ncl\",\t\"nn\" },\n\t[\"ᆬ-ᄆ\"] \t = { \"ᆫᄆ\",\t\"nm\",\t\"njm\",\t\"nm\",\t\"ncm\",\t\"nm\" },\n\t[\"ᆬ-ᄇ\"] \t =\
      \ { \"ᆫᄈ\",\t\"nb\",\t\"njb\",\t\"np\",\t\"ncqp\",\t\"np͈\" },\n\t[\"ᆬ-ᄈ\"] \t = { \"ᆫᄈ\",\t\"npp\",\t\"njpp\",\t\"npp\",\t\"ncpp\",\t\"np͈\" },\n\t[\"ᆬ-ᄉ\"] \t = { \"ᆫᄊ\",\t\"ns\",\t\"njs\",\t\"ns\",\t\"ncqs\",\t\"ns͈\" },\n\t[\"ᆬ-ᄊ\"] \t = { \"ᆫᄊ\",\t\
      \"nss\",\t\"njss\",\t\"nss\",\t\"ncss\",\t\"ns͈\" },\n\t[\"ᆬ-ᄋ\"] \t = { \"ᆫᄌ\",\t\"nj\",\t\"nj-\",\t\"nj\",\t\"nc.\",\t\"nd͡ʑ\" },\n\t[\"ᆬ-ᄌ\"] \t = { \"ᆫᄍ\",\t\"nj\",\t\"njj\",\t\"nch\",\t\"ncqc\",\t\"nt͡ɕ͈\" },\n\t[\"ᆬ-ᄍ\"] \t = { \"ᆫᄍ\",\t\"njj\",\t\
      \"njjj\",\t\"ntch\",\t\"nccc\",\t\"nt͡ɕ͈\" },\n\t[\"ᆬ-ᄎ\"] \t = { \"ᆫᄎ\",\t\"nch\",\t\"njch\",\t\"nch'\",\t\"ncch\",\t\"nt͡ɕʰ\" },\n\t[\"ᆬ-ᄏ\"] \t = { \"ᆫᄏ\",\t\"nk\",\t\"njk\",\t\"nk'\",\t\"nckh\",\t\"nkʰ\" },\n\t[\"ᆬ-ᄐ\"] \t = { \"ᆫᄐ\",\t\"nt\",\t\"\
      njt\",\t\"nt'\",\t\"ncth\",\t\"ntʰ\" },\n\t[\"ᆬ-ᄑ\"] \t = { \"ᆫᄑ\",\t\"np\",\t\"njp\",\t\"np'\",\t\"ncph\",\t\"npʰ\" },\n\t[\"ᆬ-ᄒ\"] \t = { \"ᆫᄎ\",\t\"nch\",\t\"nj-h\",\t\"nch'\",\t\"nc.h\",\t\"nt͡ɕʰ\" },\n\t[\"ᆭ-Ø\"] \t = { \"ᆫ\",\t\"n\",\t\"nh\",\t\"\
      n\",\t\"nh\",\t\"n\" },\n\t[\"ᆭ-ᄀ\"] \t = { \"ᆫᄏ\",\t\"nk\",\t\"nhg\",\t\"nk'\",\t\"nhk\",\t\"nkʰ\" },\n\t[\"ᆭ-ᄁ\"] \t = { \"ᆫᄏ\",\t\"nk\",\t\"nhkk\",\t\"nk'\",\t\"nhkk\",\t\"nkʰ\" },\n\t[\"ᆭ-ᄂ\"] \t = { \"ᆫᄂ\",\t\"nn\",\t\"nhn\",\t\"nn\",\t\"nhn\",\t\"\
      nn\" },\n\t[\"ᆭ-ᄃ\"] \t = { \"ᆫᄐ\",\t\"nt\",\t\"nhd\",\t\"nt'\",\t\"nht\",\t\"ntʰ\" },\n\t[\"ᆭ-ᄄ\"] \t = { \"ᆫᄐ\",\t\"nt\",\t\"nhtt\",\t\"nt'\",\t\"nhtt\",\t\"ntʰ\" },\n\t[\"ᆭ-ᄅ\"] \t = { \"ᆫᄂ\",\t\"nn\",\t\"nhl\",\t\"nn\",\t\"nhl\",\t\"nn\" },\n\t[\"ᆭ\
      -ᄆ\"] \t = { \"ᆫᄆ\",\t\"nm\",\t\"nhm\",\t\"nm\",\t\"nhm\",\t\"nm\" },\n\t[\"ᆭ-ᄇ\"] \t = { \"ᆫᄑ\",\t\"np\",\t\"nhb\",\t\"np'\",\t\"nhp\",\t\"npʰ\" },\n\t[\"ᆭ-ᄈ\"] \t = { \"ᆫᄑ\",\t\"np\",\t\"nhpp\",\t\"np'\",\t\"nhpp\",\t\"npʰ\" },\n\t[\"ᆭ-ᄉ\"] \t = { \"\
      ᆫᄊ\",\t\"ns\",\t\"nhs\",\t\"nss\",\t\"nhs\",\t\"ns͈\" },\n\t[\"ᆭ-ᄊ\"] \t = { \"ᆫᄊ\",\t\"nss\",\t\"nhss\",\t\"nss\",\t\"nhss\",\t\"ns͈\" },\n\t[\"ᆭ-ᄋ\"] \t = { \"ᄂ\",\t\"n\",\t\"nh-\",\t\"n\",\t\"nh.\",\t\"n\" },\n\t[\"ᆭ-ᄌ\"] \t = { \"ᆫᄎ\",\t\"nch\",\t\"\
      nhj\",\t\"nch'\",\t\"nhc\",\t\"nt͡ɕʰ\" },\n\t[\"ᆭ-ᄍ\"] \t = { \"ᆫᄎ\",\t\"nch\",\t\"nhjj\",\t\"nch'\",\t\"nhcc\",\t\"nt͡ɕʰ\" },\n\t[\"ᆭ-ᄎ\"] \t = { \"ᆫᄎ\",\t\"nch\",\t\"nhch\",\t\"nch'\",\t\"nhch\",\t\"nt͡ɕʰ\" },\n\t[\"ᆭ-ᄏ\"] \t = { \"ᆫᄏ\",\t\"nk\",\t\"\
      nhk\",\t\"nk'\",\t\"nhkh\",\t\"nkʰ\" },\n\t[\"ᆭ-ᄐ\"] \t = { \"ᆫᄐ\",\t\"nt\",\t\"nht\",\t\"nt'\",\t\"nhth\",\t\"ntʰ\" },\n\t[\"ᆭ-ᄑ\"] \t = { \"ᆫᄑ\",\t\"np\",\t\"nhp\",\t\"np'\",\t\"nhph\",\t\"npʰ\" },\n\t[\"ᆭ-ᄒ\"] \t = { \"ᆫᄒ\",\t\"nh\",\t\"nhh\",\t\"nh\"\
      ,\t\"nhh\",\t\"nɦ\" },\n\t[\"ᆮ-Ø\"] \t = { \"ᆮ\",\t\"t\",\t\"d\",\t\"t\",\t\"t\",\t\"t̚\" },\n\t[\"ᆮ-ᄀ\"] \t = { \"ᆮᄁ\",\t\"tg\",\t\"dg\",\t\"tk\",\t\"tqk\",\t\"t̚k͈\" },\n\t[\"ᆮ-ᄁ\"] \t = { \"ᆮᄁ\",\t\"tkk\",\t\"dkk\",\t\"tkk\",\t\"tkk\",\t\"t̚k͈\" },\n\
      \t[\"ᆮ-ᄂ\"] \t = { \"ᆫᄂ\",\t\"nn\",\t\"dn\",\t\"nn\",\t\"tn\",\t\"nn\" },\n\t[\"ᆮ-ᄃ\"] \t = { \"ᆮᄄ\",\t\"td\",\t\"dd\",\t\"tt\",\t\"tqt\",\t\"t̚t͈\" },\n\t[\"ᆮ-ᄄ\"] \t = { \"ᆮᄄ\",\t\"ttt\",\t\"dtt\",\t\"tt\",\t\"ttt\",\t\"t̚t͈\" },\n\t[\"ᆮ-ᄅ\"] \t = {\
      \ \"ᆫᄂ\",\t\"nn\",\t\"dl\",\t\"nn\",\t\"tl\",\t\"nn\" },\n\t[\"ᆮ-ᄆ\"] \t = { \"ᆫᄆ\",\t\"nm\",\t\"dm\",\t\"nm\",\t\"tm\",\t\"nm\" },\n\t[\"ᆮ-ᄇ\"] \t = { \"ᆮᄈ\",\t\"tb\",\t\"db\",\t\"tp\",\t\"tqp\",\t\"t̚p͈\" },\n\t[\"ᆮ-ᄈ\"] \t = { \"ᆮᄈ\",\t\"tpp\",\t\"\
      dpp\",\t\"tpp\",\t\"tpp\",\t\"t̚p͈\" },\n\t[\"ᆮ-ᄉ\"] \t = { \"ᆮᄊ\",\t\"ts\",\t\"ds\",\t\"ss\",\t\"tqs\",\t\"t̚s͈\" },\n\t[\"ᆮ-ᄊ\"] \t = { \"ᆮᄊ\",\t\"tss\",\t\"dss\",\t\"ss\",\t\"tss\",\t\"t̚s͈\" },\n\t[\"ᆮ-ᄋ\"] \t = { \"ᄃ\",\t\"d\",\t\"d-\",\t\"d\",\t\"\
      t.\",\t\"d\" },\n\t[\"ᆮ-ᄌ\"] \t = { \"ᆮᄍ\",\t\"tj\",\t\"dj\",\t\"tch\",\t\"tqc\",\t\"t̚t͡ɕ͈\" },\n\t[\"ᆮ-ᄍ\"] \t = { \"ᆮᄍ\",\t\"tjj\",\t\"djj\",\t\"tch\",\t\"tcc\",\t\"t̚t͡ɕ͈\" },\n\t[\"ᆮ-ᄎ\"] \t = { \"ᆮᄎ\",\t\"tch\",\t\"dch\",\t\"tch'\",\t\"tch\",\t\"\
      t̚t͡ɕʰ\" },\n\t[\"ᆮ-ᄏ\"] \t = { \"ᆮᄏ\",\t\"tk\",\t\"dk\",\t\"tk'\",\t\"tkh\",\t\"t̚kʰ\" },\n\t[\"ᆮ-ᄐ\"] \t = { \"ᆮᄐ\",\t\"tt\",\t\"dt\",\t\"tt'\",\t\"tth\",\t\"t̚tʰ\" },\n\t[\"ᆮ-ᄑ\"] \t = { \"ᆮᄑ\",\t\"tp\",\t\"dp\",\t\"tp'\",\t\"tph\",\t\"t̚pʰ\" },\n\t\
      [\"ᆮ-ᄒ\"] \t = { \"ᄐ\",\t\"th\",\t\"d-h\",\t\"th\",\t\"t.h\",\t\"tʰ\" },\n\t[\"ᆯ-Ø\"] \t = { \"ᆯ\",\t\"l\",\t\"l\",\t\"l\",\t\"l\",\t\"ɭ\" },\n\t[\"ᆯ-ᄀ\"] \t = { \"ᆯᄀ\",\t\"lg\",\t\"lg\",\t\"lg\",\t\"lk\",\t\"ɭɡ\" },\n\t[\"ᆯ-ᄁ\"] \t = { \"ᆯᄁ\",\t\"lkk\"\
      ,\t\"lkk\",\t\"lkk\",\t\"lkk\",\t\"ɭk͈\" },\n\t[\"ᆯ-ᄂ\"] \t = { \"ᆯᄅ\",\t\"ll\",\t\"ln\",\t\"ll\",\t\"ln\",\t\"ɭɭ\" },\n\t[\"ᆯ-ᄃ\"] \t = { \"ᆯᄃ\",\t\"ld\",\t\"ld\",\t\"ld\",\t\"lt\",\t\"ɭd\" },\n\t[\"ᆯ-ᄄ\"] \t = { \"ᆯᄄ\",\t\"ltt\",\t\"ltt\",\t\"ltt\",\t\
      \"ltt\",\t\"ɭt͈\" },\n\t[\"ᆯ-ᄅ\"] \t = { \"ᆯᄅ\",\t\"ll\",\t\"ll\",\t\"ll\",\t\"ll\",\t\"ɭɭ\" },\n\t[\"ᆯ-ᄆ\"] \t = { \"ᆯᄆ\",\t\"lm\",\t\"lm\",\t\"lm\",\t\"lm\",\t\"ɭm\" },\n\t[\"ᆯ-ᄇ\"] \t = { \"ᆯᄇ\",\t\"lb\",\t\"lb\",\t\"lb\",\t\"lp\",\t\"ɭb\" },\n\t[\"\
      ᆯ-ᄈ\"] \t = { \"ᆯᄈ\",\t\"lpp\",\t\"lpp\",\t\"lpp\",\t\"lpp\",\t\"ɭp͈\" },\n\t[\"ᆯ-ᄉ\"] \t = { \"ᆯᄉ\",\t\"ls\",\t\"ls\",\t\"ls\",\t\"ls\",\t\"ɭsʰ\" },\n\t[\"ᆯ-ᄊ\"] \t = { \"ᆯᄊ\",\t\"lss\",\t\"lss\",\t\"lss\",\t\"lss\",\t\"ɭs͈\" },\n\t[\"ᆯ-ᄋ\"] \t = { \"\
      ᄅ\",\t\"r\",\t\"l-\",\t\"r\",\t\"l.\",\t\"ɾ\" },\n\t[\"ᆯ-ᄌ\"] \t = { \"ᆯᄌ\",\t\"lj\",\t\"lj\",\t\"lj\",\t\"lc\",\t\"ɭd͡ʑ\" },\n\t[\"ᆯ-ᄍ\"] \t = { \"ᆯᄍ\",\t\"ljj\",\t\"ljj\",\t\"ltch\",\t\"lcc\",\t\"ɭt͡ɕ͈\" },\n\t[\"ᆯ-ᄎ\"] \t = { \"ᆯᄎ\",\t\"lch\",\t\"lch\"\
      ,\t\"lch'\",\t\"lch\",\t\"ɭt͡ɕʰ\" },\n\t[\"ᆯ-ᄏ\"] \t = { \"ᆯᄏ\",\t\"lk\",\t\"lk\",\t\"lk'\",\t\"lkh\",\t\"ɭkʰ\" },\n\t[\"ᆯ-ᄐ\"] \t = { \"ᆯᄐ\",\t\"lt\",\t\"lt\",\t\"lt'\",\t\"lth\",\t\"ɭtʰ\" },\n\t[\"ᆯ-ᄑ\"] \t = { \"ᆯᄑ\",\t\"lp\",\t\"lp\",\t\"lp'\",\t\"\
      lph\",\t\"ɭpʰ\" },\n\t[\"ᆯ-ᄒ\"] \t = { \"ᆯᄒ\",\t\"lh\",\t\"l-h\",\t\"rh\",\t\"l.h\",\t\"ɾɦ\" },\n\t[\"ᆰ-Ø\"] \t = { \"ᆨ\",\t\"k\",\t\"lg\",\t\"k\",\t\"lk\",\t\"k̚\" },\n\t[\"ᆰ-ᄀ\"] \t = { \"ᆯᄁ\",\t\"lg\",\t\"lgg\",\t\"lg\",\t\"lkqk\",\t\"ɭk͈\" },\n\t[\"\
      ᆰ-ᄁ\"] \t = { \"ᆯᄁ\",\t\"lkk\",\t\"lgkk\",\t\"lkk\",\t\"lkkk\",\t\"ɭk͈\" },\n\t[\"ᆰ-ᄂ\"] \t = { \"ᆼᄂ\",\t\"ngn\",\t\"lgn\",\t\"ngn\",\t\"lkn\",\t\"ŋn\" },\n\t[\"ᆰ-ᄃ\"] \t = { \"ᆨᄄ\",\t\"kd\",\t\"lgd\",\t\"kt\",\t\"lkqt\",\t\"k̚t͈\" },\n\t[\"ᆰ-ᄄ\"] \t =\
      \ { \"ᆨᄄ\",\t\"ktt\",\t\"lgtt\",\t\"ktt\",\t\"lktt\",\t\"k̚t͈\" },\n\t[\"ᆰ-ᄅ\"] \t = { \"ᆼᄂ\",\t\"ngn\",\t\"lgl\",\t\"ngn\",\t\"lkl\",\t\"ŋn\" },\n\t[\"ᆰ-ᄆ\"] \t = { \"ᆼᄆ\",\t\"ngm\",\t\"lgm\",\t\"ngm\",\t\"lkm\",\t\"ŋm\" },\n\t[\"ᆰ-ᄇ\"] \t = { \"ᆨᄈ\"\
      ,\t\"kb\",\t\"lgb\",\t\"kp\",\t\"lkqp\",\t\"k̚p͈\" },\n\t[\"ᆰ-ᄈ\"] \t = { \"ᆨᄈ\",\t\"kpp\",\t\"lgpp\",\t\"kpp\",\t\"lkpp\",\t\"k̚p͈\" },\n\t[\"ᆰ-ᄉ\"] \t = { \"ᆨᄊ\",\t\"ks\",\t\"lgs\",\t\"ks\",\t\"lkqs\",\t\"ks͈\" },\n\t[\"ᆰ-ᄊ\"] \t = { \"ᆨᄊ\",\t\"kss\"\
      ,\t\"lgss\",\t\"kss\",\t\"lkss\",\t\"ks͈\" },\n\t[\"ᆰ-ᄋ\"] \t = { \"ᆯᄀ\",\t\"lg\",\t\"lg-\",\t\"lg\",\t\"lk.\",\t\"ɭɡ\" },\n\t[\"ᆰ-ᄌ\"] \t = { \"ᆨᄍ\",\t\"kj\",\t\"lgj\",\t\"kch\",\t\"lkqc\",\t\"k̚t͡ɕ͈\" },\n\t[\"ᆰ-ᄍ\"] \t = { \"ᆨᄍ\",\t\"kjj\",\t\"lgjj\"\
      ,\t\"ktch\",\t\"lkcc\",\t\"k̚t͡ɕ͈\" },\n\t[\"ᆰ-ᄎ\"] \t = { \"ᆨᄎ\",\t\"kch\",\t\"lgch\",\t\"kch'\",\t\"lkch\",\t\"k̚t͡ɕʰ\" },\n\t[\"ᆰ-ᄏ\"] \t = { \"ᆯᄏ\",\t\"lk\",\t\"lgk\",\t\"lk'\",\t\"lkkh\",\t\"ɭkʰ\" },\n\t[\"ᆰ-ᄐ\"] \t = { \"ᆨᄐ\",\t\"kt\",\t\"lgt\",\t\
      \"kt'\",\t\"lkth\",\t\"k̚tʰ\" },\n\t[\"ᆰ-ᄑ\"] \t = { \"ᆨᄑ\",\t\"kp\",\t\"lgp\",\t\"kp'\",\t\"lkph\",\t\"k̚pʰ\" },\n\t[\"ᆰ-ᄒ\"] \t = { \"ᆯᄏ\",\t\"lk\",\t\"lg-h\",\t\"lk'\",\t\"lk.h\",\t\"ɭkʰ\" },\n\t[\"ᆱ-Ø\"] \t = { \"ᆷ\",\t\"m\",\t\"lm\",\t\"m\",\t\"lm\"\
      ,\t\"m\" },\n\t[\"ᆱ-ᄀ\"] \t = { \"ᆷᄀ\",\t\"mg\",\t\"lmg\",\t\"mg\",\t\"lmqk\",\t\"mɡ\" },\n\t[\"ᆱ-ᄁ\"] \t = { \"ᆷᄁ\",\t\"mkk\",\t\"lmkk\",\t\"mkk\",\t\"lmkk\",\t\"mk͈\" },\n\t[\"ᆱ-ᄂ\"] \t = { \"ᆷᄂ\",\t\"mn\",\t\"lmn\",\t\"mn\",\t\"lmn\",\t\"mn\" },\n\t\
      [\"ᆱ-ᄃ\"] \t = { \"ᆷᄄ\",\t\"md\",\t\"lmd\",\t\"mt\",\t\"lmt\",\t\"mt͈\" },\n\t[\"ᆱ-ᄄ\"] \t = { \"ᆷᄄ\",\t\"mtt\",\t\"lmtt\",\t\"mtt\",\t\"lmtt\",\t\"mt͈\" },\n\t[\"ᆱ-ᄅ\"] \t = { \"ᆷᄂ\",\t\"mn\",\t\"lml\",\t\"mn\",\t\"lml\",\t\"mn\" },\n\t[\"ᆱ-ᄆ\"] \t =\
      \ { \"ᆷᄆ\",\t\"mm\",\t\"lmm\",\t\"mm\",\t\"lmm\",\t\"mm\" },\n\t[\"ᆱ-ᄇ\"] \t = { \"ᆷᄇ\",\t\"mb\",\t\"lmb\",\t\"mb\",\t\"lmqp\",\t\"mb\" },\n\t[\"ᆱ-ᄈ\"] \t = { \"ᆷᄈ\",\t\"mpp\",\t\"lmpp\",\t\"mpp\",\t\"lmpp\",\t\"mp͈\" },\n\t[\"ᆱ-ᄉ\"] \t = { \"ᆷᄉ\",\t\"\
      ms\",\t\"lms\",\t\"ms\",\t\"lmqs\",\t\"msʰ\" },\n\t[\"ᆱ-ᄊ\"] \t = { \"ᆷᄊ\",\t\"mss\",\t\"lmss\",\t\"mss\",\t\"lmss\",\t\"ms͈\" },\n\t[\"ᆱ-ᄋ\"] \t = { \"ᆯᄆ\",\t\"lm\",\t\"lm-\",\t\"lm\",\t\"lm.\",\t\"ɭm\" },\n\t[\"ᆱ-ᄌ\"] \t = { \"ᆷᄌ\",\t\"mj\",\t\"lmj\"\
      ,\t\"mj\",\t\"lmqc\",\t\"md͡ʑ\" },\n\t[\"ᆱ-ᄍ\"] \t = { \"ᆷᄍ\",\t\"mjj\",\t\"lmjj\",\t\"mtch\",\t\"lmcc\",\t\"mt͡ɕ͈\" },\n\t[\"ᆱ-ᄎ\"] \t = { \"ᆷᄎ\",\t\"mch\",\t\"lmch\",\t\"mch'\",\t\"lmch\",\t\"mt͡ɕʰ\" },\n\t[\"ᆱ-ᄏ\"] \t = { \"ᆷᄏ\",\t\"mk\",\t\"lmk\",\t\
      \"mk'\",\t\"lmkh\",\t\"mkʰ\" },\n\t[\"ᆱ-ᄐ\"] \t = { \"ᆷᄐ\",\t\"mt\",\t\"lmt\",\t\"mt'\",\t\"lmth\",\t\"mtʰ\" },\n\t[\"ᆱ-ᄑ\"] \t = { \"ᆷᄑ\",\t\"mp\",\t\"lmp\",\t\"mp'\",\t\"lmph\",\t\"mpʰ\" },\n\t[\"ᆱ-ᄒ\"] \t = { \"ᆯᄒ\",\t\"mh\",\t\"lm-h\",\t\"mh\",\t\"\
      lm.h\",\t\"ɾɦ\" },\n\t[\"ᆲ-Ø\"] \t = { \"ᆯ\",\t\"l\",\t\"lb\",\t\"l\",\t\"lp\",\t\"ɭ\" },\n\t[\"ᆲ-ᄀ\"] \t = { \"ᆯᄁ\",\t\"lg\",\t\"lbg\",\t\"lk\",\t\"lpqk\",\t\"ɭk͈\" },\n\t[\"ᆲ-ᄁ\"] \t = { \"ᆯᄁ\",\t\"lkk\",\t\"lbkk\",\t\"lkk\",\t\"lpkk\",\t\"ɭk͈\" },\n\
      \t[\"ᆲ-ᄂ\"] \t = { \"ᆯᄅ\",\t\"ll\",\t\"lbn\",\t\"ll\",\t\"lpn\",\t\"ɭɭ\" },\n\t[\"ᆲ-ᄃ\"] \t = { \"ᆯᄄ\",\t\"ld\",\t\"lbd\",\t\"lt\",\t\"lpqt\",\t\"ɭt͈\" },\n\t[\"ᆲ-ᄄ\"] \t = { \"ᆯᄄ\",\t\"ltt\",\t\"lbtt\",\t\"ltt\",\t\"lptt\",\t\"ɭt͈\" },\n\t[\"ᆲ-ᄅ\"] \t\
      \ = { \"ᆯᄅ\",\t\"ll\",\t\"lbl\",\t\"ll\",\t\"lpl\",\t\"ɭɭ\" },\n\t[\"ᆲ-ᄆ\"] \t = { \"ᆯᄆ\",\t\"lm\",\t\"lbm\",\t\"lm\",\t\"lpm\",\t\"ɭm\" },\n\t[\"ᆲ-ᄇ\"] \t = { \"ᆯᄈ\",\t\"lb\",\t\"lbb\",\t\"lp\",\t\"lpqp\",\t\"ɭp͈\" },\n\t[\"ᆲ-ᄈ\"] \t = { \"ᆯᄈ\",\t\"lpp\"\
      ,\t\"lbpp\",\t\"lpp\",\t\"lppp\",\t\"ɭp͈\" },\n\t[\"ᆲ-ᄉ\"] \t = { \"ᆯᄊ\",\t\"ls\",\t\"lbs\",\t\"ls\",\t\"lpqs\",\t\"ɭs͈\" },\n\t[\"ᆲ-ᄊ\"] \t = { \"ᆯᄊ\",\t\"lss\",\t\"lbss\",\t\"lss\",\t\"lpss\",\t\"ɭs͈\" },\n\t[\"ᆲ-ᄋ\"] \t = { \"ᆯᄇ\",\t\"lb\",\t\"lb-\"\
      ,\t\"lb\",\t\"lp.\",\t\"ɭb\" },\n\t[\"ᆲ-ᄌ\"] \t = { \"ᆯᄍ\",\t\"lj\",\t\"lbj\",\t\"lch\",\t\"lpqc\",\t\"ɭt͡ɕ͈\" },\n\t[\"ᆲ-ᄍ\"] \t = { \"ᆯᄍ\",\t\"ljj\",\t\"lbjj\",\t\"ltch\",\t\"lpcc\",\t\"ɭt͡ɕ͈\" },\n\t[\"ᆲ-ᄎ\"] \t = { \"ᆯᄎ\",\t\"lch\",\t\"lbch\",\t\"\
      lch'\",\t\"lpch\",\t\"ɭt͡ɕʰ\" },\n\t[\"ᆲ-ᄏ\"] \t = { \"ᆯᄏ\",\t\"lk\",\t\"lbk\",\t\"lk'\",\t\"lpkh\",\t\"ɭkʰ\" },\n\t[\"ᆲ-ᄐ\"] \t = { \"ᆯᄐ\",\t\"lt\",\t\"lbt\",\t\"lt'\",\t\"lpth\",\t\"ɭtʰ\" },\n\t[\"ᆲ-ᄑ\"] \t = { \"ᆯᄑ\",\t\"lp\",\t\"lbp\",\t\"lp'\",\t\"\
      lpph\",\t\"ɭpʰ\" },\n\t[\"ᆲ-ᄒ\"] \t = { \"ᆯᄑ\",\t\"lph\",\t\"lb-h\",\t\"lp'\",\t\"lp.h\",\t\"ɭpʰ\" },\n\t[\"ᆳ-Ø\"] \t = { \"ᆯ\",\t\"l\",\t\"ls\",\t\"l\",\t\"ls\",\t\"ɭ\" },\n\t[\"ᆳ-ᄀ\"] \t = { \"ᆯᄀ\",\t\"lg\",\t\"lsg\",\t\"lg\",\t\"lsk\",\t\"ɭɡ\" },\n\t\
      [\"ᆳ-ᄁ\"] \t = { \"ᆯᄁ\",\t\"lkk\",\t\"lskk\",\t\"lkk\",\t\"lskk\",\t\"ɭk͈\" },\n\t[\"ᆳ-ᄂ\"] \t = { \"ᆯᄂ\",\t\"ln\",\t\"lsn\",\t\"ln\",\t\"lsn\",\t\"ɭn\" },\n\t[\"ᆳ-ᄃ\"] \t = { \"ᆯᄃ\",\t\"ld\",\t\"lsd\",\t\"ld\",\t\"lst\",\t\"ɭd\" },\n\t[\"ᆳ-ᄄ\"] \t = {\
      \ \"ᆯᄄ\",\t\"ltt\",\t\"lstt\",\t\"ltt\",\t\"lstt\",\t\"ɭt͈\" },\n\t[\"ᆳ-ᄅ\"] \t = { \"ᆯᄂ\",\t\"ln\",\t\"lsl\",\t\"ln\",\t\"lsl\",\t\"ɭn\" },\n\t[\"ᆳ-ᄆ\"] \t = { \"ᆯᄆ\",\t\"lm\",\t\"lsm\",\t\"lm\",\t\"lsm\",\t\"ɭm\" },\n\t[\"ᆳ-ᄇ\"] \t = { \"ᆯᄇ\",\t\"lb\"\
      ,\t\"lsb\",\t\"lb\",\t\"lsp\",\t\"ɭb\" },\n\t[\"ᆳ-ᄈ\"] \t = { \"ᆯᄈ\",\t\"lpp\",\t\"lspp\",\t\"lpp\",\t\"lspp\",\t\"ɭp͈\" },\n\t[\"ᆳ-ᄉ\"] \t = { \"ᆯᄉ\",\t\"ls\",\t\"lss\",\t\"ls\",\t\"lss\",\t\"ɭsʰ\" },\n\t[\"ᆳ-ᄊ\"] \t = { \"ᆯᄊ\",\t\"lss\",\t\"lsss\",\t\
      \"lss\",\t\"lsss\",\t\"ɭs͈\" },\n\t[\"ᆳ-ᄋ\"] \t = { \"ᆯᄊ\",\t\"ls\",\t\"ls-\",\t\"ls\",\t\"ls.\",\t\"ɭs͈\" },\n\t[\"ᆳ-ᄌ\"] \t = { \"ᆯᄌ\",\t\"lj\",\t\"lsj\",\t\"lj\",\t\"lsc\",\t\"ɭd͡ʑ\" },\n\t[\"ᆳ-ᄍ\"] \t = { \"ᆯᄍ\",\t\"ljj\",\t\"lsjj\",\t\"ltch\",\t\"\
      lscc\",\t\"ɭt͡ɕ͈\" },\n\t[\"ᆳ-ᄎ\"] \t = { \"ᆯᄎ\",\t\"lch\",\t\"lsch\",\t\"lch'\",\t\"lsch\",\t\"ɭt͡ɕʰ\" },\n\t[\"ᆳ-ᄏ\"] \t = { \"ᆯᄏ\",\t\"lk\",\t\"lsk\",\t\"lk'\",\t\"lskh\",\t\"ɭkʰ\" },\n\t[\"ᆳ-ᄐ\"] \t = { \"ᆯᄐ\",\t\"lt\",\t\"lst\",\t\"lt'\",\t\"lsth\"\
      ,\t\"ɭtʰ\" },\n\t[\"ᆳ-ᄑ\"] \t = { \"ᆯᄑ\",\t\"lp\",\t\"lsp\",\t\"lp'\",\t\"lsph\",\t\"ɭpʰ\" },\n\t[\"ᆳ-ᄒ\"] \t = { \"ᆯᄊ\",\t\"lh\",\t\"lsh\",\t\"lh\",\t\"lsh\",\t\"ɭs͈\" },\n\t[\"ᆴ-Ø\"] \t = { \"ᆯ\",\t\"l\",\t\"lt\",\t\"l\",\t\"lth\",\t\"ɭ\" },\n\t[\"ᆴ\
      -ᄀ\"] \t = { \"ᆯᄁ\",\t\"lg\",\t\"ltg\",\t\"lk\",\t\"lthqk\",\t\"ɭk͈\" },\n\t[\"ᆴ-ᄁ\"] \t = { \"ᆯᄁ\",\t\"lkk\",\t\"ltkk\",\t\"lkk\",\t\"lthkk\",\t\"ɭk͈\" },\n\t[\"ᆴ-ᄂ\"] \t = { \"ᆯᄅ\",\t\"ll\",\t\"ltn\",\t\"ll\",\t\"lthn\",\t\"ɭɭ\" },\n\t[\"ᆴ-ᄃ\"] \t =\
      \ { \"ᆯᄄ\",\t\"ld\",\t\"ltd\",\t\"lt\",\t\"lthqt\",\t\"ɭt͈\" },\n\t[\"ᆴ-ᄄ\"] \t = { \"ᆯᄄ\",\t\"ltt\",\t\"lttt\",\t\"ltt\",\t\"lthtt\",\t\"ɭt͈\" },\n\t[\"ᆴ-ᄅ\"] \t = { \"ᆯᄅ\",\t\"ll\",\t\"ltl\",\t\"ll\",\t\"lthl\",\t\"ɭɭ\" },\n\t[\"ᆴ-ᄆ\"] \t = { \"ᆯᄆ\"\
      ,\t\"lm\",\t\"ltm\",\t\"lm\",\t\"lthm\",\t\"ɭm\" },\n\t[\"ᆴ-ᄇ\"] \t = { \"ᆯᄈ\",\t\"lb\",\t\"ltb\",\t\"lp\",\t\"lthqp\",\t\"ɭp͈\" },\n\t[\"ᆴ-ᄈ\"] \t = { \"ᆯᄈ\",\t\"lpp\",\t\"ltpp\",\t\"lpp\",\t\"lthpp\",\t\"ɭp͈\" },\n\t[\"ᆴ-ᄉ\"] \t = { \"ᆯᄊ\",\t\"ls\",\t\
      \"lts\",\t\"ls\",\t\"lthqs\",\t\"ɭs͈\" },\n\t[\"ᆴ-ᄊ\"] \t = { \"ᆯᄊ\",\t\"lss\",\t\"ltss\",\t\"lss\",\t\"lthss\",\t\"ɭs͈\" },\n\t[\"ᆴ-ᄋ\"] \t = { \"ᆯᄐ\",\t\"lt\",\t\"lt-\",\t\"lt\",\t\"lth.\",\t\"ɭtʰ\" },\n\t[\"ᆴ-ᄌ\"] \t = { \"ᆯᄍ\",\t\"lj\",\t\"ltj\",\t\
      \"lch\",\t\"lthqc\",\t\"ɭt͡ɕ͈\" },\n\t[\"ᆴ-ᄍ\"] \t = { \"ᆯᄍ\",\t\"ljj\",\t\"ltjj\",\t\"ltch\",\t\"lthcc\",\t\"ɭt͡ɕ͈\" },\n\t[\"ᆴ-ᄎ\"] \t = { \"ᆯᄎ\",\t\"lch\",\t\"ltch\",\t\"lch'\",\t\"lthch\",\t\"ɭt͡ɕʰ\" },\n\t[\"ᆴ-ᄏ\"] \t = { \"ᆯᄏ\",\t\"lk\",\t\"ltk\"\
      ,\t\"lk'\",\t\"lthkh\",\t\"ɭkʰ\" },\n\t[\"ᆴ-ᄐ\"] \t = { \"ᆯᄐ\",\t\"lt\",\t\"ltt\",\t\"lt'\",\t\"lthth\",\t\"ɭtʰ\" },\n\t[\"ᆴ-ᄑ\"] \t = { \"ᆯᄑ\",\t\"lp\",\t\"ltp\",\t\"lp'\",\t\"lthph\",\t\"ɭpʰ\" },\n\t[\"ᆴ-ᄒ\"] \t = { \"ᆯᄐ\",\t\"lh\",\t\"lt-h\",\t\"lh\"\
      ,\t\"lth.h\",\t\"ɭtʰ\" },\n\t[\"ᆵ-Ø\"] \t = { \"ᆸ\",\t\"p\",\t\"lp\",\t\"p\",\t\"lph\",\t\"p̚\" },\n\t[\"ᆵ-ᄀ\"] \t = { \"ᆸᄁ\",\t\"pg\",\t\"lpg\",\t\"pk\",\t\"lphqk\",\t\"p̚k͈\" },\n\t[\"ᆵ-ᄁ\"] \t = { \"ᆸᄁ\",\t\"pkk\",\t\"lpkk\",\t\"pkk\",\t\"lphkk\",\t\
      \"p̚k͈\" },\n\t[\"ᆵ-ᄂ\"] \t = { \"ᆷᄂ\",\t\"mn\",\t\"lpn\",\t\"mn\",\t\"lphn\",\t\"mn\" },\n\t[\"ᆵ-ᄃ\"] \t = { \"ᆸᄄ\",\t\"pd\",\t\"lpd\",\t\"pt\",\t\"lphqt\",\t\"p̚t͈\" },\n\t[\"ᆵ-ᄄ\"] \t = { \"ᆸᄄ\",\t\"ptt\",\t\"lptt\",\t\"ptt\",\t\"lphtt\",\t\"p̚t͈\"\
      \ },\n\t[\"ᆵ-ᄅ\"] \t = { \"ᆷᄂ\",\t\"mn\",\t\"lpl\",\t\"mn\",\t\"lphl\",\t\"mn\" },\n\t[\"ᆵ-ᄆ\"] \t = { \"ᆷᄆ\",\t\"mm\",\t\"lpm\",\t\"mm\",\t\"lphm\",\t\"mm\" },\n\t[\"ᆵ-ᄇ\"] \t = { \"ᆸᄈ\",\t\"pb\",\t\"lpb\",\t\"pp\",\t\"lphqp\",\t\"p̚p͈\" },\n\t[\"ᆵ-ᄈ\"\
      ] \t = { \"ᆸᄈ\",\t\"ppp\",\t\"lppp\",\t\"pp\",\t\"lphpp\",\t\"p̚p͈\" },\n\t[\"ᆵ-ᄉ\"] \t = { \"ᆸᄊ\",\t\"ps\",\t\"lps\",\t\"ps\",\t\"lphqs\",\t\"ps͈\" },\n\t[\"ᆵ-ᄊ\"] \t = { \"ᆸᄊ\",\t\"pss\",\t\"lpss\",\t\"pss\",\t\"lphss\",\t\"ps͈\" },\n\t[\"ᆵ-ᄋ\"] \t =\
      \ { \"ᆯᄑ\",\t\"lp\",\t\"lp-\",\t\"lp\",\t\"lph.\",\t\"ɭpʰ\" },\n\t[\"ᆵ-ᄌ\"] \t = { \"ᆸᄍ\",\t\"pj\",\t\"lpj\",\t\"pch\",\t\"lphqc\",\t\"p̚t͡ɕ͈\" },\n\t[\"ᆵ-ᄍ\"] \t = { \"ᆸᄍ\",\t\"pjj\",\t\"lpjj\",\t\"ptch\",\t\"lphcc\",\t\"p̚t͡ɕ͈\" },\n\t[\"ᆵ-ᄎ\"] \t =\
      \ { \"ᆸᄎ\",\t\"pch\",\t\"lpch\",\t\"pch'\",\t\"lphch\",\t\"p̚t͡ɕʰ\" },\n\t[\"ᆵ-ᄏ\"] \t = { \"ᆸᄏ\",\t\"pk\",\t\"lpk\",\t\"pk'\",\t\"lphkh\",\t\"p̚kʰ\" },\n\t[\"ᆵ-ᄐ\"] \t = { \"ᆸᄐ\",\t\"pt\",\t\"lpt\",\t\"pt'\",\t\"lphth\",\t\"p̚tʰ\" },\n\t[\"ᆵ-ᄑ\"] \t =\
      \ { \"ᆸᄑ\",\t\"pp\",\t\"lpp\",\t\"pp'\",\t\"lphph\",\t\"p̚pʰ\" },\n\t[\"ᆵ-ᄒ\"] \t = { \"ᆯᄑ\",\t\"ph\",\t\"lp-h\",\t\"ph\",\t\"lph.h\",\t\"ɭpʰ\" },\n\t[\"ᆶ-Ø\"] \t = { \"ᆯ\",\t\"l\",\t\"lh\",\t\"l\",\t\"lh\",\t\"ɭ\" },\n\t[\"ᆶ-ᄀ\"] \t = { \"ᆯᄏ\",\t\"lk\"\
      ,\t\"lhg\",\t\"lk'\",\t\"lhk\",\t\"ɭkʰ\" },\n\t[\"ᆶ-ᄁ\"] \t = { \"ᆯᄏ\",\t\"lk\",\t\"lhkk\",\t\"lk'\",\t\"lhkk\",\t\"ɭkʰ\" },\n\t[\"ᆶ-ᄂ\"] \t = { \"ᆯᄅ\",\t\"ll\",\t\"lhn\",\t\"ll\",\t\"lhn\",\t\"ɭɭ\" },\n\t[\"ᆶ-ᄃ\"] \t = { \"ᆯᄐ\",\t\"lt\",\t\"lhd\",\t\"\
      lt'\",\t\"lht\",\t\"ɭtʰ\" },\n\t[\"ᆶ-ᄄ\"] \t = { \"ᆯᄐ\",\t\"lt\",\t\"lhtt\",\t\"lt'\",\t\"lhtt\",\t\"ɭtʰ\" },\n\t[\"ᆶ-ᄅ\"] \t = { \"ᆯᄅ\",\t\"ll\",\t\"lhl\",\t\"ll\",\t\"lhl\",\t\"ɭɭ\" },\n\t[\"ᆶ-ᄆ\"] \t = { \"ᆯᄆ\",\t\"lm\",\t\"lhm\",\t\"lm\",\t\"lhm\"\
      ,\t\"ɭm\" },\n\t[\"ᆶ-ᄇ\"] \t = { \"ᆯᄑ\",\t\"lp\",\t\"lhb\",\t\"lp'\",\t\"lhp\",\t\"ɭpʰ\" },\n\t[\"ᆶ-ᄈ\"] \t = { \"ᆯᄑ\",\t\"lp\",\t\"lhpp\",\t\"lp'\",\t\"lhpp\",\t\"ɭpʰ\" },\n\t[\"ᆶ-ᄉ\"] \t = { \"ᆯᄊ\",\t\"ls\",\t\"lhs\",\t\"lss\",\t\"lhs\",\t\"ɭs͈\" },\n\
      \t[\"ᆶ-ᄊ\"] \t = { \"ᆯᄊ\",\t\"lss\",\t\"lhss\",\t\"lss\",\t\"lhss\",\t\"ɭs͈\" },\n\t[\"ᆶ-ᄋ\"] \t = { \"ᄅ\",\t\"r\",\t\"lh-\",\t\"r\",\t\"lh.\",\t\"ɾ\" },\n\t[\"ᆶ-ᄌ\"] \t = { \"ᆯᄎ\",\t\"lch\",\t\"lhj\",\t\"lch'\",\t\"lhc\",\t\"ɭt͡ɕʰ\" },\n\t[\"ᆶ-ᄍ\"] \t\
      \ = { \"ᆯᄎ\",\t\"lch\",\t\"lhjj\",\t\"lch'\",\t\"lhcc\",\t\"ɭt͡ɕʰ\" },\n\t[\"ᆶ-ᄎ\"] \t = { \"ᆯᄎ\",\t\"lch\",\t\"lhch\",\t\"lch'\",\t\"lhch\",\t\"ɭt͡ɕʰ\" },\n\t[\"ᆶ-ᄏ\"] \t = { \"ᆯᄏ\",\t\"lk\",\t\"lhk\",\t\"lk'\",\t\"lhkh\",\t\"ɭkʰ\" },\n\t[\"ᆶ-ᄐ\"] \t\
      \ = { \"ᆯᄐ\",\t\"lt\",\t\"lht\",\t\"lt'\",\t\"lhth\",\t\"ɭtʰ\" },\n\t[\"ᆶ-ᄑ\"] \t = { \"ᆯᄑ\",\t\"lp\",\t\"lhp\",\t\"lp'\",\t\"lhph\",\t\"ɭpʰ\" },\n\t[\"ᆶ-ᄒ\"] \t = { \"ᆯᄒ\",\t\"lh\",\t\"lhh\",\t\"lh\",\t\"lhh\",\t\"ɾɦ\" },\n\t[\"ᆷ-Ø\"] \t = { \"ᆷ\",\t\"\
      m\",\t\"m\",\t\"m\",\t\"m\",\t\"m\" },\n\t[\"ᆷ-ᄀ\"] \t = { \"ᆷᄀ\",\t\"mg\",\t\"mg\",\t\"mg\",\t\"mk\",\t\"mɡ\" },\n\t[\"ᆷ-ᄁ\"] \t = { \"ᆷᄁ\",\t\"mkk\",\t\"mkk\",\t\"mkk\",\t\"mkk\",\t\"mk͈\" },\n\t[\"ᆷ-ᄂ\"] \t = { \"ᆷᄂ\",\t\"mn\",\t\"mn\",\t\"mn\",\t\"\
      mn\",\t\"mn\" },\n\t[\"ᆷ-ᄃ\"] \t = { \"ᆷᄃ\",\t\"md\",\t\"md\",\t\"md\",\t\"mt\",\t\"md\" },\n\t[\"ᆷ-ᄄ\"] \t = { \"ᆷᄄ\",\t\"mtt\",\t\"mtt\",\t\"mtt\",\t\"mtt\",\t\"mt͈\" },\n\t[\"ᆷ-ᄅ\"] \t = { \"ᆷᄂ\",\t\"mn\",\t\"ml\",\t\"mn\",\t\"ml\",\t\"mn\" },\n\t[\"\
      ᆷ-ᄆ\"] \t = { \"ᆷᄆ\",\t\"mm\",\t\"mm\",\t\"mm\",\t\"mm\",\t\"mm\" },\n\t[\"ᆷ-ᄇ\"] \t = { \"ᆷᄇ\",\t\"mb\",\t\"mb\",\t\"mb\",\t\"mp\",\t\"mb\" },\n\t[\"ᆷ-ᄈ\"] \t = { \"ᆷᄈ\",\t\"mpp\",\t\"mpp\",\t\"mpp\",\t\"mpp\",\t\"mp͈\" },\n\t[\"ᆷ-ᄉ\"] \t = { \"ᆷᄉ\",\t\
      \"ms\",\t\"ms\",\t\"ms\",\t\"ms\",\t\"msʰ\" },\n\t[\"ᆷ-ᄊ\"] \t = { \"ᆷᄊ\",\t\"mss\",\t\"mss\",\t\"mss\",\t\"mss\",\t\"ms͈\" },\n\t[\"ᆷ-ᄋ\"] \t = { \"ᄆ\",\t\"m\",\t\"m-\",\t\"m\",\t\"m.\",\t\"m\" },\n\t[\"ᆷ-ᄌ\"] \t = { \"ᆷᄌ\",\t\"mj\",\t\"mj\",\t\"mj\"\
      ,\t\"mc\",\t\"md͡ʑ\" },\n\t[\"ᆷ-ᄍ\"] \t = { \"ᆷᄍ\",\t\"mjj\",\t\"mjj\",\t\"mtch\",\t\"mcc\",\t\"mt͡ɕ͈\" },\n\t[\"ᆷ-ᄎ\"] \t = { \"ᆷᄎ\",\t\"mch\",\t\"mch\",\t\"mch'\",\t\"mch\",\t\"mt͡ɕʰ\" },\n\t[\"ᆷ-ᄏ\"] \t = { \"ᆷᄏ\",\t\"mk\",\t\"mk\",\t\"mk'\",\t\"mkh\"\
      ,\t\"mkʰ\" },\n\t[\"ᆷ-ᄐ\"] \t = { \"ᆷᄐ\",\t\"mt\",\t\"mt\",\t\"mt'\",\t\"mth\",\t\"mtʰ\" },\n\t[\"ᆷ-ᄑ\"] \t = { \"ᆷᄑ\",\t\"mp\",\t\"mp\",\t\"mp'\",\t\"mph\",\t\"mpʰ\" },\n\t[\"ᆷ-ᄒ\"] \t = { \"ᆷᄒ\",\t\"mh\",\t\"mh\",\t\"mh\",\t\"mh\",\t\"mɦ\" },\n\t[\"ᆸ\
      -Ø\"] \t = { \"ᆸ\",\t\"p\",\t\"b\",\t\"p\",\t\"p\",\t\"p̚\" },\n\t[\"ᆸ-ᄀ\"] \t = { \"ᆸᄁ\",\t\"pg\",\t\"bg\",\t\"pk\",\t\"pqk\",\t\"p̚k͈\" },\n\t[\"ᆸ-ᄁ\"] \t = { \"ᆸᄁ\",\t\"pkk\",\t\"bkk\",\t\"pkk\",\t\"pkk\",\t\"p̚k͈\" },\n\t[\"ᆸ-ᄂ\"] \t = { \"ᆷᄂ\",\t\"\
      mn\",\t\"bn\",\t\"mn\",\t\"pn\",\t\"mn\" },\n\t[\"ᆸ-ᄃ\"] \t = { \"ᆸᄄ\",\t\"pd\",\t\"bd\",\t\"pt\",\t\"pqt\",\t\"p̚t͈\" },\n\t[\"ᆸ-ᄄ\"] \t = { \"ᆸᄄ\",\t\"ptt\",\t\"btt\",\t\"ptt\",\t\"ptt\",\t\"p̚t͈\" },\n\t[\"ᆸ-ᄅ\"] \t = { \"ᆷᄂ\",\t\"mn\",\t\"bl\",\t\"\
      mn\",\t\"pl\",\t\"mn\" },\n\t[\"ᆸ-ᄆ\"] \t = { \"ᆷᄆ\",\t\"mm\",\t\"bm\",\t\"mm\",\t\"pm\",\t\"mm\" },\n\t[\"ᆸ-ᄇ\"] \t = { \"ᆸᄈ\",\t\"pb\",\t\"bb\",\t\"pp\",\t\"pqp\",\t\"p̚p͈\" },\n\t[\"ᆸ-ᄈ\"] \t = { \"ᆸᄈ\",\t\"ppp\",\t\"bpp\",\t\"pp\",\t\"ppp\",\t\"p̚\
      p͈\" },\n\t[\"ᆸ-ᄉ\"] \t = { \"ᆸᄊ\",\t\"ps\",\t\"bs\",\t\"ps\",\t\"pqs\",\t\"ps͈\" },\n\t[\"ᆸ-ᄊ\"] \t = { \"ᆸᄊ\",\t\"pss\",\t\"bss\",\t\"pss\",\t\"pss\",\t\"ps͈\" },\n\t[\"ᆸ-ᄋ\"] \t = { \"ᄇ\",\t\"b\",\t\"b-\",\t\"b\",\t\"p.\",\t\"b\" },\n\t[\"ᆸ-ᄌ\"] \t\
      \ = { \"ᆸᄍ\",\t\"pj\",\t\"bj\",\t\"pch\",\t\"pqc\",\t\"p̚t͡ɕ͈\" },\n\t[\"ᆸ-ᄍ\"] \t = { \"ᆸᄍ\",\t\"pjj\",\t\"bjj\",\t\"ptch\",\t\"pcc\",\t\"p̚t͡ɕ͈\" },\n\t[\"ᆸ-ᄎ\"] \t = { \"ᆸᄎ\",\t\"pch\",\t\"bch\",\t\"pch'\",\t\"pch\",\t\"p̚t͡ɕʰ\" },\n\t[\"ᆸ-ᄏ\"] \t =\
      \ { \"ᆸᄏ\",\t\"pk\",\t\"bk\",\t\"pk'\",\t\"pkh\",\t\"p̚kʰ\" },\n\t[\"ᆸ-ᄐ\"] \t = { \"ᆸᄐ\",\t\"pt\",\t\"bt\",\t\"pt'\",\t\"pth\",\t\"p̚tʰ\" },\n\t[\"ᆸ-ᄑ\"] \t = { \"ᆸᄑ\",\t\"pp\",\t\"bp\",\t\"pp'\",\t\"pph\",\t\"p̚pʰ\" },\n\t[\"ᆸ-ᄒ\"] \t = { \"ᄑ\",\t\"\
      ph\",\t\"b-h\",\t\"ph\",\t\"p.h\",\t\"pʰ\" },\n\t[\"ᆹ-Ø\"] \t = { \"ᆸ\",\t\"p\",\t\"bs\",\t\"p\",\t\"ps\",\t\"p̚\" },\n\t[\"ᆹ-ᄀ\"] \t = { \"ᆸᄁ\",\t\"pg\",\t\"bsg\",\t\"pk\",\t\"psqk\",\t\"p̚k͈\" },\n\t[\"ᆹ-ᄁ\"] \t = { \"ᆸᄁ\",\t\"pkk\",\t\"bskk\",\t\"pkk\"\
      ,\t\"pskk\",\t\"p̚k͈\" },\n\t[\"ᆹ-ᄂ\"] \t = { \"ᆷᄂ\",\t\"mn\",\t\"bsn\",\t\"mn\",\t\"psn\",\t\"mn\" },\n\t[\"ᆹ-ᄃ\"] \t = { \"ᆸᄄ\",\t\"pd\",\t\"bsd\",\t\"pt\",\t\"psqt\",\t\"p̚t͈\" },\n\t[\"ᆹ-ᄄ\"] \t = { \"ᆸᄄ\",\t\"ptt\",\t\"bstt\",\t\"ptt\",\t\"pstt\"\
      ,\t\"p̚t͈\" },\n\t[\"ᆹ-ᄅ\"] \t = { \"ᆷᄂ\",\t\"mn\",\t\"bsl\",\t\"mn\",\t\"psl\",\t\"mn\" },\n\t[\"ᆹ-ᄆ\"] \t = { \"ᆷᄆ\",\t\"mm\",\t\"bsm\",\t\"mm\",\t\"psm\",\t\"mm\" },\n\t[\"ᆹ-ᄇ\"] \t = { \"ᆸᄈ\",\t\"pb\",\t\"bsb\",\t\"pp\",\t\"psqp\",\t\"p̚p͈\" },\n\t\
      [\"ᆹ-ᄈ\"] \t = { \"ᆸᄈ\",\t\"ppp\",\t\"bspp\",\t\"pp\",\t\"pspp\",\t\"p̚p͈\" },\n\t[\"ᆹ-ᄉ\"] \t = { \"ᆸᄊ\",\t\"ps\",\t\"bss\",\t\"ps\",\t\"psqs\",\t\"ps͈\" },\n\t[\"ᆹ-ᄊ\"] \t = { \"ᆸᄊ\",\t\"pss\",\t\"bsss\",\t\"pss\",\t\"psss\",\t\"ps͈\" },\n\t[\"ᆹ-ᄋ\"\
      ] \t = { \"ᆸᄊ\",\t\"ps\",\t\"bs-\",\t\"ps\",\t\"ps.\",\t\"ps͈\" },\n\t[\"ᆹ-ᄌ\"] \t = { \"ᆸᄍ\",\t\"pj\",\t\"bsj\",\t\"pch\",\t\"psqc\",\t\"p̚t͡ɕ͈\" },\n\t[\"ᆹ-ᄍ\"] \t = { \"ᆸᄍ\",\t\"pjj\",\t\"bsjj\",\t\"ptch\",\t\"pscc\",\t\"p̚t͡ɕ͈\" },\n\t[\"ᆹ-ᄎ\"] \t\
      \ = { \"ᆸᄎ\",\t\"pch\",\t\"bsch\",\t\"pch'\",\t\"psch\",\t\"p̚t͡ɕʰ\" },\n\t[\"ᆹ-ᄏ\"] \t = { \"ᆸᄏ\",\t\"pk\",\t\"bsk\",\t\"pk'\",\t\"pskh\",\t\"p̚kʰ\" },\n\t[\"ᆹ-ᄐ\"] \t = { \"ᆸᄐ\",\t\"pt\",\t\"bst\",\t\"pt'\",\t\"psth\",\t\"p̚tʰ\" },\n\t[\"ᆹ-ᄑ\"] \t =\
      \ { \"ᆸᄑ\",\t\"pp\",\t\"bsp\",\t\"pp'\",\t\"psph\",\t\"p̚pʰ\" },\n\t[\"ᆹ-ᄒ\"] \t = { \"ᄑ\",\t\"ph\",\t\"bsh\",\t\"ph\",\t\"psh\",\t\"pʰ\" },\n\t[\"ᆺ-Ø\"] \t = { \"ᆮ\",\t\"t\",\t\"s\",\t\"t\",\t\"s\",\t\"t̚\" },\n\t[\"ᆺ-ᄀ\"] \t = { \"ᆮᄁ\",\t\"tg\",\t\"\
      sg\",\t\"tk\",\t\"sqk\",\t\"t̚k͈\" },\n\t[\"ᆺ-ᄁ\"] \t = { \"ᆮᄁ\",\t\"tkk\",\t\"skk\",\t\"tkk\",\t\"skk\",\t\"t̚k͈\" },\n\t[\"ᆺ-ᄂ\"] \t = { \"ᆫᄂ\",\t\"nn\",\t\"sn\",\t\"nn\",\t\"sn\",\t\"nn\" },\n\t[\"ᆺ-ᄃ\"] \t = { \"ᆮᄄ\",\t\"td\",\t\"sd\",\t\"tt\",\t\"\
      sqt\",\t\"t̚t͈\" },\n\t[\"ᆺ-ᄄ\"] \t = { \"ᆮᄄ\",\t\"ttt\",\t\"stt\",\t\"tt\",\t\"stt\",\t\"t̚t͈\" },\n\t[\"ᆺ-ᄅ\"] \t = { \"ᆫᄂ\",\t\"nn\",\t\"sl\",\t\"nn\",\t\"sl\",\t\"nn\" },\n\t[\"ᆺ-ᄆ\"] \t = { \"ᆫᄆ\",\t\"nm\",\t\"sm\",\t\"nm\",\t\"sm\",\t\"nm\" },\n\t\
      [\"ᆺ-ᄇ\"] \t = { \"ᆮᄈ\",\t\"tb\",\t\"sb\",\t\"tp\",\t\"sqp\",\t\"t̚p͈\" },\n\t[\"ᆺ-ᄈ\"] \t = { \"ᆮᄈ\",\t\"tpp\",\t\"spp\",\t\"tpp\",\t\"spp\",\t\"t̚p͈\" },\n\t[\"ᆺ-ᄉ\"] \t = { \"ᆮᄊ\",\t\"ts\",\t\"ss\",\t\"ss\",\t\"sqs\",\t\"t̚s͈\" },\n\t[\"ᆺ-ᄊ\"] \t =\
      \ { \"ᆮᄊ\",\t\"tss\",\t\"sss\",\t\"ss\",\t\"sss\",\t\"t̚s͈\" },\n\t[\"ᆺ-ᄋ\"] \t = { \"ᄉ\",\t\"s\",\t\"s-\",\t\"s\",\t\"s.\",\t\"sʰ\" },\n\t[\"ᆺ-ᄌ\"] \t = { \"ᆮᄍ\",\t\"tj\",\t\"sj\",\t\"tch\",\t\"sqc\",\t\"t̚t͡ɕ͈\" },\n\t[\"ᆺ-ᄍ\"] \t = { \"ᆮᄍ\",\t\"tjj\"\
      ,\t\"sjj\",\t\"tch\",\t\"scc\",\t\"t̚t͡ɕ͈\" },\n\t[\"ᆺ-ᄎ\"] \t = { \"ᆮᄎ\",\t\"tch\",\t\"sch\",\t\"tch'\",\t\"sch\",\t\"t̚t͡ɕʰ\" },\n\t[\"ᆺ-ᄏ\"] \t = { \"ᆮᄏ\",\t\"tk\",\t\"sk\",\t\"tk'\",\t\"skh\",\t\"t̚kʰ\" },\n\t[\"ᆺ-ᄐ\"] \t = { \"ᆮᄐ\",\t\"tt\",\t\"st\"\
      ,\t\"tt'\",\t\"sth\",\t\"t̚tʰ\" },\n\t[\"ᆺ-ᄑ\"] \t = { \"ᆮᄑ\",\t\"tp\",\t\"sp\",\t\"tp'\",\t\"sph\",\t\"t̚pʰ\" },\n\t[\"ᆺ-ᄒ\"] \t = { \"ᄐ\",\t\"th\",\t\"sh\",\t\"th\",\t\"sh\",\t\"tʰ\" },\n\t[\"ᆻ-Ø\"] \t = { \"ᆮ\",\t\"t\",\t\"ss\",\t\"t\",\t\"ss\",\t\"\
      t̚\" },\n\t[\"ᆻ-ᄀ\"] \t = { \"ᆮᄁ\",\t\"tg\",\t\"ssg\",\t\"tk\",\t\"ssqk\",\t\"t̚k͈\" },\n\t[\"ᆻ-ᄁ\"] \t = { \"ᆮᄁ\",\t\"tkk\",\t\"sskk\",\t\"tkk\",\t\"sskk\",\t\"t̚k͈\" },\n\t[\"ᆻ-ᄂ\"] \t = { \"ᆫᄂ\",\t\"nn\",\t\"ssn\",\t\"nn\",\t\"ssn\",\t\"nn\" },\n\t\
      [\"ᆻ-ᄃ\"] \t = { \"ᆮᄄ\",\t\"td\",\t\"ssd\",\t\"tt\",\t\"ssqt\",\t\"t̚t͈\" },\n\t[\"ᆻ-ᄄ\"] \t = { \"ᆮᄄ\",\t\"ttt\",\t\"sstt\",\t\"tt\",\t\"sstt\",\t\"t̚t͈\" },\n\t[\"ᆻ-ᄅ\"] \t = { \"ᆫᄂ\",\t\"nn\",\t\"ssl\",\t\"nn\",\t\"ssl\",\t\"nn\" },\n\t[\"ᆻ-ᄆ\"] \t\
      \ = { \"ᆫᄆ\",\t\"nm\",\t\"ssm\",\t\"nm\",\t\"ssm\",\t\"nm\" },\n\t[\"ᆻ-ᄇ\"] \t = { \"ᆮᄈ\",\t\"tb\",\t\"ssb\",\t\"tp\",\t\"ssqp\",\t\"t̚p͈\" },\n\t[\"ᆻ-ᄈ\"] \t = { \"ᆮᄈ\",\t\"tpp\",\t\"sspp\",\t\"tpp\",\t\"sspp\",\t\"t̚p͈\" },\n\t[\"ᆻ-ᄉ\"] \t = { \"ᆮᄊ\"\
      ,\t\"ts\",\t\"sss\",\t\"ss\",\t\"ssqs\",\t\"t̚s͈\" },\n\t[\"ᆻ-ᄊ\"] \t = { \"ᆮᄊ\",\t\"tss\",\t\"ssss\",\t\"ss\",\t\"ssss\",\t\"t̚s͈\" },\n\t[\"ᆻ-ᄋ\"] \t = { \"ᄊ\",\t\"ss\",\t\"ss-\",\t\"ss\",\t\"ss.\",\t\"s͈\" },\n\t[\"ᆻ-ᄌ\"] \t = { \"ᆮᄍ\",\t\"tj\",\t\"\
      ssj\",\t\"tch\",\t\"ssqc\",\t\"t̚t͡ɕ͈\" },\n\t[\"ᆻ-ᄍ\"] \t = { \"ᆮᄍ\",\t\"tjj\",\t\"ssjj\",\t\"tch\",\t\"sscc\",\t\"t̚t͡ɕ͈\" },\n\t[\"ᆻ-ᄎ\"] \t = { \"ᆮᄎ\",\t\"tch\",\t\"ssch\",\t\"tch'\",\t\"ssch\",\t\"t̚t͡ɕʰ\" },\n\t[\"ᆻ-ᄏ\"] \t = { \"ᆮᄏ\",\t\"tk\",\t\
      \"ssk\",\t\"tk'\",\t\"sskh\",\t\"t̚kʰ\" },\n\t[\"ᆻ-ᄐ\"] \t = { \"ᆮᄐ\",\t\"tt\",\t\"sst\",\t\"tt'\",\t\"ssth\",\t\"t̚tʰ\" },\n\t[\"ᆻ-ᄑ\"] \t = { \"ᆮᄑ\",\t\"tp\",\t\"ssp\",\t\"tp'\",\t\"ssph\",\t\"t̚pʰ\" },\n\t[\"ᆻ-ᄒ\"] \t = { \"ᄐ\",\t\"th\",\t\"ss-h\",\t\
      \"th\",\t\"ss.h\",\t\"tʰ\" },\n\t[\"ᆼ-Ø\"] \t = { \"ᆼ\",\t\"ng\",\t\"ng\",\t\"ng\",\t\"ng\",\t\"ŋ\" },\n\t[\"ᆼ-ᄀ\"] \t = { \"ᆼᄀ\",\t\"ngg\",\t\"ngg\",\t\"ngg\",\t\"ngk\",\t\"ŋɡ\" },\n\t[\"ᆼ-ᄁ\"] \t = { \"ᆼᄁ\",\t\"ngkk\",\t\"ngkk\",\t\"ngkk\",\t\"ngkk\"\
      ,\t\"ŋk͈\" },\n\t[\"ᆼ-ᄂ\"] \t = { \"ᆼᄂ\",\t\"ngn\",\t\"ngn\",\t\"ngn\",\t\"ngn\",\t\"ŋn\" },\n\t[\"ᆼ-ᄃ\"] \t = { \"ᆼᄃ\",\t\"ngd\",\t\"ngd\",\t\"ngd\",\t\"ngt\",\t\"ŋd\" },\n\t[\"ᆼ-ᄄ\"] \t = { \"ᆼᄄ\",\t\"ngtt\",\t\"ngtt\",\t\"ngtt\",\t\"ngtt\",\t\"ŋt͈\"\
      \ },\n\t[\"ᆼ-ᄅ\"] \t = { \"ᆼᄂ\",\t\"ngn\",\t\"ngl\",\t\"ngn\",\t\"ngl\",\t\"ŋn\" },\n\t[\"ᆼ-ᄆ\"] \t = { \"ᆼᄆ\",\t\"ngm\",\t\"ngm\",\t\"ngm\",\t\"ngm\",\t\"ŋm\" },\n\t[\"ᆼ-ᄇ\"] \t = { \"ᆼᄇ\",\t\"ngb\",\t\"ngb\",\t\"ngb\",\t\"ngp\",\t\"ŋb\" },\n\t[\"ᆼ-ᄈ\"\
      ] \t = { \"ᆼᄈ\",\t\"ngpp\",\t\"ngpp\",\t\"ngpp\",\t\"ngpp\",\t\"ŋp͈\" },\n\t[\"ᆼ-ᄉ\"] \t = { \"ᆼᄉ\",\t\"ngs\",\t\"ngs\",\t\"ngs\",\t\"ngs\",\t\"ŋsʰ\" },\n\t[\"ᆼ-ᄊ\"] \t = { \"ᆼᄊ\",\t\"ngss\",\t\"ngss\",\t\"ngss\",\t\"ngss\",\t\"ŋs͈\" },\n\t[\"ᆼ-ᄋ\"] \t\
      \ = { \"ᆼᄋ\",\t\"ng-\",\t\"ng-\",\t\"ng\",\t\"ng.\",\t\"ŋ\" },\n\t[\"ᆼ-ᄌ\"] \t = { \"ᆼᄌ\",\t\"ngj\",\t\"ngj\",\t\"ngj\",\t\"ngc\",\t\"ŋd͡ʑ\" },\n\t[\"ᆼ-ᄍ\"] \t = { \"ᆼᄍ\",\t\"ngjj\",\t\"ngjj\",\t\"ngtch\",\t\"ngcc\",\t\"ŋt͡ɕ͈\" },\n\t[\"ᆼ-ᄎ\"] \t = { \"\
      ᆼᄎ\",\t\"ngch\",\t\"ngch\",\t\"ngch'\",\t\"ngch\",\t\"ŋt͡ɕʰ\" },\n\t[\"ᆼ-ᄏ\"] \t = { \"ᆼᄏ\",\t\"ngk\",\t\"ngk\",\t\"ngk'\",\t\"ngkh\",\t\"ŋkʰ\" },\n\t[\"ᆼ-ᄐ\"] \t = { \"ᆼᄐ\",\t\"ngt\",\t\"ngt\",\t\"ngt'\",\t\"ngth\",\t\"ŋtʰ\" },\n\t[\"ᆼ-ᄑ\"] \t = { \"ᆼ\
      ᄑ\",\t\"ngp\",\t\"ngp\",\t\"ngp'\",\t\"ngph\",\t\"ŋpʰ\" },\n\t[\"ᆼ-ᄒ\"] \t = { \"ᆼᄒ\",\t\"ngh\",\t\"ngh\",\t\"ngh\",\t\"ngh\",\t\"ŋɦ\" },\n\t[\"ᆽ-Ø\"] \t = { \"ᆮ\",\t\"t\",\t\"j\",\t\"t\",\t\"c\",\t\"t̚\" },\n\t[\"ᆽ-ᄀ\"] \t = { \"ᆮᄁ\",\t\"tg\",\t\"jg\"\
      ,\t\"tk\",\t\"cqk\",\t\"t̚k͈\" },\n\t[\"ᆽ-ᄁ\"] \t = { \"ᆮᄁ\",\t\"tkk\",\t\"jkk\",\t\"tkk\",\t\"ckk\",\t\"t̚k͈\" },\n\t[\"ᆽ-ᄂ\"] \t = { \"ᆫᄂ\",\t\"nn\",\t\"jn\",\t\"nn\",\t\"cn\",\t\"nn\" },\n\t[\"ᆽ-ᄃ\"] \t = { \"ᆮᄄ\",\t\"td\",\t\"jd\",\t\"tt\",\t\"cqt\"\
      ,\t\"t̚t͈\" },\n\t[\"ᆽ-ᄄ\"] \t = { \"ᆮᄄ\",\t\"ttt\",\t\"jtt\",\t\"tt\",\t\"ctt\",\t\"t̚t͈\" },\n\t[\"ᆽ-ᄅ\"] \t = { \"ᆫᄂ\",\t\"nn\",\t\"jl\",\t\"nn\",\t\"cl\",\t\"nn\" },\n\t[\"ᆽ-ᄆ\"] \t = { \"ᆫᄆ\",\t\"nm\",\t\"jm\",\t\"nm\",\t\"cm\",\t\"nm\" },\n\t[\"ᆽ\
      -ᄇ\"] \t = { \"ᆮᄈ\",\t\"tb\",\t\"jb\",\t\"tp\",\t\"cqp\",\t\"t̚p͈\" },\n\t[\"ᆽ-ᄈ\"] \t = { \"ᆮᄈ\",\t\"tpp\",\t\"jpp\",\t\"tpp\",\t\"cpp\",\t\"t̚p͈\" },\n\t[\"ᆽ-ᄉ\"] \t = { \"ᆮᄊ\",\t\"ts\",\t\"js\",\t\"ss\",\t\"cqs\",\t\"t̚s͈\" },\n\t[\"ᆽ-ᄊ\"] \t = { \"\
      ᆮᄊ\",\t\"tss\",\t\"jss\",\t\"ss\",\t\"css\",\t\"t̚s͈\" },\n\t[\"ᆽ-ᄋ\"] \t = { \"ᄌ\",\t\"j\",\t\"j-\",\t\"j\",\t\"c.\",\t\"d͡ʑ\" },\n\t[\"ᆽ-ᄌ\"] \t = { \"ᆮᄍ\",\t\"tj\",\t\"jj\",\t\"tch\",\t\"cqc\",\t\"t̚t͡ɕ͈\" },\n\t[\"ᆽ-ᄍ\"] \t = { \"ᆮᄍ\",\t\"tjj\",\t\"\
      jjj\",\t\"tch\",\t\"ccc\",\t\"t̚t͡ɕ͈\" },\n\t[\"ᆽ-ᄎ\"] \t = { \"ᆮᄎ\",\t\"tch\",\t\"jch\",\t\"tch'\",\t\"cch\",\t\"t̚t͡ɕʰ\" },\n\t[\"ᆽ-ᄏ\"] \t = { \"ᆮᄏ\",\t\"tk\",\t\"jk\",\t\"tk'\",\t\"ckh\",\t\"t̚kʰ\" },\n\t[\"ᆽ-ᄐ\"] \t = { \"ᆮᄐ\",\t\"tt\",\t\"jt\",\t\
      \"tt'\",\t\"cth\",\t\"t̚tʰ\" },\n\t[\"ᆽ-ᄑ\"] \t = { \"ᆮᄑ\",\t\"tp\",\t\"jp\",\t\"tp'\",\t\"cph\",\t\"t̚pʰ\" },\n\t[\"ᆽ-ᄒ\"] \t = { \"ᄎ\",\t\"ch\",\t\"j-h\",\t\"ch'\",\t\"c.h\",\t\"t͡ɕʰ\" },\n\t[\"ᆾ-Ø\"] \t = { \"ᆮ\",\t\"t\",\t\"ch\",\t\"t\",\t\"ch\",\t\
      \"t̚\" },\n\t[\"ᆾ-ᄀ\"] \t = { \"ᆮᄁ\",\t\"tg\",\t\"chg\",\t\"tk\",\t\"chqk\",\t\"t̚k͈\" },\n\t[\"ᆾ-ᄁ\"] \t = { \"ᆮᄁ\",\t\"tkk\",\t\"chkk\",\t\"tkk\",\t\"chkk\",\t\"t̚k͈\" },\n\t[\"ᆾ-ᄂ\"] \t = { \"ᆫᄂ\",\t\"nn\",\t\"chn\",\t\"nn\",\t\"chn\",\t\"nn\" },\n\t\
      [\"ᆾ-ᄃ\"] \t = { \"ᆮᄄ\",\t\"td\",\t\"chd\",\t\"tt\",\t\"chqt\",\t\"t̚t͈\" },\n\t[\"ᆾ-ᄄ\"] \t = { \"ᆮᄄ\",\t\"ttt\",\t\"chtt\",\t\"tt\",\t\"chtt\",\t\"t̚t͈\" },\n\t[\"ᆾ-ᄅ\"] \t = { \"ᆫᄂ\",\t\"nn\",\t\"chl\",\t\"nn\",\t\"chl\",\t\"nn\" },\n\t[\"ᆾ-ᄆ\"] \t\
      \ = { \"ᆫᄆ\",\t\"nm\",\t\"chm\",\t\"nm\",\t\"chm\",\t\"nm\" },\n\t[\"ᆾ-ᄇ\"] \t = { \"ᆮᄈ\",\t\"tb\",\t\"chb\",\t\"tp\",\t\"chqp\",\t\"t̚p͈\" },\n\t[\"ᆾ-ᄈ\"] \t = { \"ᆮᄈ\",\t\"tpp\",\t\"chpp\",\t\"tpp\",\t\"chpp\",\t\"t̚p͈\" },\n\t[\"ᆾ-ᄉ\"] \t = { \"ᆮᄊ\"\
      ,\t\"ts\",\t\"chs\",\t\"ss\",\t\"chqs\",\t\"t̚s͈\" },\n\t[\"ᆾ-ᄊ\"] \t = { \"ᆮᄊ\",\t\"tss\",\t\"chss\",\t\"ss\",\t\"chss\",\t\"t̚s͈\" },\n\t[\"ᆾ-ᄋ\"] \t = { \"ᄎ\",\t\"ch\",\t\"ch-\",\t\"ch\",\t\"ch.\",\t\"t͡ɕʰ\" },\n\t[\"ᆾ-ᄌ\"] \t = { \"ᆮᄍ\",\t\"tj\",\t\
      \"chj\",\t\"tch\",\t\"chqc\",\t\"t̚t͡ɕ͈\" },\n\t[\"ᆾ-ᄍ\"] \t = { \"ᆮᄍ\",\t\"tjj\",\t\"chjj\",\t\"tch\",\t\"chcc\",\t\"t̚t͡ɕ͈\" },\n\t[\"ᆾ-ᄎ\"] \t = { \"ᆮᄎ\",\t\"tch\",\t\"chch\",\t\"tch'\",\t\"chch\",\t\"t̚t͡ɕʰ\" },\n\t[\"ᆾ-ᄏ\"] \t = { \"ᆮᄏ\",\t\"tk\"\
      ,\t\"chk\",\t\"tk'\",\t\"chkh\",\t\"t̚kʰ\" },\n\t[\"ᆾ-ᄐ\"] \t = { \"ᆮᄐ\",\t\"tt\",\t\"cht\",\t\"tt'\",\t\"chth\",\t\"t̚tʰ\" },\n\t[\"ᆾ-ᄑ\"] \t = { \"ᆮᄑ\",\t\"tp\",\t\"chp\",\t\"tp'\",\t\"chph\",\t\"t̚pʰ\" },\n\t[\"ᆾ-ᄒ\"] \t = { \"ᄎ\",\t\"th\",\t\"ch-h\"\
      ,\t\"th\",\t\"ch.h\",\t\"t͡ɕʰ\" },\n\t[\"ᆿ-Ø\"] \t = { \"ᆨ\",\t\"k\",\t\"k\",\t\"k\",\t\"kh\",\t\"k̚\" },\n\t[\"ᆿ-ᄀ\"] \t = { \"ᆨᄁ\",\t\"kg\",\t\"kg\",\t\"kk\",\t\"khqk\",\t\"k̚k͈\" },\n\t[\"ᆿ-ᄁ\"] \t = { \"ᆨᄁ\",\t\"kkk\",\t\"kkk\",\t\"kk\",\t\"khkk\"\
      ,\t\"k̚k͈\" },\n\t[\"ᆿ-ᄂ\"] \t = { \"ᆼᄂ\",\t\"ngn\",\t\"kn\",\t\"ngn\",\t\"khn\",\t\"ŋn\" },\n\t[\"ᆿ-ᄃ\"] \t = { \"ᆨᄄ\",\t\"kd\",\t\"kd\",\t\"kt\",\t\"khqt\",\t\"k̚t͈\" },\n\t[\"ᆿ-ᄄ\"] \t = { \"ᆨᄄ\",\t\"ktt\",\t\"ktt\",\t\"ktt\",\t\"khtt\",\t\"k̚t͈\" },\n\
      \t[\"ᆿ-ᄅ\"] \t = { \"ᆼᄂ\",\t\"ngn\",\t\"kl\",\t\"ngn\",\t\"khl\",\t\"ŋn\" },\n\t[\"ᆿ-ᄆ\"] \t = { \"ᆼᄆ\",\t\"ngm\",\t\"km\",\t\"ngm\",\t\"khm\",\t\"ŋm\" },\n\t[\"ᆿ-ᄇ\"] \t = { \"ᆨᄈ\",\t\"kb\",\t\"kb\",\t\"kp\",\t\"khqp\",\t\"k̚p͈\" },\n\t[\"ᆿ-ᄈ\"] \t =\
      \ { \"ᆨᄈ\",\t\"kpp\",\t\"kpp\",\t\"kpp\",\t\"khpp\",\t\"k̚p͈\" },\n\t[\"ᆿ-ᄉ\"] \t = { \"ᆨᄊ\",\t\"ks\",\t\"ks\",\t\"ks\",\t\"khqs\",\t\"ks͈\" },\n\t[\"ᆿ-ᄊ\"] \t = { \"ᆨᄊ\",\t\"kss\",\t\"kss\",\t\"kss\",\t\"khss\",\t\"ks͈\" },\n\t[\"ᆿ-ᄋ\"] \t = { \"ᄏ\",\t\
      \"k\",\t\"k-\",\t\"k'\",\t\"kh.\",\t\"kʰ\" },\n\t[\"ᆿ-ᄌ\"] \t = { \"ᆨᄍ\",\t\"kj\",\t\"kj\",\t\"kch\",\t\"khqc\",\t\"k̚t͡ɕ͈\" },\n\t[\"ᆿ-ᄍ\"] \t = { \"ᆨᄍ\",\t\"kjj\",\t\"kjj\",\t\"ktch\",\t\"khcc\",\t\"k̚t͡ɕ͈\" },\n\t[\"ᆿ-ᄎ\"] \t = { \"ᆨᄎ\",\t\"kch\",\t\
      \"kch\",\t\"kch'\",\t\"khch\",\t\"k̚t͡ɕʰ\" },\n\t[\"ᆿ-ᄏ\"] \t = { \"ᆨᄏ\",\t\"kk\",\t\"kk\",\t\"kk'\",\t\"khkh\",\t\"k̚kʰ\" },\n\t[\"ᆿ-ᄐ\"] \t = { \"ᆨᄐ\",\t\"kt\",\t\"kt\",\t\"kt'\",\t\"khth\",\t\"k̚tʰ\" },\n\t[\"ᆿ-ᄑ\"] \t = { \"ᆨᄑ\",\t\"kp\",\t\"kp\",\t\
      \"kp'\",\t\"khph\",\t\"k̚pʰ\" },\n\t[\"ᆿ-ᄒ\"] \t = { \"ᄏ\",\t\"kh\",\t\"k-h\",\t\"kh\",\t\"kh.h\",\t\"kʰ\" },\n\t[\"ᇀ-Ø\"] \t = { \"ᆮ\",\t\"t\",\t\"t\",\t\"t\",\t\"th\",\t\"t̚\" },\n\t[\"ᇀ-ᄀ\"] \t = { \"ᆮᄁ\",\t\"tg\",\t\"tg\",\t\"tk\",\t\"thqk\",\t\"t̚\
      k͈\" },\n\t[\"ᇀ-ᄁ\"] \t = { \"ᆮᄁ\",\t\"tkk\",\t\"tkk\",\t\"tkk\",\t\"thkk\",\t\"t̚k͈\" },\n\t[\"ᇀ-ᄂ\"] \t = { \"ᆫᄂ\",\t\"nn\",\t\"tn\",\t\"nn\",\t\"thn\",\t\"nn\" },\n\t[\"ᇀ-ᄃ\"] \t = { \"ᆮᄄ\",\t\"td\",\t\"td\",\t\"tt\",\t\"thqt\",\t\"t̚t͈\" },\n\t[\"ᇀ\
      -ᄄ\"] \t = { \"ᆮᄄ\",\t\"ttt\",\t\"ttt\",\t\"tt\",\t\"thtt\",\t\"t̚t͈\" },\n\t[\"ᇀ-ᄅ\"] \t = { \"ᆫᄂ\",\t\"nn\",\t\"tl\",\t\"nn\",\t\"thl\",\t\"nn\" },\n\t[\"ᇀ-ᄆ\"] \t = { \"ᆫᄆ\",\t\"nm\",\t\"tm\",\t\"nm\",\t\"thm\",\t\"nm\" },\n\t[\"ᇀ-ᄇ\"] \t = { \"ᆮᄈ\"\
      ,\t\"tb\",\t\"tb\",\t\"tp\",\t\"thqp\",\t\"t̚p͈\" },\n\t[\"ᇀ-ᄈ\"] \t = { \"ᆮᄈ\",\t\"tpp\",\t\"tpp\",\t\"tpp\",\t\"thpp\",\t\"t̚p͈\" },\n\t[\"ᇀ-ᄉ\"] \t = { \"ᆮᄊ\",\t\"ts\",\t\"ts\",\t\"ss\",\t\"thqs\",\t\"t̚s͈\" },\n\t[\"ᇀ-ᄊ\"] \t = { \"ᆮᄊ\",\t\"tss\",\t\
      \"tss\",\t\"ss\",\t\"thss\",\t\"t̚s͈\" },\n\t[\"ᇀ-ᄋ\"] \t = { \"ᄐ\",\t\"t\",\t\"t-\",\t\"t'\",\t\"th.\",\t\"tʰ\" },\n\t[\"ᇀ-ᄌ\"] \t = { \"ᆮᄍ\",\t\"tj\",\t\"tj\",\t\"tch\",\t\"thqc\",\t\"t̚t͡ɕ͈\" },\n\t[\"ᇀ-ᄍ\"] \t = { \"ᆮᄍ\",\t\"tjj\",\t\"tjj\",\t\"tch\"\
      ,\t\"thcc\",\t\"t̚t͡ɕ͈\" },\n\t[\"ᇀ-ᄎ\"] \t = { \"ᆮᄎ\",\t\"tch\",\t\"tch\",\t\"tch'\",\t\"thch\",\t\"t̚t͡ɕʰ\" },\n\t[\"ᇀ-ᄏ\"] \t = { \"ᆮᄏ\",\t\"tk\",\t\"tk\",\t\"tk'\",\t\"thkh\",\t\"t̚kʰ\" },\n\t[\"ᇀ-ᄐ\"] \t = { \"ᆮᄐ\",\t\"tt\",\t\"tt\",\t\"tt'\",\t\"\
      thth\",\t\"t̚tʰ\" },\n\t[\"ᇀ-ᄑ\"] \t = { \"ᆮᄑ\",\t\"tp\",\t\"tp\",\t\"tp'\",\t\"thph\",\t\"t̚pʰ\" },\n\t[\"ᇀ-ᄒ\"] \t = { \"ᄐ\",\t\"th\",\t\"t-h\",\t\"th\",\t\"th.h\",\t\"tʰ\" },\n\t[\"ᇁ-Ø\"] \t = { \"ᆸ\",\t\"p\",\t\"p\",\t\"p\",\t\"ph\",\t\"p̚\" },\n\t\
      [\"ᇁ-ᄀ\"] \t = { \"ᆸᄁ\",\t\"pg\",\t\"pg\",\t\"pk\",\t\"phqk\",\t\"p̚k͈\" },\n\t[\"ᇁ-ᄁ\"] \t = { \"ᆸᄁ\",\t\"pkk\",\t\"pkk\",\t\"pkk\",\t\"phkk\",\t\"p̚k͈\" },\n\t[\"ᇁ-ᄂ\"] \t = { \"ᆷᄂ\",\t\"mn\",\t\"pn\",\t\"mn\",\t\"phn\",\t\"mn\" },\n\t[\"ᇁ-ᄃ\"] \t =\
      \ { \"ᆸᄄ\",\t\"pd\",\t\"pd\",\t\"pt\",\t\"phqt\",\t\"p̚t͈\" },\n\t[\"ᇁ-ᄄ\"] \t = { \"ᆸᄄ\",\t\"ptt\",\t\"ptt\",\t\"ptt\",\t\"phtt\",\t\"p̚t͈\" },\n\t[\"ᇁ-ᄅ\"] \t = { \"ᆷᄂ\",\t\"mn\",\t\"pl\",\t\"mn\",\t\"phl\",\t\"mn\" },\n\t[\"ᇁ-ᄆ\"] \t = { \"ᆷᄆ\",\t\"\
      mm\",\t\"pm\",\t\"mm\",\t\"phm\",\t\"mm\" },\n\t[\"ᇁ-ᄇ\"] \t = { \"ᆸᄈ\",\t\"pb\",\t\"pb\",\t\"pp\",\t\"phqp\",\t\"p̚p͈\" },\n\t[\"ᇁ-ᄈ\"] \t = { \"ᆸᄈ\",\t\"ppp\",\t\"ppp\",\t\"pp\",\t\"phpp\",\t\"p̚p͈\" },\n\t[\"ᇁ-ᄉ\"] \t = { \"ᆸᄊ\",\t\"ps\",\t\"ps\",\t\
      \"ps\",\t\"phqs\",\t\"ps͈\" },\n\t[\"ᇁ-ᄊ\"] \t = { \"ᆸᄊ\",\t\"pss\",\t\"pss\",\t\"pss\",\t\"phss\",\t\"ps͈\" },\n\t[\"ᇁ-ᄋ\"] \t = { \"ᄑ\",\t\"p\",\t\"p-\",\t\"p'\",\t\"ph.\",\t\"pʰ\" },\n\t[\"ᇁ-ᄌ\"] \t = { \"ᆸᄍ\",\t\"pj\",\t\"pj\",\t\"pch\",\t\"phqc\"\
      ,\t\"p̚t͡ɕ͈\" },\n\t[\"ᇁ-ᄍ\"] \t = { \"ᆸᄍ\",\t\"pjj\",\t\"pjj\",\t\"ptch\",\t\"phcc\",\t\"p̚t͡ɕ͈\" },\n\t[\"ᇁ-ᄎ\"] \t = { \"ᆸᄎ\",\t\"pch\",\t\"pch\",\t\"pch'\",\t\"phch\",\t\"p̚t͡ɕʰ\" },\n\t[\"ᇁ-ᄏ\"] \t = { \"ᆸᄏ\",\t\"pk\",\t\"pk\",\t\"pk'\",\t\"phkh\"\
      ,\t\"p̚kʰ\" },\n\t[\"ᇁ-ᄐ\"] \t = { \"ᆸᄐ\",\t\"pt\",\t\"pt\",\t\"pt'\",\t\"phth\",\t\"p̚tʰ\" },\n\t[\"ᇁ-ᄑ\"] \t = { \"ᆸᄑ\",\t\"pp\",\t\"pp\",\t\"pp'\",\t\"phph\",\t\"p̚pʰ\" },\n\t[\"ᇁ-ᄒ\"] \t = { \"ᄑ\",\t\"ph\",\t\"p-h\",\t\"ph\",\t\"ph.h\",\t\"pʰ\" },\n\
      \t[\"ᇂ-Ø\"] \t = { \"ᆮ\",\t\"\",\t\"h\",\t\"\",\t\"h\",\t\"t̚\" },\n\t[\"ᇂ-ᄀ\"] \t = { \"ᄏ\",\t\"k\",\t\"hg\",\t\"k'\",\t\"hk\",\t\"kʰ\" },\n\t[\"ᇂ-ᄁ\"] \t = { \"ᄏ\",\t\"k\",\t\"hkk\",\t\"k'\",\t\"hkk\",\t\"kʰ\" },\n\t[\"ᇂ-ᄂ\"] \t = { \"ᆫᄂ\",\t\"nn\",\t\
      \"hn\",\t\"nn\",\t\"hn\",\t\"nn\" },\n\t[\"ᇂ-ᄃ\"] \t = { \"ᄐ\",\t\"t\",\t\"hd\",\t\"t'\",\t\"ht\",\t\"tʰ\" },\n\t[\"ᇂ-ᄄ\"] \t = { \"ᄐ\",\t\"t\",\t\"htt\",\t\"t'\",\t\"htt\",\t\"tʰ\" },\n\t[\"ᇂ-ᄅ\"] \t = { \"ᆫᄂ\",\t\"nn\",\t\"hl\",\t\"nn\",\t\"hl\",\t\"\
      nn\" },\n\t[\"ᇂ-ᄆ\"] \t = { \"ᆷᄆ\",\t\"nm\",\t\"hm\",\t\"nm\",\t\"hm\",\t\"mm\" },\n\t[\"ᇂ-ᄇ\"] \t = { \"ᄑ\",\t\"p\",\t\"hb\",\t\"p'\",\t\"hp\",\t\"pʰ\" },\n\t[\"ᇂ-ᄈ\"] \t = { \"ᄑ\",\t\"p\",\t\"hpp\",\t\"p'\",\t\"hpp\",\t\"pʰ\" },\n\t[\"ᇂ-ᄉ\"] \t = { \"\
      ᄊ\",\t\"s\",\t\"hs\",\t\"ss\",\t\"hs\",\t\"s͈\" },\n\t[\"ᇂ-ᄊ\"] \t = { \"ᆮᄊ\",\t\"ss\",\t\"hss\",\t\"ss\",\t\"hss\",\t\"t̚s͈\" },\n\t[\"ᇂ-ᄋ\"] \t = { \"ᄋ\",\t\"\",\t\"h-\",\t\"\",\t\"h.\",\t\"\" },\n\t[\"ᇂ-ᄌ\"] \t = { \"ᄎ\",\t\"ch\",\t\"hj\",\t\"ch'\"\
      ,\t\"hc\",\t\"t͡ɕʰ\" },\n\t[\"ᇂ-ᄍ\"] \t = { \"ᄎ\",\t\"ch\",\t\"hjj\",\t\"ch'\",\t\"hcc\",\t\"t͡ɕʰ\" },\n\t[\"ᇂ-ᄎ\"] \t = { \"ᆮᄎ\",\t\"tch\",\t\"hch\",\t\"tch'\",\t\"hch\",\t\"t̚t͡ɕʰ\" },\n\t[\"ᇂ-ᄏ\"] \t = { \"ᆮᄏ\",\t\"k\",\t\"hk\",\t\"k'\",\t\"hkh\",\t\
      \"t̚kʰ\" },\n\t[\"ᇂ-ᄐ\"] \t = { \"ᆮᄐ\",\t\"t\",\t\"ht\",\t\"t'\",\t\"hth\",\t\"t̚tʰ\" },\n\t[\"ᇂ-ᄑ\"] \t = { \"ᆮᄑ\",\t\"p\",\t\"hp\",\t\"p'\",\t\"hph\",\t\"t̚pʰ\" },\n\t[\"ᇂ-ᄒ\"] \t = { \"ᄐ\",\t\"h\",\t\"h-h\",\t\"h\",\t\"h.h\",\t\"tʰ\" },\n}\n\nreturn\
      \ export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-15T21:09:14.808Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Adebug&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; WMF-Last-Access=15-Apr-2019; WMF-Last-Access-Global=15-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=42328 t=1555362554714401
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:14 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1232.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=15-Apr-2019;WMF-Last-Access-Global=15-Apr-2019;https=1
      X-Cache: cp1081 pass, cp3041 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 506705275, 730716541, 685929232
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"4109235\" pageid=\"4109235\" ns=\"828\" title=\"Module:debug\"><revisions><rev user=\"Erutuon\" timestamp=\"2018-12-25T05:19:47Z\" contentformat=\"\
      text/plain\" contentmodel=\"Scribunto\" comment=\"Undo revision 51139735 by [[Special:Contributions/Erutuon|Erutuon]] ([[User talk:Erutuon|talk]]): restore if needed\" xml:space=\"preserve\">local export = {}\n\nlocal escape\ndo\n\tlocal escapes = {\n\t\
      \t[\"\\a\"] = \"a\", [\"\\b\"] = \"b\", [\"\\f\"] = \"f\", [\"\\n\"] = \"n\", [\"\\r\"] = \"r\",\n\t\t[\"\\t\"] = \"t\", [\"\\v\"] = \"v\", [\"\\\\\"] = \"\\\\\", [\"\\\"\"] = '\"', [\"'\"] = \"'\",\n\t}\n\t\n\tlocal function helper(char)\n\t\treturn escapes[char]\
      \ and \"\\\\\" .. escapes[char]\n\t\t\tor (\"\\\\%03d\"):format(char:byte())\n\tend\n\t\n\t-- Escape control characters, backslash, double quote, and bytes that aren't\n\t-- used in UTF-8.\n\t-- Escape stuff that can't be saved in a MediaWiki page, like\
      \ invalid UTF-8\n\t-- and NFD character sequences? Hard.\n\t-- Similar to string.format(\"%q\", str), which does not use C-like simple\n\t-- escapes and does not escape bytes that are not used in UTF-8.\n\tescape = function (str)\n\t\treturn (str:gsub(\"\
      [%z\\1-\\31\\\\\\\"\\127\\192\\193\\245-\\255]\", helper))\n\tend\nend\n\nexport.escape = escape\n\n-- Convert a value to a string\nfunction export.dump(value, prefix, tsort)\n\tlocal t = type(value)\n\t\n\tprefix = prefix or \"\"\n\t\n\tif t == \"string\"\
      \ then\n\t\treturn '\"' .. escape(value) .. '\"'\n\telseif t == \"table\" then\n\t\tlocal str_table = {}\n\t\t\n\t\ttable.insert(str_table, \" {\")\n\t\t\n\t\tfor key, val in require(\"Module:table\").sortedPairs(value, tsort) do\n\t\t\ttable.insert(str_table,\
      \ \" \" .. prefix .. \"\\t[\" .. export.dump(key, prefix .. \"\\t\") .. \"] = \" .. export.dump(val, prefix .. \"\\t\"):gsub(\"^ \", \"\") .. \",\")\n\t\tend\n\t\t\n\t\ttable.insert(str_table, \" \" .. prefix .. \"}\")\n\t\t\n\t\treturn table.concat(str_table,\
      \ \"\\n\")\n\telse\n\t\treturn tostring(value)\n\tend\nend\n\n\nfunction export.highlight_dump(value, prefix, tsort, options)\n\toptions = options or {}\n\t\n\tlocal func = options.modified and \"modified_dump\" or \"dump\"\n\t\n\tlocal dump = export[func](value,\
      \ prefix, tsort)\n\t\n\t-- Remove spaces at beginnings of lines (which are simply to force a &lt;pre&gt;&lt;/pre&gt; tag).\n\tdump = dump:gsub(\"^ \", \"\")\n\tdump = dump:gsub(\"\\n \", \"\\n\")\n\t\n\treturn export.highlight(dump)\nend\n\n\n-- Returns\
      \ true if table contains a table as one of its values\nlocal function containsTable(t)\n\tfor key, value in pairs(t) do\n\t\tif type(value) == \"table\" then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\n\n\nlocal function containsTablesWithSize(t,\
      \ size)\n\tfor key, value in pairs(t) do\n\t\tif type(value) == \"table\" and require(\"Module:table\").size(value) ~= size then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\t\n\n\n--[=[\n\tConvert a value to a string.\n\tLike dump below, but\
      \ if a table has consecutive numbered keys and does not\n\thave a table as one of its values, it will be placed on a single line.\n\tUsed by [[Module:User:Erutuon/script recognition]].\n]=]\nfunction export.modified_dump(value, prefix, tsort)\n\tlocal\
      \ t = type(value)\n\t\n\tprefix = prefix or \"\"\n\t\n\tif t == \"string\" then\n\t\treturn '\"' .. value .. '\"'\n\telseif t == \"table\" then\n\t\tlocal str_table = {}\n\t\t\n\t\tlocal containsTable = containsTable(value)\n\t\tlocal consecutive = require(\"\
      Module:table\").isArray(value)\n\t\tif consecutive and not containsTable or containsTable and containsTablesWithSize(value, 3) then\n\t\t\ttable.insert(str_table, \"{\")\n\t\t\t\n\t\t\tfor key, val in require(\"Module:table\").sortedPairs(value, tsort)\
      \ do\n\t\t\t\tif containsTable then\n\t\t\t\t\ttable.insert(str_table, \"\\n\\t\" .. prefix)\n\t\t\t\telse\n\t\t\t\t\ttable.insert(str_table, \" \")\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\tif type(key) == \"string\" then\n\t\t\t\t\ttable.insert(str_table, \"[\"\
      \ .. export.modified_dump(key) .. \"] = \")\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\ttable.insert(str_table, type(key) == \"number\" and type(val) == \"number\" and string.format(\"0x%05X\", val) or export.modified_dump(val))\n\t\t\t\t\n\t\t\t\tif not (consecutive\
      \ and #value == 3) or type(key) == \"number\" and value[key + 1] then\n\t\t\t\t\ttable.insert(str_table, \",\")\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tif containsTable then\n\t\t\t\ttable.insert(str_table, \"\\n\" .. prefix)\n\t\t\telse\n\t\t\t\ttable.insert(str_table,\
      \ \" \")\n\t\t\tend\n\t\t\t\n\t\t\ttable.insert(str_table, \"}\")\n\t\t\treturn table.concat(str_table)\n\t\tend\n\t\t\n\t\ttable.insert(str_table, \" {\")\n\t\t\n\t\tfor key, val in require(\"Module:table\").sortedPairs(value, tsort) do\n\t\t\ttable.insert(str_table,\
      \ \" \" .. prefix .. \"\\t[\" .. export.modified_dump(key, prefix .. \"\\t\") .. \"] = \" .. export.modified_dump(val, prefix .. \"\\t\"):gsub(\"^ \", \"\") .. \",\")\n\t\tend\n\t\t\n\t\ttable.insert(str_table, \" \" .. prefix .. \"}\")\n\t\t\n\t\treturn\
      \ table.concat(str_table, \"\\n\")\n\telseif t == \"number\" and value &gt; 46 then\n\t\treturn string.format(\"0x%05X\", value)\n\telse\n\t\treturn tostring(value)\n\tend\nend\n\t\n\nfunction export.track(key)\n\tlocal frame = mw.getCurrentFrame()\n\t\
      if key then\n\t\tif type(key) ~= \"table\" then\n\t\t\tkey = { key }\n\t\tend\n\t\t\n\t\tfor i, value in pairs(key) do\n\t\t\tpcall(frame.expandTemplate, frame, { title = 'tracking/' .. value })\n\t\tend\n\telse\n\t\terror('No tracking key supplied to\
      \ the function \"' .. track .. '\".')\n\tend\nend\n\n\n-- Trigger a script error from a template\nfunction export.error(frame)\n\terror(frame.args[1] or \"(no message specified)\")\nend\n\n--[[\n\tConvenience function for generating syntaxhighlight tags.\n\
      \tDisplay defaults to block.\n\tOptions is a table. To display inline text with HTML highlighting:\n\t\t{ inline = true, lang = \"html\" }\n]]\nfunction export.highlight(content, options)\n\tif type(content) == \"table\" then\n\t\toptions = content\n\t\
      \toptions = {\n\t\t\tlang = options.lang or \"lua\",\n\t\t\tinline = options.inline and true\n\t\t}\n\t\treturn function(content)\n\t\t\treturn mw.getCurrentFrame():extensionTag{\n\t\t\t\tname = \"syntaxhighlight\",\n\t\t\t\tcontent = content,\n\t\t\t\t\
      args = options\n\t\t\t}\n\t\tend\n\telse\n\t\treturn mw.getCurrentFrame():extensionTag{\n\t\t\tname = \"syntaxhighlight\",\n\t\t\tcontent = content,\n\t\t\targs = {\n\t\t\t\tlang = options and options.lang or \"lua\",\n\t\t\t\tinline = options and options.inline\
      \ and true or nil\n\t\t\t}\n\t\t}\n\tend\nend\n\nfunction export.track_unrecognized_args(args, template_name)\n\tlocal function track(code)\n\t\texport.track(template_name .. \"/\" .. code)\n\tend\n\t\n    track(\"unrecognized arg\")\n\t\n\tlocal arg_list\
      \ = {}\n\tfor arg, value in pairs(args) do\n\t\ttrack(\"unrecognized arg/\" .. arg)\n\t\ttable.insert(arg_list, (\"|%s=%s\"):format(arg, value))\n\tend\n\t\n\tmw.log(\n\t\t(\"Unrecognized parameter%s in {{%s}}: %s.\"):format(\n\t\t\targ_list[2] and \"\
      s\" or \"\",\n\t\t\ttemplate_name,\n\t\t\ttable.concat(arg_list, \", \")))\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-15T21:09:14.966Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Template%3Atracking%2Flinks%2Fredundant+wikilink&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; WMF-Last-Access=15-Apr-2019; WMF-Last-Access-Global=15-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=36579 t=1555362554887242
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Length: '167'
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:14 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1279.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=15-Apr-2019;WMF-Last-Access-Global=15-Apr-2019;https=1
      X-Cache: cp1079 pass, cp3040 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 668786530, 555346390, 689364169
    body: <?xml version="1.0"?><api batchcomplete=""><query><pages><page _idx="-1" ns="10" title="Template:tracking/links/redundant wikilink" missing="" /></pages></query></api>
- recorded: 2019-04-15T21:09:15.134Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Alinks%2Fdata&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; WMF-Last-Access=15-Apr-2019; WMF-Last-Access-Global=15-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=49383 t=1555362555037300
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:15 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1225.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=15-Apr-2019;WMF-Last-Access-Global=15-Apr-2019;https=1
      X-Cache: cp1089 pass, cp3030 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 206160952, 643184686, 697483384
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"6246525\" pageid=\"6246525\" ns=\"828\" title=\"Module:links/data\"><revisions><rev user=\"Erutuon\" timestamp=\"2019-03-13T02:26:26Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"add [[Unsupported titles/MeToo]]\" xml:space=\"preserve\">local data = {}\n\ndata.high_memory_entries = {\n\t\"a\",\n\t\"animal\",\n\t\"book\",\n\t\"coffee\",\n\t\"do\",\n\t\"e\",\n\t\"\
      language\",\n\t\"night\",\n\t\"smoke\",\n\t\"son\",\n\t\"sun\",\n\t\"water\",\n\t\"wind\",\n}\n\n\nlocal U = mw.ustring.char\nlocal soft_hyphen = U(0xAD)\n\n--[[\tThe \"actual title\" is the page name with the prefix \"Unsupported titles/\" removed.\n\t\
      \t[\"displayed_title\"] = \"actual title\"\t]]\ndata.unsupported_titles = {\n\t[\" \"] = \"Space\",\n\t[\"{\"] = \"Left curly bracket\",\n\t[\"}\"] = \"Right curly bracket\",\n\t[\"[\"] = \"Left square bracket\",\n\t[\"]\"] = \"Right square bracket\",\n\
      \t[\"&lt;\"] = \"Less than\",\n\t[\"&gt;\"] = \"Greater than\",\n\t[\"=&lt;\"] = \"Equal less than\",\n\t[\"=&gt;\"] = \"Equal greater than\",\n\t[\"&gt;=\"] = \"Greater than equal\",\n\t[\"&lt;=\"] = \"Less than equal\",\n\t[\"-&gt;\"] = \"Hyphen greater\
      \ than\",\n\t[\"&lt;-\"] = \"Less than hyphen\",\n\t[\"&gt;_&lt;\"] = \"Greater than low line less than\",\n\t[\"::\"] = \"Double colon\",\n\t[\": :\"] = \"Enclosing colons\",\n\t[\":=\"] = \"Colon equals\",\n\t[\":Þ\"] = \"Colon capital thorn\",\n\t[\"\
      :(\"] = \"Colon left paren\",\n\t[\":)\"] = \"Colon right paren\",\n\t[\"&lt;&gt;\"] = \"Less than greater than\",\n\t[\"&lt;3\"] = \"Less than three\",\n\t[\"&lt;/3\"] = \"Less than slash three\",\n\t[\"&lt; &gt;\"] = \"Enclosing less than greater than\"\
      ,\n\t[\"&lt; /&gt;\"] = \"Less than trailing slash greater than\",\n\t[\"&lt; &gt; &lt;/ &gt;\"] = \"HTML start tag end tag\",\n\t[\"&lt;!-- --&gt;\"] = \"HTML comment\",\n\t[\"&lt;g&gt;\"] = \"g tag\",\n\t[\":-(\"] = \"Colon hyphen left paren\",\n\t[\"\
      :-)\"] = \"Colon hyphen right paren\",\n\t[\"|\"] = \"Vertical line\",\n\t[\"||\"] = \"Vertical line vertical line\",\n\t[\"| |\"] = \"Enclosing vertical lines\",\n\t[\"C#\"] = \"C sharp\",\n\t[\"#\"] = \"Number sign\",\n\t[\"# #\"] = \"Enclosing number\
      \ signs\",\n\t[\":\"] = \"Colon\",\n\t[\"..\"] = \"Double period\",\n\t[\".\"] = \"Full stop\",\n\t[\"_\"] = \"Low line\",\n\t[\"-_-\"] = \"Low line interfix\",\n\t[U(0xFFFD)] = \"Replacement character\",\n\t[U(0x1680)] = \"Ogham space\",\n\t[\"[ ]\"]\
      \ = \"Square brackets\",\n\t[\"{ }\"] = \"Curly brackets\",\n\t[\"[…]\"] = \"Square bracketed ellipsis\",\n\t[\"_ _\"] = \"Enclosing low lines\",\n\t[\"C|N&gt;K\"] = \"C through N to K\",\n\t[\"#MeToo\"] = \"MeToo\",\n\t[\"о/.\"] = \"о slash dot\",\n\t\
      [\"กรุงเทพมหานคร อมรรัตนโกสินทร์ มหินทรายุธยา มหาดิลกภพ นพรัตนราชธานีบูรีรมย์ อุดมราชนิเวศน์มหาสถาน อมรพิมานอวตารสถิต สักกะทัตติยวิษณุกรรมประสิทธิ์\"] = \"Thai name of Bangkok\",\n\t[\"λοπαδοτεμαχοσελαχογαλεοκρανιολειψανοδριμυποτριμματοσιλφιοκαραβομελι\
      τοκατακεχυμενοκιχλ\" .. soft_hyphen .. \"επικοσσυφοφαττοπεριστεραλεκτρυονοπτοκεφαλλιοκιγκλοπελειολαγῳοσιραιοβαφητραγανοπτερύγων\"] = \"Ancient Greek dish\",\n\t[\":≠\"] = \":≠\",\n\t[\"S:t\"] = \"S:t\",\n\t[\"S:ta\"] = \"S:ta\",\n\t[\"c:a\"] = \"c:a\"\
      ,\n\t[\"n:a\"] = \"n:a\",\n\t[\"n:o\"] = \"n:o\",\n\t[\"n:r\"] = \"n:r\",\n\t[\"s:a\"] = \"s:a\",\n\t[\"st:a\"] = \"st:a\",\n\t[\"v:a\"] = \"v:a\",\n}\n\nfor i, item in ipairs(data.high_memory_entries) do\n\tdata.high_memory_entries[i] = nil\n\tdata.high_memory_entries[item]\
      \ = true\nend\n\nreturn data</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-15T21:09:15.493Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Aparameters&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; WMF-Last-Access=15-Apr-2019; WMF-Last-Access-Global=15-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=37357 t=1555362555402175
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:15 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1344.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=15-Apr-2019;WMF-Last-Access-Global=15-Apr-2019;https=1
      X-Cache: cp1081 pass, cp3040 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 513938861, 570829320, 694404164
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"4797340\" pageid=\"4797340\" ns=\"828\" title=\"Module:parameters\"><revisions><rev user=\"Benwing2\" timestamp=\"2019-03-01T01:32:55Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"OK, resurrect the bug fix for disappearing &quot;falt&quot; and such while I figure out how to clone a table properly\" xml:space=\"preserve\">local export = {}\n\n-- A helper function\
      \ to escape magic characters in a string\n-- Magic characters: ^$()%.[]*+-?\nlocal plain = require(\"Module:string\").pattern_escape\n\n-- A helper function that removes empty numeric indexes in a table,\n-- so that the values are tightly packed like in\
      \ a normal Lua table.\nlocal remove_holes = require(\"Module:table\").compressSparseArray\n\nfunction export.process(args, params, return_unknown)\n\tlocal args_new = {}\n\t\n\t-- Process parameters for specific properties\n\tlocal required = {}\n\tlocal\
      \ patterns = {}\n\tlocal names_with_equal_sign = {}\n\tlocal list_from_index = nil\n\t\n\tfor name, param in pairs(params) do\n\t\tif param.required then\n\t\t\tif param.alias_of then\n\t\t\t\trequire(\"Module:debug\").track(\"parameters/required alias\"\
      )\n\t\t\tend\n\t\t\trequired[name] = true\n\t\tend\n\t\t\n\t\tif param.list then\n\t\t\tlocal key = name\n\t\t\tif type(name) == \"string\" then\n\t\t\t\tkey = string.gsub(name, \"=\", \"\")\n\t\t\tend\n\t\t\tif param.default ~= nil then\n\t\t\t\targs_new[key]\
      \ = {param.default, maxindex = 1}\n\t\t\telse\n\t\t\t\targs_new[key] = {maxindex = 0}\n\t\t\tend\n\t\t\t\n\t\t\tif type(param.list) == \"string\" then\n\t\t\t\t-- If the list property is a string, then it represents the name\n\t\t\t\t-- to be used as the\
      \ prefix for list items. This is for use with lists\n\t\t\t\t-- where the first item is a numbered parameter and the\n\t\t\t\t-- subsequent ones are named, such as 1, pl2, pl3.\n\t\t\t\tif string.find(param.list, \"=\") then\n\t\t\t\t\tpatterns[\"^\" ..\
      \ string.gsub(plain(param.list), \"=\", \"(%%d+)\") .. \"$\"] = name\n\t\t\t\telse\n\t\t\t\t\tpatterns[\"^\" .. plain(param.list) .. \"(%d+)$\"] = name\n\t\t\t\tend\n\t\t\telseif type(name) == \"number\" then\n\t\t\t\t-- If the name is a number, then all\
      \ indexed parameters from\n\t\t\t\t-- this number onwards go in the list.\n\t\t\t\tlist_from_index = name\n\t\t\telse\n\t\t\t\tif string.find(name, \"=\") then\n\t\t\t\t\tpatterns[\"^\" .. string.gsub(plain(name), \"=\", \"(%%d+)\") .. \"$\"] = string.gsub(name,\
      \ \"=\", \"\")\n\t\t\t\telse\n\t\t\t\t\tpatterns[\"^\" .. plain(name) .. \"(%d+)$\"] = name\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tif string.find(name, \"=\") then\n\t\t\t\t-- DO NOT SIDE-EFFECT A TABLE WHILE ITERATING OVER IT.\n\t\t\t\t-- Some elements\
      \ may be skipped or processed twice if you do.\n\t\t\t\t-- Instead, track the changes we want to make to `params`, and\n\t\t\t\t-- do them after the iteration over `params` is done.\n\t\t\t\ttable.insert(names_with_equal_sign, name)\n\t\t\tend\n\t\telseif\
      \ param.default ~= nil then\n\t\t\targs_new[name] = param.default\n\t\tend\n\tend\n\n\t--Process required changes to `params`\n\tfor _, name in ipairs(names_with_equal_sign) do\n\t\trequire(\"Module:debug\").track(\"parameters/name with equals\")\n\t\t\
      params[string.gsub(name, \"=\", \"\")] = params[name]\n\t\tparams[name] = nil\n\tend\n\n\t-- Process the arguments\n\tlocal args_unknown = {}\n\t\n\tfor name, val in pairs(args) do\n\t\tlocal index = nil\n\t\t\n\t\tif type(name) == \"number\" then\n\t\t\
      \tif list_from_index ~= nil and name &gt;= list_from_index then\n\t\t\t\tindex = name - list_from_index + 1\n\t\t\t\tname = list_from_index\n\t\t\tend\n\t\telse\n\t\t\t-- Does this argument name match a pattern?\n\t\t\tfor pattern, pname in pairs(patterns)\
      \ do\n\t\t\t\tindex = mw.ustring.match(name, pattern)\n\t\t\t\t\n\t\t\t\t-- It matches, so store the parameter name and the\n\t\t\t\t-- numeric index extracted from the argument name.\n\t\t\t\tif index then\n\t\t\t\t\tindex = tonumber(index)\n\t\t\t\t\t\
      name = pname\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\t\n\t\tlocal param = params[name]\n\t\t\n\t\t-- If a parameter without the trailing index was found, and\n\t\t-- require_index is set on the param, set the param to nil to treat it\n\t\t\
      -- as if it isn't recognized.\n\t\tif not index and param and param.require_index then\n\t\t\tparam = nil\n\t\tend\n\t\t\n\t\t-- If no index was found, use 1 as the default index.\n\t\t-- This makes list parameters like g, g2, g3 put g at index 1.\n\t\t\
      index = index or 1\n\t\t\n\t\t-- If the argument is not in the list of parameters, trigger an error.\n\t\t-- return_unknown suppresses the error, and stores it in a separate list instead.\n\t\tif not param then\n\t\t\tif return_unknown then\n\t\t\t\targs_unknown[name]\
      \ = val\n\t\t\telse\n\t\t\t\terror(\"The parameter \\\"\" .. name .. \"\\\" is not used by this template.\", 2)\n\t\t\tend\n\t\telse\n\t\t\t-- Remove leading and trailing whitespace unless allow_whitespace is true.\n\t\t\tif not param.allow_whitespace\
      \ then\n\t\t\t\tval = mw.text.trim(val)\n\t\t\tend\n\t\t\t\n\t\t\t-- Empty string is equivalent to nil unless allow_empty is true.\n\t\t\tif val == \"\" and not param.allow_empty then\n\t\t\t\tval = nil\n\t\t\tend\n\t\t\t\n\t\t\t-- Convert to proper type\
      \ if necessary.\n\t\t\tif param.type == \"boolean\" then\n\t\t\t\tval = not (not val or val == \"\" or val == \"0\" or val == \"no\" or val == \"n\" or val == \"false\")\n\t\t\telseif param.type == \"number\" then\n\t\t\t\tval = tonumber(val)\n\t\t\telseif\
      \ param.type then\n\t\t\t\trequire(\"Module:debug\").track {\n\t\t\t\t\t\"parameters/unrecognized type\",\n\t\t\t\t\t\"parameters/unrecognized type/\" .. tostring(param.type)\n\t\t\t\t}\n\t\t\tend\n\t\t\t\n\t\t\t-- Can't use \"if val\" alone, because val\
      \ may be a boolean false.\n\t\t\tif val ~= nil then\n\t\t\t\t-- Mark it as no longer required, as it is present.\n\t\t\t\trequired[param.alias_of or name] = nil\n\t\t\t\t\n\t\t\t\t-- Store the argument value.\n\t\t\t\tif param.list then\n\t\t\t\t\t-- If\
      \ the parameter is an alias of another, store it as the original,\n\t\t\t\t\t-- but avoid overwriting it; the original takes precedence.\n\t\t\t\t\tif not param.alias_of then\n\t\t\t\t\t\targs_new[name][index] = val\n\t\t\t\t\t\t\n\t\t\t\t\t\t-- Store\
      \ the highest index we find.\n\t\t\t\t\t\targs_new[name].maxindex = math.max(index, args_new[name].maxindex)\n\t\t\t\t\telseif args[param.alias_of] == nil then\n\t\t\t\t\t\tif params[param.alias_of] and params[param.alias_of].list then\n\t\t\t\t\t\t\t\
      args_new[param.alias_of][index] = val\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t-- Store the highest index we find.\n\t\t\t\t\t\t\targs_new[param.alias_of].maxindex = math.max(1, args_new[param.alias_of].maxindex)\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\targs_new[param.alias_of]\
      \ = val\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\t-- If the parameter is an alias of another, store it as the original,\n\t\t\t\t\t-- but avoid overwriting it; the original takes precedence.\n\t\t\t\t\tif not param.alias_of then\n\t\t\t\t\
      \t\targs_new[name] = val\n\t\t\t\t\telseif args[param.alias_of] == nil then\n\t\t\t\t\t\tif params[param.alias_of] and params[param.alias_of].list then\n\t\t\t\t\t\t\targs_new[param.alias_of][1] = val\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t-- Store the highest\
      \ index we find.\n\t\t\t\t\t\t\targs_new[param.alias_of].maxindex = math.max(1, args_new[param.alias_of].maxindex)\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\targs_new[param.alias_of] = val\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\
      \t\n\t-- The required table should now be empty.\n\t-- If any entry remains, trigger an error, unless we're in the template namespace.\n\tif mw.title.getCurrentTitle().nsText ~= \"Template\" then\n\t\tlocal list = {}\n\t\tfor name, param in pairs(required)\
      \ do\n\t\t\ttable.insert(list, name)\n\t\tend\n\t\t\n\t\tlocal count = #list\n\t\tif count == 1 then\n\t\t\terror('The parameter \"' .. list[1] .. '\" is required.', 2)\n\t\telseif count == 2 then\n\t\t\terror('The parameters \"' .. table.concat(list,\
      \ '\" and \"') .. '\" are required.', 2)\n\t\telseif count &gt; 2 then\n\t\t\terror('The parameters \"' .. mw.text.listToText(list, '\", \"', '\", and \"') .. '\" are required.', 2)\n\t\tend\n\tend\n\t\n\t-- Remove holes in any list parameters if needed.\n\
      \tfor name, val in pairs(args_new) do\n\t\tif type(val) == \"table\" and not params[name].allow_holes then\n\t\t\targs_new[name] = remove_holes(val)\n\t\tend\n\tend\n\t\n\tif return_unknown then\n\t\treturn args_new, args_unknown\n\telse\n\t\treturn args_new\n\
      \tend\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-15T21:09:15.680Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Astring&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; WMF-Last-Access=15-Apr-2019; WMF-Last-Access-Global=15-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=40656 t=1555362555572835
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:15 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1228.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=15-Apr-2019;WMF-Last-Access-Global=15-Apr-2019;https=1
      X-Cache: cp1085 pass, cp3041 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 576545435, 730514553, 693129433
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"4099547\" pageid=\"4099547\" ns=\"828\" title=\"Module:string\"><revisions><rev user=\"Erutuon\" timestamp=\"2018-10-18T08:33:33Z\" contentformat=\"\
      text/plain\" contentmodel=\"Scribunto\" comment=\"okay for count to be nil\" xml:space=\"preserve\">local str = {}\n\n-- Cannot include null byte.\nlocal UTF8_char = \"[\\1-\\127\\194-\\244][\\128-\\191]*\"\n\n--[[\nulen\n\nCounts UTF-8 characters. Faster\
      \ than mw.ustring.len.\n\nAssumes that the encoding is correct. Unlike mw.ustring.len, does not return nil\nif encoding is invalid.\n\nDoes not count the bytes 192, 193, and 245-255. They are not used in UTF-8 and\nwill not occur if the string is valid.\
      \ They are replaced with the replacement\ncharacter (U+FFFD) on MediaWiki pages.\n--]]\nfunction str.ulen(text)\n\tlocal _, length = string.gsub(text, UTF8_char, \"\")\n\treturn length\nend\n\n--[[\nlen\n\nThis function returns the length of the target\
      \ string.\n\nUsage:\n{{#invoke:string|len|target_string|}}\nOR\n{{#invoke:string|len|s=target_string}}\n\nParameters\n    s: The string whose length to report\n\nIf invoked using named parameters, Mediawiki will automatically remove any leading or\ntrailing\
      \ whitespace from the target string.\n]]\nfunction str.len(frame)\n\tlocal new_args = str._getParameters(frame.args, { 's' });\n\tlocal s = new_args['s'] or '';\n\treturn mw.ustring.len(s)\nend\n\n--[[\nsub\n\nThis function returns a substring of the target\
      \ string at specified indices.\n\nUsage:\n{{#invoke:string|sub|target_string|start_index|end_index}}\nOR\n{{#invoke:string|sub|s=target_string|i=start_index|j=end_index}}\n\nParameters\n    s: The string to return a subset of\n    i: The fist index of\
      \ the substring to return, defaults to 1.\n    j: The last index of the string to return, defaults to the last character.\n    \nThe first character of the string is assigned an index of 1.  If either i or j\nis a negative value, it is interpreted the\
      \ same as selecting a character by\ncounting from the end of the string.  Hence, a value of -1 is the same as\nselecting the last character of the string.\n\nIf the requested indices are out of range for the given string, an error is\nreported.\n]]\nfunction\
      \ str.sub(frame)\n\tlocal new_args = str._getParameters(frame.args, { 's', 'i', 'j' });\n\tlocal s = new_args['s'] or '';\n\tlocal i = tonumber(new_args['i']) or 1;\n\tlocal j = tonumber(new_args['j']) or -1;\n\t\n\tlocal len = mw.ustring.len(s);\n\t\n\
      \t-- Convert negatives for range checking\n\tif i &lt; 0 then\n\t\ti = len + i + 1;\n\tend\n\tif j &lt; 0 then\n\t\tj = len + j + 1;\n\tend\n\t\n\tif i &gt; len or j &gt; len or i &lt; 1 or j &lt; 1 then\n\t\treturn str._error('String subset index out\
      \ of range');\n\tend\n\tif j &lt; i then\n\t\treturn str._error('String subset indices out of order');\n\tend\n\t\n\treturn mw.ustring.sub(s, i, j)\nend\n\n--[[\nThis function implements that features of {{str sub old}} and is kept in order\nto maintain\
      \ these older templates.\n]]\nfunction str.sublength(frame)\n\tlocal i = tonumber(frame.args.i) or 0\n\tlocal len = tonumber(frame.args.len)\n\treturn mw.ustring.sub(frame.args.s, i + 1, len and (i + len))\nend\n\n--[[\nmatch\n\nThis function returns a\
      \ substring from the source string that matches a\nspecified pattern.\n\nUsage:\n{{#invoke:string|match|source_string|pattern_string|start_index|match_number|plain_flag|nomatch_output}}\nOR\n{{#invoke:string|pos|s=source_string|pattern=pattern_string|start=start_index\n\
      \    |match=match_number|plain=plain_flag|nomatch=nomatch_output}}\n\nParameters\n    s: The string to search\n    pattern: The pattern or string to find within the string\n    start: The index within the source string to start the search.  The first\n\
      \        character of the string has index 1.  Defaults to 1.\n    match: In some cases it may be possible to make multiple matches on a single\n        string.  This specifies which match to return, where the first match is\n        match= 1.  If a negative\
      \ number is specified then a match is returned\n        counting from the last match.  Hence match = -1 is the same as requesting\n        the last match.  Defaults to 1.\n    plain: A flag indicating that the pattern should be understood as plain\n  \
      \      text.  Defaults to false.\n    nomatch: If no match is found, output the \"nomatch\" value rather than an error.\n\nIf invoked using named parameters, Mediawiki will automatically remove any leading or\ntrailing whitespace from each string.  In\
      \ some circumstances this is desirable, in\nother cases one may want to preserve the whitespace.\n\nIf the match_number or start_index are out of range for the string being queried, then\nthis function generates an error.  An error is also generated if\
      \ no match is found.\nIf one adds the parameter ignore_errors=true, then the error will be suppressed and\nan empty string will be returned on any failure.\n\nFor information on constructing Lua patterns, a form of [regular expression], see:\n\n* http://www.lua.org/manual/5.1/manual.html#5.4.1\n\
      * http://www.mediawiki.org/wiki/Extension:Scribunto/Lua_reference_manual#Patterns\n* http://www.mediawiki.org/wiki/Extension:Scribunto/Lua_reference_manual#Ustring_patterns\n\n]]\nfunction str.match(frame)\n\tlocal new_args = str._getParameters(frame.args,\
      \ { 's', 'pattern', 'start', 'match', 'plain', 'nomatch' });\n\tlocal s = new_args['s'] or '';\n\tlocal start = tonumber(new_args['start']) or 1;\n\tlocal plain_flag = str._getBoolean(new_args['plain'] or false);\n\tlocal pattern = new_args['pattern']\
      \ or '';\n\tlocal match_index = math.floor(tonumber(new_args['match']) or 1);\n\tlocal nomatch = new_args['nomatch'];\n\t\n\tif s == '' then\n\t\treturn str._error('Target string is empty');\n\tend\n\tif pattern == '' then\n\t\treturn str._error('Pattern\
      \ string is empty');\n\tend\n\tif math.abs(start) &lt; 1 or math.abs(start) &gt; mw.ustring.len(s) then\n\t\treturn str._error('Requested start is out of range');\n\tend\n\tif match_index == 0 then\n\t\treturn str._error('Match index is out of range');\n\
      \tend\n\tif plain_flag then\n\t\tpattern = str.pattern_escape(pattern);\n\tend\n\t\n\tlocal result\n\tif match_index == 1 then\n\t\t-- Find first match is simple case\n\t\tresult = mw.ustring.match(s, pattern, start)\n\telse\n\t\tif start &gt; 1 then\n\
      \t\t\ts = mw.ustring.sub(s, start);\n\t\tend\n\t\t\n\t\tlocal iterator = mw.ustring.gmatch(s, pattern);\n\t\tif match_index &gt; 0 then\n\t\t\t-- Forward search\n\t\t\tfor w in iterator do\n\t\t\t\tmatch_index = match_index - 1;\n\t\t\t\tif match_index\
      \ == 0 then\n\t\t\t\t\tresult = w;\n\t\t\t\t\tbreak;\n\t\t\t\tend\n\t\t\tend\n\t\telse\n\t\t\t-- Reverse search\n\t\t\tlocal result_table = {};\n\t\t\tlocal count = 1;\n\t\t\tfor w in iterator do\n\t\t\t\tresult_table[count] = w;\n\t\t\t\tcount = count\
      \ + 1;\n\t\t\tend\n\t\t\t\n\t\t\tresult = result_table[count + match_index];\n\t\tend\n\tend\n\t\n\tif result == nil then\n\t\tif nomatch == nil then\n\t\t\treturn str._error('Match not found');\n\t\telse\n\t\t\treturn nomatch;\n\t\tend\n\telse\n\t\treturn\
      \ result;\n\tend\nend\n\n--[[\npos\n\nThis function returns a single character from the target string at position pos.\n\nUsage:\n{{#invoke:string|pos|target_string|index_value}}\nOR\n{{#invoke:string|pos|target=target_string|pos=index_value}}\n\nParameters\n\
      \    target: The string to search\n    pos: The index for the character to return\n\nIf invoked using named parameters, Mediawiki will automatically remove any leading or\ntrailing whitespace from the target string.  In some circumstances this is desirable,\
      \ in\nother cases one may want to preserve the whitespace.\n\nThe first character has an index value of 1.\n\nIf one requests a negative value, this function will select a character by counting backwards\nfrom the end of the string.  In other words pos\
      \ = -1 is the same as asking for the last character.\n\nA requested value of zero, or a value greater than the length of the string returns an error.\n]]\nfunction str.pos(frame)\n\tlocal new_args = str._getParameters(frame.args, { 'target', 'pos' });\n\
      \tlocal target_str = new_args['target'] or '';\n\tlocal pos = tonumber(new_args['pos']) or 0;\n\t\n\tif pos == 0 or math.abs(pos) &gt; mw.ustring.len(target_str) then\n\t\treturn str._error('String index out of range');\n\tend\n\t\n\treturn mw.ustring.sub(target_str,\
      \ pos, pos);\nend\n\n--[[\nstr_find\n\nThis function duplicates the behavior of {{str_find}}, including all of its quirks.\nThis is provided in order to support existing templates, but is NOT RECOMMENDED for\nnew code and templates.  New code is recommended\
      \ to use the \"find\" function instead.\n\nReturns the first index in \"source\" that is a match to \"target\".  Indexing is 1-based,\nand the function returns -1 if the \"target\" string is not present in \"source\".\n\nImportant Note: If the \"target\"\
      \ string is empty / missing, this function returns a\nvalue of \"1\", which is generally unexpected behavior, and must be accounted for\nseparatetly.\n]]\nfunction str.str_find(frame)\n\tlocal new_args = str._getParameters(frame.args, { 'source', 'target'\
      \ });\n\tlocal source_str = new_args['source'] or '';\n\tlocal target_str = new_args['target'] or '';\n\t\n\tif target_str == '' then\n\t\treturn 1;\n\tend\n\t\n\tlocal start = mw.ustring.find(source_str, target_str, 1, true)\n\tif start == nil then\n\t\
      \tstart = -1\n\tend\n\t\n\treturn start\nend\n\n--[[\nfind\n\nThis function allows one to search for a target string or pattern within another\nstring.\n\nUsage:\n{{#invoke:string|find|source_str|target_string|start_index|plain_flag}}\nOR\n{{#invoke:string|find|source=source_str|target=target_str|start=start_index|plain=plain_flag}}\n\
      \nParameters\n    source: The string to search\n    target: The string or pattern to find within source\n    start: The index within the source string to start the search, defaults to 1\n    plain: Boolean flag indicating that target should be understood\
      \ as plain\n        text and not as a Lua style regular expression, defaults to true\n\nIf invoked using named parameters, Mediawiki will automatically remove any leading or\ntrailing whitespace from the parameter.  In some circumstances this is desirable,\
      \ in\nother cases one may want to preserve the whitespace.\n\nThis function returns the first index &gt;= \"start\" where \"target\" can be found\nwithin \"source\".  Indices are 1-based.  If \"target\" is not found, then this\nfunction returns an empty\
      \ string.  If either \"source\" or \"target\" are missing / empty, this\nfunction also returns an empty string.\n\nThis function should be safe for UTF-8 strings.\n]]\nfunction str.find(frame)\n\tlocal params = {\n\t\t[1] = { required = true },\n\t\t[2]\
      \ = { required = true },\n\t\t[3] = { type = \"number\" },\n\t\t[4] = { type = \"boolean\" },\n\t}\n\t\n\tlocal args = require(\"Module:parameters\").process(frame.args, params)\n\t\n\treturn mw.ustring.find(args[1], args[2], args[3], args[4])\nend\n\n\
      --[[\nreplace\n\nThis function allows one to replace a target string or pattern within another\nstring.\n\nUsage:\n{{#invoke:string|replace|source_str|pattern_string|replace_string|replacement_count|plain_flag}}\nOR\n{{#invoke:string|replace|source=source_string|pattern=pattern_string|replace=replace_string|\n\
      \   count=replacement_count|plain=plain_flag}}\n\nParameters\n    source: The string to search\n    pattern: The string or pattern to find within source\n    replace: The replacement text\n    count: The number of occurences to replace, defaults to all.\n\
      \    plain: Boolean flag indicating that pattern should be understood as plain\n        text and not as a Lua style regular expression, defaults to true\n]]\nfunction str.replace(frame)\n\tlocal new_args = str._getParameters(frame.args, { 'source', 'pattern',\
      \ 'replace', 'count', 'plain' });\n\tlocal source_str = new_args['source'] or '';\n\tlocal pattern = new_args['pattern'] or '';\n\tlocal replace = new_args['replace'] or '';\n\tlocal count = tonumber(new_args['count']);\n\tlocal plain = new_args['plain']\
      \ or true;\n\t\n\tif source_str == '' or pattern == '' then\n\t\treturn source_str;\n\tend\n\tplain = str._getBoolean(plain);\n\t\n\tif plain then\n\t\tpattern = str.pattern_escape(pattern);\n\t\treplace = mw.ustring.gsub(replace, \"%%\", \"%%%%\"); --Only\
      \ need to escape replacement sequences.\n\tend\n\t\n\tlocal result;\n\t\n\tresult = mw.ustring.gsub(source_str, pattern, replace, count);\n\t\n\treturn result;\nend\n\n\nfunction str.gsub(frame)\n\tlocal params = {\n\t\t[1] = { required = true, allow_empty\
      \ = true },\n\t\t[2] = { required = true, allow_empty = true },\n\t\t[3] = { required = true, allow_empty = true },\n\t\t[4] = { type = \"number\" },\n\t}\n\t\n\tlocal args = require(\"Module:parameters\").process(frame.args, params)\n\t\n\treturn (mw.ustring.gsub(args[1],\
      \ args[2], args[3], args[4]))\nend\n\n\n--[[\n    simple function to pipe string.rep to templates.\n]]\n\nfunction str.rep(frame)\n\tlocal repetitions = tonumber(frame.args[2])\n\tif not repetitions then\n\t\treturn str._error('function rep expects a number\
      \ as second parameter, received \"' .. (frame.args[2] or '') .. '\"')\n\tend\n\treturn string.rep(frame.args[1] or '', repetitions)\nend\n\nfunction str.lower(frame)\n\tlocal text = frame.args[1] or ''\n\treturn mw.ustring.lower(text)\nend\n\nstr.lc =\
      \ str.lower\n\n--[[\nHelper function that populates the argument list given that user may need to use a mix of\nnamed and unnamed parameters.  This is relevant because named parameters are not\nidentical to unnamed parameters due to string trimming, and\
      \ when dealing with strings\nwe sometimes want to either preserve or remove that whitespace depending on the application.\n]]\nfunction str._getParameters(frame_args, arg_list)\n\tlocal new_args = {};\n\tlocal index = 1;\n\tlocal value;\n\t\n\tfor _, arg\
      \ in ipairs(arg_list) do\n\t\tvalue = frame_args[arg]\n\t\tif value == nil then\n\t\t\tvalue = frame_args[index];\n\t\t\tindex = index + 1;\n\t\tend\n\t\tnew_args[arg] = value;\n\tend\n\t\n\treturn new_args;\nend\n\n--[[\nHelper function to handle error\
      \ messages.\n]]\nfunction str._error(error_str)\n\tlocal frame = mw.getCurrentFrame();\n\tlocal error_category = frame.args.error_category or 'Errors reported by Module String';\n\tlocal ignore_errors = frame.args.ignore_errors or false;\n\tlocal no_category\
      \ = frame.args.no_category or false;\n\t\n\tif str._getBoolean(ignore_errors) then\n\t\treturn '';\n\tend\n\t\n\tlocal error_str = '&lt;strong class=\"error\"&gt;String Module Error: ' .. error_str .. '&lt;/strong&gt;';\n\tif error_category ~= '' and not\
      \ str._getBoolean(no_category) then\n\t\terror_str = '[[Category:' .. error_category .. ']]' .. error_str;\n\tend\n\t\n\treturn error_str;\nend\n\n--[[\nHelper Function to interpret boolean strings\n]]\nfunction str._getBoolean(boolean_str)\n\tlocal boolean_value;\n\
      \t\n\tif type(boolean_str) == 'string' then\n\t\tboolean_str = boolean_str:lower();\n\t\tif boolean_str == 'false' or boolean_str == 'no' or boolean_str == '0'\n\t\t\t\tor boolean_str == '' then\n\t\t\tboolean_value = false;\n\t\telse\n\t\t\tboolean_value\
      \ = true;\n\t\tend\n\telseif type(boolean_str) == 'boolean' then\n\t\tboolean_value = boolean_str;\n\telse\n\t\terror('No boolean value found');\n\tend\n\treturn boolean_value\nend\n\n--[[\nHelper function that escapes all pattern characters – ().%+-*?[^$]\
      \ – so that they will be treated\nas plain text.\n]]\nfunction str.pattern_escape(pattern_str)\n\tlocal invoked = false\n\t\n\tif type(pattern_str) == \"table\" then\n\t\tif pattern_str.args then\n\t\t\tlocal frame = pattern_str\n\t\t\tinvoked = true\n\
      \t\t\t\n\t\t\tif frame.args[1] then\n\t\t\t\tpattern_str = frame.args[1]\n\t\t\telse\n\t\t\t\tpattern_str = frame:getParent().args[1]\n\t\t\tend\n\t\telse\n\t\t\terror(\"First argument to pattern_escape should be a string, a number, or a frame object.\"\
      )\n\t\tend\n\telseif not (type(pattern_str) == \"string\" or type(pattern_str) == \"number\") then\n\t\terror(\"First argument to pattern_escape should be a string or a number.\")\n\tend\n\t\n\tif invoked then\n\t\tlocal escaped = mw.ustring.gsub(pattern_str,\
      \ \"([%(%)%.%%%+%-%*%?%[%^%$%]])\", \"%%%1\")\n\t\treturn escaped\n\telse\n\t\treturn mw.ustring.gsub(pattern_str, \"([%(%)%.%%%+%-%*%?%[%^%$%]])\", \"%%%1\");\n\tend\nend\n\nfunction str.count(text, pattern, plain)\n\tif not (type(text) == \"string\"\
      \ or type(text) == \"number\") then\n\t\terror('The first argument to the function \"count\" must be a string or a number, not a ' .. type(text) .. '.')\n\tend\n\t\n\tif not (type(pattern) == \"string\" or type(pattern) == \"number\") then\n\t\terror('The\
      \ first argument to the function \"count\" must be a string or a number, not a ' .. type(text) .. '.')\n\tend\n\t\n\tif plain then\n\t\tpattern = str.pattern_escape(pattern)\n\tend\n\t\n\tlocal _, count = mw.ustring.gsub(text, pattern, \"\")\n\t\n\treturn\
      \ count\nend\n\nfunction str.plain_gsub(text, pattern, replacement)\n\tlocal invoked = false\n\t\n\tif type(text) == \"table\" then\n\t\tinvoked = true\n\t\t\n\t\tif text.args then\n\t\t\tlocal frame = text\n\t\t\t\n\t\t\tlocal params = {\n\t\t\t\t[1]\
      \ = {},\n\t\t\t\t[2] = {},\n\t\t\t\t[3] = { allow_empty = true },\n\t\t\t}\n\t\t\t\n\t\t\tlocal args = require(\"Module:parameters\").process(frame.args, params)\n\t\t\t\n\t\t\ttext = args[1]\n\t\t\tpattern = args[2]\n\t\t\treplacement = args[3]\n\t\t\
      else\n\t\t\terror(\"If the first argument to plain_gsub is a table, it should be a frame object.\")\n\t\tend\n\telse\n\t\tif not (type(pattern) == \"string\" or type(pattern) == \"number\") then\n\t\t\terror(\"The second argument to plain_gsub should be\
      \ a string or a number.\")\n\t\tend\n\t\t\n\t\tif not (type(replacement) == \"string\" or type(replacement) == \"number\") then\n\t\t\terror(\"The third argument to plain_gsub should be a string or a number.\")\n\t\tend\n\tend\n\t\n\tpattern = str.pattern_escape(pattern)\n\
      \t\n\tif invoked then\n\t\ttext = mw.ustring.gsub(text, pattern, replacement)\n\t\treturn text\n\telse\n\t\treturn mw.ustring.gsub(text, pattern, replacement)\n\tend\nend\n\nfunction str.matchToArray(text, pattern)\n\tlocal invoked = false\n\t\n\tif type(text)\
      \ == \"table\" then\n\t\tinvoked = true\n\t\t\n\t\tif text.args then\n\t\t\tlocal frame = text\n\t\t\t\n\t\t\tlocal params = {\n\t\t\t\t[1] = { required = true },\n\t\t\t\t[2] = { required = true },\n\t\t\t}\n\t\t\t\n\t\t\tlocal args = require(\"Module:parameters\"\
      ).process(frame.args, params)\n\t\t\t\n\t\t\ttext = args[1]\n\t\t\tpattern = args[2]\n\t\telse\n\t\t\terror(\"If the first argument to matchToArray is a table, it should be a frame object.\")\n\t\tend\n\telse\n\t\tif not (type(pattern) == \"string\" or\
      \ type(pattern) == \"number\") then\n\t\t\terror(\"The second argument to matchToArray should be a string or a number.\")\n\t\tend\n\tend\n\t\n\tlocal matches = {}\n\tlocal i = 0\n\tfor match in mw.ustring.gmatch(text, pattern) do\n\t\ti = i + 1\n\t\t\
      matches[i] = match\n\tend\n\t\n\tif i &gt; 0 then\n\t\tif invoked then\n\t\t\treturn table.concat(matches, \", \")\n\t\telse\n\t\t\treturn matches\n\t\tend\n\telse\n\t\tif invoked then\n\t\t\treturn \"\"\n\t\telse\n\t\t\treturn nil\n\t\tend\n\tend\nend\n\
      \n--[=[\n\tSimilar to gmatch, but it returns the count of the match in addition to the\n\tlist of captures, something like ipairs().\n\t\n\tIf the pattern doesn't contain any captures, the whole match is returned.\n\t\n\tInvoke thus:\n\t\n\t\tfor i, whole_match\
      \ in require(\"Module:string\").imatch(text, pattern) do\n\t\t\t[ do something with i and whole_match ]\n\t\tend\n\t\n\tor\n\t\n\t\tfor i, capture1[, capture2[, capture3[, ...]]] in require(\"Module:string\").imatch(text, pattern) do\n\t\t\t[ do something\
      \ with i and capture1 ]\n\t\tend\n\t\n\tFor example, this code\n\t\tfor i, whole_match in require(\"Module:string\").imatch(\"a b c\", \"[a-z]\") do\n\t\t\tmw.log(i, whole_match)\n\t\tend\n\twill log\n\t\t1\ta\n\t\t2\tb\n\t\t3\tc\n]=]\nfunction str.imatch(text,\
      \ pattern, pos, plain, use_basic_Lua_function)\n\tlocal i = 0\n\tpos = pos or 0\n\tif not string.find(pattern, \"%b()\") then\n\t\tpattern = \"(\" .. pattern .. \")\"\n\tend\n\tlocal find = use_basic_Lua_function and string.find or mw.ustring.find\n\t\
      return function()\n\t\ti = i + 1\n\t\tlocal return_values = { find(text, pattern, pos, plain) }\n\t\tlocal j = return_values[2]\n\t\t\n\t\tif return_values[3] then\n\t\t\tpos = j + 1\n\t\t\t-- Skip the first two returned values, which are the indices of\
      \ the\n\t\t\t-- whole match.\n\t\t\treturn i, unpack(return_values, 3)\n\t\tend\n\tend\nend\n\nfunction str.escapebytes(s)\n\treturn (string.gsub(s,\n\t\t'.',\n\t\tfunction(char)\n\t\t\treturn ('\\\\%03d'):format(string.byte(char))\n\t\tend))\nend\n\n\
      function str.URIdecode(frame)\n\treturn mw.uri.decode(frame.args[1], frame.args[2] or \"PATH\")\nend\n\nreturn str</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-15T21:09:15.874Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Atable&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; WMF-Last-Access=15-Apr-2019; WMF-Last-Access-Global=15-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=44148 t=1555362555761924
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:15 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1317.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=15-Apr-2019;WMF-Last-Access-Global=15-Apr-2019;https=1
      X-Cache: cp1085 pass, cp3030 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 569835335, 635887156, 704515861
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"5122966\" pageid=\"5122966\" ns=\"828\" title=\"Module:table\"><revisions><rev user=\"Benwing2\" timestamp=\"2019-04-14T04:16:37Z\" contentformat=\"\
      text/plain\" contentmodel=\"Scribunto\" comment=\"add deepEquals, deepEqualsList for deep comparisons\" xml:space=\"preserve\">--[[\n------------------------------------------------------------------------------------\n--                      table (formerly\
      \ TableTools)                               --\n--                                                                                --\n-- This module inclcudes a number of functions for dealing with Lua tables.        --\n-- It is a meta-module, meant to\
      \ be called from other Lua modules, and should     --\n-- not be called directly from #invoke.                                           --\n------------------------------------------------------------------------------------\n--]]\n\n--[[\n\tInserting\
      \ new values into a table using a local \"index\" variable, which is\n\tincremented each time, is faster than using \"table.insert(t, x)\" or\n\t\"t[#t + 1] = x\". See the talk page.\n]]\n\nlocal libraryUtil = require('libraryUtil')\n\nlocal export = {}\n\
      \n-- Define often-used variables and functions.\nlocal floor = math.floor\nlocal infinity = math.huge\nlocal checkType = libraryUtil.checkType\nlocal checkTypeMulti = libraryUtil.checkTypeMulti\n\nlocal function _check(funcName, expectType)\n\tif type(expectType)\
      \ == \"string\" then\n\t\treturn function(argIndex, arg, nilOk)\n\t\t\tcheckType(funcName, argIndex, arg, expectType, nilOk)\n\t\tend\n\telse\n\t\treturn function(argIndex, arg, expectType, nilOk)\n\t\t\tif type(expectType) == \"table\" then\n\t\t\t\t\
      checkTypeMulti(funcName, argIndex, arg, expectType, nilOk)\n\t\t\telse\n\t\t\t\tcheckType(funcName, argIndex, arg, expectType, nilOk)\n\t\t\tend\n\t\tend\n\tend\nend\n\n--[[\n------------------------------------------------------------------------------------\n\
      -- isPositiveInteger\n--\n-- This function returns true if the given value is a positive integer, and false\n-- if not. Although it doesn't operate on tables, it is included here as it is\n-- useful for determining whether a given table key is in the array\
      \ part or the\n-- hash part of a table.\n------------------------------------------------------------------------------------\n--]]\nfunction export.isPositiveInteger(v)\n\treturn type(v) == 'number' and v &gt;= 1 and floor(v) == v and v &lt; infinity\n\
      end\n\n--[[\n------------------------------------------------------------------------------------\n-- isNan\n--\n-- This function returns true if the given number is a NaN value, and false\n-- if not. Although it doesn't operate on tables, it is included\
      \ here as it is\n-- useful for determining whether a value can be a valid table key. Lua will\n-- generate an error if a NaN is used as a table key.\n------------------------------------------------------------------------------------\n--]]\nfunction export.isNan(v)\n\
      \tif type(v) == 'number' and tostring(v) == '-nan' then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\n\n--[[\n------------------------------------------------------------------------------------\n-- shallowClone\n--\n-- This returns a clone of\
      \ a table. The value returned is a new table, but all\n-- subtables and functions are shared. Metamethods are respected, but the returned\n-- table will have no metatable of its own.\n------------------------------------------------------------------------------------\n\
      --]]\nfunction export.shallowClone(t)\n\tlocal ret = {}\n\tfor k, v in pairs(t) do\n\t\tret[k] = v\n\tend\n\treturn ret\nend\n\n--[[\nShallow copy\n]]\nfunction export.shallowcopy(orig)\n\tlocal orig_type = type(orig)\n\tlocal copy\n\tif orig_type == 'table'\
      \ then\n\t\tcopy = {}\n\t\tfor orig_key, orig_value in pairs(orig) do\n\t\t\tcopy[orig_key] = orig_value\n\t\tend\n\telse -- number, string, boolean, etc\n\t\tcopy = orig\n\tend\n\treturn copy\nend\n\n--[[\n\tRecursive deep copy function\n\tEquivalent\
      \ to mw.clone?\n]]\nlocal function deepcopy(orig, includeMetatable, already_seen)\n\t-- Stores copies of tables indexed by the original table.\n\talready_seen = already_seen or {}\n\t\n\tlocal copy = already_seen[orig]\n\tif copy ~= nil then\n\t\treturn\
      \ copy\n\tend\n\t\n\tif type(orig) == 'table' then\n\t\tcopy = {}\n\t\tfor orig_key, orig_value in pairs(orig) do\n\t\t\tcopy[deepcopy(orig_key, includeMetatable, already_seen)] = deepcopy(orig_value, includeMetatable, already_seen)\n\t\tend\n\t\talready_seen[orig]\
      \ = copy\n\t\t\n\t\tif includeMetatable then\n\t\t\tlocal mt = getmetatable(orig)\n\t\t\tif mt ~= nil then\n\t\t\t\tlocal mt_copy = deepcopy(mt, includeMetatable, already_seen)\n\t\t\t\tsetmetatable(copy, mt_copy)\n\t\t\tend\n\t\tend\n\telse -- number,\
      \ string, boolean, etc\n\t\tcopy = orig\n\tend\n\treturn copy\nend\n\nfunction export.deepcopy(orig, noMetatable, already_seen)\n\tcheckType(\"deepcopy\", 3, already_seen, \"table\", true)\n\t\n\treturn deepcopy(orig, not noMetatable, already_seen)\nend\n\
      \n--[[\n------------------------------------------------------------------------------------\n-- removeDuplicates\n--\n-- This removes duplicate values from an array. Non-positive-integer keys are\n-- ignored. The earliest value is kept, and all subsequent\
      \ duplicate values are\n-- removed, but otherwise the array order is unchanged.\n------------------------------------------------------------------------------------\n--]]\nfunction export.removeDuplicates(t)\n\tcheckType('removeDuplicates', 1, t, 'table')\n\
      \tlocal isNan = export.isNan\n\tlocal ret, exists = {}, {}\n\tlocal index = 1\n\tfor _, v in ipairs(t) do\n\t\tif isNan(v) then\n\t\t\t-- NaNs can't be table keys, and they are also unique, so we don't need to check existence.\n\t\t\tret[index] = v\n\t\
      \t\tindex = index + 1\n\t\telse\n\t\t\tif not exists[v] then\n\t\t\t\tret[index] = v\n\t\t\t\tindex = index + 1\n\t\t\t\texists[v] = true\n\t\t\tend\n\t\tend\n\tend\n\treturn ret\nend\n\n--[[\n------------------------------------------------------------------------------------\n\
      -- numKeys\n--\n-- This takes a table and returns an array containing the numbers of any numerical\n-- keys that have non-nil values, sorted in numerical order.\n------------------------------------------------------------------------------------\n--]]\n\
      function export.numKeys(t, checked)\n\tif not checked then\n\t\tcheckType('numKeys', 1, t, 'table')\n\tend\n\tlocal isPositiveInteger = export.isPositiveInteger\n\tlocal nums = {}\n\tlocal index = 1\n\tfor k, _ in pairs(t) do\n\t\tif isPositiveInteger(k)\
      \ then\n\t\t\tnums[index] = k\n\t\t\tindex = index + 1\n\t\tend\n\tend\n\ttable.sort(nums)\n\treturn nums\nend\n\nfunction export.maxIndex(t)\n\tcheckType('maxIndex', 1, t, 'table')\n\tlocal positiveIntegerKeys = export.numKeys(t)\n\tif positiveIntegerKeys[1]\
      \ then\n\t\treturn math.max(unpack(positiveIntegerKeys))\n\telse\n\t\treturn 0 -- ???\n\tend\nend\n\n--[[\n------------------------------------------------------------------------------------\n-- affixNums\n--\n-- This takes a table and returns an array\
      \ containing the numbers of keys with the\n-- specified prefix and suffix.\n-- affixNums({a1 = 'foo', a3 = 'bar', a6 = 'baz'}, \"a\")\n--\t\t↓\n-- {1, 3, 6}.\n------------------------------------------------------------------------------------\n--]]\n\
      function export.affixNums(t, prefix, suffix)\n\tlocal check = _check('affixNums')\n\tcheck(1, t, 'table')\n\tcheck(2, prefix, 'string', true)\n\tcheck(3, suffix, 'string', true)\n\t\n\tlocal function cleanPattern(s)\n\t\t-- Cleans a pattern so that the\
      \ magic characters ()%.[]*+-?^$ are interpreted literally.\n\t\ts = s:gsub('([%(%)%%%.%[%]%*%+%-%?%^%$])', '%%%1')\n\t\treturn s\n\tend\n\t\n\tprefix = prefix or ''\n\tsuffix = suffix or ''\n\tprefix = cleanPattern(prefix)\n\tsuffix = cleanPattern(suffix)\n\
      \tlocal pattern = '^' .. prefix .. '([1-9]%d*)' .. suffix .. '$'\n\t\n\tlocal nums = {}\n\tlocal index = 1\n\tfor k, _ in pairs(t) do\n\t\tif type(k) == 'string' then\n\t\t\tlocal num = mw.ustring.match(k, pattern)\n\t\t\tif num then\n\t\t\t\tnums[index]\
      \ = tonumber(num)\n\t\t\t\tindex = index + 1\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(nums)\n\treturn nums\nend\n\n--[[\n------------------------------------------------------------------------------------\n-- numData\n--\n-- Given a table with keys like\
      \ (\"foo1\", \"bar1\", \"foo2\", \"baz2\"), returns a table\n-- of subtables in the format\n-- { [1] = {foo = 'text', bar = 'text'}, [2] = {foo = 'text', baz = 'text'} }\n-- Keys that don't end with an integer are stored in a subtable named \"other\".\n\
      -- The compress option compresses the table so that it can be iterated over with\n-- ipairs.\n------------------------------------------------------------------------------------\n--]]\nfunction export.numData(t, compress)\n\tlocal check = _check('numData')\n\
      \tcheck(1, t, 'table')\n\tcheck(2, compress, 'boolean', true)\n\t\n\tlocal ret = {}\n\tfor k, v in pairs(t) do\n\t\tlocal prefix, num = tostring(k):match('^([^0-9]*)([1-9][0-9]*)$')\n\t\tif num then\n\t\t\tnum = tonumber(num)\n\t\t\tlocal subtable = ret[num]\
      \ or {}\n\t\t\tif prefix == '' then\n\t\t\t\t-- Positional parameters match the blank string; put them at the start of the subtable instead.\n\t\t\t\tprefix = 1\n\t\t\tend\n\t\t\tsubtable[prefix] = v\n\t\t\tret[num] = subtable\n\t\telse\n\t\t\tlocal subtable\
      \ = ret.other or {}\n\t\t\tsubtable[k] = v\n\t\t\tret.other = subtable\n\t\tend\n\tend\n\tif compress then\n\t\tlocal other = ret.other\n\t\tret = export.compressSparseArray(ret)\n\t\tret.other = other\n\tend\n\treturn ret\nend\n\n--[[\n------------------------------------------------------------------------------------\n\
      -- compressSparseArray\n--\n-- This takes an array with one or more nil values, and removes the nil values\n-- while preserving the order, so that the array can be safely traversed with\n-- ipairs.\n------------------------------------------------------------------------------------\n\
      --]]\nfunction export.compressSparseArray(t)\n\tcheckType('compressSparseArray', 1, t, 'table')\n\tlocal ret = {}\n\tlocal index = 1\n\tlocal nums = export.numKeys(t)\n\tfor _, num in ipairs(nums) do\n\t\tret[index] = t[num]\n\t\tindex = index + 1\n\t\
      end\n\treturn ret\nend\n\n--[[\n------------------------------------------------------------------------------------\n-- sparseIpairs\n--\n-- This is an iterator for sparse arrays. It can be used like ipairs, but can\n-- handle nil values.\n------------------------------------------------------------------------------------\n\
      --]]\nfunction export.sparseIpairs(t)\n\tcheckType('sparseIpairs', 1, t, 'table')\n\tlocal nums = export.numKeys(t)\n\tlocal i = 0\n\treturn function()\n\t\ti = i + 1\n\t\tlocal key = nums[i]\n\t\tif key then\n\t\t\treturn key, t[key]\n\t\telse\n\t\t\t\
      return nil, nil\n\t\tend\n\tend\nend\n\n--[[\n------------------------------------------------------------------------------------\n-- size\n--\n-- This returns the size of a key/value pair table. It will also work on arrays,\n-- but for arrays it is more\
      \ efficient to use the # operator.\n------------------------------------------------------------------------------------\n--]]\nfunction export.size(t)\n\tcheckType('size', 1, t, 'table')\n\tlocal i = 0\n\tfor _ in pairs(t) do\n\t\ti = i + 1\n\tend\n\t\
      return i\nend\n\n--[[\n-- This returns the length of a table, or the first integer key n counting from\n-- 1 such that t[n + 1] is nil. It is similar to the operator #, but may return\n-- a different value when there are gaps in the array portion of the\
      \ table.\n-- Intended to be used on data loaded with mw.loadData. For other tables, use #.\n--]]\nfunction export.length(t)\n\tlocal i = 0\n\trepeat\n\t\ti = i + 1\n\tuntil t[i] == nil\n\treturn i - 1\nend\n\n--[[\nTakes table and a value to be found.\n\
      If the value is in the array portion of the table, return true.\nIf the value is in the hashmap or not in the table, return false.\n]]\nfunction export.contains(list, x)\n\tfor _, v in ipairs(list) do\n\t\tif v == x then return true end\n\tend\n\treturn\
      \ false\nend\n\n--[[\nRecursively compare two values that may be tables, including tables with\nnested tables as values. Return true if both values are structurally equal.\nNote that this handles arbitary levels of nesting. If all tables are known\nto\
      \ be lists (with only integral keys), use export.deepEqualsList, which will\nbe more efficient.\n\nNOTE: This is *NOT* smart enough to properly handle cycles; in such a case, it\nwill get into an infinite loop.\n]]\nfunction export.deepEquals(x, y)\n \
      \   if type(x) == \"table\" and type(y) == \"table\" then\n    \t-- Two tables are the same if they have the same number of elements\n    \t-- and all keys that are present in one of the tables compare equal\n    \t-- to the corresponding keys in the other\
      \ table, using structural\n    \t-- comparison.\n    \tlocal sizex = 0\n        for key, value in pairs(x) do\n            if not export.deepEquals(value, y[key]) then\n                return false\n            end\n            sizex = sizex + 1\n    \
      \    end\n        local sizey = export.size(y)\n        if sizex ~= sizey then\n            return false\n        end \n        return true\n    end\n    return x == y\nend\n\n--[[\nRecursively compare two values that may be lists (i.e. tables with integral\n\
      keys), including lists with nested lists as values. Return true if both values\nare structurally equal. Note that this handles arbitary levels of nesting.\nResults are undefined if tables with non-integral keys are present anywhere in\neither structure;\
      \ if that may be the case, use export.deepEquals, which will\nhandle such tables correctly but be less efficient on lists than\nexport.deepEqualsList.\n\nNOTE: This is *NOT* smart enough to properly handle cycles; in such a case, it\nwill get into an infinite\
      \ loop.\n]]\nfunction export.deepEqualsList(x, y)\n    if type(x) == \"table\" and type(y) == \"table\" then\n        if #x ~= #y then\n            return false\n        end \n        for key, value in ipairs(x) do\n            if not export.deepEqualsList(value,\
      \ y[key]) then\n                return false\n            end\n        end\n        return true\n    end\n    return x == y\nend\n\n--[[\n\tFinds key for specified value in a given table.\n\tRoughly equivalent to reversing the key-value pairs in the table\
      \ –\n\t\treversed_table = { [value1] = key1, [value2] = key2, ... }\n\t– and then returning reversed_table[valueToFind].\n\t\n\tThe value can only be a string or a number\n\t(not nil, a boolean, a table, or a function).\n\t\n\tOnly reliable if there is\
      \ just one key with the specified value.\n\tOtherwise, the function returns the first key found,\n\tand the output is unpredictable.\n]]\nfunction export.keyFor(t, valueToFind)\n\tlocal check = _check('keyFor')\n\tcheck(1, t, 'table')\n\tcheck(2, valueToFind,\
      \ { 'string', 'number' })\n\t\n\tfor key, value in pairs(t) do\n\t\tif value == valueToFind then\n\t\t\treturn key\n\t\tend\n\tend\n\t\n\treturn nil\nend\n\n--[[\n\tThe default sorting function used in export.keysToList if no keySort\n\tis defined.\n]]\n\
      local function defaultKeySort(key1, key2)\n\t-- \"number\" &lt; \"string\", so numbers will be sorted before strings.\n\tlocal type1, type2 = type(key1), type(key2)\n\tif type1 ~= type2 then\n\t\treturn type1 &lt; type2\n\telse\n\t\treturn key1 &lt; key2\n\
      \tend\nend\n\n--[[\n\tReturns a list of the keys in a table, sorted using either the default\n\ttable.sort function or a custom keySort function.\n\tIf there are only numerical keys, numKeys is probably more efficient.\n]]\nfunction export.keysToList(t,\
      \ keySort, checked)\n\tif not checked then\n\t\tlocal check = _check('keysToList')\n\t\tcheck(1, t, 'table')\n\t\tcheck(2, keySort, 'function', true)\n\tend\n\t\n\tlocal list = {}\n\tlocal index = 1\n\tfor key, _ in pairs(t) do\n\t\tlist[index] = key\n\
      \t\tindex = index + 1\n\tend\n\t\n\t-- Place numbers before strings, otherwise sort using &lt;.\n\tif not keySort then\n\t\tkeySort = defaultKeySort\n\tend\n\t\n\ttable.sort(list, keySort)\n\t\n\treturn list\nend\n\n--[[\n\tIterates through a table, with\
      \ the keys sorted using the keysToList function.\n\tIf there are only numerical keys, sparseIpairs is probably more efficient.\n]]\nfunction export.sortedPairs(t, keySort)\n\tlocal check = _check('keysToList')\n\tcheck(1, t, 'table')\n\tcheck(2, keySort,\
      \ 'function', true)\n\t\n\tlocal list = export.keysToList(t, keySort, true)\n\t\n\tlocal i = 0\n\treturn function()\n\t\ti = i + 1\n\t\tlocal key = list[i]\n\t\tif key ~= nil then\n\t\t\treturn key, t[key]\n\t\telse\n\t\t\treturn nil, nil\n\t\tend\n\t\
      end\nend\n\nfunction export.reverseIpairs(list)\n\tcheckType('reverse_ipairs', 1, list, 'table')\n\t\n\tlocal i = #list + 1\n\treturn function()\n\t\ti = i - 1\n\t\tif list[i] ~= nil then\n\t\t\treturn i, list[i]\n\t\telse\n\t\t\treturn nil, nil\n\t\t\
      end\n\tend\nend\n\n--[=[\n\tJoins an array with serial comma and serial conjunction, normally \"and\".\n\tAn improvement on mw.text.listToText, which doesn't properly handle serial\n\tcommas.\n\t\n\tOptions:\n\t\t- conj\n\t\t\tConjunction to use; defaults\
      \ to \"and\".\n\t\t- italicizeConj\n\t\t\tItalicize conjunction: for [[Module:Template:also]]\n\t\t- dontTag\n\t\t\tDon't tag the serial comma and serial \"and\". For error messages, in\n\t\t\twhich HTML cannot be used.\n]=]\nfunction export.serialCommaJoin(seq,\
      \ options)\n\tlocal check = _check(\"serialCommaJoin\", \"table\")\n\tcheck(1, seq)\n\tcheck(2, options, true)\n\t\n\tlocal length = #seq\n\t\n\tif not options then\n\t\toptions = {}\n\tend\n\t\n\tlocal conj\n\tif length &gt; 1 then\n\t\tconj = options.conj\
      \ or \"and\"\n\t\tif options.italicizeConj then\n\t\t\tconj = \"''\" .. conj .. \"''\"\n\t\tend\n\tend\n\t\n\tif length == 0 then\n\t\treturn \"\"\n\telseif length == 1 then\n\t\treturn seq[1] -- nothing to join\n\telseif length == 2 then\n\t\treturn seq[1]\
      \ .. \" \" .. conj .. \" \" .. seq[2]\n\telse\n\t\tlocal comma = options.dontTag and \",\" or '&lt;span class=\"serial-comma\"&gt;,&lt;/span&gt;'\n\t\tconj = options.dontTag and ' ' .. conj .. \" \" or '&lt;span class=\"serial-and\"&gt; ' .. conj .. '&lt;/span&gt;\
      \ '\n\t\treturn table.concat(seq, \", \", 1, length - 1) ..\n\t\t\t\tcomma .. conj .. seq[length]\n\tend\nend\n\n--[[\n\tConcatenates all values in the table that are indexed by a number, in order.\n\tsparseConcat{ a, nil, c, d }  =&gt;  \"acd\"\n\tsparseConcat{\
      \ nil, b, c, d }  =&gt;  \"bcd\"\n]]\nfunction export.sparseConcat(t, sep, i, j)\n\tlocal list = {}\n\t\n\tlocal list_i = 0\n\tfor _, v in export.sparseIpairs(t) do\n\t\tlist_i = list_i + 1\n\t\tlist[list_i] = v\n\tend\n\t\n\treturn table.concat(list,\
      \ sep, i, j)\nend\n\n--[[\n\tValues of numberic keys in array portion of table are reversed:\n\t{ \"a\", \"b\", \"c\" } -&gt; { \"c\", \"b\", \"a\" }\n--]]\nfunction export.reverse(t)\n\tcheckType(\"reverse\", 1, t, \"table\")\n\t\n\tlocal new_t = {}\n\
      \tlocal new_t_i = 1\n\tfor i = #t, 1, -1 do\n\t\tnew_t[new_t_i] = t[i]\n\t\tnew_t_i = new_t_i + 1\n\tend\n\treturn new_t\nend\n\nfunction export.reverseConcat(t, sep, i, j)\n\treturn table.concat(export.reverse(t), sep, i, j)\nend\n\n-- { \"a\", \"b\"\
      , \"c\" } -&gt; { a = 1, b = 2, c = 3 }\nfunction export.invert(array)\n\tcheckType(\"invert\", 1, array, \"table\")\n\t\n\tlocal map = {}\n\tfor i, v in ipairs(array) do\n\t\tmap[v] = i\n\tend\n\t\n\treturn map\nend\n\n--[[\n\t{ \"a\", \"b\", \"c\" }\
      \ -&gt; { [\"a\"] = true, [\"b\"] = true, [\"c\"] = true }\n--]]\nfunction export.listToSet(t)\n\tcheckType(\"listToSet\", 1, t, \"table\")\n\t\n\tlocal set = {}\n\tfor _, item in ipairs(t) do\n\t\tset[item] = true\n\tend\n\treturn set\nend\n\n--[[\n\t\
      Returns true if all keys in the table are consecutive integers starting at 1.\n--]]\nfunction export.isArray(t)\n\tcheckType(\"isArray\", 1, t, \"table\")\n\t\n\tlocal i = 0\n\tfor _ in pairs(t) do\n\t\ti = i + 1\n\t\tif t[i] == nil then\n\t\t\treturn\
      \ false\n\t\tend\n\tend\n\treturn true\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-15T21:09:17.059Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Aheadword%2Fdata&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; WMF-Last-Access=15-Apr-2019; WMF-Last-Access-Global=15-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=37810 t=1555362556970298
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:17 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1226.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=15-Apr-2019;WMF-Last-Access-Global=15-Apr-2019;https=1
      X-Cache: cp1083 pass, cp3032 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 926396439, 230883325, 686063427
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"6074448\" pageid=\"6074448\" ns=\"828\" title=\"Module:headword/data\"><revisions><rev user=\"Surjection\" timestamp=\"2019-01-11T21:27:17Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"they are not lemmas just because you say they are\" xml:space=\"preserve\">local data = {}\n\ndata.invariable = {\n\t\"cmavo\",\n\t\"cmene\",\n\t\"fu'ivla\",\n\t\"gismu\",\n\t\"Han tu\"\
      ,\n\t\"hanzi\",\n\t\"hanja\",\n\t\"jyutping\",\n\t\"kanji\",\n\t\"lujvo\",\n\t\"phrasebook\",\n\t\"pinyin\",\n\t\"rafsi\",\n\t\"romaji\",\n}\n\ndata.lemmas = {\n\t\"abbreviations\",\n\t\"acronyms\",\n\t\"adjectives\",\n\t\"adnominals\",\n\t\"adpositions\"\
      ,\n\t\"adverbs\",\n\t\"affixes\",\n\t\"ambipositions\",\n\t\"articles\",\n\t\"circumfixes\",\n\t\"circumpositions\",\n\t\"classifiers\",\n\t\"cmavo\",\n\t\"cmavo clusters\",\n\t\"cmene\",\n\t\"combining forms\",\n\t\"conjunctions\",\n\t\"counters\",\n\t\
      \"determiners\",\n\t\"diacritical marks\",\n\t\"equative adjectives\",\n\t\"fu'ivla\",\n\t\"gismu\",\n\t\"Han characters\",\n\t\"Han tu\",\n\t\"hanzi\",\n\t\"hanja\",\n\t\"idioms\",\n\t\"infixes\",\n\t\"interfixes\",\n\t\"initialisms\",\n\t\"interjections\"\
      ,\n\t\"kanji\",\n\t\"letters\",\n\t\"ligatures\",\n\t\"lujvo\",\n\t\"morphemes\",\n\t\"non-constituents\",\n\t\"nouns\",\n\t\"numbers\",\n\t\"numeral symbols\",\n\t\"numerals\",\n\t\"particles\",\n\t\"phrases\",\n\t\"postpositions\",\n\t\"predicatives\"\
      ,\n\t\"prefixes\",\n\t\"prepositions\",\n\t\"prepositional phrases\",\n\t\"preverbs\",\n\t\"pronominal adverbs\",\n\t\"pronouns\",\n\t\"proverbs\",\n\t\"proper nouns\",\n\t\"punctuation marks\",\n\t\"relatives\",\n\t\"roots\",\n\t\"stems\",\n\t\"suffixes\"\
      ,\n\t\"syllables\",\n\t\"symbols\",\n\t\"verbs\",\n}\n\ndata.nonlemmas = {\n\t\"active participles\",\n\t\"adjectival participles\",\n\t\"adjective forms\",\n\t\"adjective comparative forms\", -- TODO: replace with \"comparative adjectives\" or \"comparative\
      \ adjective forms\", depending on which one the word is\n\t\"adjective feminine forms\",\n\t\"adjective equative forms\",\n\t\"adjective plural forms\",\n\t\"adjective superlative forms\", -- TODO: replace with \"superlative adjectives\" or \"superlative\
      \ adjective forms\", depending on which one the word is\n\t\"adverb forms\",\n\t\"adverb comparative forms\", -- TODO: replace with \"comparative adverbs\" or \"comparative adverb forms\", depending on which one the word is\n\t\"adverb superlative forms\"\
      , -- TODO: replace with \"superlative adverbs\" or \"superlative adverb forms\", depending on which one the word is\n\t\"adverbial participles\",\n\t\"agent participles\",\n\t\"article forms\",\n\t\"circumfix forms\",\n\t\"combined forms\",\n\t\"comparative\
      \ adjective forms\",\n\t\"comparative adjectives\",\n\t\"comparative adverb forms\",\n\t\"comparative adverbs\",\n\t\"contractions\",\n\t\"converbs\",\n\t\"determiner comparative forms\",\n\t\"determiner forms\",\n\t\"determiner superlative forms\",\n\t\
      \"diminutive nouns\",\n\t\"future participles\",\n\t\"gerunds\",\n\t\"infinitive forms\",\n\t\"infinitives\",\n\t\"interjection forms\",\n\t\"jyutping\",\n\t\"kanji readings\",\n\t\"misspellings\",\n\t\"negative participles\",\n\t\"nominal participles\"\
      ,\n\t\"noun case forms\",\n\t\"noun dual forms\",\n\t\"noun forms\",\n\t\"noun plural forms\",\n\t\"noun possessive forms\",\n\t\"noun singulative forms\",\n\t\"numeral forms\",\n\t\"participles\",\n\t\"participle forms\",\n\t\"particle forms\",\n\t\"\
      passive participles\",\n\t\"past active participles\",\n\t\"past participles\",\n\t\"past participle forms\",\n\t\"past passive participles\",\n\t\"perfect active participles\",\n\t\"perfect participles\",\n\t\"perfect passive participles\",\n\t\"pinyin\"\
      ,\n\t\"plurals\",\n\t\"postposition forms\",\n\t\"prefix forms\",\n\t\"preposition contractions\",\n\t\"preposition forms\",\n\t\"prepositional pronouns\",\n\t\"present active participles\",\n\t\"present participles\",\n\t\"present passive participles\"\
      ,\n\t\"pronoun forms\",\n\t\"pronoun possessive forms\",\n\t\"proper noun forms\",\n\t\"proper noun plural forms\",\n\t\"rafsi\",\n\t\"romanizations\",\n        \"root forms\",\n\t\"singulatives\",\n\t\"suffix forms\",\n\t\"superlative adjective forms\"\
      ,\n\t\"superlative adjectives\",\n\t\"superlative adverb forms\",\n\t\"superlative adverbs\",\n\t\"verb forms\",\n\t\"verbal nouns\",\n}\n\ndata.notranslit = {\n\t\"ams\",\n\t\"az\",\n\t\"bbc\",\n\t\"bug\",\n\t\"cia\",\n\t\"cjm\",\n\t\"cmn\",\n\t\"hak\"\
      ,\n\t\"ja\",\n\t\"kzg\",\n\t\"lad\",\n\t\"lzh\",\n\t\"ms\",\n\t\"mul\",\n\t\"mvi\",\n\t\"nan\",\n\t\"oj\",\n\t\"okn\",\n\t\"pi\",\n\t\"ro\",\n\t\"ryn\",\n\t\"rys\",\n\t\"ryu\",\n\t\"sh\",\n\t\"tgt\",\n\t\"th\",\n\t\"tkn\",\n\t\"tly\",\n\t\"und\",\n\t\"\
      vi\",\n\t\"xug\",\n\t\"yue\",\n\t\"yoi\",\n\t\"yox\",\n\t\"za\",\n\t\"zh\",\n}\n\n-- Script codes for which a script-tagged display title will be added.\t\ndata.toBeTagged = {\n\t\"Ahom\",\n\t\"Arab\",\n\t\"Avst\",\n\t\"Bali\",\n\t\"Cham\",\n\t\"Copt\"\
      ,\n\t\"Kali\",\n\t\"Hani\",\n\t\"Hebr\",\n\t\"Lana\",\n\t\"Linb\",\n\t\"Mand\",\n\t\"Mong\",\n\t\"polytonic\",\n\t\"Rjng\",\n\t\"Samr\",\n\t\"Sund\",\n\t\"Sylo\",\n\t\"Tang\",\n\t\"Tavt\",\n\t\"Xsux\",\n}\n\nfor key, list in pairs(data) do\n\tdata[key]\
      \ = require(\"Module:utils\").list_to_set(list)\nend\n\nreturn data</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-15T21:09:17.228Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Autils&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; WMF-Last-Access=15-Apr-2019; WMF-Last-Access-Global=15-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=42657 t=1555362557136587
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:17 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1282.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=15-Apr-2019;WMF-Last-Access-Global=15-Apr-2019;https=1
      X-Cache: cp1077 pass, cp3032 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 421247622, 242767596, 698332383
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"4882600\" pageid=\"4882600\" ns=\"828\" title=\"Module:utils\"><revisions><rev user=\"Metaknowledge\" timestamp=\"2017-09-23T01:00:56Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"Protected &quot;[[Module:utils]]&quot;: Highly visible template/module ([Edit=Allow only autoconfirmed users] (indefinite) [Move=Allow only autoconfirmed users] (indefinite))\" xml:space=\"\
      preserve\">--[=[\n  Module:utils v0.3.1\n  Date: 2015-08-14\n\n  This module contains some common useful functions.\n  Fill free to add another universal functions here.\n]=]--\n\nlocal export = {}\n\n-- Function to clone table (sometimes it works better\
      \ then mw.clone)\nfunction export.clone(original)\n    local copy = {}\n    for key, value in pairs(original) do\n        copy[key] = value\n    end\n    return copy\nend\n\n-- Function to get current PAGENAME and related\nfunction export.get_base()\n\t\
      local PAGENAME = mw.title.getCurrentTitle().text\n\tlocal SUBPAGENAME = mw.title.getCurrentTitle().subpageText\n\tlocal NAMESPACE = mw.title.getCurrentTitle().nsText\n\t\n\tif NAMESPACE == 'User' or NAMESPACE == 'Участник' then\n\t\treturn SUBPAGENAME\n\
      \tend\n\treturn PAGENAME\nend\n\n-- Function to iterate table with sorted keys (sorting function can be different)\nfunction export.spairs(t, order)\n    -- collect the keys\n    local keys = {}\n    for k in pairs(t) do keys[#keys+1] = k end\n    -- sort\n\
      \    if order then\n        table.sort(keys, function(a,b) return order(t, a, b) end)\n    else\n        table.sort(keys)\n    end\n    -- return the iterator function\n    local i = 0\n    return function()\n        i = i + 1\n        if keys[i] then\n\
      \            return keys[i], t[keys[i]]\n        end\n    end\nend\n\n-- Functions to measure working time of scripts (start)\nfunction export.start()\n\texport.started = os.clock()\nend\n\n-- Functions to measure working time of scripts (stop)\nfunction\
      \ export.stop(desc)\n\texport.stoped = os.clock()\n\texport.delta = export.stoped - export.started\n\tif desc == nil then\n\t\tdesc = 'time delta'\n\tend\n\tmw.log('™ ' .. desc .. ' = ' .. export.delta)\nend\n\n-- Function to find common part (length)\
      \ of two strings\n-- (common part from the beginning of strings)\nfunction export.find_common(str_1, str_2)\n\tif not str_1 or not str_2 then\n\t\treturn 1\n\tend\n\tfor pos = 1, #str_1 do\n\t    local char_1 = str_1:sub(pos, pos)\n\t    local char_2 =\
      \ str_2:sub(pos, pos)\n\t    if char_1 ~= char_2 then\n\t    \treturn pos\n\t    end\n\tend\n\treturn 1\nend\n\n-- Function that allows easily add values into dict of dicts of lists\n-- Example of this structure:\n--   dict = {\n--     key1 = {\n--   \
      \    sub_key1 = {value1, value2, value3},\n--       sub_key2 = {value4, value5},\n--     },\n--     key2 = {\n--       sub_key3 = {value6},\n--       sub_key4 = {value7, value8},\n--     },\n--   }\nfunction export.put_value(dict, key, sub_key, value)\n\
      \tif not dict[key] then\n\t\tdict[key] = {}\n\tend\n\tif not dict[key][sub_key] then\n\t\tdict[key][sub_key] = {}\n\tend\n\ttable.insert(dict[key][sub_key], value)\nend\n\n-- Compare two items, recursively comparing lists.\n-- FIXME, doesn't work for tables\
      \ that aren't lists.\nfunction export.equals(x, y)\n    if type(x) == \"table\" and type(y) == \"table\" then\n        if #x ~= #y then\n            return false\n        end \n        for key, value in ipairs(x) do\n            if not export.equals(value,\
      \ y[key]) then\n                return false\n            end\n        end\n        return true\n    end\n    return x == y\nend\n\n-- true if list contains item\nfunction export.contains(tab, item)\n    for _, value in pairs(tab) do\n        if export.equals(value,\
      \ item) then\n            return true\n        end\n    end\n    return false\nend\n\n-- append to list if element not already present\nfunction export.insert_if_not(tab, item)\n    if not export.contains(tab, item) then\n        table.insert(tab, item)\n\
      \    end\nend\n\n-- convert list to set\nfunction export.list_to_set(list)\n\tlocal set = {}\n\tfor _, item in ipairs(list) do\n\t\tset[item] = true\n\tend\n\treturn set\nend\n\n-- Inhibit Regular Expression magic characters ^$()%.[]*+-?)\nfunction export.escape(value)\n\
      \    -- Prefix every non-alphanumeric character (%W) with a % escape character, \n    -- where %% is the % escape, and %1 is original character\n    return mw.ustring.gsub(value, \"(%W)\",\"%%%1\")\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-15T21:09:17.422Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Template%3Atracking%2Fheadword%2Fsc&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; WMF-Last-Access=15-Apr-2019; WMF-Last-Access-Global=15-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=62987 t=1555362557314869
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Length: '1094'
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:17 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1287.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=15-Apr-2019;WMF-Last-Access-Global=15-Apr-2019;https=1
      X-Cache: cp1083 pass, cp3033 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 919298090, 482343016, 689257750
    body: |-
      <?xml version="1.0"?><api batchcomplete=""><warnings><main xml:space="preserve">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space="preserve">Because "rvslots" was not specified, a legacy format has been used for the output. This format is deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx="6569394" pageid="6569394" ns="10" title="Template:tracking/headword/sc"><revisions><rev user="ShakespeareFan00" timestamp="2018-12-23T16:15:11Z" contentformat="text/x-wiki" contentmodel="wikitext" comment="Removal of stray tag" xml:space="preserve">&lt;noinclude&gt;
      Headword templates with script.

      Index of tracking templates:
      {{Special:PrefixIndex/Template:tracking/headword/sc|stripprefix=1}}

      [[Category:head tracking]]
      &lt;/noinclude&gt;</rev></revisions></page></pages></query></api>
- recorded: 2019-04-15T21:09:17.591Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Template%3Atracking%2Fheadword%2Fsc%2Fredundant&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; WMF-Last-Access=15-Apr-2019; WMF-Last-Access-Global=15-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=44046 t=1555362557501766
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Length: '1123'
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:17 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1315.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=15-Apr-2019;WMF-Last-Access-Global=15-Apr-2019;https=1
      X-Cache: cp1087 pass, cp3032 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 759728770, 251610368, 698625951
    body: |-
      <?xml version="1.0"?><api batchcomplete=""><warnings><main xml:space="preserve">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space="preserve">Because "rvslots" was not specified, a legacy format has been used for the output. This format is deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx="6569396" pageid="6569396" ns="10" title="Template:tracking/headword/sc/redundant"><revisions><rev user="ShakespeareFan00" timestamp="2018-12-23T16:15:01Z" contentformat="text/x-wiki" contentmodel="wikitext" comment="Rmoval of stray tag" xml:space="preserve">&lt;noinclude&gt;
      Headword templates with redundant script.

      Index of tracking templates:
      {{Special:PrefixIndex/Template:tracking/headword/sc/redundant|stripprefix=1}}

      [[Category:head tracking]]
      &lt;/noinclude&gt;</rev></revisions></page></pages></query></api>
- recorded: 2019-04-15T21:09:17.761Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Template%3Atracking%2Fheadword%2Fsc%2Fredundant%2FKore&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; WMF-Last-Access=15-Apr-2019; WMF-Last-Access-Global=15-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=45035 t=1555362557669916
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:17 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1282.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=15-Apr-2019;WMF-Last-Access-Global=15-Apr-2019;https=1
      X-Cache: cp1089 pass, cp3042 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 201613333, 815529056, 694476925
    body: |-
      <?xml version="1.0"?><api batchcomplete=""><warnings><main xml:space="preserve">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space="preserve">Because "rvslots" was not specified, a legacy format has been used for the output. This format is deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx="6569397" pageid="6569397" ns="10" title="Template:tracking/headword/sc/redundant/Kore"><revisions><rev user="ShakespeareFan00" timestamp="2018-12-23T16:14:42Z" contentformat="text/x-wiki" contentmodel="wikitext" comment="Removal of stray tag" xml:space="preserve">&lt;noinclude&gt;
      Headword templates with redundant Korean script.

      Index of tracking templates:
      {{Special:PrefixIndex/Template:tracking/headword/sc/redundant/Kore|stripprefix=1}}

      [[Category:head tracking]]
      &lt;/noinclude&gt;</rev></revisions></page></pages></query></api>
- recorded: 2019-04-15T21:09:17.941Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Apalindromes&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; WMF-Last-Access=15-Apr-2019; WMF-Last-Access-Global=15-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=52701 t=1555362557842327
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:17 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1317.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=15-Apr-2019;WMF-Last-Access-Global=15-Apr-2019;https=1
      X-Cache: cp1085 pass, cp3041 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 596280471, 732314756, 694177689
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"5783859\" pageid=\"5783859\" ns=\"828\" title=\"Module:palindromes\"><revisions><rev user=\"TheDaveRoss\" timestamp=\"2016-10-25T20:04:19Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"Changed protection level for &quot;[[Module:palindromes]]&quot;: Adjusting the protection level from &#039;sysop&#039; to &#039;template editor&#039;. ([Edit=Allow only template editors\
      \ and administrators] (indefinite) [Move=Allow only template editors and administrators] (indefini...\" xml:space=\"preserve\">local export = {}\n\nlocal data = mw.loadData(\"Module:palindromes/data\")\n\nlocal function ignoreCharacters(term, lang, sc,\
      \ langdata)\n\tterm = mw.ustring.lower(term)\n\tterm = mw.ustring.gsub(term, \"[ ,%.%?!%%%-'\\\"]\", \"\")\n\t\n\t-- Language-specific substitutions\n\n\t-- Ignore entire scripts (e.g. romaji in Japanese)\n\tif langdata.ignore then\n\t\tsc_name = sc and\
      \ sc:getCode() or require(\"Module:scripts\").findBestScript(term, lang):getCode()\n\t\tfor _, script in ipairs(langdata.ignore) do\n\t\t\tif script == sc_name then\n\t\t\t\treturn \"\"\n\t\t\tend\n\t\tend\n\tend\n\t\n\tfor i, from in ipairs(langdata.from\
      \ or {}) do\n\t\tterm = mw.ustring.gsub(term, from, langdata.to[i] or \"\")\n\tend\n\t\n\treturn term\nend\n\nfunction export.is_palindrome(term, lang, sc)\n\tlocal langdata = data[lang:getCode()] or {}\n\n\t-- Affixes aren't palindromes\n\tif mw.ustring.find(term,\
      \ \"^%-\") or mw.ustring.find(term, \"%-$\") then\n\t\treturn false\n\tend\n\t\n\t-- Remove punctuation and casing\n\tterm = ignoreCharacters(term, lang, sc, langdata)\n\tlocal len = mw.ustring.len(term)\n\t\n\tif langdata.allow_repeated_char then\n\t\t\
      -- Ignore single-character terms\n\t\tif len &lt; 2 then\n\t\t\treturn false\n\t\tend\n\telse\n\t\t-- Ignore terms that consist of just one character repeated\n\t\t-- This also excludes terms consisting of fewer than 3 characters\n\t\tif term == mw.ustring.rep(mw.ustring.sub(term,\
      \ 1, 1), len) then\n\t\t\treturn false\n\t\tend\n\tend\n\t\n\tlocal charlist = {}\n\t\n\tfor c in mw.ustring.gmatch(term, \".\") do\n\t\ttable.insert(charlist, c)\n\tend\n\t\n\tfor i = 1, math.floor(len / 2) do\n        if charlist[i] ~= charlist[len -\
      \ i + 1] then\n        \treturn false\n        end\n    end\n    \n    return true\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-15T21:09:18.142Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Apalindromes%2Fdata&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; WMF-Last-Access=15-Apr-2019; WMF-Last-Access-Global=15-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=71163 t=1555362558020683
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:18 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1284.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=15-Apr-2019;WMF-Last-Access-Global=15-Apr-2019;https=1
      X-Cache: cp1085 pass, cp3041 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 572846632, 737616820, 688363300
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"5786862\" pageid=\"5786862\" ns=\"828\" title=\"Module:palindromes/data\"><revisions><rev user=\"PiefPafPier\" timestamp=\"2018-08-08T16:43:32Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"from [[:fy:Module:palindromes/data]]\" xml:space=\"preserve\">local u = mw.ustring.char\n\nlocal data = {\n\t[\"ar\"] = {\n\t\tallow_repeated_char = true,\n\t\tfrom = {\n\t\t\t\"[أإآ]\"\
      ,\n\t\t\t\"ؤ\",\n\t\t\t\"[ئى]\",\n\t\t\t\"ة\",\n\t\t\t\"ء\",\n\t\t},\n\t\tto = {\n\t\t\t\"ا\",\n\t\t\t\"و\",\n\t\t\t\"ي\",\n\t\t\t\"ه\",\n\t\t},\n\t},\n\t[\"arc\"] = {\n\t\tallow_repeated_char = true,\n\t\tfrom = {\n\t\t\t\"ם\",\n\t\t\t\"ן\",\n\t\t\t\"\
      ך\",\n\t\t\t\"ף\",\n\t\t\t\"ץ\",\n\t\t\t\"ﭏ\",\n\t\t\t\"װ\",\n\t\t\t\"ױ\",\n\t\t\t\"ײ\",\n\t\t\t\"[״׳־]\",\n\t\t},\n\t\tto = {\n\t\t\t\"מ\",\n\t\t\t\"נ\",\n\t\t\t\"כ\", \n\t\t\t\"פ\",\n\t\t\t\"צ\",\n\t\t\t\"אל\",\n\t\t\t\"וו\",\n\t\t\t\"וי\",\n\t\t\t\"\
      יי\",\n\t\t}\n\t},\n\t[\"axm\"] = {\n\t\tfrom = {\"ու\"},\n\t\tto   = {\"ŭ\"},\n\t},\n\t[\"ca\"] = {\n\t\tfrom = {\"à\", \"[èé]\", \"[íï]\", \"[òó]\", \"[úü]\", \"ç\", \"l·l\"},\n\t\tto   = {\"a\", \"e\",    \"i\",    \"o\",    \"u\",    \"c\", \"ll\"\
      },\n\t},\n\t[\"cmn\"] = {ignore = {\"Latn\"}},\n\t[\"cs\"] = {\n\t\tfrom = {\"á\", \"é\", \"í\", \"ó\", \"[úů]\", \"ý\", \"ch\"},\n\t\tto   = {\"a\", \"e\", \"i\", \"o\", \"u\",    \"y\", \"χ\"},\n\t},\n\t[\"de\"] = {\n\t\tfrom = {\"ä\", \"ö\", \"ü\",\
      \ \"[ßẞ]\"},\n\t\tto   = {\"a\", \"o\", \"u\", \"ss\"},\n\t},\n\t[\"el\"] = {\n\t\tfrom = {\n\t\t\t\"[ᾳάᾴὰᾲᾶᾷἀᾀἄᾄἂᾂἆᾆἁᾁἅᾅἃᾃἇᾇᾱᾰἈᾈἌᾌἊᾊἎᾎἉᾉἍᾍἋᾋἏᾏᾹᾸ]\", --uppercase characters are included due to this bug: https://bugs.php.net/bug.php?id=69267\n\t\t\t\"[έ\
      ὲἐἔἒἑἕἓἘἜἚἙἝἛ]\",\n\t\t\t\"[ῃήῄὴῂῆῇἠᾐἤᾔἢᾒἦᾖἡᾑἥᾕἣᾓἧᾗἨᾘἬᾜἪᾚἮᾞἩᾙἭᾝἫᾛἯᾟ]\",\n\t\t\t\"[ίὶῖἰἴἲἶἱἵἳἷϊΐῒῗῑῐἸἼἺἾἹἽἻἿῙῘ]\", \n\t\t\t\"[όὸὀὄὂὁὅὃὈὌὊὉὍὋ]\",\n\t\t\t\"[ύὺῦὐὔὒὖὑὕὓὗϋΰῢῧῡῠὙὝὛὟῩῨ]\",\n\t\t\t\"[ῳώῴὼῲῶῷὠᾠὤᾤὢᾢὦᾦὡᾡὥᾥὣᾣὧᾧὨᾨὬᾬὪᾪὮᾮὩᾩὭᾭὫᾫὯᾯ]\",\n\t\t\t\"[ῥῤῬ]\"\
      ,\n\t\t\t\"[ς]\",\n\t\t\t\"[́͂]\"\n\t\t},\n\t\tto = {\n\t\t\t\"α\",\n\t\t\t\"ε\",\n\t\t\t\"η\",\n\t\t\t\"ι\",\n\t\t\t\"ο\",\n\t\t\t\"υ\",\n\t\t\t\"ω\",\n\t\t\t\"ρ\",\n\t\t\t\"σ\"\n\t\t},\n\t},\n\t[\"en\"] = {\n\t\tfrom = {\"[äàáâåā]\", \"[ëèéêē]\", \"\
      [ïìíîī]\", \"[öòóôō]\", \"[üùúûū]\", \"æ\" , \"œ\" , \"[çč]\", \"ñ\", \"'\"},\n\t\tto   = {\"a\",        \"e\",       \"i\",       \"o\",       \"u\",       \"ae\", \"oe\", \"c\",    \"n\"},\n\t},\n\t[\"fr\"] = {\n\t\tfrom = {\"[áàâä]\", \"[éèêë]\", \"\
      [íìîï]\", \"[óòôö]\", \"[úùûü]\", \"[ýỳŷÿ]\", \"ç\", \"æ\",  \"œ\", \"'\"},\n\t\tto   = {\"a\",       \"e\",     \"i\",      \"o\",      \"u\",      \"y\",      \"c\", \"ae\", \"oe\"},\n\t},\n\t[\"fy\"] = {\n\t\tfrom = {\"[áàâä]\", \"[éèêë]\", \"[íìîï\
      ]\", \"[óòôö]\", \"[úùûü]\", \"[ýỳŷÿ]\", \"æ\",  \"'\"},\n\t\tto   = {\"a\",       \"e\",     \"i\",      \"o\",      \"u\",      \"y\",      \"ae\"},\n\t},\n\t[\"grc\"] = {\n\t\tfrom = {\n\t\t\t\"[ᾳάᾴὰᾲᾶᾷἀᾀἄᾄἂᾂἆᾆἁᾁἅᾅἃᾃἇᾇᾱᾰἈᾈἌᾌἊᾊἎᾎἉᾉἍᾍἋᾋἏᾏᾹᾸ]\", --uppercase\
      \ characters are included due to this bug: https://bugs.php.net/bug.php?id=69267\n\t\t\t\"[έὲἐἔἒἑἕἓἘἜἚἙἝἛ]\",\n\t\t\t\"[ῃήῄὴῂῆῇἠᾐἤᾔἢᾒἦᾖἡᾑἥᾕἣᾓἧᾗἨᾘἬᾜἪᾚἮᾞἩᾙἭᾝἫᾛἯᾟ]\",\n\t\t\t\"[ίὶῖἰἴἲἶἱἵἳἷϊΐῒῗῑῐἸἼἺἾἹἽἻἿῙῘ]\", \n\t\t\t\"[όὸὀὄὂὁὅὃὈὌὊὉὍὋ]\",\n\t\t\t\"[ύὺῦὐὔὒ\
      ὖὑὕὓὗϋΰῢῧῡῠὙὝὛὟῩῨ]\",\n\t\t\t\"[ῳώῴὼῲῶῷὠᾠὤᾤὢᾢὦᾦὡᾡὥᾥὣᾣὧᾧὨᾨὬᾬὪᾪὮᾮὩᾩὭᾭὫᾫὯᾯ]\",\n\t\t\t\"[ῥῤῬ]\",\n\t\t\t\"[ς]\",\n\t\t\t\"[́͂]\"\n\t\t},\n\t\tto = {\n\t\t\t\"α\",\n\t\t\t\"ε\",\n\t\t\t\"η\",\n\t\t\t\"ι\",\n\t\t\t\"ο\",\n\t\t\t\"υ\",\n\t\t\t\"ω\",\n\t\t\t\"\
      ρ\",\n\t\t\t\"σ\"\n\t\t}\n\t},\n\t[\"he\"] = {\n\t\tallow_repeated_char = true,\n\t\tfrom = {\n\t\t\t\"ם\",\n\t\t\t\"ן\",\n\t\t\t\"ך\",\n\t\t\t\"ף\",\n\t\t\t\"ץ\",\n\t\t\t\"ﭏ\",\n\t\t\t\"װ\",\n\t\t\t\"ױ\",\n\t\t\t\"ײ\",\n\t\t\t\"[״׳־]\",\n\t\t},\n\t\t\
      to = {\n\t\t\t\"מ\",\n\t\t\t\"נ\",\n\t\t\t\"כ\", \n\t\t\t\"פ\",\n\t\t\t\"צ\",\n\t\t\t\"אל\",\n\t\t\t\"וו\",\n\t\t\t\"וי\",\n\t\t\t\"יי\",\n\t\t}\n\t},\n\t[\"hu\"] = {\n\t\tfrom = {\"á\", \"é\", \"í\", \"ó\", \"ú\", \"ő\", \"ű\", \"cs\", \"dz\", \"gy\"\
      , \"ly\", \"ny\", \"sz\", \"ty\", \"zs\", \"dzs\"},\n\t\tto   = {\"a\", \"e\", \"i\", \"o\", \"u\", \"ö\", \"ü\", \"č\",  \"ď\",  \"ǰ\",  \"ľ\",  \"ň\",  \"š\",  \"ť\",  \"ž\",  \"ǯ\"},\n\t},\n\t[\"hy\"] = {\n\t\tfrom = {\"ու\", \"եւ\"},\n\t\tto   = {\"\
      ŭ\",  \"և\"},\n\t},\n\t[\"ja\"] = {\n\t\tallow_repeated_char = true,\n\t\tfrom = {'が', 'ぎ', 'ぐ', 'げ', 'ご', 'ざ', 'じ', 'ず', 'ぜ', 'ぞ', 'だ', 'ぢ', 'づ', 'で', 'ど', 'ば', 'び', 'ぶ', 'べ', 'ぼ', 'ぱ', 'ぴ', 'ぷ', 'ぺ', 'ぽ', 'ゔ'},\n\t\tto   = {'か', 'き', 'く', 'け', 'こ', 'さ\
      ', 'し', 'す', 'せ', 'そ', 'た', 'ち', 'つ', 'て', 'と', 'は', 'ひ', 'ふ', 'へ', 'ほ', 'は', 'ひ', 'ふ', 'へ', 'ほ', 'う'},\n\t\tignore = {\"Latn\"},\n\t},\n\t[\"la\"] = {\n\t\tfrom = {\"v\", \"j\"},\n\t\tto   = {\"u\", \"i\"}\n\t},\n\t[\"nl\"] = {\n\t\tfrom = {\"[áàä]\"\
      , \"[éèë]\", \"[íìï]\", \"[óòö]\", \"[úùü]\"},\n\t\tto   = {\"a\",     \"e\",     \"i\",     \"o\",     \"u\"},\n\t},\n\t[\"pl\"] = {\n\t\tfrom = {\"ć\", \"ę\", \"ł\", \"ń\", \"ó\", \"ś\", \"[źż]\"},\n\t\tto   = {\"c\", \"e\", \"l\", \"n\", \"o\", \"s\"\
      , \"z\"},\n\t},\n\t[\"ru\"] = {\n\t\tfrom = {\"ё\"},\n\t\tto   = {\"е\"},\n\t},\n\t[\"xcl\"] = {\n\t\tfrom = {\"ու\"},\n\t\tto   = {\"ŭ\"},\n\t},\n\t[\"yi\"] = {\n\t\tallow_repeated_char = true,\n\t\tfrom = {\n\t\t\t\"ם\",\n\t\t\t\"ן\",\n\t\t\t\"ך\",\n\
      \t\t\t\"ף\",\n\t\t\t\"ץ\",\n\t\t\t\"ﭏ\",\n\t\t\t\"װ\",\n\t\t\t\"ױ\",\n\t\t\t\"ײ\",\n\t\t\t\"[״׳־]\",\n\t\t\t\"[ִַָּֿׁׂ]\",\n\t\t},\n\t\tto = {\n\t\t\t\"מ\",\n\t\t\t\"נ\",\n\t\t\t\"כ\", \n\t\t\t\"פ\",\n\t\t\t\"צ\",\n\t\t\t\"אל\",\n\t\t\t\"וו\",\n\t\t\t\"\
      וי\",\n\t\t\t\"יי\",\n\t\t}\n\t},\n\t[\"zh\"] = {\n\t\tignore = {\"Latn\"},\n\t},\n}\n\nreturn data</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-15T21:09:18.533Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Ascript+utilities%2Fdata&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; WMF-Last-Access=15-Apr-2019; WMF-Last-Access-Global=15-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=54756 t=1555362558433324
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:18 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1233.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=15-Apr-2019;WMF-Last-Access-Global=15-Apr-2019;https=1
      X-Cache: cp1079 pass, cp3032 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 680105170, 266142690, 698038220
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"6149597\" pageid=\"6149597\" ns=\"828\" title=\"Module:script utilities/data\"><revisions><rev user=\"DTLHS\" timestamp=\"2018-03-12T01:54:08Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"\" xml:space=\"preserve\">local data = {}\n\ndata.translit = {\n\t[\"term\"] = {\n--[=[\tcan't be done until Kana transliterations are correctly parsed by [[Module:links]]\n\t\t[\"tag\"\
      ] = \"i\",\n\t\t]=]\n\t\t[\"classes\"] = \"mention-tr\",\n\t},\n\t[\"usex\"] = {\n\t\t[\"tag\"] = \"i\",\n\t\t[\"classes\"] = \"e-transliteration\",\n\t},\n\t[\"head\"] = {\n\t\t[\"classes\"] = \"headword-tr\",\n\t\t[\"dir\"] = \"ltr\",\n\t},\n\t[\"default\"\
      ] = {},\n}\n\ndata.transcription = {\n\t[\"head\"] = {\n\t\t[\"tag\"] = \"span\",\n\t\t[\"classes\"] = \"headword-ts\",\n\t\t[\"dir\"] = \"ltr\",\n\t},\n\t[\"default\"] = {},\n}\n\nfor key, value in pairs(data.translit) do\n\tif not value.tag then\n\t\t\
      value.tag = \"span\"\n\tend\nend\n\ndata.faces = {\n\t[\"term\"] = {\n\t\ttag = \"i\",\n\t\tclass = \"mention\",\n\t},\n\t[\"head\"] = {\n\t\ttag = \"strong\",\n\t\tclass = \"headword\",\n\t},\n\t[\"hypothetical\"] = {\n\t\tprefix = '&lt;span class=\"\
      hypothetical-star\"&gt;*&lt;/span&gt;',\n\t\ttag = \"i\",\n\t\tclass = \"hypothetical\",\n\t},\n\t[\"bold\"] = {\n\t\ttag = \"b\",\n\t},\n\t[\"translation\"] = {\n\t\ttag = \"span\",\n\t},\n\t[\"nil\"] = {\n\t\ttag = \"span\",\n\t},\n}\n\nreturn data</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-15T21:09:18.912Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Autilities%2Fdata&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; WMF-Last-Access=15-Apr-2019; WMF-Last-Access-Global=15-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=60206 t=1555362558803555
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:18 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1288.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=15-Apr-2019;WMF-Last-Access-Global=15-Apr-2019;https=1
      X-Cache: cp1075 pass, cp3042 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 602910158, 827311307, 701995312
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"6279245\" pageid=\"6279245\" ns=\"828\" title=\"Module:utilities/data\"><revisions><rev user=\"Erutuon\" timestamp=\"2019-01-04T05:57:22Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"Undo revision 51192985 by [[Special:Contributions/2601:CD:C101:322D:F03C:8688:907:84|2601:CD:C101:322D:F03C:8688:907:84]] ([[User talk:2601:CD:C101:322D:F03C:8688:907:84|talk]]): ???\"\
      \ xml:space=\"preserve\">local data = {}\n\ndata.notneeded = {\n\t[\"und\"] = true,\n\t[\"cmn\"] = true,\n\t[\"ja\"] = true,\n\t[\"zu\"] = true,\n\t[\"nan\"] = true,\n\t[\"yue\"] = true,\n\t[\"ko\"] = true,\n}\n\ndata.neededhassubpage = {\n\t[\"ga\"] =\
      \ true,\n\t[\"gv\"] = true,\n\t[\"nv\"] = true,\n\t[\"roa-jer\"] = true,\n\t[\"fr\"] = true,\n\t[\"rm\"] = true,\n\t[\"prg\"] = true,\n\t[\"gd\"] = true,\n\t[\"twf\"] = true,\n\t[\"en\"] = true,\n\t[\"ro\"] = true,\n\t[\"egl\"] = true,\n\t[\"roa-tar\"\
      ] = true,\n\t[\"gl\"] = true,\n\t[\"ast\"] = true,\n\t[\"br\"] = true,\n}\n\n--[[\n\tScript that should be applied to links in categories.\n]]\ndata.catfix_scripts = {\n\t[\"ab\"] = \"Cyrl\",\n\t[\"ae\"] = \"Avst\",\n\t[\"ar\"] = \"Arab\",\n\t[\"ary\"\
      ] = \"Arab\",\n\t[\"be\"] = \"Cyrl\",\n\t[\"cu\"] = \"Cyrs\",\n\t[\"el\"] = \"Grek\",\n\t[\"grc\"] = \"polytonic\",\n\t[\"he\"] = \"Hebr\",\n\t[\"ka\"] = \"Geor\",\n\t[\"orv\"] = \"Cyrs\",\n\t[\"ru\"] = \"Cyrl\",\n\t[\"sa\"] = \"Deva\",\n\t[\"syl\"] =\
      \ \"Sylo\",\n\t[\"xfa\"] = \"Ital\",\n\t[\"zle-ono\"] = \"Cyrs\",\n\t[\"hi\"] = \"Deva\",\n\t[\"mr\"] = \"Deva\",\n--[[\n\t[\"\"] = \"\",\n]]\n}\n\n-- Namespaces in which format_categories will add categories.\ndata.allowedNamespaces = {\n\t[\"\"] = true,\n\
      \t[\"Appendix\"] = true,\n\t[\"Reconstruction\"] = true,\n\t[\"Citations\"] = true,\n}\n\nreturn data</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-15T21:09:19.444Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Awikipedia&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; WMF-Last-Access=15-Apr-2019; WMF-Last-Access-Global=15-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=49052 t=1555362559343333
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:19 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1279.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=15-Apr-2019;WMF-Last-Access-Global=15-Apr-2019;https=1
      X-Cache: cp1087 pass, cp3041 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 760547005, 742165093, 695291852
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"5872615\" pageid=\"5872615\" ns=\"828\" title=\"Module:wikipedia\"><revisions><rev user=\"Julia\" timestamp=\"2018-12-08T23:00:16Z\" contentformat=\"\
      text/plain\" contentmodel=\"Scribunto\" comment=\"make slim version same length as other interwiki links\" xml:space=\"preserve\">local export = {}\n\n\nlocal function process_links(linkdata, prefix, name, wmlang, sc)\n\tprefix = prefix .. \":\" .. (wmlang:getCode()\
      \ == \"en\" and \"\" or wmlang:getCode() .. \":\")\n\t\n\tlocal links = {}\n\tlocal iplinks = {}\n\t\n\tlocal m_links = require(\"Module:links\")\n\tlocal lang = wmlang:getWiktionaryLanguage()\n\tlocal ipalt = name .. \" \" .. (wmlang:getCode() == \"en\"\
      \ and \"\" or \"&lt;sup&gt;\" .. wmlang:getCode() .. \"&lt;/sup&gt;\")\n\t\n\tfor i, link in ipairs(linkdata) do\n\t\tlink.lang = lang\n\t\tlink.sc = sc\n\t\tlink.term = prefix .. link.term\n\t\tlink.tr = \"-\"\n\t\ttable.insert(iplinks, \"&lt;span class=\\\
      \"interProject\\\"&gt;[[\" .. link.term .. \"|\" .. ipalt .. \"]]&lt;/span&gt;\")\n\t\ttable.insert(links, m_links.full_link(link, \"bold\"))\n\tend\n\t\n\treturn links, iplinks\nend\n\n\nfunction export.wikipedia_box(frame)\n\tlocal params = {\n\t\t[1]\
      \ = {},\n\t\t[2] = {},\n\t\t\n\t\t[\"cat\"] = {},\n\t\t[\"category\"] = {alias_of = \"cat\"},\n\t\t[\"dab\"] = {},\n\t\t[\"disambiguation\"] = {alias_of = \"dab\"},\n\t\t[\"i\"] = {type = \"boolean\"},\n\t\t[\"lang\"] = {default = \"en\"},\n\t\t[\"mul\"\
      ] = {},\n\t\t[\"mullabel\"] = {},\n\t\t[\"mulcat\"] = {},\n\t\t[\"mulcatlabel\"] = {},\n\t\t[\"portal\"] = {},\n\t\t[\"sc\"] = {},\n\t}\n\t\n\tlocal args = require(\"Module:parameters\").process(frame:getParent().args, params)\n\t\n\tlocal wmlang = require(\"\
      Module:wikimedia languages\").getByCodeWithFallback(args[\"lang\"]) or error(\"The Wikimedia language code \\\"\" .. args[\"lang\"] .. \"\\\" is not valid.\")\n\tlocal sc = args[\"sc\"] and (require(\"Module:scripts\").getByCode(args[\"sc\"]) or error(\"\
      The script code \\\"\" .. sc .. \"\\\" is not valid.\")) or nil\n\t\n\tlocal linkdata = {}\n\t\n\tif args[\"cat\"] then\n\t\ttable.insert(linkdata, {term = \"Category:\" .. args[\"cat\"], alt = args[1] or args[\"cat\"]})\n\telseif args[\"portal\"] then\n\
      \t\ttable.insert(linkdata, {term = \"Portal:\" .. args[\"portal\"], alt = args[1] or args[\"portal\"]})\n\telse\n\t\ttable.insert(linkdata, {term = args[\"dab\"] or args[1] or mw.title.getCurrentTitle().text, alt = args[2] or args[1] or args[\"dab\"] or\
      \ mw.title.getCurrentTitle().text})\n\tend\n\t\n\tif args[\"mul\"] or args[\"mulcat\"] then\n\t\tif args[\"mulcat\"] then\n\t\t\ttable.insert(linkdata, {term = \"Category:\" .. args[\"mulcat\"], alt = args[\"mulcatlabel\"] or args[\"mulcat\"]})\n\t\telse\n\
      \t\t\ttable.insert(linkdata, {term = args[\"mul\"], alt = args[\"mullabel\"] or args[\"mul\"]})\n\t\tend\n\tend\n\t\n\tlocal links, iplinks = process_links(linkdata, \"w\", \"Wikipedia\", wmlang, sc)\n\t\n\tif frame.args[\"slim\"] then\n\t\treturn\n\t\t\
      \t\"&lt;div class=\\\"sister-wikipedia sister-project noprint floatright\\\" style=\\\"border: solid #aaa 1px; font-size: 90%; background: #f9f9f9; width: 250px; padding: 4px; text-align: left;\\\"&gt;\" ..\n\t\t\t\"&lt;div style=\\\"float: left;\\\"&gt;[[File:Wikipedia-logo.png|14px|none|\
      \ ]]&lt;/div&gt;\" ..\n\t\t\t\"&lt;div style=\\\"margin-left: 15px;\\\"&gt;\" ..\n\t\t\t\" &amp;nbsp;\" ..\n\t\t\ttable.concat(links, \" and \") ..\n\t\t\t\" on \" ..\n\t\t\t(wmlang:getCode() == \"en\" and \"\" or wmlang:getCanonicalName() .. \"&amp;nbsp;\"\
      ) ..\n\t\t\t\"Wikipedia\" ..\n\t\t\t\"&lt;/div&gt;\" ..\n\t\t\t\"&lt;/div&gt;\"\n\telse\n\t\tlocal linktype\n\t\t\n\t\tif args[\"cat\"] then\n\t\t\tlinktype = \"a category\"\n\t\telseif args[\"mul\"] or args[\"dab\"] then\n\t\t\tlinktype = \"articles\"\
      \n\t\telseif args[\"mulcat\"] then\n\t\t\tlinktype = \"categories\"\n\t\telseif args[\"portal\"] then\n\t\t\tlinktype = \"a portal\"\n\t\telse\n\t\t\tlinktype = \"an article\"\n\t\tend\n\t\t\n\t\treturn\n\t\t\t\"&lt;div class=\\\"sister-wikipedia sister-project\
      \ noprint floatright\\\" style=\\\"border: 1px solid #aaa; font-size: 90%; background: #f9f9f9; width: 250px; padding: 4px; text-align: left;\\\"&gt;\" ..\n\t\t\t\"&lt;div style=\\\"float: left;\\\"&gt;[[File:Wikipedia-logo.png|44px|none|link=|alt=]]&lt;/div&gt;\"\
      \ ..\n\t\t\t\"&lt;div style=\\\"margin-left: 60px;\\\"&gt;\" ..\n\t\t\twmlang:getCanonicalName() .. \" [[Wikipedia]] has \" .. linktype .. \" on:\" ..\n\t\t\t\"&lt;div style=\\\"margin-left: 10px;\\\"&gt;\" .. table.concat(links, \" and \") .. \"&lt;/div&gt;\"\
      \ ..\n\t\t\t\"&lt;/div&gt;\" ..\n\t\t\ttable.concat(iplinks) .. ((args[1] == mw.title.getCurrentTitle().text and not (args[2] or args[\"dab\"])) and \"[[Category:wikipedia with redundant first parameter]]\" or \"\") ..\n\t\t\t\"&lt;/div&gt;\"\n\tend\n\
      end\n\n\nfunction export.projectlink(frame)\n\tlocal params = {\n\t\t[1] = {},\n\t\t[2] = {},\n\t\t\n\t\t[\"dab\"] = {},\n\t\t[\"i\"] = {type = \"boolean\"},\n\t\t[\"lang\"] = {default = \"en\"},\n\t\t[\"nodot\"] = {},\n\t\t[\"sc\"] = {},\n\t}\n\t\n\t\
      local args = require(\"Module:parameters\").process(frame:getParent().args, params)\n\t\n\tlocal wmlang = require(\"Module:wikimedia languages\").getByCodeWithFallback(args[\"lang\"]) or error(\"The Wikimedia language code \\\"\" .. args[\"lang\"] .. \"\
      \\\" is not valid.\")\n\tlocal sc = args[\"sc\"] and (require(\"Module:scripts\").getByCode(args[\"sc\"]) or error(\"The script code \\\"\" .. sc .. \"\\\" is not valid.\")) or nil\n\t\n\tlocal linkdata = {term = args[1] or args[\"dab\"] or mw.title.getCurrentTitle().text,\
      \ alt = args[2] or args[1] or args[\"dab\"] or mw.title.getCurrentTitle().text}\n\t\n\tif args[\"i\"] then\n\t\tlinkdata.alt = \"''\" .. linkdata.alt .. \"''\"\n\tend\n\t\n\tlocal links, iplinks = process_links({linkdata}, frame.args[\"prefix\"], frame.args[\"\
      name\"], wmlang, sc)\n\t\n\treturn\n\t\t\"[[Image:\" .. frame.args[\"image\"] .. \"|15px|link=\" .. linkdata.term .. \"]] \" ..\n\t\ttable.concat(links, \" and \") ..\n\t\t\" on \" ..\n\t\t(wmlang:getCode() == \"en\" and \"\" or \"the \" .. wmlang:getCanonicalName()\
      \ .. \" \") ..\n\t\t\" \" .. frame.args[\"name\"] .. (args[\"nodot\"] and \"\" or \".\") ..\n\t\ttable.concat(iplinks)\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-15T21:09:20.042Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=File%3AWikipedia-logo.svg&prop=imageinfo&iiprop=url&iiurlwidth=15
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Laufenburg:47.57:8.06:v4; WMF-Last-Access=15-Apr-2019; WMF-Last-Access-Global=15-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=67972 t=1555362559930229
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Mon, 15 Apr 2019 21:09:20 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1286.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=15-Apr-2019;WMF-Last-Access-Global=15-Apr-2019;https=1
      X-Cache: cp1087 pass, cp3030 pass, cp3040 pass
      X-Cache-Status: pass
      X-Client-IP: 217.233.11.52
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 745166712, 637750763, 689166296
    body: <?xml version="1.0"?><api><continue iistart="2010-06-15T23:28:41Z" continue="||" /><query><pages><page _idx="-1" ns="6" title="File:Wikipedia-logo.svg" missing="" known="" imagerepository="shared"><imageinfo><ii thumburl="https://upload.wikimedia.org/wikipedia/commons/thumb/8/80/Wikipedia-logo-v2.svg/15px-Wikipedia-logo-v2.svg.png" thumbwidth="15" thumbheight="14" url="https://upload.wikimedia.org/wikipedia/commons/8/80/Wikipedia-logo-v2.svg" descriptionurl="https://commons.wikimedia.org/wiki/File:Wikipedia-logo-v2.svg" descriptionshorturl="https://commons.wikimedia.org/w/index.php?curid=10337301" /></imageinfo></page></pages></query></api>
