!tape
name: senseid
interactions:
- recorded: 2019-04-27T16:56:15.356Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=User%3AJberkel%2Fbliki-testcases%2Fsenseid&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=42879 t=1556384175240179
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 16:56:15 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1313.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Set-Cookie: WMF-Last-Access=27-Apr-2019;Path=/;HttpOnly;secure;Expires=Wed, 29 May 2019 12:00:00 GMT, WMF-Last-Access-Global=27-Apr-2019;Path=/;Domain=.wiktionary.org;HttpOnly;secure;Expires=Wed, 29 May 2019 12:00:00 GMT, GeoIP=DE:BW:Todtnau:47.83:7.94:v4; Path=/; secure; Domain=.wiktionary.org
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;https=1;nocookies=1
      X-Cache: cp1077 pass, cp3040 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 1070042527, 775544966, 810829590
    body: <?xml version="1.0"?><api batchcomplete=""><warnings><main xml:space="preserve">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space="preserve">Because "rvslots" was not specified, a legacy format has been used for the output. This format is deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx="6532982" pageid="6532982" ns="2" title="User:Jberkel/bliki-testcases/senseid"><revisions><rev user="Jberkel" timestamp="2018-01-26T09:47:42Z" contentformat="text/x-wiki" contentmodel="wikitext" comment="Created page with &quot;# {{senseid|en|Q47328}} Q47328&quot;" xml:space="preserve"># {{senseid|en|Q47328}} Q47328</rev></revisions></page></pages></query></api>
- recorded: 2019-04-27T16:56:15.607Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Template%3Asenseid&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=52210 t=1556384175491765
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 16:56:15 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1290.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1077 pass, cp3033 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 1072269323, 543131681, 810636463
    body: <?xml version="1.0"?><api batchcomplete=""><warnings><main xml:space="preserve">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space="preserve">Because "rvslots" was not specified, a legacy format has been used for the output. This format is deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx="2176644" pageid="2176644" ns="10" title="Template:senseid"><revisions><rev user="Rua" timestamp="2017-06-13T18:30:53Z" contentformat="text/x-wiki" contentmodel="wikitext" comment="" xml:space="preserve">&lt;includeonly&gt;{{#invoke:senseid/templates|senseid_t}}&lt;/includeonly&gt;&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</rev></revisions></page></pages></query></api>
- recorded: 2019-04-27T16:56:16.017Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Asenseid%2Ftemplates&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=42432 t=1556384175914202
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Length: '1420'
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 16:56:15 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1286.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1077 pass, cp3042 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 1051380986, 548744244, 831886935
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"6241893\" pageid=\"6241893\" ns=\"828\" title=\"Module:senseid/templates\"><revisions><rev user=\"Asinis632\" timestamp=\"2018-07-16T10:34:01Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"Undo revision 49951911 by [[Special:Contributions/Asinis632|Asinis632]] ([[User talk:Asinis632|talk]])\" xml:space=\"preserve\">local export = {}\n\n\nfunction export.senseid_t(frame)\n\
      \tlocal params = {\n\t\t[1] = {required = true, default = \"und\"},\n\t\t[2] = {required = true, default = \"\"},\n\t}\n\t\n\tlocal args = require(\"Module:parameters\").process(frame:getParent().args, params)\n\t\n\tlocal m_languages = require(\"Module:languages\"\
      )\n\tlocal lang = m_languages.getByCode(args[1]) or m_languages.err(args[1], 1)\n\t\n\treturn require(\"Module:senseid\").senseid(lang, args[2])\nend\n\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T16:56:16.212Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Aparameters&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=39955 t=1556384176106254
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 16:56:16 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1233.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1077 pass, cp3030 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 1061073463, 561574745, 824944294
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"4797340\" pageid=\"4797340\" ns=\"828\" title=\"Module:parameters\"><revisions><rev user=\"Benwing2\" timestamp=\"2019-03-01T01:32:55Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"OK, resurrect the bug fix for disappearing &quot;falt&quot; and such while I figure out how to clone a table properly\" xml:space=\"preserve\">local export = {}\n\n-- A helper function\
      \ to escape magic characters in a string\n-- Magic characters: ^$()%.[]*+-?\nlocal plain = require(\"Module:string\").pattern_escape\n\n-- A helper function that removes empty numeric indexes in a table,\n-- so that the values are tightly packed like in\
      \ a normal Lua table.\nlocal remove_holes = require(\"Module:table\").compressSparseArray\n\nfunction export.process(args, params, return_unknown)\n\tlocal args_new = {}\n\t\n\t-- Process parameters for specific properties\n\tlocal required = {}\n\tlocal\
      \ patterns = {}\n\tlocal names_with_equal_sign = {}\n\tlocal list_from_index = nil\n\t\n\tfor name, param in pairs(params) do\n\t\tif param.required then\n\t\t\tif param.alias_of then\n\t\t\t\trequire(\"Module:debug\").track(\"parameters/required alias\"\
      )\n\t\t\tend\n\t\t\trequired[name] = true\n\t\tend\n\t\t\n\t\tif param.list then\n\t\t\tlocal key = name\n\t\t\tif type(name) == \"string\" then\n\t\t\t\tkey = string.gsub(name, \"=\", \"\")\n\t\t\tend\n\t\t\tif param.default ~= nil then\n\t\t\t\targs_new[key]\
      \ = {param.default, maxindex = 1}\n\t\t\telse\n\t\t\t\targs_new[key] = {maxindex = 0}\n\t\t\tend\n\t\t\t\n\t\t\tif type(param.list) == \"string\" then\n\t\t\t\t-- If the list property is a string, then it represents the name\n\t\t\t\t-- to be used as the\
      \ prefix for list items. This is for use with lists\n\t\t\t\t-- where the first item is a numbered parameter and the\n\t\t\t\t-- subsequent ones are named, such as 1, pl2, pl3.\n\t\t\t\tif string.find(param.list, \"=\") then\n\t\t\t\t\tpatterns[\"^\" ..\
      \ string.gsub(plain(param.list), \"=\", \"(%%d+)\") .. \"$\"] = name\n\t\t\t\telse\n\t\t\t\t\tpatterns[\"^\" .. plain(param.list) .. \"(%d+)$\"] = name\n\t\t\t\tend\n\t\t\telseif type(name) == \"number\" then\n\t\t\t\t-- If the name is a number, then all\
      \ indexed parameters from\n\t\t\t\t-- this number onwards go in the list.\n\t\t\t\tlist_from_index = name\n\t\t\telse\n\t\t\t\tif string.find(name, \"=\") then\n\t\t\t\t\tpatterns[\"^\" .. string.gsub(plain(name), \"=\", \"(%%d+)\") .. \"$\"] = string.gsub(name,\
      \ \"=\", \"\")\n\t\t\t\telse\n\t\t\t\t\tpatterns[\"^\" .. plain(name) .. \"(%d+)$\"] = name\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tif string.find(name, \"=\") then\n\t\t\t\t-- DO NOT SIDE-EFFECT A TABLE WHILE ITERATING OVER IT.\n\t\t\t\t-- Some elements\
      \ may be skipped or processed twice if you do.\n\t\t\t\t-- Instead, track the changes we want to make to `params`, and\n\t\t\t\t-- do them after the iteration over `params` is done.\n\t\t\t\ttable.insert(names_with_equal_sign, name)\n\t\t\tend\n\t\telseif\
      \ param.default ~= nil then\n\t\t\targs_new[name] = param.default\n\t\tend\n\tend\n\n\t--Process required changes to `params`\n\tfor _, name in ipairs(names_with_equal_sign) do\n\t\trequire(\"Module:debug\").track(\"parameters/name with equals\")\n\t\t\
      params[string.gsub(name, \"=\", \"\")] = params[name]\n\t\tparams[name] = nil\n\tend\n\n\t-- Process the arguments\n\tlocal args_unknown = {}\n\t\n\tfor name, val in pairs(args) do\n\t\tlocal index = nil\n\t\t\n\t\tif type(name) == \"number\" then\n\t\t\
      \tif list_from_index ~= nil and name &gt;= list_from_index then\n\t\t\t\tindex = name - list_from_index + 1\n\t\t\t\tname = list_from_index\n\t\t\tend\n\t\telse\n\t\t\t-- Does this argument name match a pattern?\n\t\t\tfor pattern, pname in pairs(patterns)\
      \ do\n\t\t\t\tindex = mw.ustring.match(name, pattern)\n\t\t\t\t\n\t\t\t\t-- It matches, so store the parameter name and the\n\t\t\t\t-- numeric index extracted from the argument name.\n\t\t\t\tif index then\n\t\t\t\t\tindex = tonumber(index)\n\t\t\t\t\t\
      name = pname\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\t\n\t\tlocal param = params[name]\n\t\t\n\t\t-- If a parameter without the trailing index was found, and\n\t\t-- require_index is set on the param, set the param to nil to treat it\n\t\t\
      -- as if it isn't recognized.\n\t\tif not index and param and param.require_index then\n\t\t\tparam = nil\n\t\tend\n\t\t\n\t\t-- If no index was found, use 1 as the default index.\n\t\t-- This makes list parameters like g, g2, g3 put g at index 1.\n\t\t\
      index = index or 1\n\t\t\n\t\t-- If the argument is not in the list of parameters, trigger an error.\n\t\t-- return_unknown suppresses the error, and stores it in a separate list instead.\n\t\tif not param then\n\t\t\tif return_unknown then\n\t\t\t\targs_unknown[name]\
      \ = val\n\t\t\telse\n\t\t\t\terror(\"The parameter \\\"\" .. name .. \"\\\" is not used by this template.\", 2)\n\t\t\tend\n\t\telse\n\t\t\t-- Remove leading and trailing whitespace unless allow_whitespace is true.\n\t\t\tif not param.allow_whitespace\
      \ then\n\t\t\t\tval = mw.text.trim(val)\n\t\t\tend\n\t\t\t\n\t\t\t-- Empty string is equivalent to nil unless allow_empty is true.\n\t\t\tif val == \"\" and not param.allow_empty then\n\t\t\t\tval = nil\n\t\t\tend\n\t\t\t\n\t\t\t-- Convert to proper type\
      \ if necessary.\n\t\t\tif param.type == \"boolean\" then\n\t\t\t\tval = not (not val or val == \"\" or val == \"0\" or val == \"no\" or val == \"n\" or val == \"false\")\n\t\t\telseif param.type == \"number\" then\n\t\t\t\tval = tonumber(val)\n\t\t\telseif\
      \ param.type then\n\t\t\t\trequire(\"Module:debug\").track {\n\t\t\t\t\t\"parameters/unrecognized type\",\n\t\t\t\t\t\"parameters/unrecognized type/\" .. tostring(param.type)\n\t\t\t\t}\n\t\t\tend\n\t\t\t\n\t\t\t-- Can't use \"if val\" alone, because val\
      \ may be a boolean false.\n\t\t\tif val ~= nil then\n\t\t\t\t-- Mark it as no longer required, as it is present.\n\t\t\t\trequired[param.alias_of or name] = nil\n\t\t\t\t\n\t\t\t\t-- Store the argument value.\n\t\t\t\tif param.list then\n\t\t\t\t\t-- If\
      \ the parameter is an alias of another, store it as the original,\n\t\t\t\t\t-- but avoid overwriting it; the original takes precedence.\n\t\t\t\t\tif not param.alias_of then\n\t\t\t\t\t\targs_new[name][index] = val\n\t\t\t\t\t\t\n\t\t\t\t\t\t-- Store\
      \ the highest index we find.\n\t\t\t\t\t\targs_new[name].maxindex = math.max(index, args_new[name].maxindex)\n\t\t\t\t\telseif args[param.alias_of] == nil then\n\t\t\t\t\t\tif params[param.alias_of] and params[param.alias_of].list then\n\t\t\t\t\t\t\t\
      args_new[param.alias_of][index] = val\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t-- Store the highest index we find.\n\t\t\t\t\t\t\targs_new[param.alias_of].maxindex = math.max(1, args_new[param.alias_of].maxindex)\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\targs_new[param.alias_of]\
      \ = val\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\t-- If the parameter is an alias of another, store it as the original,\n\t\t\t\t\t-- but avoid overwriting it; the original takes precedence.\n\t\t\t\t\tif not param.alias_of then\n\t\t\t\t\
      \t\targs_new[name] = val\n\t\t\t\t\telseif args[param.alias_of] == nil then\n\t\t\t\t\t\tif params[param.alias_of] and params[param.alias_of].list then\n\t\t\t\t\t\t\targs_new[param.alias_of][1] = val\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t-- Store the highest\
      \ index we find.\n\t\t\t\t\t\t\targs_new[param.alias_of].maxindex = math.max(1, args_new[param.alias_of].maxindex)\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\targs_new[param.alias_of] = val\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\
      \t\n\t-- The required table should now be empty.\n\t-- If any entry remains, trigger an error, unless we're in the template namespace.\n\tif mw.title.getCurrentTitle().nsText ~= \"Template\" then\n\t\tlocal list = {}\n\t\tfor name, param in pairs(required)\
      \ do\n\t\t\ttable.insert(list, name)\n\t\tend\n\t\t\n\t\tlocal count = #list\n\t\tif count == 1 then\n\t\t\terror('The parameter \"' .. list[1] .. '\" is required.', 2)\n\t\telseif count == 2 then\n\t\t\terror('The parameters \"' .. table.concat(list,\
      \ '\" and \"') .. '\" are required.', 2)\n\t\telseif count &gt; 2 then\n\t\t\terror('The parameters \"' .. mw.text.listToText(list, '\", \"', '\", and \"') .. '\" are required.', 2)\n\t\tend\n\tend\n\t\n\t-- Remove holes in any list parameters if needed.\n\
      \tfor name, val in pairs(args_new) do\n\t\tif type(val) == \"table\" and not params[name].allow_holes then\n\t\t\targs_new[name] = remove_holes(val)\n\t\tend\n\tend\n\t\n\tif return_unknown then\n\t\treturn args_new, args_unknown\n\telse\n\t\treturn args_new\n\
      \tend\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T16:56:16.434Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Astring&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=44874 t=1556384176310644
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 16:56:16 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1284.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1089 pass, cp3033 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 792759656, 541295743, 812635533
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"4099547\" pageid=\"4099547\" ns=\"828\" title=\"Module:string\"><revisions><rev user=\"Surjection\" timestamp=\"2019-04-25T20:40:50Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"Protected &quot;[[Module:string]]&quot;: Highly visible template/module ([Edit=Allow only autoconfirmed users] (indefinite) [Move=Allow only autoconfirmed users] (indefinite))\" xml:space=\"\
      preserve\">local str = {}\n\n-- Cannot include null byte.\nlocal UTF8_char = \"[\\1-\\127\\194-\\244][\\128-\\191]*\"\n\n--[[\nulen\n\nCounts UTF-8 characters. Faster than mw.ustring.len.\n\nAssumes that the encoding is correct. Unlike mw.ustring.len,\
      \ does not return nil\nif encoding is invalid.\n\nDoes not count the bytes 192, 193, and 245-255. They are not used in UTF-8 and\nwill not occur if the string is valid. They are replaced with the replacement\ncharacter (U+FFFD) on MediaWiki pages.\n--]]\n\
      function str.ulen(text)\n\tlocal _, length = string.gsub(text, UTF8_char, \"\")\n\treturn length\nend\n\n--[[\nlen\n\nThis function returns the length of the target string.\n\nUsage:\n{{#invoke:string|len|target_string|}}\nOR\n{{#invoke:string|len|s=target_string}}\n\
      \nParameters\n    s: The string whose length to report\n\nIf invoked using named parameters, Mediawiki will automatically remove any leading or\ntrailing whitespace from the target string.\n]]\nfunction str.len(frame)\n\tlocal new_args = str._getParameters(frame.args,\
      \ { 's' });\n\tlocal s = new_args['s'] or '';\n\treturn mw.ustring.len(s)\nend\n\n--[[\nsub\n\nThis function returns a substring of the target string at specified indices.\n\nUsage:\n{{#invoke:string|sub|target_string|start_index|end_index}}\nOR\n{{#invoke:string|sub|s=target_string|i=start_index|j=end_index}}\n\
      \nParameters\n    s: The string to return a subset of\n    i: The fist index of the substring to return, defaults to 1.\n    j: The last index of the string to return, defaults to the last character.\n    \nThe first character of the string is assigned\
      \ an index of 1.  If either i or j\nis a negative value, it is interpreted the same as selecting a character by\ncounting from the end of the string.  Hence, a value of -1 is the same as\nselecting the last character of the string.\n\nIf the requested\
      \ indices are out of range for the given string, an error is\nreported.\n]]\nfunction str.sub(frame)\n\tlocal new_args = str._getParameters(frame.args, { 's', 'i', 'j' });\n\tlocal s = new_args['s'] or '';\n\tlocal i = tonumber(new_args['i']) or 1;\n\t\
      local j = tonumber(new_args['j']) or -1;\n\t\n\tlocal len = mw.ustring.len(s);\n\t\n\t-- Convert negatives for range checking\n\tif i &lt; 0 then\n\t\ti = len + i + 1;\n\tend\n\tif j &lt; 0 then\n\t\tj = len + j + 1;\n\tend\n\t\n\tif i &gt; len or j &gt;\
      \ len or i &lt; 1 or j &lt; 1 then\n\t\treturn str._error('String subset index out of range');\n\tend\n\tif j &lt; i then\n\t\treturn str._error('String subset indices out of order');\n\tend\n\t\n\treturn mw.ustring.sub(s, i, j)\nend\n\n--[[\nThis function\
      \ implements that features of {{str sub old}} and is kept in order\nto maintain these older templates.\n]]\nfunction str.sublength(frame)\n\tlocal i = tonumber(frame.args.i) or 0\n\tlocal len = tonumber(frame.args.len)\n\treturn mw.ustring.sub(frame.args.s,\
      \ i + 1, len and (i + len))\nend\n\n--[[\nmatch\n\nThis function returns a substring from the source string that matches a\nspecified pattern.\n\nUsage:\n{{#invoke:string|match|source_string|pattern_string|start_index|match_number|plain_flag|nomatch_output}}\n\
      OR\n{{#invoke:string|pos|s=source_string|pattern=pattern_string|start=start_index\n    |match=match_number|plain=plain_flag|nomatch=nomatch_output}}\n\nParameters\n    s: The string to search\n    pattern: The pattern or string to find within the string\n\
      \    start: The index within the source string to start the search.  The first\n        character of the string has index 1.  Defaults to 1.\n    match: In some cases it may be possible to make multiple matches on a single\n        string.  This specifies\
      \ which match to return, where the first match is\n        match= 1.  If a negative number is specified then a match is returned\n        counting from the last match.  Hence match = -1 is the same as requesting\n        the last match.  Defaults to 1.\n\
      \    plain: A flag indicating that the pattern should be understood as plain\n        text.  Defaults to false.\n    nomatch: If no match is found, output the \"nomatch\" value rather than an error.\n\nIf invoked using named parameters, Mediawiki will\
      \ automatically remove any leading or\ntrailing whitespace from each string.  In some circumstances this is desirable, in\nother cases one may want to preserve the whitespace.\n\nIf the match_number or start_index are out of range for the string being\
      \ queried, then\nthis function generates an error.  An error is also generated if no match is found.\nIf one adds the parameter ignore_errors=true, then the error will be suppressed and\nan empty string will be returned on any failure.\n\nFor information\
      \ on constructing Lua patterns, a form of [regular expression], see:\n\n* http://www.lua.org/manual/5.1/manual.html#5.4.1\n* http://www.mediawiki.org/wiki/Extension:Scribunto/Lua_reference_manual#Patterns\n* http://www.mediawiki.org/wiki/Extension:Scribunto/Lua_reference_manual#Ustring_patterns\n\
      \n]]\nfunction str.match(frame)\n\tlocal new_args = str._getParameters(frame.args, { 's', 'pattern', 'start', 'match', 'plain', 'nomatch' });\n\tlocal s = new_args['s'] or '';\n\tlocal start = tonumber(new_args['start']) or 1;\n\tlocal plain_flag = str._getBoolean(new_args['plain']\
      \ or false);\n\tlocal pattern = new_args['pattern'] or '';\n\tlocal match_index = math.floor(tonumber(new_args['match']) or 1);\n\tlocal nomatch = new_args['nomatch'];\n\t\n\tif s == '' then\n\t\treturn str._error('Target string is empty');\n\tend\n\t\
      if pattern == '' then\n\t\treturn str._error('Pattern string is empty');\n\tend\n\tif math.abs(start) &lt; 1 or math.abs(start) &gt; mw.ustring.len(s) then\n\t\treturn str._error('Requested start is out of range');\n\tend\n\tif match_index == 0 then\n\t\
      \treturn str._error('Match index is out of range');\n\tend\n\tif plain_flag then\n\t\tpattern = str.pattern_escape(pattern);\n\tend\n\t\n\tlocal result\n\tif match_index == 1 then\n\t\t-- Find first match is simple case\n\t\tresult = mw.ustring.match(s,\
      \ pattern, start)\n\telse\n\t\tif start &gt; 1 then\n\t\t\ts = mw.ustring.sub(s, start);\n\t\tend\n\t\t\n\t\tlocal iterator = mw.ustring.gmatch(s, pattern);\n\t\tif match_index &gt; 0 then\n\t\t\t-- Forward search\n\t\t\tfor w in iterator do\n\t\t\t\t\
      match_index = match_index - 1;\n\t\t\t\tif match_index == 0 then\n\t\t\t\t\tresult = w;\n\t\t\t\t\tbreak;\n\t\t\t\tend\n\t\t\tend\n\t\telse\n\t\t\t-- Reverse search\n\t\t\tlocal result_table = {};\n\t\t\tlocal count = 1;\n\t\t\tfor w in iterator do\n\t\
      \t\t\tresult_table[count] = w;\n\t\t\t\tcount = count + 1;\n\t\t\tend\n\t\t\t\n\t\t\tresult = result_table[count + match_index];\n\t\tend\n\tend\n\t\n\tif result == nil then\n\t\tif nomatch == nil then\n\t\t\treturn str._error('Match not found');\n\t\t\
      else\n\t\t\treturn nomatch;\n\t\tend\n\telse\n\t\treturn result;\n\tend\nend\n\n--[[\npos\n\nThis function returns a single character from the target string at position pos.\n\nUsage:\n{{#invoke:string|pos|target_string|index_value}}\nOR\n{{#invoke:string|pos|target=target_string|pos=index_value}}\n\
      \nParameters\n    target: The string to search\n    pos: The index for the character to return\n\nIf invoked using named parameters, Mediawiki will automatically remove any leading or\ntrailing whitespace from the target string.  In some circumstances\
      \ this is desirable, in\nother cases one may want to preserve the whitespace.\n\nThe first character has an index value of 1.\n\nIf one requests a negative value, this function will select a character by counting backwards\nfrom the end of the string.\
      \  In other words pos = -1 is the same as asking for the last character.\n\nA requested value of zero, or a value greater than the length of the string returns an error.\n]]\nfunction str.pos(frame)\n\tlocal new_args = str._getParameters(frame.args, {\
      \ 'target', 'pos' });\n\tlocal target_str = new_args['target'] or '';\n\tlocal pos = tonumber(new_args['pos']) or 0;\n\t\n\tif pos == 0 or math.abs(pos) &gt; mw.ustring.len(target_str) then\n\t\treturn str._error('String index out of range');\n\tend\n\t\
      \n\treturn mw.ustring.sub(target_str, pos, pos);\nend\n\n--[[\nstr_find\n\nThis function duplicates the behavior of {{str_find}}, including all of its quirks.\nThis is provided in order to support existing templates, but is NOT RECOMMENDED for\nnew code\
      \ and templates.  New code is recommended to use the \"find\" function instead.\n\nReturns the first index in \"source\" that is a match to \"target\".  Indexing is 1-based,\nand the function returns -1 if the \"target\" string is not present in \"source\"\
      .\n\nImportant Note: If the \"target\" string is empty / missing, this function returns a\nvalue of \"1\", which is generally unexpected behavior, and must be accounted for\nseparatetly.\n]]\nfunction str.str_find(frame)\n\tlocal new_args = str._getParameters(frame.args,\
      \ { 'source', 'target' });\n\tlocal source_str = new_args['source'] or '';\n\tlocal target_str = new_args['target'] or '';\n\t\n\tif target_str == '' then\n\t\treturn 1;\n\tend\n\t\n\tlocal start = mw.ustring.find(source_str, target_str, 1, true)\n\tif\
      \ start == nil then\n\t\tstart = -1\n\tend\n\t\n\treturn start\nend\n\n--[[\nfind\n\nThis function allows one to search for a target string or pattern within another\nstring.\n\nUsage:\n{{#invoke:string|find|source_str|target_string|start_index|plain_flag}}\n\
      OR\n{{#invoke:string|find|source=source_str|target=target_str|start=start_index|plain=plain_flag}}\n\nParameters\n    source: The string to search\n    target: The string or pattern to find within source\n    start: The index within the source string to\
      \ start the search, defaults to 1\n    plain: Boolean flag indicating that target should be understood as plain\n        text and not as a Lua style regular expression, defaults to true\n\nIf invoked using named parameters, Mediawiki will automatically\
      \ remove any leading or\ntrailing whitespace from the parameter.  In some circumstances this is desirable, in\nother cases one may want to preserve the whitespace.\n\nThis function returns the first index &gt;= \"start\" where \"target\" can be found\n\
      within \"source\".  Indices are 1-based.  If \"target\" is not found, then this\nfunction returns an empty string.  If either \"source\" or \"target\" are missing / empty, this\nfunction also returns an empty string.\n\nThis function should be safe for\
      \ UTF-8 strings.\n]]\nfunction str.find(frame)\n\tlocal params = {\n\t\t[1] = { required = true },\n\t\t[2] = { required = true },\n\t\t[3] = { type = \"number\" },\n\t\t[4] = { type = \"boolean\" },\n\t}\n\t\n\tlocal args = require(\"Module:parameters\"\
      ).process(frame.args, params)\n\t\n\treturn mw.ustring.find(args[1], args[2], args[3], args[4])\nend\n\n--[[\nreplace\n\nThis function allows one to replace a target string or pattern within another\nstring.\n\nUsage:\n{{#invoke:string|replace|source_str|pattern_string|replace_string|replacement_count|plain_flag}}\n\
      OR\n{{#invoke:string|replace|source=source_string|pattern=pattern_string|replace=replace_string|\n   count=replacement_count|plain=plain_flag}}\n\nParameters\n    source: The string to search\n    pattern: The string or pattern to find within source\n\
      \    replace: The replacement text\n    count: The number of occurences to replace, defaults to all.\n    plain: Boolean flag indicating that pattern should be understood as plain\n        text and not as a Lua style regular expression, defaults to true\n\
      ]]\nfunction str.replace(frame)\n\tlocal new_args = str._getParameters(frame.args, { 'source', 'pattern', 'replace', 'count', 'plain' });\n\tlocal source_str = new_args['source'] or '';\n\tlocal pattern = new_args['pattern'] or '';\n\tlocal replace = new_args['replace']\
      \ or '';\n\tlocal count = tonumber(new_args['count']);\n\tlocal plain = new_args['plain'] or true;\n\t\n\tif source_str == '' or pattern == '' then\n\t\treturn source_str;\n\tend\n\tplain = str._getBoolean(plain);\n\t\n\tif plain then\n\t\tpattern = str.pattern_escape(pattern);\n\
      \t\treplace = mw.ustring.gsub(replace, \"%%\", \"%%%%\"); --Only need to escape replacement sequences.\n\tend\n\t\n\tlocal result;\n\t\n\tresult = mw.ustring.gsub(source_str, pattern, replace, count);\n\t\n\treturn result;\nend\n\n\nfunction str.gsub(frame)\n\
      \tlocal params = {\n\t\t[1] = { required = true, allow_empty = true },\n\t\t[2] = { required = true, allow_empty = true },\n\t\t[3] = { required = true, allow_empty = true },\n\t\t[4] = { type = \"number\" },\n\t}\n\t\n\tlocal args = require(\"Module:parameters\"\
      ).process(frame.args, params)\n\t\n\treturn (mw.ustring.gsub(args[1], args[2], args[3], args[4]))\nend\n\n\n--[[\n    simple function to pipe string.rep to templates.\n]]\n\nfunction str.rep(frame)\n\tlocal repetitions = tonumber(frame.args[2])\n\tif not\
      \ repetitions then\n\t\treturn str._error('function rep expects a number as second parameter, received \"' .. (frame.args[2] or '') .. '\"')\n\tend\n\treturn string.rep(frame.args[1] or '', repetitions)\nend\n\nfunction str.lower(frame)\n\tlocal text =\
      \ frame.args[1] or ''\n\treturn mw.ustring.lower(text)\nend\n\nstr.lc = str.lower\n\n--[[\nHelper function that populates the argument list given that user may need to use a mix of\nnamed and unnamed parameters.  This is relevant because named parameters\
      \ are not\nidentical to unnamed parameters due to string trimming, and when dealing with strings\nwe sometimes want to either preserve or remove that whitespace depending on the application.\n]]\nfunction str._getParameters(frame_args, arg_list)\n\tlocal\
      \ new_args = {};\n\tlocal index = 1;\n\tlocal value;\n\t\n\tfor _, arg in ipairs(arg_list) do\n\t\tvalue = frame_args[arg]\n\t\tif value == nil then\n\t\t\tvalue = frame_args[index];\n\t\t\tindex = index + 1;\n\t\tend\n\t\tnew_args[arg] = value;\n\tend\n\
      \t\n\treturn new_args;\nend\n\n--[[\nHelper function to handle error messages.\n]]\nfunction str._error(error_str)\n\tlocal frame = mw.getCurrentFrame();\n\tlocal error_category = frame.args.error_category or 'Errors reported by Module String';\n\tlocal\
      \ ignore_errors = frame.args.ignore_errors or false;\n\tlocal no_category = frame.args.no_category or false;\n\t\n\tif str._getBoolean(ignore_errors) then\n\t\treturn '';\n\tend\n\t\n\tlocal error_str = '&lt;strong class=\"error\"&gt;String Module Error:\
      \ ' .. error_str .. '&lt;/strong&gt;';\n\tif error_category ~= '' and not str._getBoolean(no_category) then\n\t\terror_str = '[[Category:' .. error_category .. ']]' .. error_str;\n\tend\n\t\n\treturn error_str;\nend\n\n--[[\nHelper Function to interpret\
      \ boolean strings\n]]\nfunction str._getBoolean(boolean_str)\n\tlocal boolean_value;\n\t\n\tif type(boolean_str) == 'string' then\n\t\tboolean_str = boolean_str:lower();\n\t\tif boolean_str == 'false' or boolean_str == 'no' or boolean_str == '0'\n\t\t\t\
      \tor boolean_str == '' then\n\t\t\tboolean_value = false;\n\t\telse\n\t\t\tboolean_value = true;\n\t\tend\n\telseif type(boolean_str) == 'boolean' then\n\t\tboolean_value = boolean_str;\n\telse\n\t\terror('No boolean value found');\n\tend\n\treturn boolean_value\n\
      end\n\n--[[\nHelper function that escapes all pattern characters – ().%+-*?[^$] – so that they will be treated\nas plain text.\n]]\nfunction str.pattern_escape(pattern_str)\n\tlocal invoked = false\n\t\n\tif type(pattern_str) == \"table\" then\n\t\tif\
      \ pattern_str.args then\n\t\t\tlocal frame = pattern_str\n\t\t\tinvoked = true\n\t\t\t\n\t\t\tif frame.args[1] then\n\t\t\t\tpattern_str = frame.args[1]\n\t\t\telse\n\t\t\t\tpattern_str = frame:getParent().args[1]\n\t\t\tend\n\t\telse\n\t\t\terror(\"First\
      \ argument to pattern_escape should be a string, a number, or a frame object.\")\n\t\tend\n\telseif not (type(pattern_str) == \"string\" or type(pattern_str) == \"number\") then\n\t\terror(\"First argument to pattern_escape should be a string or a number.\"\
      )\n\tend\n\t\n\tif invoked then\n\t\tlocal escaped = mw.ustring.gsub(pattern_str, \"([%(%)%.%%%+%-%*%?%[%^%$%]])\", \"%%%1\")\n\t\treturn escaped\n\telse\n\t\treturn mw.ustring.gsub(pattern_str, \"([%(%)%.%%%+%-%*%?%[%^%$%]])\", \"%%%1\");\n\tend\nend\n\
      \nfunction str.count(text, pattern, plain)\n\tif not (type(text) == \"string\" or type(text) == \"number\") then\n\t\terror('The first argument to the function \"count\" must be a string or a number, not a ' .. type(text) .. '.')\n\tend\n\t\n\tif not (type(pattern)\
      \ == \"string\" or type(pattern) == \"number\") then\n\t\terror('The first argument to the function \"count\" must be a string or a number, not a ' .. type(text) .. '.')\n\tend\n\t\n\tif plain then\n\t\tpattern = str.pattern_escape(pattern)\n\tend\n\t\n\
      \tlocal _, count = mw.ustring.gsub(text, pattern, \"\")\n\t\n\treturn count\nend\n\nfunction str.plain_gsub(text, pattern, replacement)\n\tlocal invoked = false\n\t\n\tif type(text) == \"table\" then\n\t\tinvoked = true\n\t\t\n\t\tif text.args then\n\t\
      \t\tlocal frame = text\n\t\t\t\n\t\t\tlocal params = {\n\t\t\t\t[1] = {},\n\t\t\t\t[2] = {},\n\t\t\t\t[3] = { allow_empty = true },\n\t\t\t}\n\t\t\t\n\t\t\tlocal args = require(\"Module:parameters\").process(frame.args, params)\n\t\t\t\n\t\t\ttext = args[1]\n\
      \t\t\tpattern = args[2]\n\t\t\treplacement = args[3]\n\t\telse\n\t\t\terror(\"If the first argument to plain_gsub is a table, it should be a frame object.\")\n\t\tend\n\telse\n\t\tif not (type(pattern) == \"string\" or type(pattern) == \"number\") then\n\
      \t\t\terror(\"The second argument to plain_gsub should be a string or a number.\")\n\t\tend\n\t\t\n\t\tif not (type(replacement) == \"string\" or type(replacement) == \"number\") then\n\t\t\terror(\"The third argument to plain_gsub should be a string or\
      \ a number.\")\n\t\tend\n\tend\n\t\n\tpattern = str.pattern_escape(pattern)\n\t\n\tif invoked then\n\t\ttext = mw.ustring.gsub(text, pattern, replacement)\n\t\treturn text\n\telse\n\t\treturn mw.ustring.gsub(text, pattern, replacement)\n\tend\nend\n\n\
      function str.matchToArray(text, pattern)\n\tlocal invoked = false\n\t\n\tif type(text) == \"table\" then\n\t\tinvoked = true\n\t\t\n\t\tif text.args then\n\t\t\tlocal frame = text\n\t\t\t\n\t\t\tlocal params = {\n\t\t\t\t[1] = { required = true },\n\t\t\
      \t\t[2] = { required = true },\n\t\t\t}\n\t\t\t\n\t\t\tlocal args = require(\"Module:parameters\").process(frame.args, params)\n\t\t\t\n\t\t\ttext = args[1]\n\t\t\tpattern = args[2]\n\t\telse\n\t\t\terror(\"If the first argument to matchToArray is a table,\
      \ it should be a frame object.\")\n\t\tend\n\telse\n\t\tif not (type(pattern) == \"string\" or type(pattern) == \"number\") then\n\t\t\terror(\"The second argument to matchToArray should be a string or a number.\")\n\t\tend\n\tend\n\t\n\tlocal matches\
      \ = {}\n\tlocal i = 0\n\tfor match in mw.ustring.gmatch(text, pattern) do\n\t\ti = i + 1\n\t\tmatches[i] = match\n\tend\n\t\n\tif i &gt; 0 then\n\t\tif invoked then\n\t\t\treturn table.concat(matches, \", \")\n\t\telse\n\t\t\treturn matches\n\t\tend\n\t\
      else\n\t\tif invoked then\n\t\t\treturn \"\"\n\t\telse\n\t\t\treturn nil\n\t\tend\n\tend\nend\n\n--[=[\n\tSimilar to gmatch, but it returns the count of the match in addition to the\n\tlist of captures, something like ipairs().\n\t\n\tIf the pattern doesn't\
      \ contain any captures, the whole match is returned.\n\t\n\tInvoke thus:\n\t\n\t\tfor i, whole_match in require(\"Module:string\").imatch(text, pattern) do\n\t\t\t[ do something with i and whole_match ]\n\t\tend\n\t\n\tor\n\t\n\t\tfor i, capture1[, capture2[,\
      \ capture3[, ...]]] in require(\"Module:string\").imatch(text, pattern) do\n\t\t\t[ do something with i and capture1 ]\n\t\tend\n\t\n\tFor example, this code\n\t\tfor i, whole_match in require(\"Module:string\").imatch(\"a b c\", \"[a-z]\") do\n\t\t\t\
      mw.log(i, whole_match)\n\t\tend\n\twill log\n\t\t1\ta\n\t\t2\tb\n\t\t3\tc\n]=]\nfunction str.imatch(text, pattern, pos, plain, use_basic_Lua_function)\n\tlocal i = 0\n\tpos = pos or 0\n\tif not string.find(pattern, \"%b()\") then\n\t\tpattern = \"(\" ..\
      \ pattern .. \")\"\n\tend\n\tlocal find = use_basic_Lua_function and string.find or mw.ustring.find\n\treturn function()\n\t\ti = i + 1\n\t\tlocal return_values = { find(text, pattern, pos, plain) }\n\t\tlocal j = return_values[2]\n\t\t\n\t\tif return_values[3]\
      \ then\n\t\t\tpos = j + 1\n\t\t\t-- Skip the first two returned values, which are the indices of the\n\t\t\t-- whole match.\n\t\t\treturn i, unpack(return_values, 3)\n\t\tend\n\tend\nend\n\nfunction str.escapebytes(s)\n\treturn (string.gsub(s,\n\t\t'.',\n\
      \t\tfunction(char)\n\t\t\treturn ('\\\\%03d'):format(string.byte(char))\n\t\tend))\nend\n\nfunction str.URIdecode(frame)\n\treturn mw.uri.decode(frame.args[1], frame.args[2] or \"PATH\")\nend\n\nreturn str</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T16:56:16.651Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Atable&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=36511 t=1556384176539045
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 16:56:16 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1286.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1077 pass, cp3040 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 1072695497, 787090357, 827827309
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"5122966\" pageid=\"5122966\" ns=\"828\" title=\"Module:table\"><revisions><rev user=\"Benwing2\" timestamp=\"2019-04-14T04:16:37Z\" contentformat=\"\
      text/plain\" contentmodel=\"Scribunto\" comment=\"add deepEquals, deepEqualsList for deep comparisons\" xml:space=\"preserve\">--[[\n------------------------------------------------------------------------------------\n--                      table (formerly\
      \ TableTools)                               --\n--                                                                                --\n-- This module inclcudes a number of functions for dealing with Lua tables.        --\n-- It is a meta-module, meant to\
      \ be called from other Lua modules, and should     --\n-- not be called directly from #invoke.                                           --\n------------------------------------------------------------------------------------\n--]]\n\n--[[\n\tInserting\
      \ new values into a table using a local \"index\" variable, which is\n\tincremented each time, is faster than using \"table.insert(t, x)\" or\n\t\"t[#t + 1] = x\". See the talk page.\n]]\n\nlocal libraryUtil = require('libraryUtil')\n\nlocal export = {}\n\
      \n-- Define often-used variables and functions.\nlocal floor = math.floor\nlocal infinity = math.huge\nlocal checkType = libraryUtil.checkType\nlocal checkTypeMulti = libraryUtil.checkTypeMulti\n\nlocal function _check(funcName, expectType)\n\tif type(expectType)\
      \ == \"string\" then\n\t\treturn function(argIndex, arg, nilOk)\n\t\t\tcheckType(funcName, argIndex, arg, expectType, nilOk)\n\t\tend\n\telse\n\t\treturn function(argIndex, arg, expectType, nilOk)\n\t\t\tif type(expectType) == \"table\" then\n\t\t\t\t\
      checkTypeMulti(funcName, argIndex, arg, expectType, nilOk)\n\t\t\telse\n\t\t\t\tcheckType(funcName, argIndex, arg, expectType, nilOk)\n\t\t\tend\n\t\tend\n\tend\nend\n\n--[[\n------------------------------------------------------------------------------------\n\
      -- isPositiveInteger\n--\n-- This function returns true if the given value is a positive integer, and false\n-- if not. Although it doesn't operate on tables, it is included here as it is\n-- useful for determining whether a given table key is in the array\
      \ part or the\n-- hash part of a table.\n------------------------------------------------------------------------------------\n--]]\nfunction export.isPositiveInteger(v)\n\treturn type(v) == 'number' and v &gt;= 1 and floor(v) == v and v &lt; infinity\n\
      end\n\n--[[\n------------------------------------------------------------------------------------\n-- isNan\n--\n-- This function returns true if the given number is a NaN value, and false\n-- if not. Although it doesn't operate on tables, it is included\
      \ here as it is\n-- useful for determining whether a value can be a valid table key. Lua will\n-- generate an error if a NaN is used as a table key.\n------------------------------------------------------------------------------------\n--]]\nfunction export.isNan(v)\n\
      \tif type(v) == 'number' and tostring(v) == '-nan' then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\n\n--[[\n------------------------------------------------------------------------------------\n-- shallowClone\n--\n-- This returns a clone of\
      \ a table. The value returned is a new table, but all\n-- subtables and functions are shared. Metamethods are respected, but the returned\n-- table will have no metatable of its own.\n------------------------------------------------------------------------------------\n\
      --]]\nfunction export.shallowClone(t)\n\tlocal ret = {}\n\tfor k, v in pairs(t) do\n\t\tret[k] = v\n\tend\n\treturn ret\nend\n\n--[[\nShallow copy\n]]\nfunction export.shallowcopy(orig)\n\tlocal orig_type = type(orig)\n\tlocal copy\n\tif orig_type == 'table'\
      \ then\n\t\tcopy = {}\n\t\tfor orig_key, orig_value in pairs(orig) do\n\t\t\tcopy[orig_key] = orig_value\n\t\tend\n\telse -- number, string, boolean, etc\n\t\tcopy = orig\n\tend\n\treturn copy\nend\n\n--[[\n\tRecursive deep copy function\n\tEquivalent\
      \ to mw.clone?\n]]\nlocal function deepcopy(orig, includeMetatable, already_seen)\n\t-- Stores copies of tables indexed by the original table.\n\talready_seen = already_seen or {}\n\t\n\tlocal copy = already_seen[orig]\n\tif copy ~= nil then\n\t\treturn\
      \ copy\n\tend\n\t\n\tif type(orig) == 'table' then\n\t\tcopy = {}\n\t\tfor orig_key, orig_value in pairs(orig) do\n\t\t\tcopy[deepcopy(orig_key, includeMetatable, already_seen)] = deepcopy(orig_value, includeMetatable, already_seen)\n\t\tend\n\t\talready_seen[orig]\
      \ = copy\n\t\t\n\t\tif includeMetatable then\n\t\t\tlocal mt = getmetatable(orig)\n\t\t\tif mt ~= nil then\n\t\t\t\tlocal mt_copy = deepcopy(mt, includeMetatable, already_seen)\n\t\t\t\tsetmetatable(copy, mt_copy)\n\t\t\tend\n\t\tend\n\telse -- number,\
      \ string, boolean, etc\n\t\tcopy = orig\n\tend\n\treturn copy\nend\n\nfunction export.deepcopy(orig, noMetatable, already_seen)\n\tcheckType(\"deepcopy\", 3, already_seen, \"table\", true)\n\t\n\treturn deepcopy(orig, not noMetatable, already_seen)\nend\n\
      \n--[[\n------------------------------------------------------------------------------------\n-- removeDuplicates\n--\n-- This removes duplicate values from an array. Non-positive-integer keys are\n-- ignored. The earliest value is kept, and all subsequent\
      \ duplicate values are\n-- removed, but otherwise the array order is unchanged.\n------------------------------------------------------------------------------------\n--]]\nfunction export.removeDuplicates(t)\n\tcheckType('removeDuplicates', 1, t, 'table')\n\
      \tlocal isNan = export.isNan\n\tlocal ret, exists = {}, {}\n\tlocal index = 1\n\tfor _, v in ipairs(t) do\n\t\tif isNan(v) then\n\t\t\t-- NaNs can't be table keys, and they are also unique, so we don't need to check existence.\n\t\t\tret[index] = v\n\t\
      \t\tindex = index + 1\n\t\telse\n\t\t\tif not exists[v] then\n\t\t\t\tret[index] = v\n\t\t\t\tindex = index + 1\n\t\t\t\texists[v] = true\n\t\t\tend\n\t\tend\n\tend\n\treturn ret\nend\n\n--[[\n------------------------------------------------------------------------------------\n\
      -- numKeys\n--\n-- This takes a table and returns an array containing the numbers of any numerical\n-- keys that have non-nil values, sorted in numerical order.\n------------------------------------------------------------------------------------\n--]]\n\
      function export.numKeys(t, checked)\n\tif not checked then\n\t\tcheckType('numKeys', 1, t, 'table')\n\tend\n\tlocal isPositiveInteger = export.isPositiveInteger\n\tlocal nums = {}\n\tlocal index = 1\n\tfor k, _ in pairs(t) do\n\t\tif isPositiveInteger(k)\
      \ then\n\t\t\tnums[index] = k\n\t\t\tindex = index + 1\n\t\tend\n\tend\n\ttable.sort(nums)\n\treturn nums\nend\n\nfunction export.maxIndex(t)\n\tcheckType('maxIndex', 1, t, 'table')\n\tlocal positiveIntegerKeys = export.numKeys(t)\n\tif positiveIntegerKeys[1]\
      \ then\n\t\treturn math.max(unpack(positiveIntegerKeys))\n\telse\n\t\treturn 0 -- ???\n\tend\nend\n\n--[[\n------------------------------------------------------------------------------------\n-- affixNums\n--\n-- This takes a table and returns an array\
      \ containing the numbers of keys with the\n-- specified prefix and suffix.\n-- affixNums({a1 = 'foo', a3 = 'bar', a6 = 'baz'}, \"a\")\n--\t\t↓\n-- {1, 3, 6}.\n------------------------------------------------------------------------------------\n--]]\n\
      function export.affixNums(t, prefix, suffix)\n\tlocal check = _check('affixNums')\n\tcheck(1, t, 'table')\n\tcheck(2, prefix, 'string', true)\n\tcheck(3, suffix, 'string', true)\n\t\n\tlocal function cleanPattern(s)\n\t\t-- Cleans a pattern so that the\
      \ magic characters ()%.[]*+-?^$ are interpreted literally.\n\t\ts = s:gsub('([%(%)%%%.%[%]%*%+%-%?%^%$])', '%%%1')\n\t\treturn s\n\tend\n\t\n\tprefix = prefix or ''\n\tsuffix = suffix or ''\n\tprefix = cleanPattern(prefix)\n\tsuffix = cleanPattern(suffix)\n\
      \tlocal pattern = '^' .. prefix .. '([1-9]%d*)' .. suffix .. '$'\n\t\n\tlocal nums = {}\n\tlocal index = 1\n\tfor k, _ in pairs(t) do\n\t\tif type(k) == 'string' then\n\t\t\tlocal num = mw.ustring.match(k, pattern)\n\t\t\tif num then\n\t\t\t\tnums[index]\
      \ = tonumber(num)\n\t\t\t\tindex = index + 1\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(nums)\n\treturn nums\nend\n\n--[[\n------------------------------------------------------------------------------------\n-- numData\n--\n-- Given a table with keys like\
      \ (\"foo1\", \"bar1\", \"foo2\", \"baz2\"), returns a table\n-- of subtables in the format\n-- { [1] = {foo = 'text', bar = 'text'}, [2] = {foo = 'text', baz = 'text'} }\n-- Keys that don't end with an integer are stored in a subtable named \"other\".\n\
      -- The compress option compresses the table so that it can be iterated over with\n-- ipairs.\n------------------------------------------------------------------------------------\n--]]\nfunction export.numData(t, compress)\n\tlocal check = _check('numData')\n\
      \tcheck(1, t, 'table')\n\tcheck(2, compress, 'boolean', true)\n\t\n\tlocal ret = {}\n\tfor k, v in pairs(t) do\n\t\tlocal prefix, num = tostring(k):match('^([^0-9]*)([1-9][0-9]*)$')\n\t\tif num then\n\t\t\tnum = tonumber(num)\n\t\t\tlocal subtable = ret[num]\
      \ or {}\n\t\t\tif prefix == '' then\n\t\t\t\t-- Positional parameters match the blank string; put them at the start of the subtable instead.\n\t\t\t\tprefix = 1\n\t\t\tend\n\t\t\tsubtable[prefix] = v\n\t\t\tret[num] = subtable\n\t\telse\n\t\t\tlocal subtable\
      \ = ret.other or {}\n\t\t\tsubtable[k] = v\n\t\t\tret.other = subtable\n\t\tend\n\tend\n\tif compress then\n\t\tlocal other = ret.other\n\t\tret = export.compressSparseArray(ret)\n\t\tret.other = other\n\tend\n\treturn ret\nend\n\n--[[\n------------------------------------------------------------------------------------\n\
      -- compressSparseArray\n--\n-- This takes an array with one or more nil values, and removes the nil values\n-- while preserving the order, so that the array can be safely traversed with\n-- ipairs.\n------------------------------------------------------------------------------------\n\
      --]]\nfunction export.compressSparseArray(t)\n\tcheckType('compressSparseArray', 1, t, 'table')\n\tlocal ret = {}\n\tlocal index = 1\n\tlocal nums = export.numKeys(t)\n\tfor _, num in ipairs(nums) do\n\t\tret[index] = t[num]\n\t\tindex = index + 1\n\t\
      end\n\treturn ret\nend\n\n--[[\n------------------------------------------------------------------------------------\n-- sparseIpairs\n--\n-- This is an iterator for sparse arrays. It can be used like ipairs, but can\n-- handle nil values.\n------------------------------------------------------------------------------------\n\
      --]]\nfunction export.sparseIpairs(t)\n\tcheckType('sparseIpairs', 1, t, 'table')\n\tlocal nums = export.numKeys(t)\n\tlocal i = 0\n\treturn function()\n\t\ti = i + 1\n\t\tlocal key = nums[i]\n\t\tif key then\n\t\t\treturn key, t[key]\n\t\telse\n\t\t\t\
      return nil, nil\n\t\tend\n\tend\nend\n\n--[[\n------------------------------------------------------------------------------------\n-- size\n--\n-- This returns the size of a key/value pair table. It will also work on arrays,\n-- but for arrays it is more\
      \ efficient to use the # operator.\n------------------------------------------------------------------------------------\n--]]\nfunction export.size(t)\n\tcheckType('size', 1, t, 'table')\n\tlocal i = 0\n\tfor _ in pairs(t) do\n\t\ti = i + 1\n\tend\n\t\
      return i\nend\n\n--[[\n-- This returns the length of a table, or the first integer key n counting from\n-- 1 such that t[n + 1] is nil. It is similar to the operator #, but may return\n-- a different value when there are gaps in the array portion of the\
      \ table.\n-- Intended to be used on data loaded with mw.loadData. For other tables, use #.\n--]]\nfunction export.length(t)\n\tlocal i = 0\n\trepeat\n\t\ti = i + 1\n\tuntil t[i] == nil\n\treturn i - 1\nend\n\n--[[\nTakes table and a value to be found.\n\
      If the value is in the array portion of the table, return true.\nIf the value is in the hashmap or not in the table, return false.\n]]\nfunction export.contains(list, x)\n\tfor _, v in ipairs(list) do\n\t\tif v == x then return true end\n\tend\n\treturn\
      \ false\nend\n\n--[[\nRecursively compare two values that may be tables, including tables with\nnested tables as values. Return true if both values are structurally equal.\nNote that this handles arbitary levels of nesting. If all tables are known\nto\
      \ be lists (with only integral keys), use export.deepEqualsList, which will\nbe more efficient.\n\nNOTE: This is *NOT* smart enough to properly handle cycles; in such a case, it\nwill get into an infinite loop.\n]]\nfunction export.deepEquals(x, y)\n \
      \   if type(x) == \"table\" and type(y) == \"table\" then\n    \t-- Two tables are the same if they have the same number of elements\n    \t-- and all keys that are present in one of the tables compare equal\n    \t-- to the corresponding keys in the other\
      \ table, using structural\n    \t-- comparison.\n    \tlocal sizex = 0\n        for key, value in pairs(x) do\n            if not export.deepEquals(value, y[key]) then\n                return false\n            end\n            sizex = sizex + 1\n    \
      \    end\n        local sizey = export.size(y)\n        if sizex ~= sizey then\n            return false\n        end \n        return true\n    end\n    return x == y\nend\n\n--[[\nRecursively compare two values that may be lists (i.e. tables with integral\n\
      keys), including lists with nested lists as values. Return true if both values\nare structurally equal. Note that this handles arbitary levels of nesting.\nResults are undefined if tables with non-integral keys are present anywhere in\neither structure;\
      \ if that may be the case, use export.deepEquals, which will\nhandle such tables correctly but be less efficient on lists than\nexport.deepEqualsList.\n\nNOTE: This is *NOT* smart enough to properly handle cycles; in such a case, it\nwill get into an infinite\
      \ loop.\n]]\nfunction export.deepEqualsList(x, y)\n    if type(x) == \"table\" and type(y) == \"table\" then\n        if #x ~= #y then\n            return false\n        end \n        for key, value in ipairs(x) do\n            if not export.deepEqualsList(value,\
      \ y[key]) then\n                return false\n            end\n        end\n        return true\n    end\n    return x == y\nend\n\n--[[\n\tFinds key for specified value in a given table.\n\tRoughly equivalent to reversing the key-value pairs in the table\
      \ –\n\t\treversed_table = { [value1] = key1, [value2] = key2, ... }\n\t– and then returning reversed_table[valueToFind].\n\t\n\tThe value can only be a string or a number\n\t(not nil, a boolean, a table, or a function).\n\t\n\tOnly reliable if there is\
      \ just one key with the specified value.\n\tOtherwise, the function returns the first key found,\n\tand the output is unpredictable.\n]]\nfunction export.keyFor(t, valueToFind)\n\tlocal check = _check('keyFor')\n\tcheck(1, t, 'table')\n\tcheck(2, valueToFind,\
      \ { 'string', 'number' })\n\t\n\tfor key, value in pairs(t) do\n\t\tif value == valueToFind then\n\t\t\treturn key\n\t\tend\n\tend\n\t\n\treturn nil\nend\n\n--[[\n\tThe default sorting function used in export.keysToList if no keySort\n\tis defined.\n]]\n\
      local function defaultKeySort(key1, key2)\n\t-- \"number\" &lt; \"string\", so numbers will be sorted before strings.\n\tlocal type1, type2 = type(key1), type(key2)\n\tif type1 ~= type2 then\n\t\treturn type1 &lt; type2\n\telse\n\t\treturn key1 &lt; key2\n\
      \tend\nend\n\n--[[\n\tReturns a list of the keys in a table, sorted using either the default\n\ttable.sort function or a custom keySort function.\n\tIf there are only numerical keys, numKeys is probably more efficient.\n]]\nfunction export.keysToList(t,\
      \ keySort, checked)\n\tif not checked then\n\t\tlocal check = _check('keysToList')\n\t\tcheck(1, t, 'table')\n\t\tcheck(2, keySort, 'function', true)\n\tend\n\t\n\tlocal list = {}\n\tlocal index = 1\n\tfor key, _ in pairs(t) do\n\t\tlist[index] = key\n\
      \t\tindex = index + 1\n\tend\n\t\n\t-- Place numbers before strings, otherwise sort using &lt;.\n\tif not keySort then\n\t\tkeySort = defaultKeySort\n\tend\n\t\n\ttable.sort(list, keySort)\n\t\n\treturn list\nend\n\n--[[\n\tIterates through a table, with\
      \ the keys sorted using the keysToList function.\n\tIf there are only numerical keys, sparseIpairs is probably more efficient.\n]]\nfunction export.sortedPairs(t, keySort)\n\tlocal check = _check('keysToList')\n\tcheck(1, t, 'table')\n\tcheck(2, keySort,\
      \ 'function', true)\n\t\n\tlocal list = export.keysToList(t, keySort, true)\n\t\n\tlocal i = 0\n\treturn function()\n\t\ti = i + 1\n\t\tlocal key = list[i]\n\t\tif key ~= nil then\n\t\t\treturn key, t[key]\n\t\telse\n\t\t\treturn nil, nil\n\t\tend\n\t\
      end\nend\n\nfunction export.reverseIpairs(list)\n\tcheckType('reverse_ipairs', 1, list, 'table')\n\t\n\tlocal i = #list + 1\n\treturn function()\n\t\ti = i - 1\n\t\tif list[i] ~= nil then\n\t\t\treturn i, list[i]\n\t\telse\n\t\t\treturn nil, nil\n\t\t\
      end\n\tend\nend\n\n--[=[\n\tJoins an array with serial comma and serial conjunction, normally \"and\".\n\tAn improvement on mw.text.listToText, which doesn't properly handle serial\n\tcommas.\n\t\n\tOptions:\n\t\t- conj\n\t\t\tConjunction to use; defaults\
      \ to \"and\".\n\t\t- italicizeConj\n\t\t\tItalicize conjunction: for [[Module:Template:also]]\n\t\t- dontTag\n\t\t\tDon't tag the serial comma and serial \"and\". For error messages, in\n\t\t\twhich HTML cannot be used.\n]=]\nfunction export.serialCommaJoin(seq,\
      \ options)\n\tlocal check = _check(\"serialCommaJoin\", \"table\")\n\tcheck(1, seq)\n\tcheck(2, options, true)\n\t\n\tlocal length = #seq\n\t\n\tif not options then\n\t\toptions = {}\n\tend\n\t\n\tlocal conj\n\tif length &gt; 1 then\n\t\tconj = options.conj\
      \ or \"and\"\n\t\tif options.italicizeConj then\n\t\t\tconj = \"''\" .. conj .. \"''\"\n\t\tend\n\tend\n\t\n\tif length == 0 then\n\t\treturn \"\"\n\telseif length == 1 then\n\t\treturn seq[1] -- nothing to join\n\telseif length == 2 then\n\t\treturn seq[1]\
      \ .. \" \" .. conj .. \" \" .. seq[2]\n\telse\n\t\tlocal comma = options.dontTag and \",\" or '&lt;span class=\"serial-comma\"&gt;,&lt;/span&gt;'\n\t\tconj = options.dontTag and ' ' .. conj .. \" \" or '&lt;span class=\"serial-and\"&gt; ' .. conj .. '&lt;/span&gt;\
      \ '\n\t\treturn table.concat(seq, \", \", 1, length - 1) ..\n\t\t\t\tcomma .. conj .. seq[length]\n\tend\nend\n\n--[[\n\tConcatenates all values in the table that are indexed by a number, in order.\n\tsparseConcat{ a, nil, c, d }  =&gt;  \"acd\"\n\tsparseConcat{\
      \ nil, b, c, d }  =&gt;  \"bcd\"\n]]\nfunction export.sparseConcat(t, sep, i, j)\n\tlocal list = {}\n\t\n\tlocal list_i = 0\n\tfor _, v in export.sparseIpairs(t) do\n\t\tlist_i = list_i + 1\n\t\tlist[list_i] = v\n\tend\n\t\n\treturn table.concat(list,\
      \ sep, i, j)\nend\n\n--[[\n\tValues of numberic keys in array portion of table are reversed:\n\t{ \"a\", \"b\", \"c\" } -&gt; { \"c\", \"b\", \"a\" }\n--]]\nfunction export.reverse(t)\n\tcheckType(\"reverse\", 1, t, \"table\")\n\t\n\tlocal new_t = {}\n\
      \tlocal new_t_i = 1\n\tfor i = #t, 1, -1 do\n\t\tnew_t[new_t_i] = t[i]\n\t\tnew_t_i = new_t_i + 1\n\tend\n\treturn new_t\nend\n\nfunction export.reverseConcat(t, sep, i, j)\n\treturn table.concat(export.reverse(t), sep, i, j)\nend\n\n-- { \"a\", \"b\"\
      , \"c\" } -&gt; { a = 1, b = 2, c = 3 }\nfunction export.invert(array)\n\tcheckType(\"invert\", 1, array, \"table\")\n\t\n\tlocal map = {}\n\tfor i, v in ipairs(array) do\n\t\tmap[v] = i\n\tend\n\t\n\treturn map\nend\n\n--[[\n\t{ \"a\", \"b\", \"c\" }\
      \ -&gt; { [\"a\"] = true, [\"b\"] = true, [\"c\"] = true }\n--]]\nfunction export.listToSet(t)\n\tcheckType(\"listToSet\", 1, t, \"table\")\n\t\n\tlocal set = {}\n\tfor _, item in ipairs(t) do\n\t\tset[item] = true\n\tend\n\treturn set\nend\n\n--[[\n\t\
      Returns true if all keys in the table are consecutive integers starting at 1.\n--]]\nfunction export.isArray(t)\n\tcheckType(\"isArray\", 1, t, \"table\")\n\t\n\tlocal i = 0\n\tfor _ in pairs(t) do\n\t\ti = i + 1\n\t\tif t[i] == nil then\n\t\t\treturn\
      \ false\n\t\tend\n\tend\n\treturn true\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T16:56:16.904Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Alanguages&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=35266 t=1556384176801323
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 16:56:16 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1230.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1089 pass, cp3042 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 770362426, 519664477, 803663585
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"4453474\" pageid=\"4453474\" ns=\"828\" title=\"Module:languages\"><revisions><rev user=\"Benwing2\" timestamp=\"2019-04-13T02:06:03Z\"\
      \ contentformat=\"text/plain\" contentmodel=\"Scribunto\" comment=\"add getNonEtymological\" xml:space=\"preserve\">local export = {}\n\n--[=[\tThis function checks for things that could plausibly be a language code:\n\t\ttwo or three lowercase letters,\
      \ two or three groups of three lowercase\n\t\tletters with hyphens between them. If such a pattern is not found,\n\t\tit is likely the editor simply forgot to enter a language code. ]=]\n\nfunction export.err(langCode, param, text, template_tag)\n\tlocal\
      \ ordinals = {\n\t\t\"first\", \"second\", \"third\", \"fourth\", \"fifth\", \"sixth\",\n\t\t\"seventh\", \"eighth\", \"ninth\", \"tenth\", \"eleventh\", \"twelfth\",\n\t\t\"thirteenth\", \"fourteenth\", \"fifteenth\", \"sixteenth\", \"seventeenth\",\n\
      \t\t\"eighteenth\", \"nineteenth\", \"twentieth\"\n\t}\n\t\n\tif not template_tag then\n\t\ttemplate_tag = \"\"\n\telse\n\t\tif type(template_tag) ~= \"string\" then\n\t\t\ttemplate_tag = template_tag()\n\t\tend\n\t\ttemplate_tag = \" (Original template:\
      \ \" .. template_tag .. \")\"\n\tend\n\tlocal paramType = type(param)\n\tif paramType == \"number\" then\n\t\tordinal = ordinals[param]\n\t\tparam = ordinal .. ' parameter'\n\telseif paramType == \"string\" then\n\t\tparam = 'parameter \"' .. param ..\
      \ '\"'\n\telse\n\t\terror(\"The parameter name is \"\n\t\t\t\t.. (paramType == \"table\" and \"a table\" or tostring(param))\n\t\t\t\t.. \", but it should be a number or a string.\" .. template_tag, 2)\n\tend\n\t\n\t-- Can use string.find because language\
      \ codes only contain ASCII.\n\tif not langCode or langCode == \"\" then\n\t\terror(\"The \" .. param .. \" (\" .. (text or \"language code\") .. \") is missing.\" .. template_tag, 2)\n\telseif langCode:find(\"^%l%l%l?$\")\n\t\t\tor langCode:find(\"^%l%l%l%-%l%l%l$\"\
      )\n\t\t\tor langCode:find(\"^%l%l%l%-%l%l%l%-%l%l%l$\") then\n\t\terror(\"The language code \\\"\" .. langCode .. \"\\\" is not valid.\" .. template_tag, 2)\n\telse\n\t\terror(\"Please enter a \" .. (text or \"language code\") .. \" in the \" .. param\
      \ .. \".\" .. template_tag, 2)\n\tend\nend\n\nlocal function do_entry_name_or_sort_key_replacements(text, replacements)\n\tif replacements.from then\n\t\tfor i, from in ipairs(replacements.from) do\n\t\t\tlocal to = replacements.to[i] or \"\"\n\t\t\ttext\
      \ = mw.ustring.gsub(text, from, to)\n\t\tend\n\tend\n\t\n\tif replacements.remove_diacritics then\n\t\ttext = mw.ustring.toNFD(text)\n\t\ttext = mw.ustring.gsub(text,\n\t\t\t'[' .. replacements.remove_diacritics .. ']',\n\t\t\t'')\n\t\ttext = mw.ustring.toNFC(text)\n\
      \tend\n\t\n\treturn text\nend\n\nlocal Language = {}\n\nfunction Language:getCode()\n\treturn self._code\nend\n\n\nfunction Language:getCanonicalName()\n\treturn self._rawData[1] or self._rawData.canonicalName\nend\n\n\nfunction Language:getOtherNames()\n\
      \treturn self._rawData.otherNames or {}\nend\n\n\nfunction Language:getType()\n\treturn self._rawData.type or \"regular\"\nend\n\n\nfunction Language:getWikimediaLanguages()\n\tif not self._wikimediaLanguageObjects then\n\t\tlocal m_wikimedia_languages\
      \ = require(\"Module:wikimedia languages\")\n\t\tself._wikimediaLanguageObjects = {}\n\t\tlocal wikimedia_codes = self._rawData.wikimedia_codes or { self._code }\n\t\t\n\t\tfor _, wlangcode in ipairs(wikimedia_codes) do\n\t\t\ttable.insert(self._wikimediaLanguageObjects,\
      \ m_wikimedia_languages.getByCode(wlangcode))\n\t\tend\n\tend\n\t\n\treturn self._wikimediaLanguageObjects\nend\n\nfunction Language:getWikipediaArticle()\n\tif self._rawData.wikipedia_article then\n\t\treturn self._rawData.wikipedia_article \n\telseif\
      \ self._wikipedia_article then\n\t\treturn self._wikipedia_article\n\telseif self:getWikidataItem() and mw.wikibase then\n\t\tself._wikipedia_article = mw.wikibase.sitelink(self:getWikidataItem(), 'enwiki')\n\tend\n\tif not self._wikipedia_article then\n\
      \t\tself._wikipedia_article = mw.ustring.gsub(self:getCategoryName(), \"Creole language\", \"Creole\")\n\tend\n\treturn self._wikipedia_article\nend\n\nfunction Language:makeWikipediaLink()\n\treturn \"[[w:\" .. self:getWikipediaArticle() .. \"|\" .. self:getCanonicalName()\
      \ .. \"]]\"\nend\n\nfunction Language:getWikidataItem()\n\treturn self._rawData[2] or self._rawData.wikidata_item\nend\n\nfunction Language:getScripts()\n\tif not self._scriptObjects then\n\t\tlocal m_scripts = require(\"Module:scripts\")\n\t\tself._scriptObjects\
      \ = {}\n\t\t\n\t\tfor _, sc in ipairs(self._rawData.scripts or { \"None\" }) do\n\t\t\ttable.insert(self._scriptObjects, m_scripts.getByCode(sc))\n\t\tend\n\tend\n\t\n\treturn self._scriptObjects\nend\n\nfunction Language:getScriptCodes()\n\treturn self._rawData.scripts\
      \ or { \"None\" }\nend\n\nfunction Language:getFamily()\n\tif self._familyObject then\n\t\treturn self._familyObject\n\tend\n\t\t\n\tlocal family = self._rawData[3] or self._rawData.family \n\tif family then\n\t\tself._familyObject = require(\"Module:families\"\
      ).getByCode(family)\n\tend\n\t\n\treturn self._familyObject\nend\n\n\nfunction Language:getAncestors()\n\tif not self._ancestorObjects then\n\t\tself._ancestorObjects = {}\n\t\t\n\t\tif self._rawData.ancestors then\n\t\t\tfor _, ancestor in ipairs(self._rawData.ancestors)\
      \ do\n\t\t\t\ttable.insert(self._ancestorObjects, export.getByCode(ancestor) or require(\"Module:etymology languages\").getByCode(ancestor))\n\t\t\tend\n\t\telse\n\t\t\tlocal fam = self:getFamily()\n\t\t\tlocal protoLang = fam and fam:getProtoLanguage()\
      \ or nil\n\t\t\t\n\t\t\t-- For the case where the current language is the proto-language\n\t\t\t-- of its family, we need to step up a level higher right from the start.\n\t\t\tif protoLang and protoLang:getCode() == self:getCode() then\n\t\t\t\tfam =\
      \ fam:getFamily()\n\t\t\t\tprotoLang = fam and fam:getProtoLanguage() or nil\n\t\t\tend\n\t\t\t\n\t\t\twhile not protoLang and not (not fam or fam:getCode() == \"qfa-not\") do\n\t\t\t\tfam = fam:getFamily()\n\t\t\t\tprotoLang = fam and fam:getProtoLanguage()\
      \ or nil\n\t\t\tend\n\t\t\t\n\t\t\ttable.insert(self._ancestorObjects, protoLang)\n\t\tend\n\tend\n\t\n\treturn self._ancestorObjects\nend\n\nlocal function iterateOverAncestorTree(node, func)\n\tfor _, ancestor in ipairs(node:getAncestors()) do\n\t\t\
      if ancestor then\n\t\t\tlocal ret = func(ancestor) or iterateOverAncestorTree(ancestor, func)\n\t\t\tif ret then\n\t\t\t\treturn ret\n\t\t\tend\n\t\tend\n\tend\nend\n\nfunction Language:getAncestorChain()\n\tif not self._ancestorChain then\n\t\tself._ancestorChain\
      \ = {}\n\t\tlocal step = #self:getAncestors() == 1 and self:getAncestors()[1] or nil\n\t\t\n\t\twhile step do\n\t\t\ttable.insert(self._ancestorChain, 1, step)\n\t\t\tstep = #step:getAncestors() == 1 and step:getAncestors()[1] or nil\n\t\tend\n\tend\n\t\
      \n\treturn self._ancestorChain\nend\n\n\nfunction Language:hasAncestor(otherlang)\n\tlocal function compare(ancestor)\n\t\treturn ancestor:getCode() == otherlang:getCode()\n\tend\n\t\n\treturn iterateOverAncestorTree(self, compare) or false\nend\n\n\n\
      function Language:getCategoryName()\n\tlocal name = self:getCanonicalName()\n\t\n\t-- If the name already has \"language\" in it, don't add it.\n\tif name:find(\"[Ll]anguage$\") then\n\t\treturn name\n\telse\n\t\treturn name .. \" language\"\n\tend\nend\n\
      \n\nfunction Language:getStandardCharacters()\n\treturn self._rawData.standardChars\nend\n\n\nfunction Language:makeEntryName(text)\n\ttext = mw.ustring.gsub(text, \"^[¿¡]\", \"\")\n\ttext = mw.ustring.gsub(text, \"(.)[؟?!;՛՜ ՞ ՟？！︖︕।॥။၊་།]$\", \"%1\"\
      )\n\t\n\tif self:getCode() == \"ar\" then\n\t\tlocal U = mw.ustring.char\n\t\tlocal taTwiil = U(0x640)\n\t\tlocal waSla = U(0x671)\n\t\t-- diacritics ordinarily removed by entry_name replacements\n\t\tlocal Arabic_diacritics = U(0x64B, 0x64C, 0x64D, 0x64E,\
      \ 0x64F, 0x650, 0x651, 0x652, 0x670)\n\t\t\n\t\tif text == waSla or mw.ustring.find(text, \"^\" .. taTwiil .. \"?[\" .. Arabic_diacritics .. \"]\" .. \"$\") then\n\t\t\treturn text\n\t\tend\n\tend\n\t\n\tif type(self._rawData.entry_name) == \"table\" then\n\
      \t\ttext = do_entry_name_or_sort_key_replacements(text, self._rawData.entry_name)\n\tend\n\t\n\treturn text\nend\n\n\n-- Add to data tables?\nlocal has_dotted_undotted_i = {\n\t[\"az\"] = true,\n\t[\"crh\"] = true,\n\t[\"gag\"] = true,\n\t[\"kaa\"] = true,\n\
      \t[\"tt\"] = true,\n\t[\"tr\"] = true,\n\t[\"zza\"] = true,\n}\n\nfunction Language:makeSortKey(name, sc)\n\tif has_dotted_undotted_i[self:getCode()] then\n\t\tname = name:gsub(\"I\", \"ı\")\n\tend\n\t\n\tname = mw.ustring.lower(name)\n\t\n\t-- Remove\
      \ initial hyphens and *\n\tlocal hyphens_regex = \"^[-־ـ*]+(.)\"\n\tname = mw.ustring.gsub(name, hyphens_regex, \"%1\")\n\t\n\t-- If there are language-specific rules to generate the key, use those\n\tif type(self._rawData.sort_key) == \"table\" then\n\
      \t\tname = do_entry_name_or_sort_key_replacements(name, self._rawData.sort_key)\n\telseif type(self._rawData.sort_key) == \"string\" then\n\t\tname = require(\"Module:\" .. self._rawData.sort_key).makeSortKey(name, self:getCode(), sc and sc:getCode())\n\
      \tend\n\t\n\t-- Remove parentheses, as long as they are either preceded or followed by something\n\tname = mw.ustring.gsub(name, \"(.)[()]+\", \"%1\")\n\tname = mw.ustring.gsub(name, \"[()]+(.)\", \"%1\")\n\t\n\tif has_dotted_undotted_i[self:getCode()]\
      \ then\n\t\tname = name:gsub(\"i\", \"İ\")\n\tend\n\t\n\treturn mw.ustring.upper(name)\nend\n\nfunction Language:overrideManualTranslit()\n\tif self._rawData.override_translit then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\n\n\nfunction Language:transliterate(text,\
      \ sc, module_override)\n\tif not ((module_override or self._rawData.translit_module) and text) then\n\t\treturn nil\n\tend\n\t\n\tif module_override then\n\t\trequire(\"Module:debug\").track(\"module_override\")\n\tend\n\t\n\treturn require(\"Module:\"\
      \ .. (module_override or self._rawData.translit_module)).tr(text, self:getCode(), sc and sc:getCode() or nil)\nend\n\nfunction Language:hasTranslit()\n\treturn self._rawData.translit_module and true or false\nend\n\n\nfunction Language:link_tr()\n\treturn\
      \ self._rawData.link_tr and true or false\nend\n\n\nfunction Language:toJSON()\n\tlocal entryNamePatterns = nil\n\tlocal entryNameRemoveDiacritics = nil\n\t\n\tif self._rawData.entry_name then\n\t\tentryNameRemoveDiacritics = self._rawData.entry_name.remove_diacritics\n\
      \t\tif self._rawData.entry_name.from then\n\t\t\tentryNamePatterns = {}\n\t\t\tfor i, from in ipairs(self._rawData.entry_name.from) do\n\t\t\t\tlocal to = self._rawData.entry_name.to[i] or \"\"\n\t\t\t\ttable.insert(entryNamePatterns, { from = from, to\
      \ = to })\n\t\t\tend\n\t\tend\n\tend\n\t\n\tlocal ret = {\n\t\tancestors = self._rawData.ancestors,\n\t\tcanonicalName = self:getCanonicalName(),\n\t\tcategoryName = self:getCategoryName(),\n\t\tcode = self._code,\n\t\tentryNamePatterns = entryNamePatterns,\n\
      \t\tfamily = self._rawData[3] or self._rawData.family,\n\t\totherNames = self:getOtherNames(),\n\t\tscripts = self._rawData.scripts,\n\t\ttype = self:getType(),\n\t\twikimediaLanguages = self._rawData.wikimedia_codes,\n\t\twikidataItem = self:getWikidataItem(),\n\
      \t}\n\t\n\treturn require(\"Module:JSON\").toJSON(ret)\nend\n\n\n-- Do NOT use this method!\n-- All uses should be pre-approved on the talk page!\nfunction Language:getRawData()\n\treturn self._rawData\nend\n\nLanguage.__index = Language\n\n\nfunction\
      \ export.getDataModuleName(code)\n\tif code:find(\"^%l%l$\") then\n\t\treturn \"languages/data2\"\n\telseif code:find(\"^%l%l%l$\") then\n\t\tlocal prefix = code:sub(1, 1)\n\t\treturn \"languages/data3/\" .. prefix\n\telseif code:find(\"^[%l-]+$\") then\n\
      \t\treturn \"languages/datax\"\n\telse\n\t\treturn nil\n\tend\nend\n\n\nlocal function getRawLanguageData(code)\n\tlocal modulename = export.getDataModuleName(code)\n\treturn modulename and mw.loadData(\"Module:\" .. modulename)[code] or nil\nend\n\n\n\
      function export.makeObject(code, data)\n\tif data and data.deprecated then\n\t\trequire(\"Module:debug\").track {\n\t\t\t\"languages/deprecated\",\n\t\t\t\"languages/deprecated/\" .. code\n\t\t}\n\tend\n\t\n\treturn data and setmetatable({ _rawData = data,\
      \ _code = code }, Language) or nil\nend\n\n\nfunction export.getByCode(code)\n\tif type(code) ~= \"string\" then\n\t\terror(\"The function getByCode expects a string as its first argument, but received \" .. (code == nil and \"nil\" or \"a \" .. type(code))\
      \ .. \".\")\n\tend\n\t\n\treturn export.makeObject(code, getRawLanguageData(code))\nend\n\n\nfunction export.getByName(name)\n\tlocal byName = mw.loadData(\"Module:languages/by name\")\n\tlocal code = byName.all and byName.all[name] or byName[name]\n\t\
      \n\tif not code then\n\t\treturn nil\n\tend\n\t\n\treturn export.makeObject(code, getRawLanguageData(code))\nend\n\n\nfunction export.getByCanonicalName(name)\n\tlocal byName = mw.loadData(\"Module:languages/canonical names\")\n\tlocal code = byName and\
      \ byName[name]\n\t\n\tif not code then\n\t\treturn nil\n\tend\n\t\n\treturn export.makeObject(code, getRawLanguageData(code))\nend\n\n\nfunction export.iterateAll()\n\tmw.incrementExpensiveFunctionCount()\n\tlocal m_data = mw.loadData(\"Module:languages/alldata\"\
      )\n\tlocal func, t, var = pairs(m_data)\n\t\n\treturn function()\n\t\tlocal code, data = func(t, var)\n\t\treturn export.makeObject(code, data)\n\tend\nend\n\n--[[\tIf language is an etymology language, iterates through parent languages\n\t\tuntil it finds\
      \ a non-etymology language. ]]\nfunction export.getNonEtymological(lang)\n\twhile lang:getType() == \"etymology language\" do\n\t\tlocal parentCode = lang:getParentCode()\n\t\tlocal parent = export.getByCode(parentCode)\n\t\t\tor require(\"Module:etymology\
      \ languages\").getByCode(parentCode)\n\t\t\tor require(\"Module:families\").getByCode(parentCode)\n\t\t\n\t\tlang = parent\n--\t\tmw.log(terminfo.lang:getCode() .. \" \" .. terminfo.lang:getType())\n\tend\n\t\n\treturn lang\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T16:56:17.158Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Alanguages%2Fdata2&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=46223 t=1556384177007470
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 16:56:17 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1344.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1089 pass, cp3042 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 770039132, 515730435, 797802315
    body: !!binary |-
      PD94bWwgdmVyc2lvbj0iMS4wIj8+PGFwaSBiYXRjaGNvbXBsZXRlPSIiPjx3YXJuaW5ncz48bWFpbiB4bWw6c3BhY2U9InByZXNlcnZlIj5TdWJzY3JpYmUgdG8gdGhlIG1lZGlhd2lraS1hcGktYW5ub3VuY2UgbWFpbGluZyBsaXN0IGF0ICZsdDtodHRwczovL2xpc3RzLndpa2ltZWRpYS5vcmcvbWFpbG1hbi9saXN0aW5mby9tZWRpYXdpa2ktYXBpLWFubm91bmNlJmd0OyBmb3Igbm90aWNlIG9mIEFQSSBkZXByZWNhdGlvbnMgYW5kIGJyZWFraW5nIGNoYW5nZXMuIFVzZSBbW1NwZWNpYWw6QXBpRmVhdHVyZVVzYWdlXV0gdG8gc2VlIHVzYWdlIG9mIGRlcHJlY2F0ZWQgZmVhdHVyZXMgYnkgeW91ciBhcHBsaWNhdGlvbi48L21haW4+PHJldmlzaW9ucyB4bWw6c3BhY2U9InByZXNlcnZlIj5CZWNhdXNlICJydnNsb3RzIiB3YXMgbm90IHNwZWNpZmllZCwgYSBsZWdhY3kgZm9ybWF0IGhhcyBiZWVuIHVzZWQgZm9yIHRoZSBvdXRwdXQuIFRoaXMgZm9ybWF0IGlzIGRlcHJlY2F0ZWQsIGFuZCBpbiB0aGUgZnV0dXJlIHRoZSBuZXcgZm9ybWF0IHdpbGwgYWx3YXlzIGJlIHVzZWQuPC9yZXZpc2lvbnM+PC93YXJuaW5ncz48cXVlcnk+PHBhZ2VzPjxwYWdlIF9pZHg9IjQyMDYxODQiIHBhZ2VpZD0iNDIwNjE4NCIgbnM9IjgyOCIgdGl0bGU9Ik1vZHVsZTpsYW5ndWFnZXMvZGF0YTIiPjxyZXZpc2lvbnM+PHJldiB1c2VyPSJNYWhhZ2FqYSIgdGltZXN0YW1wPSIyMDE5LTA0LTI3VDExOjQ3OjAyWiIgY29udGVudGZvcm1hdD0idGV4dC9wbGFpbiIgY29udGVudG1vZGVsPSJTY3JpYnVudG8iIGNvbW1lbnQ9IiIgeG1sOnNwYWNlPSJwcmVzZXJ2ZSI+bG9jYWwgdSA9IG13LnVzdHJpbmcuY2hhcgoKLS0gVVRGLTggZW5jb2RlZCBzdHJpbmdzIGZvciBzb21lIGNvbW1vbmx5LXVzZWQgZGlhY3JpdGljcwpsb2NhbCBHUkFWRSAgICAgPSB1KDB4MDMwMCkKbG9jYWwgQUNVVEUgICAgID0gdSgweDAzMDEpCmxvY2FsIENJUkMgICAgICA9IHUoMHgwMzAyKQpsb2NhbCBUSUxERSAgICAgPSB1KDB4MDMwMykKbG9jYWwgTUFDUk9OICAgID0gdSgweDAzMDQpCmxvY2FsIEJSRVZFICAgICA9IHUoMHgwMzA2KQpsb2NhbCBET1RBQk9WRSAgPSB1KDB4MDMwNykKbG9jYWwgRElBRVIgICAgID0gdSgweDAzMDgpCmxvY2FsIENBUk9OICAgICA9IHUoMHgwMzBDKQpsb2NhbCBER1JBVkUgICAgPSB1KDB4MDMwRikKbG9jYWwgSU5WQlJFVkUgID0gdSgweDAzMTEpCmxvY2FsIERPVEJFTE9XICA9IHUoMHgwMzIzKQpsb2NhbCBSSU5HQkVMT1cgPSB1KDB4MDMyNSkKbG9jYWwgQ0VESUxMQSAgID0gdSgweDAzMjcpCmxvY2FsIE9HT05FSyAgICA9IHUoMHgwMzI4KQoKLS0gUHVuY3VhdGlvbiB0byBiZSB1c2VkIGZvciBzdGFuZGFyZENoYXJzIGZpZWxkCmxvY2FsIFBVTkNUVUFUSU9OID0gJyAhIyQlJmFtcDsqKywtLi86OyZsdDs9Jmd0Oz9AXl9gfH5cJygpJwoKbG9jYWwgQ3lybCA9IHsiQ3lybCJ9CmxvY2FsIExhdG4gPSB7IkxhdG4ifQpsb2NhbCBMYXRuQXJhYiA9IHsiTGF0biIsICJBcmFiIn0KCmxvY2FsIG0gPSB7fQoKbVsiYWEiXSA9IHsKCSJBZmFyIiwKCSJRMjc4MTEiLAoJImN1cyIsCglvdGhlck5hbWVzID0geyJRYWZhciJ9LAoJc2NyaXB0cyA9IExhdG4sCn0KCm1bImFiIl0gPSB7CgkiQWJraGF6IiwKCSJRNTExMSIsCgkiY2F1LWFieiIsCglvdGhlck5hbWVzID0geyJBYmtoYXppYW4iLCAiQWJ4YXpvIn0sCglzY3JpcHRzID0geyJDeXJsIiwgIkdlb3IiLCAiTGF0biJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gImFiLXRyYW5zbGl0IiwKCW92ZXJyaWRlX3RyYW5zbGl0ID0gdHJ1ZSwKCWVudHJ5X25hbWUgPSB7CgkJZnJvbSA9IHtHUkFWRSwgQUNVVEV9LAoJCXRvICAgPSB7fX0gLAp9CgptWyJhZSJdID0gewoJIkF2ZXN0YW4iLAoJIlEyOTU3MiIsCgkiaXJhLWNlbiIsCglvdGhlck5hbWVzID0geyJaZW5kIiwgIk9sZCBCYWN0cmlhbiJ9LAoJc2NyaXB0cyA9IHsiQXZzdCIsICJHdWpyIn0sCgl0cmFuc2xpdF9tb2R1bGUgPSAiQXZzdC10cmFuc2xpdCIsCgl3aWtpcGVkaWFfYXJ0aWNsZSA9ICJBdmVzdGFuIiwKfQoKbVsiYWYiXSA9IHsKCSJBZnJpa2FhbnMiLAoJIlExNDE5NiIsCgkiZ213IiwKCXNjcmlwdHMgPSBMYXRuQXJhYiwKCWFuY2VzdG9ycyA9IHsibmwifSwKCXNvcnRfa2V5ID0gewoJCWZyb20gPSB7IlvDpMOhw6LDoF0iLCAiW8Orw6nDqsOoXSIsICJbw6/DrcOuw6xdIiwgIlvDtsOzw7TDsl0iLCAiW8O8w7rDu8O5XSIsICJbw7/DvcW34buzXSIsICJeLSIsICInIn0sCgkJdG8gICA9IHsiYSIJICwgImUiCSwgImkiCSwgIm8iCSwgInUiICAsICJ5IiB9fSAsCn0KCm1bImFrIl0gPSB7CgkiQWthbiIsCgkiUTI4MDI2IiwKCSJhbHYta3dhIiwKCW90aGVyTmFtZXMgPSB7IlR3aS1GYW50ZSIsICJUd2kiLCAiRmFudGUiLCAiRmFudGkiLCAiQXNhbnRlIiwgIkFrdWFwZW0ifSwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJhbSJdID0gewoJIkFtaGFyaWMiLAoJIlEyODI0NCIsCgkic2VtLWV0aCIsCglzY3JpcHRzID0geyJFdGhpIn0sCgl0cmFuc2xpdF9tb2R1bGUgPSAiRXRoaS10cmFuc2xpdCIsCn0KCm1bImFuIl0gPSB7CgkiQXJhZ29uZXNlIiwKCSJRODc2NSIsCgkicm9hLWliZSIsCglzY3JpcHRzID0gTGF0biwKCWFuY2VzdG9ycyA9IHsicm9hLW9hbiJ9LAp9CgptWyJhciJdID0gewoJIkFyYWJpYyIsCgkiUTEzOTU1IiwKCSJzZW0tYXJiIiwKCW90aGVyTmFtZXMgPSB7Ik1vZGVybiBTdGFuZGFyZCBBcmFiaWMiLCAiU3RhbmRhcmQgQXJhYmljIiwgIkxpdGVyYXJ5IEFyYWJpYyIsICJDbGFzc2ljYWwgQXJhYmljIn0sCglzY3JpcHRzID0geyJBcmFiIiwgIkJyYWkifSwKCS0tIGFsaWYgd2HhuaNsIHRvIGFsaWYsIHJlbW92ZSBkaWFjcml0aWNzCgllbnRyeV9uYW1lID0gewoJCWZyb20gPSB7dSgweDA2NzEpLCB1KDB4MDY0QiksIHUoMHgwNjRDKSwgdSgweDA2NEQpLCB1KDB4MDY0RSksIHUoMHgwNjRGKSwgdSgweDA2NTApLCB1KDB4MDY1MSksIHUoMHgwNjUyKSwgdSgweDA2NzApLCB1KDB4MDY0MCl9LAoJCXRvICAgPSB7dSgweDA2MjcpfX0sCgl0cmFuc2xpdF9tb2R1bGUgPSAiYXItdHJhbnNsaXQiLAoJc3RhbmRhcmRDaGFycyA9ICLYoS3YutmBLdmS2bDZsSIgLi4gUFVOQ1RVQVRJT04gLi4gItmgLdmp2IzYm9if2avZrNmAIiwKfQoKbVsiYXMiXSA9IHsKCSJBc3NhbWVzZSIsCglvdGhlck5hbWVzID0geyJBc2FtaXlhIn0sCgkiUTI5NDAxIiwKCSJpbmMiLAoJc2NyaXB0cyA9IHsiQmVuZyJ9LAoJYW5jZXN0b3JzID0geyJpbmMtbWFzIn0sCgl0cmFuc2xpdF9tb2R1bGUgPSAiYXMtdHJhbnNsaXQiLAp9CgptWyJhdiJdID0gewoJIkF2YXIiLAoJIlEyOTU2MSIsCgkiY2F1LW5lYyIsCglvdGhlck5hbWVzID0geyJBdmFyaWMifSwKCXNjcmlwdHMgPSBDeXJsLAoJYW5jZXN0b3JzID0geyJvYXYifSwKCXRyYW5zbGl0X21vZHVsZSA9ICJhdi10cmFuc2xpdCIsCglvdmVycmlkZV90cmFuc2xpdCA9IHRydWUsCgllbnRyeV9uYW1lID0gewoJCWZyb20gPSB7R1JBVkUsIEFDVVRFfSwKCQl0byAgID0ge319ICwKfQoKbVsiYXkiXSA9IHsKCSJBeW1hcmEiLAoJIlE0NjI3IiwKCSJzYWktYXltIiwKCW90aGVyTmFtZXMgPSB7IlNvdXRoZXJuIEF5bWFyYSIsICJDZW50cmFsIEF5bWFyYSJ9LAoJc2NyaXB0cyA9IExhdG4sCn0KCm1bImF6Il0gPSB7CgkiQXplcmJhaWphbmkiLAoJIlE5MjkyIiwKCSJ0cmstb2d6IiwKCW90aGVyTmFtZXMgPSB7IkF6ZXJpIiwgIkF6YXJpIiwgIkF6ZXJpIFR1cmtpYyIsICJBemVyYmFpamFuaSBUdXJraWMiLCAiTm9ydGggQXplcmJhaWphbmkiLCAiU291dGggQXplcmJhaWphbmkiLCAiQWZzaGFyIiwgIkFmc2hhcmkiLCAiQWZzaGFyIEF6ZXJiYWlqYW5pIiwgIkFmY2hhciIsICJRYXNocWEnaSIsICJRYXNocWFpIiwgIkthc2hrYXkiLCAiU29ucW9yIn0sCglzY3JpcHRzID0geyJMYXRuIiwgIkN5cmwiLCAiZmEtQXJhYiJ9LAoJYW5jZXN0b3JzID0geyJ0cmstb2F0In0sCn0KCm1bImJhIl0gPSB7CgkiQmFzaGtpciIsCgkiUTEzMzg5IiwKCSJ0cmsta2lwIiwKCXNjcmlwdHMgPSBDeXJsLAoJdHJhbnNsaXRfbW9kdWxlID0gImJhLXRyYW5zbGl0IiwKCW92ZXJyaWRlX3RyYW5zbGl0ID0gdHJ1ZSwKfQoKbVsiYmUiXSA9IHsKCSJCZWxhcnVzaWFuIiwKCSJROTA5MSIsCgkiemxlIiwKCW90aGVyTmFtZXMgPSB7IkJlbG9ydXNzaWFuIiwgIkJlbGFydXNhbiIsICJCaWVsb3J1c3NpYW4iLCAiQnllbG9ydXNzaWFuIiwgIkJlbGFydXNzaWFuIiwgIldoaXRlIFJ1c3NpYW4ifSwKCXNjcmlwdHMgPSBDeXJsLAoJYW5jZXN0b3JzID0geyJvcnYifSwKCXRyYW5zbGl0X21vZHVsZSA9ICJiZS10cmFuc2xpdCIsCglzb3J0X2tleSA9IHsKCQlmcm9tID0geyLQgSIsICLRkSJ9LAoJCXRvICAgPSB7ItCVIiAsICLQtSJ9fSwKCWVudHJ5X25hbWUgPSB7CgkJZnJvbSA9IHsi0IAiLCAi0ZAiLCBHUkFWRSwgQUNVVEV9LAoJCXRvICAgPSB7ItCVIiwgItC1In19LAp9CgptWyJiZyJdID0gewoJIkJ1bGdhcmlhbiIsCgkiUTc5MTgiLAoJInpscyIsCglzY3JpcHRzID0geyJDeXJsIn0sCglhbmNlc3RvcnMgPSB7ImN1In0sCgl0cmFuc2xpdF9tb2R1bGUgPSAiYmctdHJhbnNsaXQiLAoJZW50cnlfbmFtZSA9IHsKCQlmcm9tID0geyLQgCIsICLRkCIsICLQjSIsICLRnSIsIEdSQVZFLCBBQ1VURX0sCgkJdG8gICA9IHsi0JUiLCAi0LUiLCAi0JgiLCAi0LgifX0sCn0KCm1bImJoIl0gPSB7CgkiQmloYXJpIiwKCSJRMTM1MzA1IiwKCSJpbmMiLAoJc2NyaXB0cyA9IHsiRGV2YSJ9LAoJYW5jZXN0b3JzID0geyJpbmMtbWdkIn0sCn0KCm1bImJpIl0gPSB7CgkiQmlzbGFtYSIsCgkiUTM1NDUyIiwKCSJjcnAiLAoJc2NyaXB0cyA9IExhdG4sCglhbmNlc3RvcnMgPSB7ImVuIn0sCn0KCm1bImJtIl0gPSB7CgkiQmFtYmFyYSIsCgkiUTMzMjQzIiwKCSJkbW4tbWFuIiwKCW90aGVyTmFtZXMgPSB7IkJhbWFuYW5rYW4ifSwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJibiJdID0gewoJIkJlbmdhbGkiLAoJIlE5NjEwIiwKCSJpbmMiLAoJb3RoZXJOYW1lcyA9IHsiQmFuZ2xhIn0sCglzY3JpcHRzID0geyJCZW5nIiwgIk5ld2EifSwKCWFuY2VzdG9ycyA9IHsiaW5jLW1ibiJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gImJuLXRyYW5zbGl0IiwKfQoKbVsiYm8iXSA9IHsKCSJUaWJldGFuIiwKCSJRMzQyNzEiLAoJInRicSIsCglvdGhlck5hbWVzID0geyLDnCIsICJEYnVzIiwgIkxoYXNhIiwgIkxoYXNhIFRpYmV0YW4iLCAiQW1kbyBUaWJldGFuIiwgIkFtZG8iLCAiUGFuYW5nIiwgIktoYW1zIiwgIktoYW1zIFRpYmV0YW4iLCAiS2hhbWJhIiwgIlRzZWt1IiwgIkRvbHBvIiwgIkh1bWxhIiwgIkxpbWkiLCAiTGhvbWkiLCAiU2hpbmcgU2FhcGEiLCAiTXVnb20iLCAiTXVndSIsICJOdWJyaSIsICJXYWx1bmdnZSIsICJHb2xhIiwgIlRodWRhbSIsICJMb3dhIiwgIkxva2UiLCAiTXVzdGFuZyIsICJUaWNodXJvbmcifSwgLS0gYW5kICJHeWFsc3VtZG8iLCAiTG93ZXIgTWFuYW5nIj8gIkt5aXJvbmciPwoJc2NyaXB0cyA9IHsiVGlidCJ9LCAtLSBzb21ldGltZXMgRGV2YT8KCWFuY2VzdG9ycyA9IHsieGN0In0sCgl0cmFuc2xpdF9tb2R1bGUgPSAiYm8tdHJhbnNsaXQiLAoJb3ZlcnJpZGVfdHJhbnNsaXQgPSB0cnVlLAp9CgptWyJiciJdID0gewoJIkJyZXRvbiIsCgkiUTEyMTA3IiwKCSJjZWwtYnJ5IiwKCXNjcmlwdHMgPSBMYXRuLAoJYW5jZXN0b3JzID0geyJ4Ym0ifSwKfQoKbVsiY2EiXSA9IHsKCSJDYXRhbGFuIiwKCSJRNzAyNiIsCgkicm9hIiwKCW90aGVyTmFtZXMgPSB7IlZhbGVuY2lhbiJ9LAoJc2NyaXB0cyA9IExhdG4sCglhbmNlc3RvcnMgPSB7InJvYS1vY2EifSwKCXNvcnRfa2V5ID0gewoJCWZyb20gPSB7IsOgIiwgIlvDqMOpXSIsICJbw63Dr10iLCAiW8Oyw7NdIiwgIlvDusO8XSIsICLDpyIsICJswrdsIn0sCgkJdG8gICA9IHsiYSIsICJlIiAgICwgImkiICAgLCAibyIgICAsICJ1IiAgICwgImMiLCAibGwiIH19ICwKfQoKbVsiY2UiXSA9IHsKCSJDaGVjaGVuIiwKCSJRMzMzNTAiLAoJImNhdS1ua2giLAoJc2NyaXB0cyA9IEN5cmwsCgl0cmFuc2xpdF9tb2R1bGUgPSAiY2UtdHJhbnNsaXQiLAoJb3ZlcnJpZGVfdHJhbnNsaXQgPSB0cnVlLAoJZW50cnlfbmFtZSA9IHsKCQlmcm9tID0ge01BQ1JPTn0sCgkJdG8gICA9IHt9fSwKfQoKbVsiY2giXSA9IHsKCSJDaGFtb3JybyIsCgkiUTMzMjYyIiwKCSJwb3otc3VzIiwKCW90aGVyTmFtZXMgPSB7IkNoYW1vcnUifSwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJjbyJdID0gewoJIkNvcnNpY2FuIiwKCSJRMzMxMTEiLAoJInJvYS1pdGQiLAoJb3RoZXJOYW1lcyA9IHsiQ29yc3UifSwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJjciJdID0gewoJIkNyZWUiLAoJIlEzMzM5MCIsCgkiYWxnIiwKCXNjcmlwdHMgPSB7IkNhbnMiLCAiTGF0biJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gImNyLXRyYW5zbGl0IiwKfQoKbVsiY3MiXSA9IHsKCSJDemVjaCIsCgkiUTkwNTYiLAoJInpsdyIsCglzY3JpcHRzID0gTGF0biwKCWFuY2VzdG9ycyA9IHsiemx3LW9jcyJ9LAoJc29ydF9rZXkgPSB7CgkJZnJvbSA9IHsiw6EiLCAiw6kiLCAiw60iLCAiw7MiLCAiW8O6xa9dIiwgIsO9In0sCgkJdG8gICA9IHsiYSIsICJlIiwgImkiLCAibyIsICJ1IiAgICwgInkifX0gLAp9CgptWyJjdSJdID0gewoJIk9sZCBDaHVyY2ggU2xhdm9uaWMiLAoJIlEzNTQ5OSIsCgkiemxzIiwKCW90aGVyTmFtZXMgPSB7Ik9sZCBDaHVyY2ggU2xhdmljIn0sCglzY3JpcHRzID0geyJDeXJzIiwgIkdsYWcifSwKCXRyYW5zbGl0X21vZHVsZSA9ICJDeXJzLUdsYWctdHJhbnNsaXQiLAoJZW50cnlfbmFtZSA9IHsKCQlmcm9tID0ge3UoMHgwNDg0KX0sIC0tIGthbW9yYQoJCXRvICAgPSB7fX0sCglzb3J0X2tleSA9IHsKCQlmcm9tID0geyLQvtGDIiwgItGUIn0sCgkJdG8gICA9IHsi0YMiICwgItC1In19ICwKfQoKbVsiY3YiXSA9IHsKCSJDaHV2YXNoIiwKCSJRMzMzNDgiLAoJInRyay1vZ3IiLAoJc2NyaXB0cyA9IEN5cmwsCgl0cmFuc2xpdF9tb2R1bGUgPSAiY3YtdHJhbnNsaXQiLAoJb3ZlcnJpZGVfdHJhbnNsaXQgPSB0cnVlLAp9CgptWyJjeSJdID0gewoJIldlbHNoIiwKCSJROTMwOSIsCgkiY2VsLWJyeSIsCglzY3JpcHRzID0gTGF0biwKCWFuY2VzdG9ycyA9IHsid2xtIn0sCglzb3J0X2tleSA9IHsKCQlmcm9tID0geyJbw6LDocOgw6RdIiwgImNoIiwgImRkIiwgIlvDqsOpw6jDq10iLCAiZmYiLCAibmdoIiwgIlvDrsOtw6zDr10iLCAibGwiLCAiW8O0w7PDssO2XSIsICJwaCIsICJyaCIsICJ0aCIsICJbw7vDusO5w7xdIiwgIlvFteG6g+G6geG6hV0iLCAiW8W3w73hu7PDv10iLCAiJyJ9LAoJCXRvICAgPSB7ImEiCSAgICAsICJjfiIsICJkfiIsICJlIgkgICwgImZ+IiwgImd+aCIsICJpIgkgICwgImx+IiwgIm8iCSAgLCAicH4iLCAicn4iLCAidH4iLCAidSIJICAsICJ3IiAgICAgLCAieSIJICAgICAgIH19ICwKCXN0YW5kYXJkQ2hhcnMgPSAiQS1JTC1QUi1VV1lhLWlsLXByLXV3eTAtOcOCw6LDisOqw47DrsOUw7TDm8O7xbTFtcW2xbciIC4uIFBVTkNUVUFUSU9OLAp9CgptWyJkYSJdID0gewoJIkRhbmlzaCIsCgkiUTkwMzUiLAoJImdtcSIsCglzY3JpcHRzID0gTGF0biwKCWFuY2VzdG9ycyA9IHsiZ21xLW9kYSJ9LAp9CgptWyJkZSJdID0gewoJIkdlcm1hbiIsCgkiUTE4OCIsCgkiZ213IiwKCW90aGVyTmFtZXMgPSB7IkhpZ2ggR2VybWFuIiwgIk5ldyBIaWdoIEdlcm1hbiIsICJEZXV0c2NoIn0sCglzY3JpcHRzID0geyJMYXRuIiwgIkxhdGYifSwKCWFuY2VzdG9ycyA9IHsiZ21oIn0sCglzb3J0X2tleSA9IHsKCQlmcm9tID0geyJbw6TDoMOhw6LDpV0iLCAiW8Orw6jDqcOqXSIsICJbw6/DrMOtw65dIiwgIlvDtsOyw7PDtF0iLCAiW8O8w7nDusO7XSIsICLDnyIgfSwKCQl0byAgID0geyJhIgkgICwgImUiCSAsICJpIgkgLCAibyIJICwgInUiCSAsICJzcyJ9fSAsCglzdGFuZGFyZENoYXJzID0gIkEtWmEtejAtOcOEw6TDlsO2w5zDvMOfIiAuLiBQVU5DVFVBVElPTiwKfQoKbVsiZHYiXSA9IHsKCSJEaGl2ZWhpIiwKCSJRMzI2NTYiLAoJImluYyIsCglvdGhlck5hbWVzID0geyJEaXZlaGkiLCAiTWFoYWwiLCAiTWFobCIsICJNYWxkaXZpYW4ifSwKCXNjcmlwdHMgPSB7IlRoYWEifSwKCWFuY2VzdG9ycyA9IHsicG1oIn0sCS0tIG9yIEhlbHU/Cgl0cmFuc2xpdF9tb2R1bGUgPSAiZHYtdHJhbnNsaXQiLAoJb3ZlcnJpZGVfdHJhbnNsaXQgPSB0cnVlLAp9CgptWyJkeiJdID0gewoJIkR6b25na2hhIiwKCSJRMzMwODEiLAoJInRicSIsCglzY3JpcHRzID0geyJUaWJ0In0sCglhbmNlc3RvcnMgPSB7InhjdCJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gImJvLXRyYW5zbGl0IiwKCW92ZXJyaWRlX3RyYW5zbGl0ID0gdHJ1ZSwKfQoKbVsiZWUiXSA9IHsKCSJFd2UiLAoJIlEzMDAwNSIsCgkiYWx2LXZvbiIsCglzY3JpcHRzID0gTGF0biwKfQoKbVsiZWwiXSA9IHsKCSJHcmVlayIsCgkiUTkxMjkiLAoJImdyayIsCglvdGhlck5hbWVzID0geyJNb2Rlcm4gR3JlZWsiLCAiTmVvLUhlbGxlbmljIn0sCglzY3JpcHRzID0geyJHcmVrIiwgIkJyYWkifSwKCWFuY2VzdG9ycyA9IHsiZ3JjIn0sCgl0cmFuc2xpdF9tb2R1bGUgPSAiZWwtdHJhbnNsaXQiLAoJb3ZlcnJpZGVfdHJhbnNsaXQgPSB0cnVlLAoJc29ydF9rZXkgPSB7ICAtLSBLZWVwIHRoaXMgc3luY2hyb25pemVkIHdpdGggZ3JjLCBjcGcsIHBudAoJCWZyb20gPSB7IlvhvrPOrOG+tOG9sOG+suG+tuG+t+G8gOG+gOG8hOG+hOG8guG+guG8huG+huG8geG+geG8heG+heG8g+G+g+G8h+G+h10iLCAiW86t4b2y4byQ4byU4byS4byR4byV4byTXSIsICJb4b+Dzq7hv4ThvbThv4Lhv4bhv4fhvKDhvpDhvKThvpThvKLhvpLhvKbhvpbhvKHhvpHhvKXhvpXhvKPhvpPhvKfhvpddIiwgIlvOr+G9tuG/luG8sOG8tOG8suG8tuG8seG8teG8s+G8t8+KzpDhv5Lhv5ddIiwgIlvPjOG9uOG9gOG9hOG9guG9geG9heG9g10iLCAiW8+N4b264b+m4b2Q4b2U4b2S4b2W4b2R4b2V4b2T4b2Xz4vOsOG/ouG/p10iLCAiW+G/s8+O4b+04b284b+y4b+24b+34b2g4b6g4b2k4b6k4b2i4b6i4b2m4b6m4b2h4b6h4b2l4b6l4b2j4b6j4b2n4b6nXSIsICLhv6UiLCAiz4IifSwKCQl0byAgID0geyLOsSIJCQkJCQksICLOtSIJCSAsICLOtyIJCQkJCQksICLOuSIJCQkJLCAizr8iCQkgLCAiz4UiCQkJCSwgIs+JIgkJCQkJCSwgIs+BIiwgIs+DIn19ICwKCXN0YW5kYXJkQ2hhcnMgPSAizbo7zoQtz47PnM+dIiAuLiBQVU5DVFVBVElPTiAuLiAi4byALeG/viIsCn0KCm1bImVuIl0gPSB7CgkiRW5nbGlzaCIsCgkiUTE4NjAiLAoJImdtdyIsCglvdGhlck5hbWVzID0geyJNb2Rlcm4gRW5nbGlzaCIsICJOZXcgRW5nbGlzaCIsICJIYXdhaWlhbiBDcmVvbGUgRW5nbGlzaCIsICJIYXdhaSdpYW4gQ3Jlb2xlIEVuZ2xpc2giLCAiSGF3YWlpYW4gQ3Jlb2xlIiwgIkhhd2FpJ2lhbiBDcmVvbGUiLCAiUG9sYXJpIiwgIllpbmdsaXNoIn0sIC0tIGFsbCBidXQgdGhlIGZpcnN0IHRocmVlIGFyZSBuYW1lcyBvZiBzdWJzdW1lZCBkaWFsZWN0cyB3aGljaCBvbmNlIGhhZCBjb2RlcwoJc2NyaXB0cyA9IHsiTGF0biIsICJCcmFpIiwgIlNoYXciLCAiRHNydCJ9LCAtLSBlbnRyaWVzIGluIFNoYXcgb3IgRHNydCBtaWdodCByZXF1aXJlIHByaW9yIGRpc2N1c3Npb24KCWFuY2VzdG9ycyA9IHsiZW5tIn0sCglzb3J0X2tleSA9IHsKCQlmcm9tID0geyJbw6TDoMOhw6LDpcSBXSIsICJbw6vDqMOpw6rEk10iLCAiW8Ovw6zDrcOuxKtdIiwgIlvDtsOyw7PDtMWNXSIsICJbw7zDucO6w7vFq10iLCAiw6YiICwgIsWTIiAsICJbw6fEjV0iLCAiw7EiLCAiJyJ9LAoJCXRvICAgPSB7ImEiICAgICAgICwgImUiICAgICAgLCAiaSIgICAgICAsICJvIiAgICAgICwgInUiICAgICAgLCAiYWUiLCAib2UiLCAiYyIgICAsICJuIn19LAoJd2lraW1lZGlhX2NvZGVzID0geyJlbiIsICJzaW1wbGUifSwKCXN0YW5kYXJkQ2hhcnMgPSAiQS1aYS16MC05IiAuLiBQVU5DVFVBVElPTiAuLiB1KDB4MjgwMCkgLi4gIi0iIC4uIHUoMHgyOEZGKSwKfQoKbVsiZW8iXSA9IHsKCSJFc3BlcmFudG8iLAoJIlExNDMiLAoJImFydCIsCglzY3JpcHRzID0gTGF0biwKCXNvcnRfa2V5ID0gewoJCWZyb20gPSB7IlvDocOgXSIsICJbw6nDqF0iLCAiW8Otw6xdIiwgIlvDs8OyXSIsICJbw7rDuV0iLCAiW8SJXSIsICJbxJ1dIiwgIlvEpV0iLCAiW8S1XSIsICJbxZ1dIiwgIlvFrV0ifSwKCQl0byAgID0geyJhIgkgICAsICJlIiAgLCAiaSIgICwgIm8iICAsICJ1IiwgImPEiSIsICJnxIkiLCAiaMSJIiwgImrEiSIsICJzxIkiLCAidcSJIn19ICwKfQoKbVsiZXMiXSA9IHsKCSJTcGFuaXNoIiwKCSJRMTMyMSIsCgkicm9hLWliZSIsCglvdGhlck5hbWVzID0geyJDYXN0aWxpYW4iLCAiQW1hem9uaWFuIFNwYW5pc2giLCAiQW1hem9uaWMgU3BhbmlzaCIsICJMb3JldG8tVWNheWFsaSBTcGFuaXNoIn0sCglzY3JpcHRzID0geyJMYXRuIiwgIkJyYWkifSwKCWFuY2VzdG9ycyA9IHsib3NwIn0sCglzb3J0X2tleSA9IHsKCQlmcm9tID0geyLDoSIsICLDqSIsICLDrSIsICLDsyIsICJbw7rDvF0iLCAiw6ciLCAiw7EifSwKCQl0byAgID0geyJhIiwgImUiLCAiaSIsICJvIiwgInUiICAgLCAiYyIsICJuIn19LAoJc3RhbmRhcmRDaGFycyA9ICJBLVZYWVphLXZ4eXowLTnDgcOhw4nDqcONw63Dk8Ozw5rDusORw7HCv8KhIiAuLiBQVU5DVFVBVElPTiwKfQoKbVsiZXQiXSA9IHsKCSJFc3RvbmlhbiIsCgkiUTkwNzIiLAoJImZpdS1maW4iLAoJc2NyaXB0cyA9IExhdG4sCn0KCm1bImV1Il0gPSB7CgkiQmFzcXVlIiwKCSJRODc1MiIsCgkiZXVxIiwKCW90aGVyTmFtZXMgPSB7IkV1c2thcmEifSwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJmYSJdID0gewoJIlBlcnNpYW4iLAoJIlE5MTY4IiwKCSJpcmEtc3dpIiwKCW90aGVyTmFtZXMgPSB7IkZhcnNpIiwgIk5ldyBQZXJzaWFuIiwgIk1vZGVybiBQZXJzaWFuIiwgIldlc3Rlcm4gUGVyc2lhbiIsICJJcmFuaWFuIFBlcnNpYW4iLCAiRWFzdGVybiBQZXJzaWFuIiwgIkRhcmkiLCAiQWltYXEiLCAiQWltYWsiLCAiQXltYXEiLCAiRWltYWsifSwKCXNjcmlwdHMgPSB7ImZhLUFyYWIifSwKCWFuY2VzdG9ycyA9IHsicGFsIn0sIC0tICJpcmEtbWlkIgoJZW50cnlfbmFtZSA9IHsKCQlmcm9tID0ge3UoMHgwNjRFKSwgdSgweDA2NEYpLCB1KDB4MDY1MCksIHUoMHgwNjUxKSwgdSgweDA2NTIpfSwKCQl0byAgID0ge319ICwKfQoKbVsiZmYiXSA9IHsKCSJGdWxhIiwKCSJRMzM0NTQiLAoJImFsdi1zbmciLAoJb3RoZXJOYW1lcyA9IHsiQWRhbWF3YSBGdWxmdWxkZSIsICJCYWdpcm1pIEZ1bGZ1bGRlIiwgIkJvcmd1IEZ1bGZ1bGRlIiwgIkNlbnRyYWwtRWFzdGVybiBOaWdlciBGdWxmdWxkZSIsICJGdWxhbmkiLCAiRnVsZnVsZGUiLCAiTWFhc2luYSBGdWxmdWxkZSIsICJOaWdlcmlhbiBGdWxmdWxkZSIsICJQdWxhciIsICJQdWxhYXIiLCAiV2VzdGVybiBOaWdlciBGdWxmdWxkZSJ9LCAtLSBNYWFzaW5hLCBldGMgYXJlIGRpYWxlY3RzLCBzdWJzdW1lZCBpbnRvIHRoaXMgY29kZQoJc2NyaXB0cyA9IHsiTGF0biIsICJBZGxtIn0sCn0KCm1bImZpIl0gPSB7CgkiRmlubmlzaCIsCgkiUTE0MTIiLAoJImZpdS1maW4iLAoJb3RoZXJOYW1lcyA9IHsiU3VvbWkiLCAiQm90bmlhbiJ9LAoJc2NyaXB0cyA9IExhdG4sCgllbnRyeV9uYW1lID0gewoJCWZyb20gPSB7IsujIn0sICAtLSBVc2VkIHRvIGluZGljYXRlIGdlbWluYXRpb24gb2YgdGhlIG5leHQgY29uc29uYW50CgkJdG8gICA9IHt9fSwKCXNvcnRfa2V5ID0gewoJCWZyb20gPSB7IlvDocOgw6LDo10iLCAiW8Opw6jDquG6vV0iLCAiW8Otw6zDrsSpXSIsICJbw7PDssO0w7VdIiwgIlvDusO5w7vFqV0iLCAiW8O94buzxbfDvMWxXSIsICJbw7jDtcWRXSIsICLDpiIgLCAixZMiICwgIlvEjcOnXSIsICLFoSIsICLFviIsICLDnyIgLCAiWyc6XSJ9LAoJCXRvICAgPSB7ImEiCSAsICJlIgkgLCAiaSIJICwgIm8iCSAsICJ1IgkgLCAgInkiCSAsICLDtiIJLCAiYWUiLCAib2UiLCAiYyIgICAsICJzIiwgInoiLCAic3MifX0gLAp9CgptWyJmaiJdID0gewoJIkZpamlhbiIsCgkiUTMzMjk1IiwKCSJwb3otb2NjIiwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJmbyJdID0gewoJIkZhcm9lc2UiLAoJIlEyNTI1OCIsCgkiZ21xIiwKCXNjcmlwdHMgPSBMYXRuLAoJYW5jZXN0b3JzID0geyJub24ifSwKfQoKbVsiZnIiXSA9IHsKCSJGcmVuY2giLAoJIlExNTAiLAoJInJvYS1vaWwiLAoJb3RoZXJOYW1lcyA9IHsiTW9kZXJuIEZyZW5jaCJ9LAoJc2NyaXB0cyA9IHsiTGF0biIsICJCcmFpIn0sCglhbmNlc3RvcnMgPSB7ImZybSJ9LAoJc29ydF9rZXkgPSB7CgkJZnJvbSA9IHsiW8Ohw6DDosOkXSIsICJbw6nDqMOqw6tdIiwgIlvDrcOsw67Dr10iLCAiW8Ozw7LDtMO2XSIsICJbw7rDucO7w7xdIiwgIlvDveG7s8W3w79dIiwgIsOnIiwgIsOmIiAsICLFkyIgLCAiJyJ9LAoJCXRvICAgPSB7ImEiCSAsICJlIgkgLCAiaSIJICwgIm8iCSAsICJ1IgkgLCAieSIJICwgImMiLCAiYWUiLCAib2UifX0sCglzdGFuZGFyZENoYXJzID0gIkEtWmEtejAtOcOAw4LDh8OJw4jDisOLw47Dj8OUxZLDm8OZw5zDoMOiw6fDqcOow6rDq8Ouw6/DtMWTw7vDucO8wqvCuyIgLi4gUFVOQ1RVQVRJT04sCn0KCm1bImZ5Il0gPSB7CgkiV2VzdCBGcmlzaWFuIiwKCSJRMjcxNzUiLAoJImdtdy1mcmkiLAoJb3RoZXJOYW1lcyA9IHsiV2VzdGVybiBGcmlzaWFuIiwgIkZyaXNpYW4ifSwKCXNjcmlwdHMgPSBMYXRuLAoJYW5jZXN0b3JzID0geyJvZnMifSwKCXNvcnRfa2V5ID0gewoJCWZyb20gPSB7IlvDoMOhw6LDpF0iLCAiW8Oow6nDqsOrXSIsICJbw6zDrcOuw6954buzw73Ft8O/XSIsICJbw7LDs8O0w7ZdIiwgIlvDucO6w7vDvF0iLCAiw6YiLCAiWyAvLi1dIn0sCgkJdG8gICA9IHsiYSIJICwgImUiCSwgImkiCSwgIm8iCSwgInUiLCAiYWUifX0gLAoJc3RhbmRhcmRDaGFycyA9ICJBLVBSLVdZWmEtcHItd3l6MC05w4bDpsOiw6TDoMOpw6rDq8Oow6/DrMO0w7bDssO6w7vDvMO54buzIiAuLiBQVU5DVFVBVElPTiwKfQoKbVsiZ2EiXSA9IHsKCSJJcmlzaCIsCgkiUTkxNDIiLAoJImNlbC1nYWUiLAoJb3RoZXJOYW1lcyA9IHsiSXJpc2ggR2FlbGljIn0sCglzY3JpcHRzID0gTGF0biwKCWFuY2VzdG9ycyA9IHsibWdhIn0sCglzb3J0X2tleSA9IHsKCQlmcm9tID0geyLDoSIsICLDqSIsICLDrSIsICLDsyIsICLDuiIsICLDvSIsICLhuIMiICwgIsSLIiAsICLhuIsiICwgIuG4nyIgLCAixKEiICwgIuG5gSIgLCAi4bmXIiAsICLhuaEiICwgIuG5qyIgfSwKCQl0byAgID0geyJhIiwgImUiLCAiaSIsICJvIiwgInUiLCAieSIsICJiaCIsICJjaCIsICJkaCIsICJmaCIsICJnaCIsICJtaCIsICJwaCIsICJzaCIsICJ0aCJ9fSAsCglzdGFuZGFyZENoYXJzID0gIkEtSUwtUFItVWEtaWwtcHItdTAtOcOBw6HDicOpw43DrcOTw7PDmsO6IiAuLiBQVU5DVFVBVElPTiwKfQoKbVsiZ2QiXSA9IHsKCSJTY290dGlzaCBHYWVsaWMiLAoJIlE5MzE0IiwKCSJjZWwtZ2FlIiwKCW90aGVyTmFtZXMgPSB7IkfDoGlkaGxpZyIsICJIaWdobGFuZCBHYWVsaWMiLCAiU2NvdHMgR2FlbGljIiwgIlNjb3R0aXNoIn0sCglzY3JpcHRzID0gTGF0biwKCWFuY2VzdG9ycyA9IHsibWdhIn0sCglzb3J0X2tleSA9IHsKCQlmcm9tID0geyJbw6HDoF0iLCAiW8Opw6hdIiwgIlvDrcOsXSIsICJbw7PDsl0iLCAiW8O6w7ldIiwgIlvDveG7s10ifSwKCQl0byAgID0geyJhIiAgICwgImUiICAgLCAiaSIgICAsICJvIiAgICwgInUiICAgLCAieSIgICB9fSAsCglzdGFuZGFyZENoYXJzID0gIkEtSUwtUFItVWEtaWwtcHItdTAtOcOAw6DDiMOow4zDrMOSw7LDmcO5IiAuLiBQVU5DVFVBVElPTiwKfQoKbVsiZ2wiXSA9IHsKCSJHYWxpY2lhbiIsCgkiUTkzMDciLAoJInJvYS1pYmUiLAoJc2NyaXB0cyA9IExhdG4sCglhbmNlc3RvcnMgPSB7InJvYS1vcHQifSwKCXNvcnRfa2V5ID0gewoJCWZyb20gPSB7IsOhIiwgIsOpIiwgIsOtIiwgIsOzIiwgIsO6In0sCgkJdG8gICA9IHsiYSIsICJlIiwgImkiLCAibyIsICJ1In19ICwKfQoKbVsiZ24iXSA9IHsKCSJHdWFyYW7DrSIsCgkiUTM1ODc2IiwKCSJ0dXAtZ3VhIiwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJndSJdID0gewoJIkd1amFyYXRpIiwKCSJRNTEzNyIsCgkiaW5jIiwKCXNjcmlwdHMgPSB7Ikd1anIifSwKCWFuY2VzdG9ycyA9IHsiaW5jLW1ndSJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gImd1LXRyYW5zbGl0IiwKfQoKbVsiZ3YiXSA9IHsKCSJNYW54IiwKCSJRMTIxNzUiLAoJImNlbC1nYWUiLAoJb3RoZXJOYW1lcyA9IHsiTWFueCBHYWVsaWMifSwKCXNjcmlwdHMgPSBMYXRuLAoJYW5jZXN0b3JzID0geyJtZ2EifSwKCXNvcnRfa2V5ID0gewoJCWZyb20gPSB7IsOnIiwgIi0ifSwKCQl0byAgID0geyJjIn19ICwKCXN0YW5kYXJkQ2hhcnMgPSAiQS1XWcOHYS13ecOnMC05IiAuLiBQVU5DVFVBVElPTiwKfQoKbVsiaGEiXSA9IHsKCSJIYXVzYSIsCgkiUTU2NDc1IiwKCSJjZGMtd3N0IiwKCXNjcmlwdHMgPSBMYXRuQXJhYiwKICAgIHNvcnRfa2V5ID0gewoJCWZyb20gPSB7IsmTIiwgICAiyZciLCAgICLGmSIsICAiJ3kiLCAixrQiLCAgIiciIH0sCgkJdG8gICA9IHsiYn4iICwgImR+IgksICJrfiIsICJ5fiIsICJ5fiIsICIiICB9fSwKICAgIGVudHJ5X25hbWUgPSB7CgkJZnJvbSA9IHsiUsyDIiwgInLMgyIsICLDgCIsICLDoCIsICLDiCIsICLDqCIsICLDjCIsICLDrCIsICLDkiIsICLDsiIsICLDmSIsICLDuSIsICLDgiIsICLDoiIsICLDiiIsICLDqiIsICLDjiIsICLDriIsICLDlCIsICLDtCIsICLDmyIsICLDuyIsICLEgCIsICLEgSIsICLEkiIsICLEkyIsICLEqiIsICLEqyIsICLFjCIsICLFjSIsICLFqiIsICLFqyIsICLDgSIsICLDoSIsICLDiSIsICLDqSIsICLDjSIsICLDrSIsICLDkyIsICLDsyIsICLDmiIsICLDuiIsICLEgMyAIiwgIsSBzIAiLCAi4biUIiwgIuG4lSIsICLEqsyAIiwgIsSrzIAiLCAi4bmQIiwgIuG5kSIsICLFqsyAIiwgIsWrzIAiLCBHUkFWRSwgQUNVVEV9LAoJCXRvICAgPSB7IlIiLCAiciIsICJBIiwgImEiLCAiRSIsICJlIiwgIkkiLCAiaSIsICJPIiwgIm8iLCAiVSIsICJ1IiwgIkEiLCAiYSIsICJFIiwgImUiLCAiSSIsICJpIiwgIk8iLCAibyIsICJVIiwgInUiLCAiQSIsICJhIiwgIkUiLCAiZSIsICJJIiwgImkiLCAiTyIsICJvIiwgIlUiLCAidSIsICJBIiwgImEiLCAiRSIsICJlIiwgIkkiLCAiaSIsICJPIiwgIm8iLCAiVSIsICJ1IiwgIkEiLCAiYSIsICJFIiwgImUiLCAiSSIsICJpIiwgIk8iLCAibyIsICJVIiwgInUifX0sCn0KCm1bImhlIl0gPSB7CgkiSGVicmV3IiwKCSJROTI4OCIsCgkic2VtLWNhbiIsCglvdGhlck5hbWVzID0geyJJdnJpdCJ9LAoJc2NyaXB0cyA9IHsiSGViciIsICJQaG54IiwgIkJyYWkifSwKCWVudHJ5X25hbWUgPSB7CgkJZnJvbSA9IHsiWyIgLi4gdSgweDA1OTEpIC4uICItIiAuLiB1KDB4MDVCRCkgLi4gdSgweDA1QkYpIC4uICItIiAuLiB1KDB4MDVDNSkgLi4gdSgweDA1QzcpIC4uICJdIn0sCgkJdG8gICA9IHt9fSAsCn0KCm1bImhpIl0gPSB7CgkiSGluZGkiLAoJIlExNTY4IiwKCSJpbmMiLAoJb3RoZXJOYW1lcyA9IHsiSGluZGF2aSIsICJLaGFyaWJvbGkiLCAiS2hhcmkgQm9saSIsICJNYW5hayBIaW5kaSJ9LAoJc2NyaXB0cyA9IHsiRGV2YSIsICJLdGhpIiwgIk5ld2EifSwKCWFuY2VzdG9ycyA9IHsiaW5jLW9oaSJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gImhpLXRyYW5zbGl0IiwKfQoKbVsiaG8iXSA9IHsKCSJIaXJpIE1vdHUiLAoJIlEzMzYxNyIsCgkiY3JwIiwKCW90aGVyTmFtZXMgPSB7IlBpZGdpbiBNb3R1IiwgIlBvbGljZSBNb3R1In0sCglzY3JpcHRzID0gTGF0biwKCWFuY2VzdG9ycyA9IHsibWV1In0sCn0KCm1bImh0Il0gPSB7CgkiSGFpdGlhbiBDcmVvbGUiLAoJIlEzMzQ5MSIsCgkiY3JwIiwKCW90aGVyTmFtZXMgPSB7IkNyZW9sZSIsICJIYWl0aWFuIiwgIktyZXnDsmwifSwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJodSJdID0gewoJIkh1bmdhcmlhbiIsCgkiUTkwNjciLAoJInVyai11Z3IiLAoJb3RoZXJOYW1lcyA9IHsiTWFneWFyIn0sCglzY3JpcHRzID0geyJMYXRuIiwgIkh1bmcifSwKCWFuY2VzdG9ycyA9IHsib2h1In0sCglzb3J0X2tleSA9IHsKCQlmcm9tID0geyLDoSIsICLDqSIsICLDrSIsICLDsyIsICLDuiIsICLFkSIsICLFsSJ9LAoJCXRvICAgPSB7ImEiLCAiZSIsICJpIiwgIm8iLCAidSIsICLDtiIsICLDvCJ9fSAsCn0KCm1bImh5Il0gPSB7CgkiQXJtZW5pYW4iLAoJIlE4Nzg1IiwKCSJoeXgiLAoJb3RoZXJOYW1lcyA9IHsiTW9kZXJuIEFybWVuaWFuIiwgIkVhc3Rlcm4gQXJtZW5pYW4iLCAiV2VzdGVybiBBcm1lbmlhbiJ9LAoJc2NyaXB0cyA9IHsiQXJtbiIsICJCcmFpIn0sCglhbmNlc3RvcnMgPSB7ImF4bSJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gIkFybW4tdHJhbnNsaXQiLAoJb3ZlcnJpZGVfdHJhbnNsaXQgPSB0cnVlLAoJc29ydF9rZXkgPSB7CgkJZnJvbSA9IHsi1bjWgiIsICLWhyIsICLVpdaCIn0sCgkJdG8gICA9IHsi1oIiLCAi1aXVviIsICLVpdW+In19LAoJZW50cnlfbmFtZSA9IHsKCQlmcm9tID0geyLVniIsICLVnCIsICLVmyIsICLVnyIsICLWhyIsICImbHQ7c3VwJmd0O9W1Jmx0Oy9zdXAmZ3Q7IiwgIiZsdDtzdXAmZ3Q71asmbHQ7L3N1cCZndDsifSwKCQl0byAgID0geyIiLCAiIiwgIiIsICIiLCAi1aXWgiIsICLVtSIsICLVqyJ9fSAsCn0KCm1bImh6Il0gPSB7CgkiSGVyZXJvIiwKCSJRMzMzMTUiLAoJImJudCIsCglzY3JpcHRzID0gTGF0biwKfQoKbVsiaWEiXSA9IHsKCSJJbnRlcmxpbmd1YSIsCgkiUTM1OTM0IiwKCSJhcnQiLAoJc2NyaXB0cyA9IExhdG4sCn0KCm1bImlkIl0gPSB7CgkiSW5kb25lc2lhbiIsCgkiUTkyNDAiLAoJInBvei1tbHkiLAoJc2NyaXB0cyA9IExhdG4sCglhbmNlc3RvcnMgPSB7Im1zIn0sCn0KCm1bImllIl0gPSB7CgkiSW50ZXJsaW5ndWUiLAoJIlEzNTg1MCIsCgkiYXJ0IiwKCW90aGVyTmFtZXMgPSB7Ik9jY2lkZW50YWwifSwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJpZyJdID0gewoJIklnYm8iLAoJIlEzMzU3OCIsCgkibmljLWJjbyIsCglzY3JpcHRzID0gTGF0biwKfQoKbVsiaWkiXSA9IHsKCSJTaWNodWFuIFlpIiwKCSJRMzQyMzUiLAoJInRicS1sb2wiLAoJb3RoZXJOYW1lcyA9IHsiTnVvc3UiLCAiTm9zdSIsICJOb3J0aGVybiBZaSIsICJMaWFuZ3NoYW4gWWkifSwKCXNjcmlwdHMgPSB7IllpaWkifSwKCXRyYW5zbGl0X21vZHVsZSA9ICJpaS10cmFuc2xpdCIsCn0KCm1bImlrIl0gPSB7CgkiSW51cGlhayIsCgkiUTI3MTgzIiwKCSJlc3gtaW51IiwKCW90aGVyTmFtZXMgPSB7IkludXBpYXEiLCAiScOxdXBpYXEiLCAiSW51cGlhdHVuIn0sCglzY3JpcHRzID0gTGF0biwKfQoKbVsiaW8iXSA9IHsKCSJJZG8iLAoJIlEzNTIyNCIsCgkiYXJ0IiwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJpcyJdID0gewoJIkljZWxhbmRpYyIsCgkiUTI5NCIsCgkiZ21xIiwKCXNjcmlwdHMgPSBMYXRuLAoJYW5jZXN0b3JzID0geyJub24ifSwKfQoKbVsiaXQiXSA9IHsKCSJJdGFsaWFuIiwKCSJRNjUyIiwKCSJyb2EtaXRkIiwKCXNjcmlwdHMgPSBMYXRuLAoJc29ydF9rZXkgPSB7CgkJZnJvbSA9IHsiW8Ogw6HDosOkw6VdIiwgIlvDqMOpw6rDq10iLCAiW8Osw63DrsOvXSIsICJbw7LDs8O0w7ZdIiwgIlvDucO6w7vDvF0ifSwKCQl0byAgID0geyJhIgkgICwgImUiCSAsICJpIgkgLCAibyIJICwgInUiCSB9fSAsCn0KCm1bIml1Il0gPSB7CgkiSW51a3RpdHV0IiwKCSJRMjk5MjEiLAoJImVzeC1pbnUiLAoJb3RoZXJOYW1lcyA9IHsiRWFzdGVybiBDYW5hZGlhbiBJbnVrdGl0dXQiLCAiRWFzdGVybiBDYW5hZGlhbiBJbnVpdCIsICJXZXN0ZXJuIENhbmFkaWFuIEludWt0aXR1dCIsICJXZXN0ZXJuIENhbmFkaWFuIEludWl0IiwgIldlc3Rlcm4gQ2FuYWRpYW4gSW51a3R1biIsICJJbnVpbm5hcSIsICJJbnVpbm5hcXR1biIsICJJbnV2aWFsdWsiLCAiSW51dmlhbHVrdHVuIiwgIk51bmF2aW1taXV0aXQiLCAiTnVuYXRzaWF2dW1taXV0IiwgIkFpdmlsaW1taXV0IiwgIk5hdHNpbGluZ21pdXQiLCAiS2l2YWxsaXJtaXV0IiwgIlNpZ2xpdCIsICJTaWdsaXR1biJ9LAoJc2NyaXB0cyA9IHsiQ2FucyIsICJMYXRuIn0sCgl0cmFuc2xpdF9tb2R1bGUgPSAiaXUtdHJhbnNsaXQiLAoJb3ZlcnJpZGVfdHJhbnNsaXQgPSB0cnVlLAp9CgptWyJqYSJdID0gewoJIkphcGFuZXNlIiwKCSJRNTI4NyIsCgkianB4IiwKCW90aGVyTmFtZXMgPSB7Ik1vZGVybiBKYXBhbmVzZSIsICJOaXBwb25lc2UiLCAiTmlob25nbyJ9LAoJc2NyaXB0cyA9IHsiSnBhbiIsICJCcmFpIn0sCglhbmNlc3RvcnMgPSB7Im9qcCJ9LAoJLS1bPVsKCS0tIEhhbmRsZWQgYnkganNvcnQgZnVuY3Rpb24gaW4gW1tNb2R1bGU6amFdXS4KCXNvcnRfa2V5ID0gewoJCWZyb20gPSB7IlvjgYHjgqHjgqJdIiwgIlvjgYPjgqPjgqRdIiwgIlvjgYXjgpTjgqXjgqbjg7RdIiwgIlvjgYfjgqfjgqhdIiwgIlvjgYnjgqnjgqpdIiwgIlvjgYzjgpXjgqvjgqzjg7VdIiwgIlvjgY7jgq3jgq5dIiwgIlvjgZDjgq/jgrDjh7BdIiwgIlvjgZLjgpbjgrHjgrLjg7ZdIiwgIlvjgZTjgrPjgrRdIiwgIlvjgZbjgrXjgrZdIiwgIlvjgZjjgrfjgrjjh7FdIiwgIlvjgZrjgrnjgrrjh7JdIiwgIlvjgZzjgrvjgrxdIiwgIlvjgZ7jgr3jgr5dIiwgIlvjgaDjgr/jg4BdIiwgIlvjgaLjg4Hjg4JdIiwgIlvjgaPjgaXjg4Pjg4Tjg4VdIiwgIlvjgafjg4bjg4ddIiwgIlvjganjg4jjg4njh7NdIiwgIuODiiIsICLjg4siLCAiW+ODjOOHtF0iLCAi44ONIiwgIuODjiIsICJb44Gw44Gx44OP44OQ44OR44e1XSIsICJb44Gz44G044OS44OT44OU44e2XSIsICJb44G244G344OV44OW44OX44e3XSIsICJb44G544G644OY44OZ44Oa44e4XSIsICJb44G844G944Ob44Oc44Od44e5XSIsICLjg54iLCAi44OfIiwgIlvjg6Djh7pdIiwgIuODoSIsICLjg6IiLCAiW+OCg+ODo+ODpF0iLCAiW+OCheODpeODpl0iLCAiW+OCh+ODp+ODqF0iLCAiW+ODqeOHu10iLCAiW+ODquOHvF0iLCAiW+ODq+OHvV0iLCAiW+ODrOOHvl0iLCAiW+ODreOHv10iLCAiW+OCjuODruODr+ODt10iLCAiW+ODsOODuF0iLCAiW+ODseODuV0iLCAiW+ODsuODul0iLCAi44OzIiwgIlvjgpnjgprjgpvjgpzjgp3jgp7jg7vjg73jg75dIiwgIvCbgIAifSwKCQl0byAgID0geyLjgYIiLCAi44GEIiwgIuOBhiIsICLjgYgiLCAi44GKIiwgIuOBiyIsICLjgY0iLCAi44GPIiwgIuOBkSIsICLjgZMiLCAi44GVIiwgIuOBlyIsICLjgZkiLCAi44GbIiwgIuOBnSIsICLjgZ8iLCAi44GhIiwgIuOBpCIsICLjgaYiLCAi44GoIiwgIuOBqiIsICLjgasiLCAi44GsIiwgIuOBrSIsICLjga4iLCAi44GvIiwgIuOBsiIsICLjgbUiLCAi44G4IiwgIuOBuyIsICLjgb4iLCAi44G/IiwgIuOCgCIsICLjgoEiLCAi44KCIiwgIuOChCIsICLjgoYiLCAi44KIIiwgIuOCiSIsICLjgooiLCAi44KLIiwgIuOCjCIsICLjgo0iLCAi44KPIiwgIuOCkCIsICLjgpEiLCAi44KSIiwgIuOCkyIsICIiLCAi44GIIn19LAoJLS1dPV0KfQoKbVsianYiXSA9IHsKCSJKYXZhbmVzZSIsCgkiUTMzNTQ5IiwKCSJwb3otc3VzIiwKCXNjcmlwdHMgPSB7IkxhdG4iLCAiSmF2YSJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gImp2LXRyYW5zbGl0IiwKCWFuY2VzdG9ycyA9IHsia2F3In0sCglsaW5rX3RyID0gdHJ1ZSwKfQoKbVsia2EiXSA9IHsKCSJHZW9yZ2lhbiIsCgkiUTgxMDgiLAoJImNjcy1nem4iLAoJb3RoZXJOYW1lcyA9IHsiS2FydHZlbGlhbiIsICJKdWRlby1HZW9yZ2lhbiIsICJLaXZydWxpIiwgIkdydXppbmljIn0sCglzY3JpcHRzID0geyJHZW9yIiwgIkdlb2siLCAiSGViciJ9LCAtLSBIZWJyIGlzIHVzZWQgdG8gd3JpdGUgSnVkZW8tR2VvcmdpYW4KCWFuY2VzdG9ycyA9IHsib2dlIn0sCgl0cmFuc2xpdF9tb2R1bGUgPSAiR2Vvci10cmFuc2xpdCIsCglvdmVycmlkZV90cmFuc2xpdCA9IHRydWUsCgllbnRyeV9uYW1lID0gewoJCWZyb20gPSB7IsyCIn0sCgkJdG8gICA9IHsiIn19LAp9CgptWyJrZyJdID0gewoJIktvbmdvIiwKCSJRMzM3MDIiLAoJImJudCIsCglvdGhlck5hbWVzID0geyJLaWtvbmdvIiwgIktvb25nbyIsICJMYWFyaSIsICJTYW4gU2FsdmFkb3IgS29uZ28iLCAiWW9tYmUifSwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJraSJdID0gewoJIktpa3V5dSIsCgkiUTMzNTg3IiwKCSJibnQiLAoJb3RoZXJOYW1lcyA9IHsiR2lrdXl1IiwgIkfEqWvFqXnFqSJ9LAoJc2NyaXB0cyA9IExhdG4sCn0KCm1bImtqIl0gPSB7CgkiS3dhbnlhbWEiLAoJIlExNDA1MDc3IiwKCSJibnQiLAoJb3RoZXJOYW1lcyA9IHsiS3VhbnlhbWEiLCAiT3NoaWt3YW55YW1hIn0sCglzY3JpcHRzID0gTGF0biwKfQoKbVsia2siXSA9IHsKCSJLYXpha2giLAoJIlE5MjUyIiwKCSJ0cmsta2lwIiwKCXNjcmlwdHMgPSB7IkN5cmwiLCAiTGF0biIsICJray1BcmFiIn0sCgl0cmFuc2xpdF9tb2R1bGUgPSAia2stdHJhbnNsaXQiLAoJb3ZlcnJpZGVfdHJhbnNsaXQgPSB0cnVlLAp9CgptWyJrbCJdID0gewoJIkdyZWVubGFuZGljIiwKCSJRMjUzNTUiLAoJImVzeC1pbnUiLAoJb3RoZXJOYW1lcyA9IHsiS2FsYWFsbGlzdXQifSwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJrbSJdID0gewoJIktobWVyIiwKCSJROTIwNSIsCgkibWtoIiwKCW90aGVyTmFtZXMgPSB7IkNhbWJvZGlhbiJ9LAoJc2NyaXB0cyA9IHsiS2htciJ9LAoJYW5jZXN0b3JzID0geyJta2gtbWttIn0sCgl0cmFuc2xpdF9tb2R1bGUgPSAia20tdHJhbnNsaXQiLAp9CgptWyJrbiJdID0gewoJIkthbm5hZGEiLAoJIlEzMzY3MyIsCgkiZHJhIiwKCXNjcmlwdHMgPSB7IktuZGEifSwKCWFuY2VzdG9ycyA9IHsiZHJhLW1rbiJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gImtuLXRyYW5zbGl0IiwKfQoKbVsia28iXSA9IHsKCSJLb3JlYW4iLAoJIlE5MTc2IiwKCSJxZmEta29yIiwKCW90aGVyTmFtZXMgPSB7Ik1vZGVybiBLb3JlYW4ifSwKCXNjcmlwdHMgPSB7IktvcmUiLCAiQnJhaSJ9LAoJYW5jZXN0b3JzID0geyJva20ifSwKCXRyYW5zbGl0X21vZHVsZSA9ICJrby10cmFuc2xpdCIsCn0KCm1bImtyIl0gPSB7CgkiS2FudXJpIiwKCSJRMzYwOTQiLAoJInNzYS1zYWgiLAoJb3RoZXJOYW1lcyA9IHsiS2FuZW1idSIsICJCaWxtYSBLYW51cmkiLCAiQ2VudHJhbCBLYW51cmkiLCAiTWFuZ2EgS2FudXJpIiwgIlR1bWFyaSBLYW51cmkifSwKCXNjcmlwdHMgPSBMYXRuQXJhYiwKCXNvcnRfa2V5ID0gewoJCWZyb20gPSB7Im55IiwgIsedIiwgInNoIn0sCgkJdG8gICA9IHsibn4iLCAiZX4iLCAic34ifX0gLCAtLSB0aGUgc29ydGtleSBhbmQgZW50cnlfbmFtZSBhcmUgb25seSBmb3Igc3RhbmRhcmQgS2FudXJpOyB3aGVuIGRpYWxlY3RhbCBlbnRyaWVzIGdldCBhZGRlZCwgc29tZW9uZSB3aWxsIGhhdmUgdG8gd29yayBvdXQgaG93IHRoZSBkaWFsZWN0cyBzaG91bGQgYmUgcmVwcmVzZW50ZWQgb3J0aG9ncmFwaGljYWxseQoJZW50cnlfbmFtZSA9IHsKCQlmcm9tID0geyLDgCIsICLDoCIsICLDiCIsICLDqCIsICLGjsyAIiwgIsedzIAiLCAiw4wiLCAiw6wiLCAiw5IiLCAiw7IiLCAiw5kiLCAiw7kiLCAiw4IiLCAiw6IiLCAiw4oiLCAiw6oiLCAixo7MgiIsICLHncyCIiwgIsOOIiwgIsOuIiwgIsOUIiwgIsO0IiwgIsObIiwgIsO7IiwgIsSCIiwgIsSDIiwgIsSUIiwgIsSVIiwgIsaOzIYiLCAix53MhiIsICLErCIsICLErSIsICLFjiIsICLFjyIsICLFrCIsICLFrSIsICLDgSIsICLDoSIsICLDiSIsICLDqSIsICLGjsyBIiwgIsedzIEiLCAiw40iLCAiw60iLCAiw5MiLCAiw7MiLCAiw5oiLCAiw7oiLCBHUkFWRSwgQUNVVEV9LAoJCXRvICAgPSB7IkEiLCAiYSIsICJFIiwgImUiLCAixo4iLCAix50iLCAiSSIsICJpIiwgIk8iLCAibyIsICJVIiwgInUiLCAiQSIsICJhIiwgIkUiLCAiZSIsICLGjiIsICLHnSIsICJJIiwgImkiLCAiTyIsICJvIiwgIlUiLCAidSIsICJBIiwgImEiLCAiRSIsICJlIiwgIsaOIiwgIsedIiwgIkkiLCAiaSIsICJPIiwgIm8iLCAiVSIsICJ1IiwgIkEiLCAiYSIsICJFIiwgImUiLCAixo4iLCAix50iLCAiSSIsICJpIiwgIk8iLCAibyIsICJVIiwgInUifX0sCn0KCm1bImtzIl0gPSB7CgkiS2FzaG1pcmkiLAoJb3RoZXJOYW1lcyA9IHsiS29zaHVyIn0sCgkiUTMzNTUyIiwKCSJpbmMtZGFyIiwKCXNjcmlwdHMgPSB7ImtzLUFyYWIiLCAiRGV2YSIsICJTaHJkIiwgIkxhdG4ifSwKCXRyYW5zbGl0X21vZHVsZSA9ICJ0cmFuc2xpdC1yZWRpcmVjdCIsCglhbmNlc3RvcnMgPSB7ImluYy1kYXItcHJvIn0sCn0KCm1bImt1Il0gPSB7CgkiS3VyZGlzaCIsCgkiUTM2MzY4IiwKCSJpcmEtbndpIiwKCXNjcmlwdHMgPSB7IkxhdG4iLCAia3UtQXJhYiIsICJBcm1uIiwgIkN5cmwifSwKCXRyYW5zbGl0X21vZHVsZSA9ICJ0cmFuc2xpdC1yZWRpcmVjdCIsCn0KCi0tICJrdiIgSVMgVFJFQVRFRCBBUyAia29pIiwgImtwdiIsIFNFRSBXVDpMVAoKbVsia3ciXSA9IHsKCSJDb3JuaXNoIiwKCSJRMjUyODkiLAoJImNlbC1icnkiLAoJc2NyaXB0cyA9IExhdG4sCglhbmNlc3RvcnMgPSB7ImNueCJ9LAp9CgptWyJreSJdID0gewoJIkt5cmd5eiIsCgkiUTkyNTUiLAoJInRyay1raXAiLAoJb3RoZXJOYW1lcyA9IHsiS2lyZ2hpeiIsICJLaXJnaXoifSwKCXNjcmlwdHMgPSB7IkN5cmwiLCAiTGF0biIsICJBcmFiIn0sCgl0cmFuc2xpdF9tb2R1bGUgPSAia3ktdHJhbnNsaXQiLAoJb3ZlcnJpZGVfdHJhbnNsaXQgPSB0cnVlLAp9CgptWyJsYSJdID0gewoJIkxhdGluIiwKCSJRMzk3IiwKCSJpdGMiLAoJc2NyaXB0cyA9IExhdG4sCglhbmNlc3RvcnMgPSB7Iml0Yy1vbGEifSwKCWVudHJ5X25hbWUgPSB7cmVtb3ZlX2RpYWNyaXRpY3MgPSBNQUNST04uLkJSRVZFLi5ESUFFUn0sCglzdGFuZGFyZENoYXJzID0gIkEtWmEtesOGw6bFksWTxIAtxIPEki3ElcSqLcStxYwtxY/Fqi3FrciyyLMiIC4uIE1BQ1JPTiAuLiBCUkVWRSAuLiBQVU5DVFVBVElPTiwKfQoKbVsibGIiXSA9IHsKCSJMdXhlbWJvdXJnaXNoIiwKCSJROTA1MSIsCgkiZ213IiwKCXNjcmlwdHMgPSBMYXRuLAoJYW5jZXN0b3JzID0geyJnbWgifSwKfQoKbVsibGciXSA9IHsKCSJMdWdhbmRhIiwKCSJRMzMzNjgiLAoJImJudCIsCglvdGhlck5hbWVzID0geyJHYW5kYSIsICJPbHVnYW5kYSJ9LAoJc2NyaXB0cyA9IExhdG4sCgllbnRyeV9uYW1lID0gewoJCWZyb20gPSB7IsOhIiwgIsOBIiwgIsOpIiwgIsOJIiwgIsOtIiwgIsONIiwgIsOzIiwgIsOTIiwgIsO6IiwgIsOaIiwgIsWEIiwgIsWDIiwgIuG4vyIsICLhuL4iLCAiw6IiLCAiw4IiLCAiw6oiLCAiw4oiLCAiw64iLCAiw44iLCAiw7QiLCAiw5QiLCAiw7siLCAiw5siIH0sCgkJdG8gICA9IHsiYSIsICJBIiwgImUiLCAiRSIsICJpIiwgIkkiLCAibyIsICJPIiwgInUiLCAiVSIsICJuIiwgIk4iLCAibSIsICJNIiwgImEiLCAiQSIsICJlIiwgIkUiLCAiaSIsICJJIiwgIm8iLCAiTyIsICJ1IiwgIlUiLH19LAoJc29ydF9rZXkgPSB7CgkJZnJvbSA9IHsixYsifSwKCQl0byAgID0geyJu7oChIn19ICwKfQoKbVsibGkiXSA9IHsKCSJMaW1idXJnaXNoIiwKCSJRMTAyMTcyIiwKCSJnbXciLAoJb3RoZXJOYW1lcyA9IHsiTGltYnVyZ2FuIiwgIkxpbWJ1cmdpYW4iLCAiTGltYnVyZ2ljIn0sCglzY3JpcHRzID0gTGF0biwKCWFuY2VzdG9ycyA9IHsiZHVtIn0sCn0KCm1bImxuIl0gPSB7CgkiTGluZ2FsYSIsCgkiUTM2MjE3IiwKCSJibnQiLAoJb3RoZXJOYW1lcyA9IHsiTmdhbGEifSwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJsbyJdID0gewoJIkxhbyIsCgkiUTkyMTEiLAoJInRhaS1zd2UiLAoJb3RoZXJOYW1lcyA9IHsiTGFvdGlhbiJ9LAoJc2NyaXB0cyA9IHsiTGFvbyJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gImxvLXRyYW5zbGl0IiwKCXNvcnRfa2V5ID0gewoJCWZyb20gPSB7IiVwIiwgIlvgu4gt4LuNXSIsICLgurwiLCAi4Lq9IiwgIuC7nCIsICLgu50iLCAiKFvgu4Dgu4Hgu4Lgu4Pgu4RdKShb4LqBLeC6rl0pIn0sCgkJdG8gICA9IHsiIiwgIiIsICLguqUiLCAi4LqNIiwgIuC6q+C6mSIsICLguqvguqEiLCAiJTIlMSJ9fSwKfQoKbVsibHQiXSA9IHsKCSJMaXRodWFuaWFuIiwKCSJROTA4MyIsCgkiYmF0IiwKCXNjcmlwdHMgPSBMYXRuLAoJYW5jZXN0b3JzID0geyJvbHQifSwKCWVudHJ5X25hbWUgPSB7CgkJZnJvbSA9IHsiW8Ohw6PDoF0iLCAiW8OBw4PDgF0iLCAiW8Op4bq9w6hdIiwgIlvDieG6vMOIXSIsICJbw63EqcOsXSIsICJbw43EqMOMXSIsICJbw73hu7ldIiwgIlvDneG7uF0iLCAiw7EiLCAiW8Ozw7XDsl0iLCAiW8OTw5XDkl0iLCAiW8O6xanDuV0iLCAiW8OaxajDmV0iLCBBQ1VURSwgR1JBVkUsIFRJTERFfSwKCQl0byAgID0geyJhIiwgICAgICAgIkEiLCAgICAgImUiLCAgICAgIkUiLCAgICAgImkiLCAgICAgIkkiLCAgICAgInkiLCAgICJZIiwgICAibiIsICAgIm8iLCAgICAiTyIsICAgICAidSIsICAgICAgIlUifX0gLAp9CgptWyJsdSJdID0gewoJIkx1YmEtS2F0YW5nYSIsCgkiUTM2MTU3IiwKCSJibnQiLAoJc2NyaXB0cyA9IExhdG4sCn0KCm1bImx2Il0gPSB7CgkiTGF0dmlhbiIsCgkiUTkwNzgiLAoJImJhdCIsCglvdGhlck5hbWVzID0geyJMZXR0aXNoIiwgIkxldHQifSwKCXNjcmlwdHMgPSBMYXRuLAoJZW50cnlfbmFtZSA9IHsKCQktLSBUaGlzIGF0dGVtcHRzIHRvIGNvbnZlcnQgdm93ZWxzIHdpdGggdG9uZSBtYXJrcyB0byB2b3dlbHMgZWl0aGVyIHdpdGgKCQktLSBvciB3aXRob3V0IG1hY3JvbnMuIFNwZWNpZmljYWxseSwgdGhlcmUgc2hvdWxkIGJlIG5vIG1hY3JvbnMgaWYgdGhlCgkJLS0gdm93ZWwgaXMgcGFydCBvZiBhIGRpcGh0aG9uZyAoaW5jbHVkaW5nIHJlc29uYW50IGRpcGh0aG9uZ3Mgc3VjaAoJCS0tIHDDrHJrc3RzIC0mZ3Q7IHBpcmtzdHMgbm90ICNwxKtya3N0cykuIFdoYXQgd2UgZG8gaXMgZmlyc3QgY29udmVydCB0aGUKCQktLSB2b3dlbCArIHRvbmUgbWFyayB0byBhIHZvd2VsICsgdGlsZGUgaW4gYSBkZWNvbXBvc2VkIGZhc2hpb24sCgkJLS0gdGhlbiByZW1vdmUgdGhlIHRpbGRlIGluIGRpcGh0aG9uZ3MsIHRoZW4gY29udmVydCB0aGUgcmVtYWluaW5nCgkJLS0gdm93ZWwgKyB0aWxkZSBzZXF1ZW5jZXMgdG8gbWFjcm9uZWQgdm93ZWxzLCB0aGVuIGRlbGV0ZSBhbnkgb3RoZXIKCQktLSB0aWxkZS4gV2UgbGVhdmUgYWxyZWFkeS1tYWNyb25lZCB2b3dlbHMgYWxvbmU6IEJvdGggZS5nLiBhciBhbmQgxIFyCgkJLS0gb2NjdXIgYmVmb3JlIGNvbnNvbmFudHMuIEZJWE1FOiBUaGlzIHN0aWxsIG1pZ2h0IG5vdCBiZSBzdWZmaWNpZW50LgoJCWZyb20gPSB7IsioIiwgIsipIiwgIlvDgsODw4BdIiwgIlvDosOjw6BdIiwgIlvDiuG6vMOIXSIsICJbw6rhur3DqF0iLCAiW8OOxKjDjF0iLCAiW8OuxKnDrF0iLCAiW8OUw5XDkl0iLCAiW8O0w7XDsl0iLCAiW8ObxajDmV0iLCAiW8O7xanDuV0iLCAiW8ORx7hdIiwgIlvDsce5XSIsICJbIiAuLiBDSVJDIC4uIFRJTERFIC4uR1JBVkUgLi4iXSIsICIoW2FBZUVpSW9PdVVdKSIgLi4gVElMREUgLi4iPyhbbHJubXVpTFJOTVVJXSkiIC4uIFRJTERFIC4uICI/KFteYUFlRWlJb091VcSBxIDEk8SSxKvEqsWrxapdKSIsICIoW2FBZUVpSW9PdVVdKSIgLi4gVElMREUgLi4iPyhbbHJubXVpTFJOTVVJXSkiIC4uIFRJTERFIC4uIj8kIiwgIihbaUldKSIgLi4gVElMREUgLi4gIj8oW2VFXSkiIC4uIFRJTERFIC4uICI/IiwgIkEiIC4uIFRJTERFLCAiYSIgLi4gVElMREUsICJFIiAuLiBUSUxERSwgImUiIC4uIFRJTERFLCAiSSIgLi4gVElMREUsICJpIiAuLiBUSUxERSwgIlUiIC4uIFRJTERFLCAidSIgLi4gVElMREUsIFRJTERFfSwKCQl0byAgID0geyJFIiwgImUiLCAiQSIgLi4gVElMREUsICJhIiAuLiBUSUxERSwgIkUiIC4uIFRJTERFLCAiZSIgLi4gVElMREUsICJJIiAuLiBUSUxERSwgImkiIC4uIFRJTERFLCAiTyIsICJvIiwgIlUiIC4uIFRJTERFLCAidSIgLi4gVElMREUsICJOIiwgIm4iLCBUSUxERSwgIiUxJTIlMyIsICIlMSUyIiwgIiUxJTIiLCAixIAiLCAixIEiLCAixJIiLCAixJMiLCAixKoiLCAixKsiLCAixaoiLCAixasiLCAiIn19LAp9CgptWyJtZyJdID0gewoJIk1hbGFnYXN5IiwKCSJRNzkzMCIsCgkicG96LWJyZSIsCglvdGhlck5hbWVzID0geyJCZXRzaW1pc2FyYWthIE1hbGFnYXN5IiwgIkJldHNpbWlzYXJha2EiLCAiTm9ydGhlcm4gQmV0c2ltaXNhcmFrYSBNYWxhZ2FzeSIsICJOb3J0aGVybiBCZXRzaW1pc2FyYWthIiwgIlNvdXRoZXJuIEJldHNpbWlzYXJha2EgTWFsYWdhc3kiLCAiU291dGhlcm4gQmV0c2ltaXNhcmFrYSIsICJCYXJhIE1hbGFnYXN5IiwgIkJhcmEiLCAiTWFzaWtvcm8gTWFsYWdhc3kiLCAiTWFzaWtvcm8iLCAiQW50YW5rYXJhbmEiLCAiQW50YW5rYXJhbmEgTWFsYWdhc3kiLCAiUGxhdGVhdSBNYWxhZ2FzeSIsICJTYWthbGF2YSIsICJUYW5kcm95IE1hbGFnYXN5IiwgIlRhbmRyb3kiLCAiVGFub3N5IiwgIlRhbm9zeSBNYWxhZ2FzeSIsICJUZXNha2EiLCAiVHNpbWloZXR5IiwgIlRzaW1paGV0eSBNYWxhZ2FzeSIsICJCdXNoaSIsICJTaGlidXNoaSIsICJLaWJ1c2hpIn0sCglzY3JpcHRzID0gTGF0biwKfQoKbVsibWgiXSA9IHsKCSJNYXJzaGFsbGVzZSIsCgkiUTM2MjgwIiwKCSJwb3otbWljIiwKCXNjcmlwdHMgPSBMYXRuLAoJc29ydF9rZXkgPSB7CgkJZnJvbSA9IHsixIEiICwgIsS8IiAsICJtzKciICwgIsWGIiAsICJuzIQiICAsICJvzKciICwgIsWNIiAgLCAixasiIH0sCgkJdG8gICA9IHsiYX4iLCAibH4iLCAibX4iLCAibn4iLCAibn5+IiwgIm9+IiwgIm9+fiIsICJ1fiJ9fSAsCn0KCm1bIm1pIl0gPSB7CgkiTWFvcmkiLAoJIlEzNjQ1MSIsCgkicG96LXBlcCIsCglvdGhlck5hbWVzID0geyJNxIFvcmkifSwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJtayJdID0gewoJIk1hY2Vkb25pYW4iLAoJIlE5Mjk2IiwKCSJ6bHMiLAoJc2NyaXB0cyA9IEN5cmwsCgl0cmFuc2xpdF9tb2R1bGUgPSAibWstdHJhbnNsaXQiLAoJZW50cnlfbmFtZSA9IHsKCQlmcm9tID0ge0FDVVRFfSwKCQl0byAgID0ge319LAp9CgptWyJtbCJdID0gewoJIk1hbGF5YWxhbSIsCgkiUTM2MjM2IiwKCSJkcmEiLAoJc2NyaXB0cyA9IHsiTWx5bSJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gIm1sLXRyYW5zbGl0IiwKCW92ZXJyaWRlX3RyYW5zbGl0ID0gdHJ1ZSwKfQoKbVsibW4iXSA9IHsKCSJNb25nb2xpYW4iLAoJIlE5MjQ2IiwKCSJ4Z24iLAoJb3RoZXJOYW1lcyA9IHsiS2hhbGtoYSBNb25nb2xpYW4ifSwKCXNjcmlwdHMgPSB7IkN5cmwiLCAiTW9uZyIsICJTb3lvIiwgIlphbmIifSwgLS0gZW50cmllcyBpbiBTb3lvIG9yIFphbmIgbWlnaHQgcmVxdWlyZSBwcmlvciBkaXNjdXNzaW9uCglhbmNlc3RvcnMgPSB7ImNtZyJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gIm1uLXRyYW5zbGl0IiwKCW92ZXJyaWRlX3RyYW5zbGl0ID0gdHJ1ZSwKfQoKLS0gIm1vIiBJUyBUUkVBVEVEIEFTICJybyIsIFNFRSBXVDpMVAoKbVsibXIiXSA9IHsKCSJNYXJhdGhpIiwKCSJRMTU3MSIsCgkiaW5jIiwKCXNjcmlwdHMgPSB7IkRldmEiLCAiTW9kaSJ9LAoJYW5jZXN0b3JzID0geyJvbXIifSwKCXRyYW5zbGl0X21vZHVsZSA9ICJtci10cmFuc2xpdCIsCn0KCm1bIm1zIl0gPSB7CgkiTWFsYXkiLAoJIlE5MjM3IiwKCSJwb3otbWx5IiwKCW90aGVyTmFtZXMgPSB7Ik1hbGF5c2lhbiIsICJTdGFuZGFyZCBNYWxheSJ9LAoJc2NyaXB0cyA9IHsiTGF0biIsICJtcy1BcmFiIn0sCn0KCm1bIm10Il0gPSB7CgkiTWFsdGVzZSIsCgkiUTkxNjYiLAoJInNlbS1hcmIiLAoJc2NyaXB0cyA9IExhdG4sCglhbmNlc3RvcnMgPSB7InNxciJ9LAp9CgptWyJteSJdID0gewoJIkJ1cm1lc2UiLAoJIlE5MjI4IiwKCSJ0YnEtYnJtIiwKCW90aGVyTmFtZXMgPSB7Ik15YW5tYXIifSwKCXNjcmlwdHMgPSB7Ik15bXIifSwKCWFuY2VzdG9ycyA9IHsib2JyIn0sCgl0cmFuc2xpdF9tb2R1bGUgPSAibXktdHJhbnNsaXQiLAoJb3ZlcnJpZGVfdHJhbnNsaXQgPSB0cnVlLAp9CgptWyJuYSJdID0gewoJIk5hdXJ1YW4iLAoJIlExMzMwNyIsCgkicG96LW1pYyIsCglvdGhlck5hbWVzID0geyJOYXVydSJ9LAoJc2NyaXB0cyA9IExhdG4sCn0KCm1bIm5iIl0gPSB7CgkiTm9yd2VnaWFuIEJva23DpWwiLAoJIlEyNTE2NyIsCgkiZ21xIiwKCW90aGVyTmFtZXMgPSB7IkJva23DpWwifSwKCXNjcmlwdHMgPSBMYXRuLAoJYW5jZXN0b3JzID0geyJnbXEtbW5vIn0sCgl3aWtpbWVkaWFfY29kZXMgPSB7Im5vIn0sCn0KCm1bIm5kIl0gPSB7CgkiTm9ydGhlcm4gTmRlYmVsZSIsCgkiUTM1NjEzIiwKCSJibnQtbmd1IiwKCW90aGVyTmFtZXMgPSB7Ik5vcnRoIE5kZWJlbGUifSwKCXNjcmlwdHMgPSBMYXRuLAoJZW50cnlfbmFtZSA9IHsKCQlmcm9tID0geyJbxIHDoMOhw6LHjl0iLCAiW8STw6jDqcOqxJtdIiwgIlvEq8Osw63DrseQXSIsICJbxY3DssOzw7THkl0iLCAiW8Wrw7nDusO7x5RdIiwgIuG4vyIsICJbx7nFhMWIXSIsIE1BQ1JPTiwgQUNVVEUsIEdSQVZFLCBDSVJDLCBDQVJPTn0sCgkJdG8gICA9IHsiYSIgICAgICAsICJlIiAgICAgICwgImkiICAgICAgLCAibyIgICAgICAsICJ1IiAgICAgICwgIm0iLCAibiIgICAgfX0sCn0KCm1bIm5lIl0gPSB7CgkiTmVwYWxpIiwKCSJRMzM4MjMiLAoJImluYy1wYWgiLAoJb3RoZXJOYW1lcyA9IHsiTmVwYWxlc2UifSwKCXNjcmlwdHMgPSB7IkRldmEiLCAiTmV3YSJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gIm5lLXRyYW5zbGl0IiwKCWFuY2VzdG9ycyA9IHsicHN1In0sCn0KCm1bIm5nIl0gPSB7CgkiTmRvbmdhIiwKCSJRMzM5MDAiLAoJImJudCIsCglzY3JpcHRzID0gTGF0biwKfQoKbVsibmwiXSA9IHsKCSJEdXRjaCIsCgkiUTc0MTEiLAoJImdtdyIsCglvdGhlck5hbWVzID0geyJOZXRoZXJsYW5kaWMiLCAiRmxlbWlzaCJ9LAoJc2NyaXB0cyA9IExhdG4sCglhbmNlc3RvcnMgPSB7ImR1bSJ9LAoJc29ydF9rZXkgPSB7CgkJZnJvbSA9IHsiW8Okw6HDosOlXSIsICJbw6vDqcOqXSIsICJbw6/DrcOuXSIsICJbw7bDs8O0XSIsICJbw7zDusO7XSIsICLDpyIsICLDsSIsICJeLSJ9LAoJCXRvICAgPSB7ImEiCSAsICJlIgksICJpIgksICJvIgksICJ1IgksICJjIiwgIm4ifX0gLAoJc3RhbmRhcmRDaGFycyA9ICJBLVphLXowLTkiIC4uIFBVTkNUVUFUSU9OIC4uIHUoMHgyODAwKSAuLiAiLSIgLi4gdSgweDI4RkYpLAp9CgptWyJubiJdID0gewoJIk5vcndlZ2lhbiBOeW5vcnNrIiwKCSJRMjUxNjQiLAoJImdtcSIsCglvdGhlck5hbWVzID0geyJOZXcgTm9yd2VnaWFuIiwgIk55bm9yc2sifSwKCXNjcmlwdHMgPSBMYXRuLAoJYW5jZXN0b3JzID0geyJnbXEtbW5vIn0sCn0KCm1bIm5vIl0gPSB7CgkiTm9yd2VnaWFuIiwKCSJROTA0MyIsCgkiZ21xIiwKCXNjcmlwdHMgPSBMYXRuLAoJYW5jZXN0b3JzID0geyJnbXEtbW5vIn0sCn0KCm1bIm5yIl0gPSB7CgkiU291dGhlcm4gTmRlYmVsZSIsCgkiUTM2Nzg1IiwKCSJibnQtbmd1IiwKCW90aGVyTmFtZXMgPSB7IlNvdXRoIE5kZWJlbGUifSwKCXNjcmlwdHMgPSBMYXRuLAoJZW50cnlfbmFtZSA9IHsKCQlmcm9tID0geyJbxIHDoMOhw6LHjl0iLCAiW8STw6jDqcOqxJtdIiwgIlvEq8Osw63DrseQXSIsICJbxY3DssOzw7THkl0iLCAiW8Wrw7nDusO7x5RdIiwgIuG4vyIsICJbx7nFhMWIXSIsIE1BQ1JPTiwgQUNVVEUsIEdSQVZFLCBDSVJDLCBDQVJPTn0sCgkJdG8gICA9IHsiYSIgICAgICAsICJlIiAgICAgICwgImkiICAgICAgLCAibyIgICAgICAsICJ1IiAgICAgICwgIm0iLCAibiIgICAgfX0sCn0KCm1bIm52Il0gPSB7CgkiTmF2YWpvIiwKCSJRMTMzMTAiLAoJImFwYSIsCglvdGhlck5hbWVzID0geyJOYXZhaG8iLCAiRGluw6kgYml6YWFkIn0sCglzY3JpcHRzID0geyJudi1MYXRuIn0sCglzb3J0X2tleSA9IHsKCQlmcm9tID0geyJbw6HEhV0iLCAiW8OpxJldIiwgIlvDrcSvXSIsICJbw7PHq10iLCAixYQiLCAiXm4oW2RqbHRdKSIsICLFgiIgLCAiW8q84oCZJ10iLCBBQ1VURX0sCgkJdG8gICA9IHsiYSIgICAsICJlIiAgICwgImkiICAgLCAibyIgICAsICJuIiwgIm5pJTEiCSAgLCAibH4ifX0sIC0tIHRoZSB0aWxkZSBpcyB1c2VkIHRvIGd1YXJhbnRlZSB0aGF0IMWCIHdpbGwgYWx3YXlzIGJlIHNvcnRlZCBhZnRlciBhbGwgb3RoZXIgd29yZHMgd2l0aCBsCn0KCm1bIm55Il0gPSB7CgkiQ2hpY2hld2EiLAoJIlEzMzI3MyIsCgkiYm50IiwKCW90aGVyTmFtZXMgPSB7IkNoaWNoZcW1YSIsICJDaGlueWFuamEiLCAiTnlhbmphIiwgIkNoZXdhIiwgIkNpY2V3YSIsICJDZXdhIiwgIkNpbnlhbmphIn0sCglzY3JpcHRzID0gTGF0biwKCWVudHJ5X25hbWUgPSB7CgkJZnJvbSA9IHsixbUiLCAixbQiLCAiw6EiLCAiw4EiLCAiw6kiLCAiw4kiLCAiw60iLCAiw40iLCAiw7MiLCAiw5MiLCAiw7oiLCAiw5oiLCAixYQiLCAixYMiLCAi4bi/IiwgIuG4viIgfSwKCQl0byAgID0geyJ3IiwgIlciLCAiYSIsICJBIiwgImUiLCAiRSIsICJpIiwgIkkiLCAibyIsICJPIiwgInUiLCAiVSIsICJuIiwgIk4iLCAibSIsICJNIn19LAoJc29ydF9rZXkgPSB7CgkJZnJvbSA9IHsibmcnIn0sCgkJdG8gICA9IHsibmcifX0gLAp9CgptWyJvYyJdID0gewoJIk9jY2l0YW4iLAoJIlExNDE4NSIsCgkicm9hIiwKCW90aGVyTmFtZXMgPSB7IlByb3ZlbsOnYWwiLCAiQXV2ZXJnbmF0IiwgIkF1dmVybmhhdCIsICJHYXNjb24iLCAiTGFuZ3VlZG9jaWVuIiwgIkxlbmdhZG9jaWFuIiwgIlNodWFkaXQiLCAiQ2hvdWhhZGl0ZSIsICJDaG91aGFkaXQiLCAiQ2hvdWFkaXRlIiwgIkNob3VhZGl0IiwgIlNodWhhZGl0IiwgIkp1ZGVvLVByb3ZlbsOnYWwiLCAiSnVkZW8tUHJvdmVuY2FsIiwgIkp1ZGVvLUNvbXRhZGluIn0sCglzY3JpcHRzID0geyJMYXRuIiwgIkhlYnIifSwKCWFuY2VzdG9ycyA9IHsicHJvIn0sCglzb3J0X2tleSA9IHsKCQlmcm9tID0geyJbw6DDoV0iLCAiW8Oow6ldIiwgIlvDrcOvXSIsICJbw7LDs10iLCAiW8O6w7xdIiwgIsOnIiwgIihbbG5zXSnCt2gifSwKCQl0byAgID0geyJhIiAgICwgImUiICAgLCAiaSIgICAsICJvIiAgICwgInUiICAgLCAiYyIsICIlMWgiCSAgfX0gLAp9CgptWyJvaiJdID0gewoJIk9qaWJ3ZSIsCgkiUTMzODc1IiwKCSJhbGciLAoJb3RoZXJOYW1lcyA9IHsiQ2hpcHBld2EiLCAiT2ppYndheSIsICJPamlid2Vtb3dpbiIsICJTb3V0aHdlc3Rlcm4gT2ppYndhIn0sCglzY3JpcHRzID0geyJDYW5zIiwgIkxhdG4ifSwKfQoKbVsib20iXSA9IHsKCSJPcm9tbyIsCgkiUTMzODY0IiwKCSJjdXMiLAoJb3RoZXJOYW1lcyA9IHsiT3JtYSIsICJCb3JhbmEtQXJzaS1HdWppIE9yb21vIiwgIldlc3QgQ2VudHJhbCBPcm9tbyJ9LAoJc2NyaXB0cyA9IHsiTGF0biIsICJFdGhpIn0sCn0KCm1bIm9yIl0gPSB7CgkiT3JpeWEiLAoJIlEzMzgxMCIsCgkiaW5jIiwKCW90aGVyTmFtZXMgPSB7Ik9kaWEiLCAiT29yeWEifSwKCXNjcmlwdHMgPSB7Ik9yeWEifSwKCWFuY2VzdG9ycyA9IHsiaW5jLW1vciJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gIm9yLXRyYW5zbGl0IiwKfQoKbVsib3MiXSA9IHsKCSJPc3NldGlhbiIsCgkiUTMzOTY4IiwKCSJpcmEtc2N5IiwKCW90aGVyTmFtZXMgPSB7Ik9zc2V0ZSIsICJPc3NldGljIiwgIkRpZ29yIiwgIklyb24ifSwKCXNjcmlwdHMgPSB7IkN5cmwiLCAiR2VvciIsICJMYXRuIn0sCglhbmNlc3RvcnMgPSB7Im9vcyJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gIm9zLXRyYW5zbGl0IiwKCW92ZXJyaWRlX3RyYW5zbGl0ID0gdHJ1ZSwKCWVudHJ5X25hbWUgPSB7CgkJZnJvbSA9IHtHUkFWRSwgQUNVVEV9LAoJCXRvICAgPSB7fX0gLAp9CgptWyJwYSJdID0gewoJIlB1bmphYmkiLAoJIlE1ODYzNSIsCgkiaW5jIiwKCW90aGVyTmFtZXMgPSB7IlBhbmphYmkifSwKCXNjcmlwdHMgPSB7Ikd1cnUiLCAicGEtQXJhYiIsICJEZXZhIn0sCglhbmNlc3RvcnMgPSB7InBzdSJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gInRyYW5zbGl0LXJlZGlyZWN0IiwKCWVudHJ5X25hbWUgPSB7CgkJZnJvbSA9IHt1KDB4MDY0QiksIHUoMHgwNjRDKSwgdSgweDA2NEQpLCB1KDB4MDY0RSksIHUoMHgwNjRGKSwgdSgweDA2NTApLCB1KDB4MDY1MSksIHUoMHgwNjUyKX0sCgkJdG8gICA9IHt9fSAsCn0KCm1bInBpIl0gPSB7CgkiUGFsaSIsCgkiUTM2NzI3IiwKCSJpbmMtb2xkIiwKCXNjcmlwdHMgPSB7IkxhdG4iLCAiQnJhaCIsICJEZXZhIiwgIkJlbmciLCAiU2luaCIsICJNeW1yIiwgIlRoYWkiLCAiTGFuYSIsICJLaG1yIn0sIC0tIGhvbGRzIExhb28sIG5vdCBlbm91Z2ggZ2x5cGhlcyB0byByZW5kZXIKCWFuY2VzdG9ycyA9IHsic2EifSwKCXNvcnRfa2V5ID0gewoJCWZyb20gPSB7IsSBIiwgIsSrIiwgIsWrIiwgIuG4jSIsICLhuLciLCAiW+G5geG5g10iLCAiW+G5h8Ox4bmFXSIsICLhua0iLCAiKFvguYDguYHguYLguYPguYRdKShb4LiBLeC4rl0pIiwgIuGplCIsICLhqZUiLCAi4amWIiwgIuGpmCIsICIoW+GorS3hqLFdKeGpmyIsICIoW+Goty3hqL5dKeGpmyIsICLhqaQiLCB1KDB4RkUwMCl9LAoJCXRvICAgPSB7ImEiLCAiaSIsICJ1IiwgImQiLCAibCIsICJtIiAgICwgIm4iCSwgInQiLCAiJTIlMSIsICLhqYjhqaDhqYgiLCAi4amg4amBIiwgIuGpoOGpgyIsICLhqKbhqaAiLCAiJTHhqaDhqK4iLCAiJTHhqaDhqLsiLCAi4amjIn19ICwKCWVudHJ5X25hbWUgPSB7CgkJZnJvbSA9IHt1KDB4RkUwMCl9LAoJCXRvICAgPSB7fX0sCn0KCm1bInBsIl0gPSB7CgkiUG9saXNoIiwKCSJRODA5IiwKCSJ6bHciLAoJc2NyaXB0cyA9IExhdG4sCglhbmNlc3RvcnMgPSB7Inpsdy1vcGwifSwKCXNvcnRfa2V5ID0gewoJCWZyb20gPSB7IlvEhMSFXSIsICJbxIbEh10iLCAiW8SYxJldIiwgIlvFgcWCXSIsICJbxYPFhF0iLCAiW8OTw7NdIiwgIlvFmsWbXSIsICJbxbvFvF0iLCAiW8W5xbpdIn0sCgkJdG8gICA9IHsKCQkJImEiIC4uIHUoMHgxMEZGRkYpLAoJCQkiYyIgLi4gdSgweDEwRkZGRiksCgkJCSJlIiAuLiB1KDB4MTBGRkZGKSwKCQkJImwiIC4uIHUoMHgxMEZGRkYpLAoJCQkibiIgLi4gdSgweDEwRkZGRiksCgkJCSJvIiAuLiB1KDB4MTBGRkZGKSwKCQkJInMiIC4uIHUoMHgxMEZGRkYpLAoJCQkieiIgLi4gdSgweDEwRkZGRiksCgkJCSJ6IiAuLiB1KDB4MTBGRkZFKX19ICwKfQoKbVsicHMiXSA9IHsKCSJQYXNodG8iLAoJIlE1ODY4MCIsCgkiaXJhLXBhdCIsCglvdGhlck5hbWVzID0geyJQYXNodHVuIiwgIlB1c2h0byIsICJQYXNodHUiLCAiQ2VudHJhbCBQYXNodG8iLCAiTm9ydGhlcm4gUGFzaHRvIiwgIlNvdXRoZXJuIFBhc2h0byIsICJQdWtodG8iLCAiUGFraHRvIiwgIlBha2todG8iLCAiQWZnaGFuaSJ9LAoJc2NyaXB0cyA9IHsicHMtQXJhYiJ9LAoJYW5jZXN0b3JzID0geyJpcmEtcGF0LXBybyJ9LAp9CgptWyJwdCJdID0gewoJIlBvcnR1Z3Vlc2UiLAoJIlE1MTQ2IiwKCSJyb2EtaWJlIiwKCW90aGVyTmFtZXMgPSB7Ik1vZGVybiBQb3J0dWd1ZXNlIn0sCglzY3JpcHRzID0geyJMYXRuIiwgIkJyYWkifSwKCWFuY2VzdG9ycyA9IHsicm9hLW9wdCJ9LAoJc29ydF9rZXkgPSB7CgkJZnJvbSA9IHsiW8Ogw6PDocOiw6RdIiwgIlvDqOG6vcOpw6rDq10iLCAiW8OsxKnDrcOvXSIsICJbw7LDs8O0w7XDtl0iLCAiW8O8w7rDucWpXSIsICLDpyIsICLDsSJ9LAoJCXRvICAgPSB7ImEiCSAgLCAiZSIJICAsICJpIgkgLCAibyIJICAsICJ1IgkgLCAiYyIsICJuIn19ICwKfQoKbVsicXUiXSA9IHsKCSJRdWVjaHVhIiwKCSJRNTIxOCIsCgkicXdlIiwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJybSJdID0gewoJIlJvbWFuc2NoIiwKCSJRMTMxOTkiLAoJInJvYS1yaGUiLAoJb3RoZXJOYW1lcyA9IHsiUm9tYW5zaCIsICJSdW1hbnRzY2giLCAiUm9tYW5jaGUifSwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJybyJdID0gewoJIlJvbWFuaWFuIiwKCSJRNzkxMyIsCgkicm9hLWVhcyIsCglvdGhlck5hbWVzID0geyJEYWNvLVJvbWFuaWFuIiwgIlJvdW1hbmlhbiIsICJSdW1hbmlhbiJ9LAoJc2NyaXB0cyA9IHsiTGF0biIsICJDeXJsIn0sCglzb3J0X2tleSA9IHsKICAgICAgICBmcm9tID0geyLEgyIgLCAiw6IiICAsICLDriIgLCAiyJkiICwgIsibIiB9LAogICAgICAgIHRvICAgPSB7ImF+IiwgImF+fiIsICJpfiIsICJzfiIsICJ0fiJ9fSwKfQoKbVsicnUiXSA9IHsKCSJSdXNzaWFuIiwKCSJRNzczNyIsCgkiemxlIiwKCXNjcmlwdHMgPSB7IkN5cmwiLCAiQnJhaSJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gInJ1LXRyYW5zbGl0IiwKCXNvcnRfa2V5ID0gewoJCWZyb20gPSB7ItGRIn0sCgkJdG8gICA9IHsi0LUiIC4uIG13LnVzdHJpbmcuY2hhcigweDEwRkZGRil9fSwKCWVudHJ5X25hbWUgPSB7CgkJZnJvbSA9IHsi0IAiLCAi0ZAiLCAi0I0iLCAi0Z0iLCBHUkFWRSwgQUNVVEV9LAoJCXRvICAgPSB7ItCVIiwgItC1IiwgItCYIiwgItC4In19LAoJc3RhbmRhcmRDaGFycyA9ICLQgdCG0JAt0Y/RkdGWMC054oCUIiAuLiBQVU5DVFVBVElPTiwKfQoKbVsicnciXSA9IHsKCSJSd2FuZGEtUnVuZGkiLAoJIlEzMzU3MyIsCgkiYm50IiwKCW90aGVyTmFtZXMgPSB7IlJ3YW5kYSIsICJLaW55YXJ3YW5kYSIsICJSdW5kaSIsICJLaXJ1bmRpIiwgIkhhIiwgIkdpaGEiLCAiSGFuZ2F6YSIsICJWaW56YSIsICJTaHViaSIsICJTdWJpIn0sCglzY3JpcHRzID0gTGF0biwKfQoKbVsic2EiXSA9IHsKCSJTYW5za3JpdCIsCgkiUTExMDU5IiwKCSJpbmMtb2xkIiwKCXNjcmlwdHMgPSB7IkRldmEiLCAiQmFsaSIsICJhcy1CZW5nIiwgIkJlbmciLCAiQmhrcyIsICJCcmFoIiwgIkdyYW4iLCAiR3VqciIsICJHdXJ1IiwgIkphdmEiLCAiS2hhciIsICJLaG1yIiwgIktuZGEiLCAiTGFuYSIsICJNbHltIiwgIk15bXIiLCAiTmV3YSIsICJPcnlhIiwgIlNhdXIiLCAiU2hyZCIsICJTaWRkIiwgIlNpbmgiLCAiVGFtbCIsICJUZWx1IiwgIlRoYWkiLCAiVGlidCIsICJUaXJoIn0sIC0tIGhvbGRzIExhb28sIG5vdCBlbm91Z2ggZ2x5cGhlcyB0byByZW5kZXIKCXNvcnRfa2V5ID0gewoJCWZyb20gPSB7IsSBIiwgIsSrIiwgIsWrIiwgIuG4jSIsICLhuLciLCAiW+G5geG5g10iLCAiW+G5h8Ox4bmFXSIsICLhua0iLCAiKFvguYDguYHguYLguYPguYRdKShb4LiBLeC4rl0pIiwgIuGplCIsICLhqZUiLCAi4amWIiwgIuGpmCIsICIoW+GorS3hqLFdKeGpmyIsICIoW+Goty3hqL5dKeGpmyIsICLhqaQiLCB1KDB4RkUwMCl9LAoJCXRvICAgPSB7ImEiLCAiaSIsICJ1IiwgImQiLCAibCIsICJtIiAgICwgIm4iCSwgInQiLCAiJTIlMSIsICLhqYjhqaDhqYgiLCAi4amg4amBIiwgIuGpoOGpgyIsICLhqKbhqaAiLCAiJTHhqaDhqK4iLCAiJTHhqaDhqLsiLCAi4amjIn19ICwKCWVudHJ5X25hbWUgPSB7CgkJZnJvbSA9IHt1KDB4RkUwMCl9LAoJCXRvICAgPSB7fX0sCgl0cmFuc2xpdF9tb2R1bGUgPSAidHJhbnNsaXQtcmVkaXJlY3QiLAp9CgptWyJzYyJdID0gewoJIlNhcmRpbmlhbiIsCgkiUTMzOTc2IiwKCSJyb2EiLAoJb3RoZXJOYW1lcyA9IHsiQ2FtcGlkYW5lc2UiLCAiQ2FtcGlkYW5lc2UgU2FyZGluaWFuIiwgIkxvZ3Vkb3Jlc2UiLCAiTG9ndWRvcmVzZSBTYXJkaW5pYW4iLCAiTnVvcmVzZSIsICJOdW9yZXNlIFNhcmRpbmlhbiJ9LAoJc2NyaXB0cyA9IExhdG4sCn0KCm1bInNkIl0gPSB7CgkiU2luZGhpIiwKCSJRMzM5OTciLAoJImluYyIsCglzY3JpcHRzID0geyJzZC1BcmFiIiwgIkRldmEiLCAiU2luZCIsICJLaG9qIn0sCgllbnRyeV9uYW1lID0gewoJCWZyb20gPSB7dSgweDA2NzEpLCB1KDB4MDY0QiksIHUoMHgwNjRDKSwgdSgweDA2NEQpLCB1KDB4MDY0RSksIHUoMHgwNjRGKSwgdSgweDA2NTApLCB1KDB4MDY1MSksIHUoMHgwNjUyKSwgdSgweDA2NzApLCB1KDB4MDY0MCl9LAoJCXRvICAgPSB7dSgweDA2MjcpfX0sCglhbmNlc3RvcnMgPSB7InBzdSJ9LAp9CgptWyJzZSJdID0gewoJIk5vcnRoZXJuIFNhbWkiLAoJIlEzMzk0NyIsCgkic21pIiwKCW90aGVyTmFtZXMgPSB7Ik5vcnRoIFNhbWkiLCAiTm9ydGhlcm4gU2FhbWkiLCAiTm9ydGggU2FhbWkifSwKCXNjcmlwdHMgPSBMYXRuLAoJZW50cnlfbmFtZSA9IHsKCQlmcm9tID0geyLhuqEiLCAiW8ST4bq5XSIsICLEqyIsICJbxY3hu41dIiwgIsWrIiwgIsuIIn0sCgkJdG8gICA9IHsiYSIsICJlIiAgICwgImkiLCAibyIgICAsICJ1In0gfSwKCXNvcnRfa2V5ID0gewoJCWZyb20gPSB7IsOhIiAsICLEjSIgLCAixJEiICwgIsWLIiAsICLFoSIgLCAixaciICwgIsW+IiB9LAoJCXRvICAgPSB7ImHCsiIsICJjwrIiLCAiZMKyIiwgIm7CsiIsICJzwrIiLCAidMKyIiwgInrCsiJ9IH0sCglzdGFuZGFyZENoYXJzID0gIkEtUFItVlphLXByLXZ6MC05w4HDocSMxI3EkMSRxYrFi8WgxaHFpsWnxb3FviIgLi4gUFVOQ1RVQVRJT04sCn0KCm1bInNnIl0gPSB7CgkiU2FuZ28iLAoJIlEzMzk1NCIsCgkiY3JwIiwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJzaCJdID0gewoJIlNlcmJvLUNyb2F0aWFuIiwKCSJROTMwMSIsCgkiemxzIiwKCW90aGVyTmFtZXMgPSB7IkJDUyIsICJDcm9hdG8tU2VyYmlhbiIsICJTZXJib2Nyb2F0aWFuIiwgIkJvc25pYW4iLCAiQ3JvYXRpYW4iLCAiTW9udGVuZWdyaW4iLCAiU2VyYmlhbiJ9LAoJc2NyaXB0cyA9IHsiTGF0biIsICJDeXJsIn0sCgllbnRyeV9uYW1lID0gewoJCWZyb20gPSB7IlvIgMOAyILDgcSAw4NdIiwgIlvIgcOgyIPDocSBw6NdIiwgIlvIhMOIyIbDicSS4bq8XSIsICJbyIXDqMiHw6nEk+G6vV0iLCAiW8iIw4zIisONxKrEqF0iLCAiW8iJw6zIi8OtxKvEqV0iLCAiW8iMw5LIjsOTxYzDlV0iLCAiW8iNw7LIj8OzxY3DtV0iLCAiW8iQyJLFlF0iLCAiW8iRyJPFlV0iLCAiW8iUw5nIlsOaxarFqF0iLCAiW8iVw7nIl8O6xavFqV0iLCAi0IAiLCAi0ZAiLCAiW9Oi0I1dIiwgIlvTo9GdXSIsICJb065dIiwgIlvTr10iLCBHUkFWRSwgQUNVVEUsIERHUkFWRSwgSU5WQlJFVkUsIE1BQ1JPTiwgVElMREV9LAoJCXRvICAgPSB7IkEiCSAgLCAiYSIJICAsICJFIgkgICwgImUiCSAgLCAiSSIJICAsICJpIgkgICwgIk8iCSAgLCAibyIJICAsICJSIgksICJyIgksICJVIgkgICwgInUiCSAgLCAi0JUiLCAi0LUiLCAi0JgiICAgLCAi0LgiLCAi0KMiLCAi0YMiICAgfX0sCgl3aWtpbWVkaWFfY29kZXMgPSB7InNoIiwgImJzIiwgImhyIiwgInNyIn0sCn0KCm1bInNpIl0gPSB7CgkiU2luaGFsZXNlIiwKCSJRMTMyNjciLAoJImluYyIsCglvdGhlck5hbWVzID0geyJTaW5naGFsZXNlIiwgIlNpbmhhbGEifSwKCXNjcmlwdHMgPSB7IlNpbmgifSwKCWFuY2VzdG9ycyA9IHsiZWx1LXByayJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gInNpLXRyYW5zbGl0IiwKCW92ZXJyaWRlX3RyYW5zbGl0ID0gdHJ1ZSwKfQoKbVsic2siXSA9IHsKCSJTbG92YWsiLAoJIlE5MDU4IiwKCSJ6bHciLAoJc2NyaXB0cyA9IExhdG4sCglzb3J0X2tleSA9IHsKCQlmcm9tID0geyJbw6HDpF0iLCAiw6kiLCAiw60iLCAiW8Ozw7RdIiwgIsO6IiwgIsO9IiwgIsWVIiwgIsS6IiwgIlsiIC4uIERJQUVSIC4uIEFDVVRFIC4uIENJUkMgLi4gIl0ifSwKCQl0byAgID0geyJhIiAgICwgImUiLCAiaSIsICJvIiAgICwgInUiLCAieSIsICJyIiwgImwiLCAiIn19ICwKfQoKbVsic2wiXSA9IHsKCSJTbG92ZW5lIiwKCSJROTA2MyIsCgkiemxzIiwKCW90aGVyTmFtZXMgPSB7IlNsb3ZlbmlhbiJ9LAoJc2NyaXB0cyA9IExhdG4sCgllbnRyeV9uYW1lID0gewoJCWZyb20gPSB7IlvDgcOAw4LIgsiAXSIsICJbw6HDoMOiyIPIgV0iLCAiW8OJw4jDisiGyIThu4bhurhdIiwgIlvDqcOow6rIh8iF4buH4bq5yZldIiwgIlvDjcOMw47IisiIXSIsICJbw63DrMOuyIvIiV0iLCAiW8OTw5LDlMiOyIzhu5jhu4xdIiwgIlvDs8Oyw7TIj8iN4buZ4buNXSIsICJbxZTIksiQXSIsICJbxZXIk8iRXSIsICJbw5rDmcObyJbIlF0iLCAiW8O6w7nDu8iXyJVdIiwgIsWCIiwgR1JBVkUsIEFDVVRFLCBER1JBVkUsIElOVkJSRVZFLCBDSVJDLCBET1RCRUxPV30sCgkJdG8gICA9IHsiQSIJICAsICJhIgkgICwgIkUiCQksICJlIgkJICwgIkkiCSAgLCAiaSIJICAsICJPIgkJLCAibyIJCSwgIlIiCSwgInIiCSwgIlUiCSAgLCAidSIJICAsICJsIn19ICwKfQoKbVsic20iXSA9IHsKCSJTYW1vYW4iLAoJIlEzNDAxMSIsCgkicG96LXBucCIsCglzY3JpcHRzID0gTGF0biwKfQoKbVsic24iXSA9IHsKCSJTaG9uYSIsCgkiUTM0MDA0IiwKCSJibnQiLAoJc2NyaXB0cyA9IExhdG4sCgllbnRyeV9uYW1lID0gewogICAgICAgIGZyb20gPSB7QUNVVEV9LAogICAgICAgIHRvID0ge319ICwKfQoKbVsic28iXSA9IHsKCSJTb21hbGkiLAoJIlExMzI3NSIsCgkiY3VzIiwKCXNjcmlwdHMgPSB7IkxhdG4iLCAiQXJhYiIsICJPc21hIn0sCgllbnRyeV9uYW1lID0gewoJCWZyb20gPSB7IlvDgcOAw4JdIiwgIlvDocOgw6JdIiwgIlvDicOIw4pdIiwgIlvDqcOow6pdIiwgIlvDjcOMw45dIiwgIlvDrcOsw65dIiwgIlvDk8OSw5RdIiwgIlvDs8Oyw7RdIiwgIlvDmsOZw5tdIiwgIlvDusO5w7tdIiwgIlvDneG7sl0iLCAiW8O94buzXSJ9LAoJCXRvICAgPSB7IkEiCSAgLCAiYSIJICAsICJFIgksICJlIiAsICJJIgkgICwgImkiCSAgLCAiTyIJLCAibyIJLCAiVSIgICwgInUiLCAiWSIsICJ5In19ICwKfQoKbVsic3EiXSA9IHsKCSJBbGJhbmlhbiIsCgkiUTg3NDgiLAoJInNxaiIsCglvdGhlck5hbWVzID0geyJUb3NrIiwgIkdoZWciLCAiQXJ2YW5pdGlrYSIsICJBcmLDq3Jlc2jDqyIsICJBcmLDq3Jlc2gifSwKCXNjcmlwdHMgPSB7IkxhdG4iLCAiR3JlayIsICJFbGJhIn0sCglzb3J0X2tleSA9IHsKCQlmcm9tID0geyAnW8Oiw6PDpF0nLCAnW8OCw4PDhF0nLCAnW8Oq4bq9w6tdJywgJ1vDiuG6vMOLXScsICfEqScsICfEqCcsICfDtScsICfDlScsICfFqScsICfFqCcsICfhu7knLCAn4bu4JywgJ8OnJywgJ8OHJyB9LAoJCXRvICAgPSB7ICAgICAnYScsICAgICAnQScsICAgICAnZScsICAgICAnRScsICdpJywgJ0knLCAnbycsICdPJywgJ3UnLCAnVScsICd5JywgJ1knLCAnYycsICdDJyB9IH0gLAp9CgptWyJzcyJdID0gewoJIlN3YXppIiwKCSJRMzQwMTQiLAoJImJudC1uZ3UiLAoJb3RoZXJOYW1lcyA9IHsiU3dhdGkifSwKCXNjcmlwdHMgPSBMYXRuLAoJZW50cnlfbmFtZSA9IHsKCQlmcm9tID0geyJbxIHDoMOhw6LHjl0iLCAiW8STw6jDqcOqxJtdIiwgIlvEq8Osw63DrseQXSIsICJbxY3DssOzw7THkl0iLCAiW8Wrw7nDusO7x5RdIiwgIuG4vyIsICJbx7nFhMWIXSIsIE1BQ1JPTiwgQUNVVEUsIEdSQVZFLCBDSVJDLCBDQVJPTn0sCgkJdG8gICA9IHsiYSIgICAgICAsICJlIiAgICAgICwgImkiICAgICAgLCAibyIgICAgICAsICJ1IiAgICAgICwgIm0iLCAibiIgICAgfX0sCn0KCm1bInN0Il0gPSB7CgkiU290aG8iLAoJIlEzNDM0MCIsCgkiYm50LXN0cyIsCglvdGhlck5hbWVzID0geyJTZXNvdGhvIiwgIlNvdXRoZXJuIFNlc290aG8iLCAiU291dGhlcm4gU290aG8ifSwKCXNjcmlwdHMgPSBMYXRuLAoJZW50cnlfbmFtZSA9IHsKCQlmcm9tID0geyJbxIHDoMOhw6LHjl0iLCAiW8STw6jDqcOqxJtdIiwgIlvEq8Osw63DrseQXSIsICJbxY3DssOzw7THkl0iLCAiW8Wrw7nDusO7x5RdIiwgIuG4vyIsICJbx7nFhMWIXSIsIE1BQ1JPTiwgQUNVVEUsIEdSQVZFLCBDSVJDLCBDQVJPTn0sCgkJdG8gICA9IHsiYSIgICAgICAsICJlIiAgICAgICwgImkiICAgICAgLCAibyIgICAgICAsICJ1IiAgICAgICwgIm0iLCAibiIgICAgfX0sCn0KCm1bInN1Il0gPSB7CgkiU3VuZGFuZXNlIiwKCSJRMzQwMDIiLAoJInBvei1tc2EiLAoJc2NyaXB0cyA9IHsiTGF0biIsICJTdW5kIn0sCgl0cmFuc2xpdF9tb2R1bGUgPSAic3UtdHJhbnNsaXQiLAp9CgptWyJzdiJdID0gewoJIlN3ZWRpc2giLAoJIlE5MDI3IiwKCSJnbXEiLAoJc2NyaXB0cyA9IExhdG4sCglhbmNlc3RvcnMgPSB7ImdtcS1vc3cifSwKfQoKbVsic3ciXSA9IHsKCSJTd2FoaWxpIiwKCSJRNzgzOCIsCgkiYm50IiwKCW90aGVyTmFtZXMgPSB7IlNldHRsZXIgU3dhaGlsaSIsICJLaVNldGxhIiwgIktpU2V0dGxhIiwgIlNldGxhIiwgIlNldHRsYSIsICJLaXRjaGVuIFN3YWhpbGkiLCAiS2loaW5kaSIsICJJbmRpYW4gU3dhaGlsaSIsICJLaVNoYW1iYSIsICJLaXNoYW1iYSIsICJGaWVsZCBTd2FoaWxpIiwgIktpYmFidSIsICJBc2lhbiBTd2FoaWxpIiwgIktpbWFuZ2EiLCAiQXJhYiBTd2FoaWxpIiwgIktpdHZpdGEiLCAiQXJteSBTd2FoaWxpIn0sCglzY3JpcHRzID0gTGF0bkFyYWIsCglzb3J0X2tleSA9IHsKCQlmcm9tID0geyJuZyciLCAiXi0ifSwKCQl0byAgID0geyJuZ3oifX0gLAp9CgptWyJ0YSJdID0gewoJIlRhbWlsIiwKCSJRNTg4NSIsCgkiZHJhIiwKCXNjcmlwdHMgPSB7IlRhbWwifSwKCWFuY2VzdG9ycyA9IHsib3R5In0sCgl0cmFuc2xpdF9tb2R1bGUgPSAidGEtdHJhbnNsaXQiLAoJb3ZlcnJpZGVfdHJhbnNsaXQgPSB0cnVlLAp9CgptWyJ0ZSJdID0gewoJIlRlbHVndSIsCgkiUTgwOTciLAoJImRyYSIsCglzY3JpcHRzID0geyJUZWx1In0sCgl0cmFuc2xpdF9tb2R1bGUgPSAidGUtdHJhbnNsaXQiLAoJb3ZlcnJpZGVfdHJhbnNsaXQgPSB0cnVlLAp9CgptWyJ0ZyJdID0gewoJIlRhamlrIiwKCSJROTI2MCIsCgkiaXJhLXN3aSIsCglvdGhlck5hbWVzID0geyJUYWRqaWsiLCAiVGFkemhpayIsICJUYWppa2kiLCAiVGFqaWsgUGVyc2lhbiIsICJUYWppa2kgUGVyc2lhbiJ9LAoJc2NyaXB0cyA9IHsiQ3lybCIsICJmYS1BcmFiIiwgIkxhdG4ifSwKCWFuY2VzdG9ycyA9IHsicGFsIn0sIC0tIHNhbWUgYXMgImZhIiwgc2VlIFdUOlQ6QUZBCgl0cmFuc2xpdF9tb2R1bGUgPSAidGctdHJhbnNsaXQiLAoJb3ZlcnJpZGVfdHJhbnNsaXQgPSB0cnVlLAoJc29ydF9rZXkgPSB7CgkJZnJvbSA9IHsi0IEiLCAi0ZEifSwKCQl0byAgID0geyLQlSIgLCAi0LUifX0gLAoJZW50cnlfbmFtZSA9IHsKCQlmcm9tID0ge0FDVVRFfSwKCQl0byAgID0ge319ICwKfQoKbVsidGgiXSA9IHsKCSJUaGFpIiwKCSJROTIxNyIsCgkidGFpLXN3ZSIsCglvdGhlck5hbWVzID0geyJTaWFtZXNlIiwgIkNlbnRyYWwgVGhhaSJ9LAoJc2NyaXB0cyA9IHsiVGhhaSIsICJCcmFpIn0sCgl0cmFuc2xpdF9tb2R1bGUgPSAidGgtdHJhbnNsaXQiLAoJc29ydF9rZXkgPSB7CgkJZnJvbSA9IHsiJXAiLCAiW+C5hy3guY5dIiwgIihb4LmA4LmB4LmC4LmD4LmEXSkoW+C4gS3guK5dKSJ9LAoJCXRvICAgPSB7IiIsICIiLCAiJTIlMSJ9fSwKfQoKbVsidGkiXSA9IHsKCSJUaWdyaW55YSIsCgkiUTM0MTI0IiwKCSJzZW0tZXRoIiwKCW90aGVyTmFtZXMgPSB7IlRpZ3JpZ25hIn0sCglzY3JpcHRzID0geyJFdGhpIn0sCgl0cmFuc2xpdF9tb2R1bGUgPSAiRXRoaS10cmFuc2xpdCIsCn0KCm1bInRrIl0gPSB7CgkiVHVya21lbiIsCgkiUTkyNjciLAoJInRyay1vZ3oiLAoJc2NyaXB0cyA9IHsiTGF0biIsICJDeXJsIn0sCgllbnRyeV9uYW1lID0gewoJCWZyb20gPSB7IsSBIiwgIsSTIiwgIsSrIiwgIsWNIiwgIsWrIiwgIsizIiwgIsirIiwgIseWIiwgTUFDUk9OfSwKCQl0byAgID0geyJhIiwgImUiLCAiaSIsICJvIiwgInUiLCAieSIsICLDtiIsICLDvCIsICIifX0sCglhbmNlc3RvcnMgPSB7InRyay1vZ3otcHJvIn0sCn0KCm1bInRsIl0gPSB7CgkiVGFnYWxvZyIsCgkiUTM0MDU3IiwKCSJwaGkiLAoJc2NyaXB0cyA9IHsiTGF0biIsICJUZ2xnIn0sCgllbnRyeV9uYW1lID0gewoJCWZyb20gPSB7IlvDocOgw6JdIiwgIlvDqcOow6pdIiwgIlvDrcOsw65dIiwgIlvDs8Oyw7RdIiwgIlvDusO5w7tdIiwgQUNVVEUsIEdSQVZFLCBDSVJDfSwKCQl0byAgID0geyJhIiAgICAsICJlIiAgICAsICJpIiAgICAsICJvIiAgICAsICJ1IiAgICB9fSwKfQoKbVsidG4iXSA9IHsKCSJUc3dhbmEiLAoJIlEzNDEzNyIsCgkiYm50LXN0cyIsCglvdGhlck5hbWVzID0geyJTZXRzd2FuYSJ9LAoJc2NyaXB0cyA9IExhdG4sCn0KCm1bInRvIl0gPSB7CgkiVG9uZ2FuIiwKCSJRMzQwOTQiLAoJInBvei1wb2wiLAoJc2NyaXB0cyA9IExhdG4sCn0KCm1bInRyIl0gPSB7CgkiVHVya2lzaCIsCgkiUTI1NiIsCgkidHJrLW9neiIsCglzY3JpcHRzID0gTGF0biwKCWFuY2VzdG9ycyA9IHsib3RhIn0sCn0KCm1bInRzIl0gPSB7CgkiVHNvbmdhIiwKCSJRMzQzMjciLAoJImJudCIsCglzY3JpcHRzID0gTGF0biwKfQoKbVsidHQiXSA9IHsKCSJUYXRhciIsCgkiUTI1Mjg1IiwKCSJ0cmsta2lwIiwKCXNjcmlwdHMgPSB7IkN5cmwiLCAiTGF0biIsICJ0dC1BcmFiIn0sCgl0cmFuc2xpdF9tb2R1bGUgPSAidHQtdHJhbnNsaXQiLAoJb3ZlcnJpZGVfdHJhbnNsaXQgPSB0cnVlLAp9CgotLSAidHciIElTIFRSRUFURUQgQVMgImFrIiwgU0VFIFdUOkxUCgptWyJ0eSJdID0gewoJIlRhaGl0aWFuIiwKCSJRMzQxMjgiLAoJInBvei1wZXAiLAoJc2NyaXB0cyA9IExhdG4sCn0KCm1bInVnIl0gPSB7CgkiVXlnaHVyIiwKCSJRMTMyNjMiLAoJInRyayIsCglvdGhlck5hbWVzID0geyJVaWd1ciIsICJVaWdodXIiLCAiVXlndXIifSwKCXNjcmlwdHMgPSB7InVnLUFyYWIiLCAiTGF0biIsICJDeXJsIn0sCglhbmNlc3RvcnMgPSB7ImNoZyJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gInVnLXRyYW5zbGl0IiwKCW92ZXJyaWRlX3RyYW5zbGl0ID0gdHJ1ZSwKfQoKbVsidWsiXSA9IHsKCSJVa3JhaW5pYW4iLAoJIlE4Nzk4IiwKCSJ6bGUiLAoJc2NyaXB0cyA9IEN5cmwsCglhbmNlc3RvcnMgPSB7Im9ydiJ9LAoJdHJhbnNsaXRfbW9kdWxlID0gInVrLXRyYW5zbGl0IiwKCWVudHJ5X25hbWUgPSB7CgkJZnJvbSA9IHsi0IAiLCAi0ZAiLCAi0I0iLCAi0Z0iLCBHUkFWRSwgQUNVVEV9LAoJCXRvICAgPSB7ItCVIiwgItC1IiwgItCYIiwgItC4In19LAoJc3RhbmRhcmRDaGFycyA9ICLQhNCG0IfQkC3QqdCr0KzQri3RidGL0YzRjtGP0ZTRltGXIiAuLiBQVU5DVFVBVElPTiwKfSAKbVsidXIiXSA9IHsKCSJVcmR1IiwKCSJRMTYxNyIsCgkiaW5jIiwKCXNjcmlwdHMgPSB7InVyLUFyYWIifSwKCWFuY2VzdG9ycyA9IHsiaW5jLXNhcCJ9LAoJZW50cnlfbmFtZSA9IHsKCQlmcm9tID0ge3UoMHgwNjRCKSwgdSgweDA2NEMpLCB1KDB4MDY0RCksIHUoMHgwNjRFKSwgdSgweDA2NEYpLCB1KDB4MDY1MCksIHUoMHgwNjUxKSwgdSgweDA2NTIpfSwKCQl0byAgID0ge319ICwKfQoKbVsidXoiXSA9IHsKCSJVemJlayIsCgkiUTkyNjQiLAoJInRyayIsCglvdGhlck5hbWVzID0geyJOb3J0aGVybiBVemJlayIsICJTb3V0aGVybiBVemJlayJ9LAoJc2NyaXB0cyA9IHsiTGF0biIsICJDeXJsIiwgImZhLUFyYWIifSwKCWFuY2VzdG9ycyA9IHsiY2hnIn0sCn0KCm1bInZlIl0gPSB7CgkiVmVuZGEiLAoJIlEzMjcwNCIsCgkiYm50IiwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJ2aSJdID0gewoJIlZpZXRuYW1lc2UiLAoJIlE5MTk5IiwKCSJta2gtdmllIiwKCW90aGVyTmFtZXMgPSB7IkFubmFtZXNlIiwgIkFubmFtaXRlIn0sCglzY3JpcHRzID0geyJMYXRuIiwgIkhhbmkifSwKCWFuY2VzdG9ycyA9IHsibWtoLW12aSJ9LAoJc29ydF9rZXkgPSAidmktc29ydGtleSIsCn0KCm1bInZvIl0gPSB7CgkiVm9sYXDDvGsiLAoJIlEzNjk4NiIsCgkiYXJ0IiwKCXNjcmlwdHMgPSBMYXRuLAp9CgptWyJ3YSJdID0gewoJIldhbGxvb24iLAoJIlEzNDIxOSIsCgkicm9hLW9pbCIsCglvdGhlck5hbWVzID0geyJMacOpZ2VvaXMiLCAiTmFtdXJvaXMiLCAiV2FsbG8tUGljYXJkIiwgIldhbGxvLUxvcnJhaW4ifSwKCXNjcmlwdHMgPSBMYXRuLAoJYW5jZXN0b3JzID0geyJmcm8ifSwKCXNvcnRfa2V5ID0gewoJCWZyb20gPSB7IlvDocOgw6LDpMOlXSIsICJbw6nDqMOqw6tdIiwgIlvDrcOsw67Dr10iLCAiW8Ozw7LDtMO2XSIsICJbw7rDucO7w7xdIiwgIlvDveG7s8W3w79dIiwgIsOnIiwgIicifSwKCQl0byAgID0geyJhIgkgICwgImUiCSAsICJpIgkgLCAibyIJICwgInUiCSAsICJ5IgkgLCAiYyJ9fSAsCn0KCm1bIndvIl0gPSB7CgkiV29sb2YiLAoJIlEzNDI1NyIsCgkiYWx2LXNuZyIsCglvdGhlck5hbWVzID0geyJHYW1iaWFuIFdvbG9mIn0sIC0tIHRoZSBzdWJzdW1lZCBkaWFsZWN0ICd3b2YnCglzY3JpcHRzID0gTGF0bkFyYWIsCn0KCm1bInhoIl0gPSB7CgkiWGhvc2EiLAoJIlExMzIxOCIsCgkiYm50LW5ndSIsCglzY3JpcHRzID0gTGF0biwKCWVudHJ5X25hbWUgPSB7CgkJZnJvbSA9IHsiW8SBw6DDocOix45dIiwgIlvEk8Oow6nDqsSbXSIsICJbxKvDrMOtw67HkF0iLCAiW8WNw7LDs8O0x5JdIiwgIlvFq8O5w7rDu8eUXSIsICLhuL8iLCAiW8e5xYTFiF0iLCBNQUNST04sIEFDVVRFLCBHUkFWRSwgQ0lSQywgQ0FST059LAoJCXRvICAgPSB7ImEiICAgICAgLCAiZSIgICAgICAsICJpIiAgICAgICwgIm8iICAgICAgLCAidSIgICAgICAsICJtIiwgIm4iICAgIH19LAp9CgptWyJ5aSJdID0gewoJIllpZGRpc2giLAoJIlE4NjQxIiwKCSJnbXciLAoJc2NyaXB0cyA9IHsiSGViciJ9LAoJYW5jZXN0b3JzID0geyJnbWgifSwKCXNvcnRfa2V5ID0gewoJCWZyb20gPSB7IlvXkNa315DWuF0iLCAi15HWvCIsICJb15XWudeV1rxdIiwgIteZ1rQiLCAi17LWtyIsICLXpNa/In0sCgkJdG8gPSB7IteQIiwgIteRIiwgIteVIiwgIteZIiwJIteZ15kiLCAi16QifX0gLAoJdHJhbnNsaXRfbW9kdWxlID0gInlpLXRyYW5zbGl0IiwKfQoKbVsieW8iXSA9IHsKCSJZb3J1YmEiLAoJIlEzNDMxMSIsCgkiYWx2LXZvbiIsCglzY3JpcHRzID0gTGF0biwKfQoKbVsiemEiXSA9IHsKCSJaaHVhbmciLAoJIlExMzIxNiIsCgkidGFpIiwKCW90aGVyTmFtZXMgPSB7IlN0YW5kYXJkIFpodWFuZyIsICJEYWkgWmh1YW5nIiwgIldlbm1hIFpodWFuZyIsICJXZW5tYSBUaHUiLCAiV2VubWEiLCAiTm9uZyBaaHVhbmciLCAiWW91amlhbmcgWmh1YW5nIiwgIllvbmdiZWkgWmh1YW5nIiwgIllhbmcgWmh1YW5nIiwgIllvbmduYW4gWmh1YW5nIiwgIlp1b2ppYW5nIFpodWFuZyIsICJDZW50cmFsIEhvbmdzaHVpaGUgWmh1YW5nIiwgIkVhc3Rlcm4gSG9uZ3NodWloZSBaaHVhbmciLCAiR3VpYmVpIFpodWFuZyIsICJNaW56IFpodWFuZyIsICJHdWliaWFuIFpodWFuZyIsICJMaXVqaWFuZyBaaHVhbmciLCAiTGlhbnNoYW4gWmh1YW5nIiwgIkxpdXFpYW4gWmh1YW5nIiwgIlFpdWJlaSBaaHVhbmciLCAiQ2hvbmd6dW8gWmh1YW5nIiwgIlNoYW5nc2kgWmh1YW5nIn0sCglzY3JpcHRzID0geyJMYXRuIiwgIkhhbmkifSwKfQoKbVsiemgiXSA9IHsKCSJDaGluZXNlIiwKCSJRNzg1MCIsCgkiemh4IiwKCXNjcmlwdHMgPSB7IkhhbmkiLCAiQnJhaSIsICJOc2h1In0sCglhbmNlc3RvcnMgPSB7Imx0YyJ9LAoJc29ydF9rZXkgPSAiemgtc29ydGtleSIsCn0KCm1bInp1Il0gPSB7CgkiWnVsdSIsCgkiUTEwMTc5IiwKCSJibnQtbmd1IiwKCW90aGVyTmFtZXMgPSB7ImlzaVp1bHUifSwKCXNjcmlwdHMgPSBMYXRuLAoJZW50cnlfbmFtZSA9IHsKICAgICAgICAgICAgICAgIGZyb20gPSB7IlvEgcOgw6HDoseOXSIsICJbxJPDqMOpw6rEm10iLCAiW8Srw6zDrcOux5BdIiwgIlvFjcOyw7PDtMeSXSIsICJbxavDucO6w7vHlF0iLCAi4bi/IiwgIlvHucWExYhdIiwgTUFDUk9OLCBBQ1VURSwgR1JBVkUsIENJUkMsIENBUk9OfSwKICAgICAgICAgICAgICAgIHRvICAgPSB7ImEiICAgICAgLCAiZSIgICAgICAsICJpIiAgICAgICwgIm8iICAgICAgLCAidSIgICAgICAsICJtIiwgIm4iICAgIH19LAp9CgpyZXR1cm4gbTwvcmV2PjwvcmV2aXNpb25zPjwvcGFnZT48L3BhZ2VzPjwvcXVlcnk+PC9hcGk+
- recorded: 2019-04-27T16:56:17.424Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Asenseid&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=48741 t=1556384177307532
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 16:56:17 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1344.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1089 pass, cp3042 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 794001798, 521462906, 814633032
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"6241883\" pageid=\"6241883\" ns=\"828\" title=\"Module:senseid\"><revisions><rev user=\"Erutuon\" timestamp=\"2017-12-05T20:58:36Z\" contentformat=\"\
      text/plain\" contentmodel=\"Scribunto\" comment=\"module error in [[cricket]] due to nil &quot;val.mainsnak.datavalue&quot;\" xml:space=\"preserve\">local export = {}\n\n\n-- Extract a Wikidata id from a sense id\nlocal function Wikidata_id(id)\n\treturn\
      \ mw.ustring.match(id, \"Q%d+\")\nend\n\n\nlocal function Wikidata_entity_is_any_of(id, ids)\n\t-- P31: instance of\n\tfor _, val in ipairs(mw.wikibase.getBestStatements(id, \"P31\")) do\n\t\tfor _, sid in ipairs(ids) do\n\t\t\tif val[\"mainsnak\"][\"\
      datavalue\"]\n\t\t\t\t\tand val[\"mainsnak\"][\"datavalue\"][\"type\"] == \"wikibase-entityid\"\n\t\t\t\t\tand val[\"mainsnak\"][\"datavalue\"][\"value\"][\"id\"] == sid then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\t\n\treturn false\nend\n\n\n\
      local function Wikidata_entity_continents(id)\n\tlocal ret = {}\n\t\n\tlocal continent_names = {\n\t\t[\"Q15\"] = \"Africa\",\n\t\t[\"Q18\"] = \"South America\",\n\t\t[\"Q46\"] = \"Europe\",\n\t\t[\"Q48\"] = \"Asia\",\n\t\t[\"Q49\"] = \"North America\"\
      ,\n\t\t[\"Q538\"] = \"Oceania\",\n\t\t[\"Q27611\"] = \"North America\",\n\t}\n\t\n\t-- P30: continent\n\tfor _, val in ipairs(mw.wikibase.getBestStatements(id, \"P30\")) do\n\t\tif val[\"mainsnak\"][\"datavalue\"][\"type\"] == \"wikibase-entityid\" then\n\
      \t\t\tfor cid, name in pairs(continent_names) do\n\t\t\t\tif val[\"mainsnak\"][\"datavalue\"][\"value\"][\"id\"] == cid then\n\t\t\t \t\ttable.insert(ret, name)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\t\n\tif #ret &gt; 0 then\n\t\treturn ret\n\telse\n\
      \t\treturn nil\n\tend\nend\n\n\nfunction export.anchor(lang, id)\n\tif not (type(id) == \"string\" or type(id) == \"number\") then\n\t\terror(\"The second argument to senseid should be a string or a number.\")\n\tend\n\t\n\treturn lang:getCanonicalName()\
      \ .. \"-\" .. mw.uri.encode(id, \"WIKI\")\nend\n\n\nfunction export.senseid(lang, id)\n\t-- Track which entries use Wikidata ids\n\tif Wikidata_id(id) then\n\t\t--[=[\n\t\t[[Special:WhatLinksHere/Template:tracking/senseid/Wikidata]]\n\t\t]=]\n\t\trequire(\"\
      Module:debug\").track(\"senseid/Wikidata\")\n\t\t\n\t\tlocal tracking = {}\n\t\t\n\t\t-- Q30014: outer planet of the Solar System\n\t\t-- Q3504248: inner planet of the Solar System\n\t\t-- Q17362350: planet of the Solar System\n\t\tif Wikidata_entity_is_any_of(id,\
      \ {\"Q30014\", \"Q3504248\", \"Q17362350\"}) then\n\t\t\ttable.insert(tracking, \"senseid/Wikidata/planet\")\n\t\tend\n\t\t\n\t\t-- Q2199: dwarf planet\n\t\tif Wikidata_entity_is_any_of(id, {\"Q2199\"}) then\n\t\t\ttable.insert(tracking, \"senseid/Wikidata/dwarf\
      \ planet\")\n\t\tend\n\t\t\n\t\t-- Q5107: continent\n\t\t-- Q55833: supercontinent\n\t\tif Wikidata_entity_is_any_of(id, {\"Q5107\", \"Q55833\"}) then\n\t\t\ttable.insert(tracking, \"senseid/Wikidata/continent\")\n\t\tend\n\t\t\n\t\t-- Q6256: country\n\
      \t\t-- Q3024240: former country\n\t\tif Wikidata_entity_is_any_of(id, {\"Q6256\", \"Q3024240\"}) then\n\t\t\ttable.insert(tracking, \"senseid/Wikidata/country\")\n\t\t\t\n\t\t\tlocal continents = Wikidata_entity_continents(id)\n\t\t\t\n\t\t\tif continents\
      \ then\n\t\t\t\tfor _, name in ipairs(continents) do\n\t\t\t\t\ttable.insert(tracking, \"senseid/Wikidata/country/\" .. name)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\t\n\t\t-- Q82794: geographic region\n\t\tif Wikidata_entity_is_any_of(id, {\"Q82794\"}) then\n\
      \t\t\ttable.insert(tracking, \"senseid/Wikidata/region\")\n\t\tend\n\t\t\n\t\t-- Q23442: island\n\t\tif Wikidata_entity_is_any_of(id, {\"Q23442\"}) then\n\t\t\ttable.insert(tracking, \"senseid/Wikidata/island\")\n\t\tend\n\t\t\n\t\t-- Q4022: river\n\t\t\
      if Wikidata_entity_is_any_of(id, {\"Q4022\"}) then\n\t\t\ttable.insert(tracking, \"senseid/Wikidata/river\")\n\t\tend\n\t\t\n\t\t-- Q515: city\n\t\tif Wikidata_entity_is_any_of(id, {\"Q515\"}) then\n\t\t\ttable.insert(tracking, \"senseid/Wikidata/city\"\
      )\n\t\tend\n\t\t\n\t\t-- Q34770: language\n\t\t-- Q33742: natural language\n\t\t-- Q33215: constructed language\n\t\tif Wikidata_entity_is_any_of(id, {\"Q34770\", \"Q33742\", \"Q33215\"}) then\n\t\t\ttable.insert(tracking, \"senseid/Wikidata/language\"\
      )\n\t\tend\n\t\t\n\t\t-- Q9779: alphabet\n\t\t-- Q335806: abugida\n\t\tif Wikidata_entity_is_any_of(id, {\"Q9779\", \"Q335806\"}) then\n\t\t\ttable.insert(tracking, \"senseid/Wikidata/writing system\")\n\t\tend\n\t\t\n\t\t-- Q11344: chemical element\n\t\
      \tif Wikidata_entity_is_any_of(id, {\"Q11344\"}) then\n\t\t\ttable.insert(tracking, \"senseid/Wikidata/chemical element\")\n\t\tend\n\t\t\n\t\t-- Q16521: taxon\n\t\tif Wikidata_entity_is_any_of(id, {\"Q16521\"}) then\n\t\t\ttable.insert(tracking, \"senseid/Wikidata/taxon\"\
      )\n\t\tend\n\t\t\n\t\t-- Q9415: emotion\n\t\tif Wikidata_entity_is_any_of(id, {\"Q9415\"}) then\n\t\t\ttable.insert(tracking, \"senseid/Wikidata/emotion\")\n\t\tend\n\t\t\n\t\t-- Q11688446: Roman deity\n\t\tif Wikidata_entity_is_any_of(id, {\"Q11688446\"\
      }) then\n\t\t\ttable.insert(tracking, \"senseid/Wikidata/Roman deity\")\n\t\tend\n\t\t\n\t\tif #tracking &gt; 0 then\n\t\t\trequire(\"Module:debug\").track(tracking)\n\t\telse\n\t\t\trequire(\"Module:debug\").track(\"senseid/Wikidata/nothing\")\n\t\tend\n\
      \tend\n\t\n\treturn '&lt;li class=\"senseid\" id=\"' .. export.anchor(lang, id) .. '\"&gt;'\nend\n\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T16:56:17.638Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Module%3Adebug&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=44064 t=1556384177527590
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 16:56:17 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1341.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Transfer-Encoding: chunked
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1085 pass, cp3042 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 171839742, 542837533, 823569480
    body: "<?xml version=\"1.0\"?><api batchcomplete=\"\"><warnings><main xml:space=\"preserve\">Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations\
      \ and breaking changes. Use [[Special:ApiFeatureUsage]] to see usage of deprecated features by your application.</main><revisions xml:space=\"preserve\">Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is\
      \ deprecated, and in the future the new format will always be used.</revisions></warnings><query><pages><page _idx=\"4109235\" pageid=\"4109235\" ns=\"828\" title=\"Module:debug\"><revisions><rev user=\"Erutuon\" timestamp=\"2018-12-25T05:19:47Z\" contentformat=\"\
      text/plain\" contentmodel=\"Scribunto\" comment=\"Undo revision 51139735 by [[Special:Contributions/Erutuon|Erutuon]] ([[User talk:Erutuon|talk]]): restore if needed\" xml:space=\"preserve\">local export = {}\n\nlocal escape\ndo\n\tlocal escapes = {\n\t\
      \t[\"\\a\"] = \"a\", [\"\\b\"] = \"b\", [\"\\f\"] = \"f\", [\"\\n\"] = \"n\", [\"\\r\"] = \"r\",\n\t\t[\"\\t\"] = \"t\", [\"\\v\"] = \"v\", [\"\\\\\"] = \"\\\\\", [\"\\\"\"] = '\"', [\"'\"] = \"'\",\n\t}\n\t\n\tlocal function helper(char)\n\t\treturn escapes[char]\
      \ and \"\\\\\" .. escapes[char]\n\t\t\tor (\"\\\\%03d\"):format(char:byte())\n\tend\n\t\n\t-- Escape control characters, backslash, double quote, and bytes that aren't\n\t-- used in UTF-8.\n\t-- Escape stuff that can't be saved in a MediaWiki page, like\
      \ invalid UTF-8\n\t-- and NFD character sequences? Hard.\n\t-- Similar to string.format(\"%q\", str), which does not use C-like simple\n\t-- escapes and does not escape bytes that are not used in UTF-8.\n\tescape = function (str)\n\t\treturn (str:gsub(\"\
      [%z\\1-\\31\\\\\\\"\\127\\192\\193\\245-\\255]\", helper))\n\tend\nend\n\nexport.escape = escape\n\n-- Convert a value to a string\nfunction export.dump(value, prefix, tsort)\n\tlocal t = type(value)\n\t\n\tprefix = prefix or \"\"\n\t\n\tif t == \"string\"\
      \ then\n\t\treturn '\"' .. escape(value) .. '\"'\n\telseif t == \"table\" then\n\t\tlocal str_table = {}\n\t\t\n\t\ttable.insert(str_table, \" {\")\n\t\t\n\t\tfor key, val in require(\"Module:table\").sortedPairs(value, tsort) do\n\t\t\ttable.insert(str_table,\
      \ \" \" .. prefix .. \"\\t[\" .. export.dump(key, prefix .. \"\\t\") .. \"] = \" .. export.dump(val, prefix .. \"\\t\"):gsub(\"^ \", \"\") .. \",\")\n\t\tend\n\t\t\n\t\ttable.insert(str_table, \" \" .. prefix .. \"}\")\n\t\t\n\t\treturn table.concat(str_table,\
      \ \"\\n\")\n\telse\n\t\treturn tostring(value)\n\tend\nend\n\n\nfunction export.highlight_dump(value, prefix, tsort, options)\n\toptions = options or {}\n\t\n\tlocal func = options.modified and \"modified_dump\" or \"dump\"\n\t\n\tlocal dump = export[func](value,\
      \ prefix, tsort)\n\t\n\t-- Remove spaces at beginnings of lines (which are simply to force a &lt;pre&gt;&lt;/pre&gt; tag).\n\tdump = dump:gsub(\"^ \", \"\")\n\tdump = dump:gsub(\"\\n \", \"\\n\")\n\t\n\treturn export.highlight(dump)\nend\n\n\n-- Returns\
      \ true if table contains a table as one of its values\nlocal function containsTable(t)\n\tfor key, value in pairs(t) do\n\t\tif type(value) == \"table\" then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\n\n\nlocal function containsTablesWithSize(t,\
      \ size)\n\tfor key, value in pairs(t) do\n\t\tif type(value) == \"table\" and require(\"Module:table\").size(value) ~= size then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\t\n\n\n--[=[\n\tConvert a value to a string.\n\tLike dump below, but\
      \ if a table has consecutive numbered keys and does not\n\thave a table as one of its values, it will be placed on a single line.\n\tUsed by [[Module:User:Erutuon/script recognition]].\n]=]\nfunction export.modified_dump(value, prefix, tsort)\n\tlocal\
      \ t = type(value)\n\t\n\tprefix = prefix or \"\"\n\t\n\tif t == \"string\" then\n\t\treturn '\"' .. value .. '\"'\n\telseif t == \"table\" then\n\t\tlocal str_table = {}\n\t\t\n\t\tlocal containsTable = containsTable(value)\n\t\tlocal consecutive = require(\"\
      Module:table\").isArray(value)\n\t\tif consecutive and not containsTable or containsTable and containsTablesWithSize(value, 3) then\n\t\t\ttable.insert(str_table, \"{\")\n\t\t\t\n\t\t\tfor key, val in require(\"Module:table\").sortedPairs(value, tsort)\
      \ do\n\t\t\t\tif containsTable then\n\t\t\t\t\ttable.insert(str_table, \"\\n\\t\" .. prefix)\n\t\t\t\telse\n\t\t\t\t\ttable.insert(str_table, \" \")\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\tif type(key) == \"string\" then\n\t\t\t\t\ttable.insert(str_table, \"[\"\
      \ .. export.modified_dump(key) .. \"] = \")\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\ttable.insert(str_table, type(key) == \"number\" and type(val) == \"number\" and string.format(\"0x%05X\", val) or export.modified_dump(val))\n\t\t\t\t\n\t\t\t\tif not (consecutive\
      \ and #value == 3) or type(key) == \"number\" and value[key + 1] then\n\t\t\t\t\ttable.insert(str_table, \",\")\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tif containsTable then\n\t\t\t\ttable.insert(str_table, \"\\n\" .. prefix)\n\t\t\telse\n\t\t\t\ttable.insert(str_table,\
      \ \" \")\n\t\t\tend\n\t\t\t\n\t\t\ttable.insert(str_table, \"}\")\n\t\t\treturn table.concat(str_table)\n\t\tend\n\t\t\n\t\ttable.insert(str_table, \" {\")\n\t\t\n\t\tfor key, val in require(\"Module:table\").sortedPairs(value, tsort) do\n\t\t\ttable.insert(str_table,\
      \ \" \" .. prefix .. \"\\t[\" .. export.modified_dump(key, prefix .. \"\\t\") .. \"] = \" .. export.modified_dump(val, prefix .. \"\\t\"):gsub(\"^ \", \"\") .. \",\")\n\t\tend\n\t\t\n\t\ttable.insert(str_table, \" \" .. prefix .. \"}\")\n\t\t\n\t\treturn\
      \ table.concat(str_table, \"\\n\")\n\telseif t == \"number\" and value &gt; 46 then\n\t\treturn string.format(\"0x%05X\", value)\n\telse\n\t\treturn tostring(value)\n\tend\nend\n\t\n\nfunction export.track(key)\n\tlocal frame = mw.getCurrentFrame()\n\t\
      if key then\n\t\tif type(key) ~= \"table\" then\n\t\t\tkey = { key }\n\t\tend\n\t\t\n\t\tfor i, value in pairs(key) do\n\t\t\tpcall(frame.expandTemplate, frame, { title = 'tracking/' .. value })\n\t\tend\n\telse\n\t\terror('No tracking key supplied to\
      \ the function \"' .. track .. '\".')\n\tend\nend\n\n\n-- Trigger a script error from a template\nfunction export.error(frame)\n\terror(frame.args[1] or \"(no message specified)\")\nend\n\n--[[\n\tConvenience function for generating syntaxhighlight tags.\n\
      \tDisplay defaults to block.\n\tOptions is a table. To display inline text with HTML highlighting:\n\t\t{ inline = true, lang = \"html\" }\n]]\nfunction export.highlight(content, options)\n\tif type(content) == \"table\" then\n\t\toptions = content\n\t\
      \toptions = {\n\t\t\tlang = options.lang or \"lua\",\n\t\t\tinline = options.inline and true\n\t\t}\n\t\treturn function(content)\n\t\t\treturn mw.getCurrentFrame():extensionTag{\n\t\t\t\tname = \"syntaxhighlight\",\n\t\t\t\tcontent = content,\n\t\t\t\t\
      args = options\n\t\t\t}\n\t\tend\n\telse\n\t\treturn mw.getCurrentFrame():extensionTag{\n\t\t\tname = \"syntaxhighlight\",\n\t\t\tcontent = content,\n\t\t\targs = {\n\t\t\t\tlang = options and options.lang or \"lua\",\n\t\t\t\tinline = options and options.inline\
      \ and true or nil\n\t\t\t}\n\t\t}\n\tend\nend\n\nfunction export.track_unrecognized_args(args, template_name)\n\tlocal function track(code)\n\t\texport.track(template_name .. \"/\" .. code)\n\tend\n\t\n    track(\"unrecognized arg\")\n\t\n\tlocal arg_list\
      \ = {}\n\tfor arg, value in pairs(args) do\n\t\ttrack(\"unrecognized arg/\" .. arg)\n\t\ttable.insert(arg_list, (\"|%s=%s\"):format(arg, value))\n\tend\n\t\n\tmw.log(\n\t\t(\"Unrecognized parameter%s in {{%s}}: %s.\"):format(\n\t\t\targ_list[2] and \"\
      s\" or \"\",\n\t\t\ttemplate_name,\n\t\t\ttable.concat(arg_list, \", \")))\nend\n\nreturn export</rev></revisions></page></pages></query></api>"
- recorded: 2019-04-27T16:56:17.838Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Template%3Atracking%2Fsenseid%2FWikidata&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=32278 t=1556384177748181
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Length: '159'
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 16:56:17 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1317.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1081 pass, cp3040 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 956232671, 768205466, 811844502
    body: <?xml version="1.0"?><api batchcomplete=""><query><pages><page _idx="-1" ns="10" title="Template:tracking/senseid/Wikidata" missing="" /></pages></query></api>
- recorded: 2019-04-27T16:56:18.008Z
  request:
    method: GET
    uri: https://en.wiktionary.org/w/api.php?format=xml&action=query&continue=&titles=Template%3Atracking%2Fsenseid%2FWikidata%2Fnothing&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent
    headers:
      Connection: Keep-Alive
      Content-Length: '0'
      Cookie: GeoIP=DE:BW:Todtnau:47.83:7.94:v4; WMF-Last-Access=27-Apr-2019; WMF-Last-Access-Global=27-Apr-2019
      Cookie2: $Version=1
      Host: en.wiktionary.org
      User-Agent: JavaWikipediaAPI/3.1-SNAPSHOT https://bitbucket.org/axelclk/info.bliki.wiki/
  response:
    status: 200
    headers:
      Accept-Ranges: bytes
      Age: '0'
      Backend-Timing: D=28976 t=1556384177921475
      Cache-control: private, must-revalidate, max-age=0
      Connection: keep-alive
      Content-Disposition: inline; filename=api-result.xml
      Content-Length: '167'
      Content-Type: text/xml; charset=utf-8
      Date: Sat, 27 Apr 2019 16:56:17 GMT
      P3P: CP="This is not a P3P policy! See https://en.wiktionary.org/wiki/Special:CentralAutoLogin/P3P for more info."
      Server: mw1288.eqiad.wmnet
      Server-Timing: cache;desc="pass"
      Strict-Transport-Security: max-age=106384710; includeSubDomains; preload
      Vary: Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization,X-Seven
      X-Analytics: ns=-1;special=Badtitle;WMF-Last-Access=27-Apr-2019;WMF-Last-Access-Global=27-Apr-2019;https=1
      X-Cache: cp1081 pass, cp3033 pass, cp3030 pass
      X-Cache-Status: pass
      X-Client-IP: 217.84.123.218
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-Powered-By: HHVM/3.18.6-dev
      X-Varnish: 949963571, 509475296, 822290399
    body: <?xml version="1.0"?><api batchcomplete=""><query><pages><page _idx="-1" ns="10" title="Template:tracking/senseid/Wikidata/nothing" missing="" /></pages></query></api>
